<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二叉树的层序遍历</title>
      <link href="2021/02/21/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
      <url>2021/02/21/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>学会二叉树的层序遍历，可以一口气撸完leetcode上八道题目:</p><ul><li>107.二叉树的层次遍历II </li><li>199.二叉树的右视图</li><li>637.二叉树的层平均值 </li><li>429.N叉树的前序遍历 </li><li>515.在每个树行中找最大值</li><li>116.填充每个节点的下一个右侧节点指针 </li><li>117.填充每个节点的下一个右侧节点指针II</li></ul><a id="more"></a><h2 id="二叉树的层次遍历-II"><a href="#二叉树的层次遍历-II" class="headerlink" title="二叉树的层次遍历 II"></a><strong>二叉树的层次遍历</strong> II</h2><p>题目链接:<a class="link"   href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/" >https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/<i class="fas fa-external-link-alt"></i></a></p><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 (即按从叶子节点所在层到根节点所在的层，逐 层从左向右遍历)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202102211418559202021022114.png"                      alt="image-20210221141855920"                ></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1.前面都是层次遍历套路</p><p>2.最后结果再用数组reverse方法</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202102211439511272021022114.png"                      alt="image-20210221143951127"                ></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrderBottom = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!root) <span class="keyword">return</span> []</span><br><span class="line">   <span class="keyword">const</span> q = [[root,<span class="number">0</span>]]</span><br><span class="line">   <span class="keyword">const</span> res = []</span><br><span class="line">   <span class="keyword">while</span>(q.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">const</span> [n,level] =q.shift()</span><br><span class="line">       <span class="keyword">if</span>(!res[level])&#123;</span><br><span class="line">         res.push([n.val])</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         res[level].push(n.val)  </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(n.left) q.push([n.left,level+<span class="number">1</span>])</span><br><span class="line">       <span class="keyword">if</span>(n.right)q.push([n.right,level+<span class="number">1</span>])</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//反转</span></span><br><span class="line">   <span class="keyword">return</span> res.reverse()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a>199.<strong>二叉树的右视图</strong></h2><p>题目链接:<a class="link"   href="https://leetcode-cn.com/problems/binary-tree-right-side-view/" >https://leetcode-cn.com/problems/binary-tree-right-side-view/<i class="fas fa-external-link-alt"></i></a></p><p>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,null,<span class="number">5</span>,null,<span class="number">4</span>]</span><br><span class="line">输出: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>            &lt;-<span class="comment">--</span></span><br><span class="line"> /   \</span><br><span class="line"><span class="number">2</span>     <span class="number">3</span>         &lt;-<span class="comment">--</span></span><br><span class="line"> \     \</span><br><span class="line">  <span class="number">5</span>     <span class="number">4</span>       &lt;-<span class="comment">--</span></span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li><p>层序遍历的时候，</p></li><li><p><code>判断是否遍历到单层的最后面的元素</code> (重点分析 对每一层q的数组进行while len–操作)</p></li><li><p>如果是，就放进result数组中，随后返回result 就可以了。</p></li></ol><h3 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202102211523112642021022115.png"                      alt="image-20210221152311264" style="zoom:80%;"                 ></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rightSideView = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!root) <span class="keyword">return</span> []</span><br><span class="line">   <span class="keyword">const</span> q = [root]</span><br><span class="line">   <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">while</span>(q.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> len = q.length</span><br><span class="line">        <span class="comment">//对每一层进行遍历 [1]  [2,3 ]  [4,5,6]   [7]</span></span><br><span class="line">        <span class="keyword">while</span>(len)&#123;</span><br><span class="line">          <span class="keyword">let</span> n = q.shift()</span><br><span class="line">            <span class="comment">//每一层最后一位</span></span><br><span class="line">            <span class="keyword">if</span>(len === <span class="number">1</span>) res.push(n.val)</span><br><span class="line">            <span class="keyword">if</span>(n.left) q.push(n.left)</span><br><span class="line">            <span class="keyword">if</span>(n.right) q.push(n.right)</span><br><span class="line">            len--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a>637.<strong>二叉树的层平均值</strong></h2><p>题目链接:<a class="link"   href="https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/" >https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/<i class="fas fa-external-link-alt"></i></a></p><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line"> <span class="number"> 9 </span> 20</span><br><span class="line">    /  \</span><br><span class="line">  <span class="number"> 15 </span>  7</span><br><span class="line">输出：[3, 14.5, 11]</span><br><span class="line">解释：</span><br><span class="line">第<span class="number"> 0 </span>层的平均值是<span class="number"> 3 </span>,  第1层是 14.5 , 第2层是<span class="number"> 11 </span>。因此返回 [3, 14.5, 11] 。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li><p>用层序遍历的方法。维护一个队列去遍历节点。</p></li><li><p>用 for 循环控制一层的节点逐个出列，节点值累加求和。</p></li><li><p>节点出列的同时，下一层的子节点加入队列，在 for 循环结束时，队列中就全是下一层的节点。</p></li><li><p>此时当前层的求和也好了，除以当前层的节点个数，就是当前层的平均值，加入结果数组。</p></li><li><p>接着处理下一层的节点，重复以上步骤，就构建好了结果数组。</p></li></ol><h3 id="图解-2"><a href="#图解-2" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/2021-02-21%2015.56.07-38942632021022115.gif"                      alt="2021-02-21 15.56.07"                ></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> averageOfLevels = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">const</span> p = [root]</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> size = p.length <span class="comment">//每一层的长度</span></span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;size;i++)&#123;</span><br><span class="line">             <span class="keyword">const</span> n = p.shift()</span><br><span class="line">              <span class="comment">//每一层的总和</span></span><br><span class="line">              sum += n.val</span><br><span class="line">             <span class="keyword">if</span>(n.left) p.push(n.left)</span><br><span class="line">             <span class="keyword">if</span>(n.right) p.push(n.right)</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(sum/size)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="429-N叉树的层序遍历"><a href="#429-N叉树的层序遍历" class="headerlink" title="429.N叉树的层序遍历"></a>429.N<strong>叉树的层序遍历</strong></h2><p>题目链接:<a class="link"   href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/" >https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/<i class="fas fa-external-link-alt"></i></a> </p><p>给定一个 N 叉树，返回其节点值的层序遍历。 (即从左到右，逐层遍历)。</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h3 id="图解-3"><a href="#图解-3" class="headerlink" title="图解"></a>图解</h3><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrder = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line">   <span class="keyword">const</span> p = [root]</span><br><span class="line">   <span class="keyword">const</span> res = []</span><br><span class="line">   <span class="keyword">while</span>(p.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> size = p.length</span><br><span class="line">      <span class="keyword">const</span> temp = []</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; size;i++)&#123;</span><br><span class="line">          <span class="keyword">const</span> n = p.shift()</span><br><span class="line">          temp.push(n.val)</span><br><span class="line">          p.push(...n.children)</span><br><span class="line">      &#125;</span><br><span class="line">     res.push(temp)</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的先中后层序遍历</title>
      <link href="2021/02/20/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%85%88%E4%B8%AD%E5%90%8E%E9%81%8D%E5%8E%86/"/>
      <url>2021/02/20/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%85%88%E4%B8%AD%E5%90%8E%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>二叉树的四种遍历方式：先序遍历、中序遍历、后序遍历、层序遍历。</p><a id="more"></a><h3 id="模拟一棵二叉树"><a href="#模拟一棵二叉树" class="headerlink" title="模拟一棵二叉树"></a>模拟一棵二叉树</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.root = &#123;</span><br><span class="line">  val: <span class="number">1</span>,</span><br><span class="line">  left: &#123;</span><br><span class="line">    val: <span class="number">2</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      val: <span class="number">4</span>,</span><br><span class="line">      left: <span class="literal">null</span>,</span><br><span class="line">      right: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">      val: <span class="number">5</span>,</span><br><span class="line">      left: <span class="literal">null</span>,</span><br><span class="line">      right: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  right: &#123;</span><br><span class="line">    val: <span class="number">3</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">      val: <span class="number">6</span>,</span><br><span class="line">      left: <span class="literal">null</span>,</span><br><span class="line">      right: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">      val: <span class="number">7</span>,</span><br><span class="line">      left: <span class="literal">null</span>,</span><br><span class="line">      right: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="先序遍历算法口诀"><a href="#先序遍历算法口诀" class="headerlink" title="先序遍历算法口诀"></a>先序遍历算法口诀</h3><ol><li>访问根节点</li><li>对根节点左子树进行先序遍历</li><li>对根节点右子树进行先序遍历</li></ol><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202102210004234802021022100.png"                      alt="image-20210221000423480" style="zoom:50%;"                 ></p><h2 id="先序遍历（递归版本）"><a href="#先序遍历（递归版本）" class="headerlink" title="先序遍历（递归版本）"></a>先序遍历（递归版本）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preorder = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(root)&#123;</span><br><span class="line">     <span class="comment">//遍历左节点</span></span><br><span class="line">     preorder(root.left)</span><br><span class="line">     <span class="comment">//遍历右节点</span></span><br><span class="line">     preorder(root.right)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="先序遍历（迭代版本）"><a href="#先序遍历（迭代版本）" class="headerlink" title="先序遍历（迭代版本）"></a>先序遍历（迭代版本）</h2><blockquote><p>思路：我们也可以用迭代的方式实现方法一的递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来，其余的实现与细节都相同</p></blockquote><h3 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/2021-02-21%2000.19.152021022100.gif"                      alt="2021-02-21 00.19.15"                ></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>前序遍历是中左右，每次先处理的是中间节点，那么先将<strong><em>跟节点</em></strong>放入栈中，</p></li><li><p>然后将右节点加入栈，再加入左节点。</p></li><li><p>为什么要先加入 右节点，再加入左节点呢？ 因为这样出栈的时候才是中左右的顺序。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preorder = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> stack = [root]</span><br><span class="line">  <span class="keyword">while</span>(stack.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">const</span> n = stack.pop()</span><br><span class="line">  <span class="comment">//拿到n.val</span></span><br><span class="line">  <span class="keyword">if</span>(n.right) stack.push(n.right) <span class="comment">//为什么要先存right值 因为数组后进先出</span></span><br><span class="line">  <span class="keyword">if</span>(n.left) stack.push(n.left)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历算法口诀"><a href="#中序遍历算法口诀" class="headerlink" title="中序遍历算法口诀"></a>中序遍历算法口诀</h3><ol><li>对根节点左子树进行中序遍历</li><li>访问根节点</li><li>对根节点右子树进行先序遍历</li></ol><h3 id="图解-2"><a href="#图解-2" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202102210007115022021022100.png"                      alt="image-20210221000711502" style="zoom:50%;"                 ></p><h2 id="中序遍历（递归版本）"><a href="#中序遍历（递归版本）" class="headerlink" title="中序遍历（递归版本）"></a>中序遍历（递归版本）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inorderTraversal = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> midSort = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line">     midSort(root.left)</span><br><span class="line">     res.push(root.val)</span><br><span class="line">     midSort(root.right)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> midSort(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历（迭代版本）"><a href="#中序遍历（迭代版本）" class="headerlink" title="中序遍历（迭代版本）"></a>中序遍历（迭代版本）</h2><h3 id="图解-3"><a href="#图解-3" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/2021-02-21%2000.42.122021022100.gif"                      alt="2021-02-21 00.42.12"                ></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>中序遍历是<code>左中右</code>，先访问的是二叉树顶部的节点，然后一层一层向下访问。</p><p>直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进result数组中），这就造成了处理顺序和访问顺序是不一致的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inorderTraversal = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line">   <span class="keyword">let</span> stack = []  <span class="comment">//设置一个空栈</span></span><br><span class="line">   <span class="keyword">let</span> p = root <span class="comment">//设置指</span></span><br><span class="line">   <span class="keyword">while</span>(stack.length || p)&#123;</span><br><span class="line">      <span class="comment">/*****一直找左节点****/</span>            </span><br><span class="line">       <span class="keyword">while</span>(p)&#123;</span><br><span class="line">          stack.push(p) <span class="comment">//每当左子树有值 [root left left left]</span></span><br><span class="line">          p = p.left</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">/*****一直找左节点****/</span></span><br><span class="line">    <span class="comment">//找完所有左节点 推出栈 [root left1 left2 left3] ==&gt; [left3 left2 left1 root ]</span></span><br><span class="line">    <span class="keyword">const</span> n = stack.pop()</span><br><span class="line">    <span class="comment">//拿n.val</span></span><br><span class="line">    p = n.right</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历算法口诀"><a href="#后序遍历算法口诀" class="headerlink" title="后序遍历算法口诀"></a>后序遍历算法口诀</h3><ol><li>对根节点左子树进行中序遍历</li><li>对根节点右子树进行先序遍历</li><li>访问根节点</li></ol><h3 id="图解-4"><a href="#图解-4" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202102210008331602021022100.png"                      alt="image-20210221000833160" style="zoom:50%;"                 ></p><h2 id="后序遍历（递归版本）"><a href="#后序遍历（递归版本）" class="headerlink" title="后序遍历（递归版本）"></a>后序遍历（递归版本）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = []</span><br><span class="line"><span class="keyword">const</span> postorderTraversal = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line">  postorderTraversal(root.left)</span><br><span class="line">  postorderTraversal(root.right)</span><br><span class="line">  res.push(root.val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历（迭代版本）"><a href="#后序遍历（迭代版本）" class="headerlink" title="后序遍历（迭代版本）"></a>后序遍历（迭代版本）</h2><h3 id="思路（这是一个讨巧的办法）"><a href="#思路（这是一个讨巧的办法）" class="headerlink" title="思路（这是一个讨巧的办法）"></a>思路（这是一个讨巧的办法）</h3><ol><li>如果我们把前序遍历的 list.push(node.val) 变更为 list.unshift(node.val) （遍历结果逆序），</li><li>那么遍历顺序就由 根左右 变更为 右左根。</li><li>然后我们仅需将 右左根 变更为 <code>左右根</code> 即可完成后序遍</li></ol><h3 id="图解-5"><a href="#图解-5" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202102211144390252021022111.png"                      alt="image-20210221114439025"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/2021-02-21%2012.18.14-tuya2021022113.gif"                      alt="2021-02-21 12.18.14-tuya"                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postorderTraversal = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> list = [] <span class="comment">//遍历结果</span></span><br><span class="line">    <span class="keyword">let</span> stack = [root] <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line">     <span class="keyword">while</span>(stack.length &gt;<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">const</span> n = stack.pop() <span class="comment">// [n.left,n.right]</span></span><br><span class="line">       list.unshift(n.val) <span class="comment">//根是最后加的 最里面  [ n.left  n.right  n.val]</span></span><br><span class="line">       <span class="keyword">if</span>(n.left) stack.push(n.left)</span><br><span class="line">       <span class="keyword">if</span>(n.right) stack.push(n.right)</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><blockquote><p>题目来源：LeetCode：102 二叉树的层序遍历</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202102211313433592021022113.png"                      alt="image-20210221131343359" style="zoom: 80%;"                 ></p><p>👑类似广度优先遍历二叉树。</p><p>👑遍历工程中，记录<code>每一个节点的层级</code>，并将其添加到不同的数组中。</p><h3 id="图解-6"><a href="#图解-6" class="headerlink" title="图解"></a>图解</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/%E5%B1%82%E5%BA%8F2021022113.gif"                      alt="层序"                ></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>先写一个广度优先遍历</p><p>加入层级计算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">const</span> q = [[root,<span class="number">0</span>]] <span class="comment">//把顶层加入栈中</span></span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(q.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">//推出每一个栈中顶层节点</span></span><br><span class="line">      <span class="keyword">const</span> [n,level]= q.shift()</span><br><span class="line">      <span class="keyword">if</span>(!res[level])&#123;</span><br><span class="line">          res.push([n.val])</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         res[level].push(n.val)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果左右节点都存在则层级+1</span></span><br><span class="line">      <span class="keyword">if</span>(n.left) q.push([n.left,level+<span class="number">1</span>])</span><br><span class="line">      <span class="keyword">if</span>(n.right) q.push([n.right,level+<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度广度优先遍历</title>
      <link href="2021/02/19/%E7%AE%97%E6%B3%95-%E6%B7%B1%E5%BA%A6%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
      <url>2021/02/19/%E7%AE%97%E6%B3%95-%E6%B7%B1%E5%BA%A6%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>先来学一下树的深度与广度优先</p><a id="more"></a><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2021022017image-20210220170016966.png"                      alt="image-20210220170016966"                 ></p><h2 id="深度优先遍历算法口诀"><a href="#深度优先遍历算法口诀" class="headerlink" title="深度优先遍历算法口诀"></a>深度优先遍历算法口诀</h2><p>1.访问根节点</p><p>2.对根节点chilidren挨个进行深度优先遍历（递归）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dfs.js</span></span><br><span class="line"><span class="keyword">const</span> root = &#123;</span><br><span class="line">  val: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      val: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          val: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          val: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      val: <span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          val: <span class="string">&#x27;f&#x27;</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          val: <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">          children: [],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dfs = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">   root.chilidren.forEach(dfs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一行代码  是不是很简单</p></blockquote><h2 id="广度优先遍历算法口诀"><a href="#广度优先遍历算法口诀" class="headerlink" title="广度优先遍历算法口诀"></a>广度优先遍历算法口诀</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2021022017image-20210220170917519.png"                      alt="image-20210220170917519"                ></p><h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bfs = <span class="function">(<span class="params">root</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="comment">//新建队列 入队</span></span><br><span class="line">   <span class="keyword">const</span> q = [root]</span><br><span class="line">   <span class="keyword">while</span>(q.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="comment">//把队头出队后 q就空了</span></span><br><span class="line">       <span class="keyword">const</span> n = q.shift()</span><br><span class="line">       <span class="comment">//这里可以拿到n.val,继续遍历children</span></span><br><span class="line">       n.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span>&#123;</span><br><span class="line">           q.push(child)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>树的遍历方式总体分为两类：深度优先搜索（DFS）、广度优先搜索（BFS）；</p><p>常见的 DFS ： 先序遍历、中序遍历、后序遍历；<br>常见的 BFS ： 层序遍历（即按层遍历）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法入门指南</title>
      <link href="2021/02/18/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>2021/02/18/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>最常用的数据结构预算法:</p><p>数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Tire 树<br>算法： 递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法</p><a id="more"></a><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2021022014image-20210220143950354.png"                      alt="image-20210220143950354"                ></p><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>复杂度分析法则<br>1）单段代码看高频：比如循环。<br>2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。<br>3）嵌套代码求乘积：比如递归、多重循环等<br>4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><h4 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line"><span class="comment">//每次执行一次</span></span><br></pre></td></tr></table></figure><h4 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i, j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O-logN"><a href="#O-logN" class="headerlink" title="O(logN)"></a>O(logN)</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i&lt; n)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">   i*=<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>的多少次方 === N</span><br></pre></td></tr></table></figure><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><blockquote><p>算法在运行过程中临时占用存储空间大小的量度</p></blockquote><h4 id="0-1"><a href="#0-1" class="headerlink" title="0(1)"></a>0(1)</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line"><span class="comment">//声明了单个变量  占用内存就是1</span></span><br></pre></td></tr></table></figure><h4 id="O-n-1"><a href="#O-n-1" class="headerlink" title="O(n)"></a>O(n)</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">  res.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//res的空间占用 取决于 n</span></span><br></pre></td></tr></table></figure><h4 id="O-n-2-1"><a href="#O-n-2-1" class="headerlink" title="O(n^2)"></a>O(n^2)</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">  res.push(i);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">    res[i].push(j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">类似于一个矩阵---- - 多维数组;</span><br></pre></td></tr></table></figure><h2 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h2><h3 id="什么是线性"><a href="#什么是线性" class="headerlink" title="什么是线性"></a>什么是线性</h3><p>线性表: 线性表就是数据排成像一条线一样的结构.每个现行表上的数据最多只有前和后两个方向.常见的线性表结构：数组，链表、队列、栈等。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2021022014image-20210220145243033.png"                      alt="image-20210220145243033"                ></p><h3 id="什么是非线性"><a href="#什么是非线性" class="headerlink" title="什么是非线性"></a>什么是非线性</h3><p>递归：比如二叉树遍历就是典型的非线性遍历结构</p><h2 id="刷题指南"><a href="#刷题指南" class="headerlink" title="刷题指南"></a>刷题指南</h2><blockquote><p>数据结构是工具，算法是通过合适的工具解决特定问题的办法</p></blockquote><p><strong>先刷二叉树，先刷二叉树，先刷二叉树，</strong></p><p>为什么呢？</p><p>因为二叉树是最容易培养框架思维的，而且大部分常考算法本质上都是树的遍历问题</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-nextTick原理</title>
      <link href="2020/12/15/Vue-nextTick%E5%8E%9F%E7%90%86/"/>
      <url>2020/12/15/Vue-nextTick%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>1.了解nextTick的实现原理</p><p>2.了解数据变化到DOM的变化是异步过程</p><a id="more"></a><h2 id="先了解下宏任务和微任务"><a href="#先了解下宏任务和微任务" class="headerlink" title="先了解下宏任务和微任务"></a>先了解下宏任务和微任务</h2><table><thead><tr><th><strong>常见**</strong>宏任务**</th><th>setTimeout  setInterval  setImmediate    script    MessageChannel</th></tr></thead><tbody><tr><td><strong>常见**</strong>微任务**</td><td>Promise    MutationObserver        Object.observe(废弃)      process.nextTick（node）</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.nextTick = nextTick; <span class="comment">//赋值给大Vue的静态方法</span></span><br><span class="line"><span class="comment">//全局挂载</span></span><br><span class="line"> Vue.prototype.$nextTick = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nextTick(fn, <span class="built_in">this</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先查看是否浏览器支持<code>setImmediate</code>还有<code>Promise</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; isNative(<span class="built_in">Promise</span>)) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  timerFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    p.then(flushCallbacks);</span><br><span class="line">    <span class="keyword">if</span> (isIOS) &#123; <span class="built_in">setTimeout</span>(noop); &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> MutationObserver !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class="line">  isNative(MutationObserver) ||</span><br><span class="line">  <span class="comment">// PhantomJS and iOS 7.x</span></span><br><span class="line">  MutationObserver.toString() === <span class="string">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class="line">)) &#123;</span><br><span class="line">  <span class="comment">// Use MutationObserver where native Promise is not available,</span></span><br><span class="line">  <span class="comment">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class="line">  <span class="comment">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class="line">  <span class="keyword">var</span> counter = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver(flushCallbacks);</span><br><span class="line">  <span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="built_in">String</span>(counter));</span><br><span class="line">  observer.observe(textNode, &#123;</span><br><span class="line">    characterData: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  timerFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">    textNode.data = <span class="built_in">String</span>(counter);</span><br><span class="line">  &#125;;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class="line">  <span class="comment">// Fallback to setImmediate.</span></span><br><span class="line">  <span class="comment">// Technically it leverages the (macro) task queue,</span></span><br><span class="line">  <span class="comment">// but it is still a better choice than setTimeout.</span></span><br><span class="line">  timerFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setImmediate(flushCallbacks);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Fallback to setTimeout.</span></span><br><span class="line">  timerFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> callbacks = [] <span class="comment">//缓存进数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextTick</span> (<span class="params">cb, ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _resolve;</span><br><span class="line">  callbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.call(ctx);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        handleError(e, ctx, <span class="string">&#x27;nextTick&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">      _resolve(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span>;</span><br><span class="line">    timerFunc();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果没有传cb  则返回promise 可以接.then（）方法</span></span><br><span class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      _resolve = resolve;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过判断 <code>pending</code> 来确定是否需要注册宏微任务 。</p><p>当第一次注册的时候，把 <code>pending</code> 设置为 <code>true</code>，表示任务队列已经在开始了，同一时期内无需注册了</p><p>然后在 任务队列 执行完毕之后，再把 pending 设置为 <code>false</code>（在 <code>flushCallbacks</code> 中）</p><h2 id="flushCallbacks"><a href="#flushCallbacks" class="headerlink" title="flushCallbacks"></a>flushCallbacks</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callbacks = [];</span><br><span class="line"><span class="keyword">var</span> pending = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushCallbacks</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  pending = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> copies = callbacks.slice(<span class="number">0</span>);</span><br><span class="line">  callbacks.length = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; copies.length; i++) &#123;</span><br><span class="line">    copies[i]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宏任务和 微任务 的回调，都是执行这个 flushCallbacks，这个方法作用：</p><p>1、复制一遍 callbacks </p><p>2、把 原来 callbacks 清空</p><p>3、遍历 复制的 callbacks ，然后逐个执行</p><h2 id="一个有意思的小测试"><a href="#一个有意思的小测试" class="headerlink" title="一个有意思的小测试"></a>一个有意思的小测试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  retrun &#123;</span><br><span class="line">      msg: <span class="string">&quot;This is NextTick Page&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">change () &#123;</span><br><span class="line">      <span class="built_in">this</span>.msg = <span class="string">&quot;hello vue&quot;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;sync:&#x27;</span>,<span class="built_in">this</span>.$refs.msg.innerText)   <span class="comment">// &#x27;This is NextTick Page&#x27;</span></span><br><span class="line">       <span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick&#x27;</span>,<span class="built_in">this</span>.$refs.msg.innerText) <span class="comment">// &#x27;hello vue&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.$nextTick().then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>,<span class="built_in">this</span>.$refs.msg.innerText) <span class="comment">// &#x27;hello vue&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">change1 () &#123;</span><br><span class="line">      <span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick&#x27;</span>,<span class="built_in">this</span>.$refs.msg.innerText) <span class="comment">// &#x27;This is NextTick Page&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.msg = <span class="string">&quot;hello vue&quot;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;sync:&#x27;</span>,<span class="built_in">this</span>.$refs.msg.innerText) <span class="comment">// &#x27;This is NextTick Page&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.$nextTick().then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>,<span class="built_in">this</span>.$refs.msg.innerText) <span class="comment">// &#x27;hello vue&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>为什么会这样呢，因为callback函数会优先push进去$nextTick的cb函数，但这时候this.msg才开始重新赋值加入<code>flushSchedulerQueue</code>函数，重新渲染是再后面。所以第一个nextTick拿到的还是旧的值</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>nextTick</code>是要把执行的任务推入到一个队列中，再下一个tick同步执行</p><p>数据改变后触发了渲染watcher的update，但是watcher的flush是再nexttIck后，所以重新渲染是异步的</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-数组劫持监听原理</title>
      <link href="2020/12/11/Vue-%E6%95%B0%E7%BB%84%E5%8A%AB%E6%8C%81%E7%9B%91%E5%90%AC%E5%8E%9F%E7%90%86/"/>
      <url>2020/12/11/Vue-%E6%95%B0%E7%BB%84%E5%8A%AB%E6%8C%81%E7%9B%91%E5%90%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ol><li><p>响应式数据中对于对象<code>新增删除属性</code>及数组的下标访问修改核添加数据等变化是观察不到的</p></li><li><p>通过Vue.set以及数组的Api可以解决这些问题本质上他们内部手动做了依赖更新的派发</p></li></ol><a id="more"></a><h2 id="为什么监听不了"><a href="#为什么监听不了" class="headerlink" title="为什么监听不了"></a>为什么监听不了</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020121009image-20201210093723350.png"                      alt="image-20201210093723350" style="zoom:50%;"                 ></p><p>从上面代码里，首先监听了model数组里所有的属性，然后通过各种数组的方法来修改当前数组，得出以下几个结论。</p><p>1、==直接修改数组中已有的元素是可以被监听的==。</p><p>2、数组的操作方法如果是操作已经存在的被监听的元素也是可以触发setter被监听的。</p><p>3、只有push、length、pop一些特殊的方法确实不能触发setter，这跟方法的内部实现与Object.defineProperty的setter钩子的触发实现有关系，是语言层面的原因。</p><p>4、==改变超过数组长度的下标的值时，值变化是不能监听到的==。这个其实很好理解，不存在的属性当然是不能监听到，因为绑定监听操作在之前已经执行过了，后添加的元素属性在绑定当时都还没有存在，当然没有办法提前去监听它了。</p><p>所以综上，Object.defineProperty不能监听到数组内的值变化的说法是错误的，同时也得出了a问题的答案，语言层面不支持用Object.defineProperty监听不存在的数组元素，并且通过一些能造成数组的方法造成数组改变也不能监听到。</p><h2 id="Vue监听Array三步曲"><a href="#Vue监听Array三步曲" class="headerlink" title="Vue监听Array三步曲"></a>Vue监听Array三步曲</h2><p>第一步：先获取原生 Array 的原型方法，因为拦截后还是需要原生的方法帮我们实现数组的变化。</p><p>第二步：对 Array 的原型方法使用 Object.defineProperty 做一些拦截操作。</p><p>第三步：==把需要被拦截的 Array 类型的数据原型指向改造后原型==。8888</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype <span class="comment">// 获取Array的原型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">def</span> (<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(key); <span class="comment">// 控制台输出 push</span></span><br><span class="line">      <span class="built_in">console</span>.log(args); <span class="comment">// 控制台输出 [Array(2), 7, &quot;hello!&quot;]</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取原生的方法</span></span><br><span class="line">      <span class="keyword">let</span> original = arrayProto[key];</span><br><span class="line">      <span class="comment">// 将开发者的参数传给原生的方法，保证数组按照开发者的想法被改变</span></span><br><span class="line">      <span class="keyword">const</span> result = original.apply(<span class="built_in">this</span>, args);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// do something 比如通知Vue视图进行更新</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我的数据被改变了，视图该更新啦&#x27;</span>);</span><br><span class="line">      <span class="built_in">this</span>.text = <span class="string">&#x27;hello Vue&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的原型</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写赋值</span></span><br><span class="line">def(obj, <span class="string">&#x27;push&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型的指向重写</span></span><br><span class="line">arr.__proto__ = obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行push</span></span><br><span class="line">arr.push([<span class="number">1</span>, <span class="number">2</span>], <span class="number">7</span>, <span class="string">&#x27;hello!&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>那必须想个办法–拦截器覆盖Array.prototype。</p><blockquote><p>通过Vue.set可以解决这个问题，本质上内部手动去做了==依赖更新的派发==</p></blockquote><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><blockquote><p>Array在<code>getter</code>中收集依赖，在拦截器中触发依赖</p></blockquote><p>最后，更新劫持数组实例的原型，在 ES6 之前，可以通过浏览器私有属性 proto 指定原型，之后，便可以采用如下方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf(arr, injackingPrototype)</span><br></pre></td></tr></table></figure><p>数组是一种特殊的对象，其下标实际上就是对象的属性，所以理论上是可以采用 Object.defineProperty() 方法处理数组对象。</p><p>但是 Vue 并没有采用上述方法劫持数组对象，笔者猜测主要由于以下两点：（读者有更好的见解，欢迎留言。）</p><p><strong>1、特殊的 length 属性</strong></p><p>数组对象的 length 属性的描述符天生独特：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(arr, <span class="string">&#x27;length&#x27;</span>).configurable <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>这就意味着无法通过 Object.defineProperty() 方法劫持 length 属性的读取和设置方法。</p><p>相比较对象的属性，数组下标变化地相对频繁，并且改变数组长度的方法也比较灵活，一旦数组的长度发生变化，那么在无法自动感知的情况下，开发者只能手动更新新增的数组下标，这可是一个很繁琐的工作。</p><p><strong>2、数组的操作场景</strong></p><p>数组主要的操作场景还是遍历，而对于每一个元素都挂载一个 get 和 set 方法，恐怕也是不小的性能负担。</p><p><strong>3、数组方法的劫持</strong></p><p>最终 Vue 选择劫持一些常用的数组操作方法，从而知晓数组的变化情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> methods = [ <span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>]</span><br></pre></td></tr></table></figure><p>数组方法的劫持涉及到原型相关的知识，首先数组实例大部分方法都是来源于 Array.prototype 对象。</p><p>但是这里不能直接篡改 Array.prototype 对象，这样会影响所有的数组实例，为了避免这种情况，需要采用原型继承得到一个新的原型对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototypeconst injackingPrototype = <span class="built_in">Object</span>.create(arrayProto)</span><br></pre></td></tr></table></figure><p>拿到新的原型对象之后，再重写这些常用的操作方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">methods.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">const</span> originArrayMethod = arrayProto[method]</span><br><span class="line"> injackingPrototype[method] = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = originArrayMethod.apply(<span class="built_in">this</span>, args)</span><br><span class="line">  <span class="keyword">let</span> inserted</span><br><span class="line">  <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">    inserted = args</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>:</span><br><span class="line">    inserted = args.slice(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (inserted) &#123;</span><br><span class="line">   <span class="comment">// 对于新增的元素，继续劫持</span></span><br><span class="line">   <span class="comment">// ob.observeArray(inserted)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通知变化</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后，更新劫持数组实例的原型，在 ES6 之前，可以通过浏览器私有属性 proto 指定原型，之后，便可以采用如下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf(arr, injackingPrototype)</span><br></pre></td></tr></table></figure><p>顺便提一下，采用 Vue.set() 方法设置数组元素时，Vue 内部实际上是调用劫持后的 splice() 方法来触发更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//api:数组set方式数据改变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span> (<span class="params">target, key, val</span>) </span>&#123;</span><br><span class="line">  .............</span><br><span class="line">  <span class="comment">//isValidArrayIndex 判断数组是有效的下标</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;</span><br><span class="line">    target.length = <span class="built_in">Math</span>.max(target.length, key);</span><br><span class="line">    target.splice(key, <span class="number">1</span>, val);</span><br><span class="line">    <span class="comment">// debugger</span></span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  .............</span><br><span class="line">  <span class="keyword">var</span> ob = (target).__ob__;</span><br><span class="line">  <span class="keyword">if</span> (target._isVue || (ob &amp;&amp; ob.vmCount)) &#123;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = val;</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 变成响应式对象</span></span><br><span class="line">  defineReactive(ob.value, key, val);</span><br><span class="line">  <span class="comment">// 通知依赖更新</span></span><br><span class="line">  ob.dep.notify();</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defineReactive"><a href="#defineReactive" class="headerlink" title="defineReactive"></a>defineReactive</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  obj,</span></span></span><br><span class="line"><span class="function"><span class="params">  key,</span></span></span><br><span class="line"><span class="function"><span class="params">  val,</span></span></span><br><span class="line"><span class="function"><span class="params">  customSetter,</span></span></span><br><span class="line"><span class="function"><span class="params">  shallow</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key);</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> getter = property &amp;&amp; property.get;</span><br><span class="line">  <span class="keyword">var</span> setter = property &amp;&amp; property.set;</span><br><span class="line">  <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">    val = obj[key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> childOb = !shallow &amp;&amp; observe(val);</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">        dep.depend();</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          <span class="comment">// debugger 如果下面没有依赖收集 则久不会更新</span></span><br><span class="line">          <span class="comment">// ❤️❤️❤️❤️很关键 依赖收集</span></span><br><span class="line">         childOb.dep.depend(); </span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">            dependArray(value);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.call(obj, newVal);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal;</span><br><span class="line">      &#125;</span><br><span class="line">      childOb = !shallow &amp;&amp; observe(newVal);</span><br><span class="line">      dep.notify();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="methodsToPatch"><a href="#methodsToPatch" class="headerlink" title="methodsToPatch"></a>methodsToPatch</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录原始Array未重写之前的API原型方法</span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="comment">// 拷贝一份上面的原型出来</span></span><br><span class="line"><span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line"><span class="comment">// 将要重写的方法</span></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [ <span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span> ]</span><br><span class="line"></span><br><span class="line">methodsToPatch.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">  def(arrayMethods, method, <span class="function"><span class="keyword">function</span> <span class="title">mutator</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 原有的数组方法调用执行</span></span><br><span class="line">    <span class="keyword">const</span> result = arrayProto[method].apply(<span class="built_in">this</span>, args)</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="built_in">this</span>.__ob__</span><br><span class="line">    <span class="keyword">let</span> inserted</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>:</span><br><span class="line">        inserted = args.slice(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是插入的数据，将其再次监听起来</span></span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.observeArray(inserted)</span><br><span class="line">    <span class="comment">// 触发订阅，像页面更新响应就在这里触发</span></span><br><span class="line">    ob.dep.notify()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>手动调用:star::star::star:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ob.dep.notify()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>为什么数组变化内部用splice 外部可以用push都可以改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target.splice(key, <span class="number">1</span>, val);</span><br><span class="line"><span class="built_in">this</span>.array.push(<span class="number">100</span>)  <span class="comment">//数组的添加</span></span><br></pre></td></tr></table></figure><h2 id="最后看看尤大的回答"><a href="#最后看看尤大的回答" class="headerlink" title="最后看看尤大的回答"></a>最后看看尤大的回答</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020121009image-20201210095216449.png"                      alt="image-20201210095216449"                ></p><h2 id="12月更新–扩展一下Vue3-0的数组监听"><a href="#12月更新–扩展一下Vue3-0的数组监听" class="headerlink" title="12月更新–扩展一下Vue3.0的数组监听"></a>12月更新–扩展一下Vue3.0的数组监听</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> model = &#123;</span><br><span class="line">  name: <span class="string">&#x27;vue&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    val: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  list: [<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObj</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监控器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将属性都做监控</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(data).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isObj(data[key])) &#123;</span><br><span class="line">      <span class="comment">// 对象类型的继续监听它的属性</span></span><br><span class="line">      data[key] = observe(data[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> defineProxy(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成Proxy代理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineProxy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">obj, key, val</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`属性<span class="subst">$&#123;key&#125;</span>变化为<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">      compile(obj, key, val);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解析器，响应页面变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">obj, id, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123; <span class="comment">// 数组变化</span></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#list&#x27;</span>).value = model.list;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">`#<span class="subst">$&#123;id&#125;</span>`</span>).value = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">model= observe(model);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue—Watch原理</title>
      <link href="2020/12/09/Vue-Watch%E5%8E%9F%E7%90%86/"/>
      <url>2020/12/09/Vue-Watch%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>今天分析下Watch的内部原理</p><a id="more"></a><blockquote><p>带着问题看源码</p><p>1、监听的数据改变的时，watch 如何工作</p><p>2、设置 immediate 时，watch 如何工作</p><p>3、设置了 deep 时，watch 如何工作</p></blockquote><h2 id="常见的api使用情况"><a href="#常见的api使用情况" class="headerlink" title="常见的api使用情况"></a>常见的api使用情况</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">   <span class="comment">//函数</span></span><br><span class="line">   <span class="function"><span class="title">useless</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;useless&#x27;</span>,newValue)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">//对象</span></span><br><span class="line">   name:&#123;</span><br><span class="line">     immediate:<span class="literal">true</span>,  </span><br><span class="line">     <span class="function"><span class="title">handler</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span>,newValue)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   nestect:&#123;</span><br><span class="line">     deep:<span class="literal">true</span>,</span><br><span class="line">     <span class="function"><span class="title">handler</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;nestect&#x27;</span>,newValue)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h2 id="什么时候初始化"><a href="#什么时候初始化" class="headerlink" title="什么时候初始化"></a>什么时候初始化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  vm._watchers = [];</span><br><span class="line">  <span class="keyword">var</span> opts = vm.$options;</span><br><span class="line">  ....</span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>opts.watch !== nativeWatch</code>的意思是不等于浏览器原生的watch，为什么要这样写？</p><p>因为Firefox浏览器中Object.prototype中有个watch方法，如果用户没有设置watch，则opts.watch 将是Object.prototype.watch</p><h2 id="initWatch"><a href="#initWatch" class="headerlink" title="initWatch"></a>initWatch</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initWatch</span> (<span class="params">vm, watch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> watch) &#123;</span><br><span class="line">    <span class="comment">//handler 类型是不确定的 可以是 对象 方法  字符串 数组</span></span><br><span class="line">    <span class="keyword">var</span> handler = watch[key];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(handler)) &#123;</span><br><span class="line">      <span class="comment">//如果是数组遍历每一项来创建watcher</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class="line">        createWatcher(vm, key, handler[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      createWatcher(vm, key, handler);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="createWatcher"><a href="#createWatcher" class="headerlink" title="createWatcher"></a>createWatcher</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWatcher</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm,  <span class="comment">//vue实例</span></span></span></span><br><span class="line"><span class="function"><span class="params">  expOrFn, <span class="comment">//表达式 或者 计算属性函数</span></span></span></span><br><span class="line"><span class="function"><span class="params">  handler, <span class="comment">//回调函数  或者 字符串</span></span></span></span><br><span class="line"><span class="function"><span class="params">  options <span class="comment">//传递给vm.$watch选项对象</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isPlainObject(handler)) &#123;</span><br><span class="line">    options = handler;</span><br><span class="line">    handler = handler.handler;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handler === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    handler = vm[handler];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm.$watch(expOrFn, handler, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>watch 在一开始初始化的时候，会 <strong>读取</strong> 一遍 监听的数据的值，于是，此时 那个数据就收集到 watch 的 watcher 了</p><p>然后 你给 watch 设置的 handler ，watch 会放入 watcher 的更新函数中</p><p>当 数据改变时，通知 watch 的 watcher 进行更新，于是 你设置的 handler 就被调用了</p><p>  <img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020121715image-20201217154210438.png"                      alt="image-20201217154210438"                ></p><h2 id="watch"><a href="#watch" class="headerlink" title="$watch"></a>$watch</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  Vue.prototype.$watch = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    expOrFn,</span></span></span><br><span class="line"><span class="function"><span class="params">    cb,</span></span></span><br><span class="line"><span class="function"><span class="params">    options</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(cb)) &#123;</span><br><span class="line">      <span class="keyword">return</span> createWatcher(vm, expOrFn, cb, options)</span><br><span class="line">    &#125;</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line">    options.user = <span class="literal">true</span>; <span class="comment">// 代表watcher 为 userWatcher</span></span><br><span class="line">    <span class="comment">//创建watcher实例 这是一个 user watcher，因为 options.user = true</span></span><br><span class="line">    <span class="keyword">var</span> watcher = <span class="keyword">new</span> Watcher(vm, expOrFn, cb, options);</span><br><span class="line">    <span class="comment">//immediate = true 则函数立即执行</span></span><br><span class="line">    <span class="keyword">if</span> (options.immediate) &#123;</span><br><span class="line">      cb.call(vm, watcher.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unwatchFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//销毁watcher函数</span></span><br><span class="line">      watcher.teardown();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1、判断是否立即执行监听回调</strong></p><p>如果你设置了 <code>immediate</code> 的话，表示不用等我数据变化，初始化时马上执行一遍，执行的代码就是直接调用 回调，绑定上下文，传入监听值</p><p><strong>2、每个 watch 配发 watcher</strong></p><h2 id="new-Watcher"><a href="#new-Watcher" class="headerlink" title="new Watcher"></a>new Watcher</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Watcher = <span class="function"><span class="keyword">function</span> <span class="title">Watcher</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm,</span></span></span><br><span class="line"><span class="function"><span class="params">  expOrFn,</span></span></span><br><span class="line"><span class="function"><span class="params">  cb,</span></span></span><br><span class="line"><span class="function"><span class="params">  options,</span></span></span><br><span class="line"><span class="function"><span class="params">  isRenderWatcher</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.vm = vm;</span><br><span class="line">  <span class="keyword">if</span> (isRenderWatcher) &#123;</span><br><span class="line">    vm._watcher = <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  vm._watchers.push(<span class="built_in">this</span>);</span><br><span class="line">  <span class="comment">// options</span></span><br><span class="line">  <span class="keyword">if</span> (options) &#123;</span><br><span class="line">    <span class="built_in">this</span>.deep = !!options.deep;</span><br><span class="line">    <span class="built_in">this</span>.user = !!options.user;</span><br><span class="line">    <span class="built_in">this</span>.computed = !!options.computed;</span><br><span class="line">    <span class="built_in">this</span>.sync = !!options.sync;</span><br><span class="line">    <span class="built_in">this</span>.before = options.before;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.deep = <span class="built_in">this</span>.user = <span class="built_in">this</span>.computed = <span class="built_in">this</span>.sync = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.cb = cb;</span><br><span class="line">  <span class="built_in">this</span>.id = ++uid$<span class="number">1</span>; <span class="comment">// uid for batching</span></span><br><span class="line">  <span class="built_in">this</span>.active = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">this</span>.dirty = <span class="built_in">this</span>.computed; <span class="comment">// for computed watchers</span></span><br><span class="line">  <span class="built_in">this</span>.deps = [];</span><br><span class="line">  <span class="built_in">this</span>.newDeps = [];</span><br><span class="line">  <span class="built_in">this</span>.depIds = <span class="keyword">new</span> _Set();</span><br><span class="line">  <span class="built_in">this</span>.newDepIds = <span class="keyword">new</span> _Set();</span><br><span class="line">  <span class="built_in">this</span>.expression = process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    ? expOrFn.toString()</span><br><span class="line">    : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="comment">// parse expression for getter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.getter = expOrFn;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getter = parsePath(expOrFn);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.getter) &#123;</span><br><span class="line">      <span class="built_in">this</span>.getter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.computed) &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 依赖收集</span></span><br><span class="line">    <span class="built_in">this</span>.dep = <span class="keyword">new</span> Dep();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="built_in">this</span>.get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <strong>this.getter 的函数进行理解，他的本质是为了获取对象的key值.</strong></p><p>当 watch.getter 执行，而读取了 <code>vm.name</code> 的时候，==name的依赖收集器就会收集到 watch-watcher==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Watcher.prototype.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  pushTarget(<span class="built_in">this</span>);</span><br><span class="line">  <span class="keyword">var</span> value;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="built_in">this</span>.vm;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    value = <span class="built_in">this</span>.getter.call(vm, vm);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.user) &#123;</span><br><span class="line">      handleError(e, vm, (<span class="string">&quot;getter for watcher \&quot;&quot;</span> + (<span class="built_in">this</span>.expression) + <span class="string">&quot;\&quot;&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> e</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// &quot;touch&quot; every property so they are all tracked as</span></span><br><span class="line">    <span class="comment">// dependencies for deep watching</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.deep) &#123;</span><br><span class="line">      traverse(value);</span><br><span class="line">    &#125;</span><br><span class="line">    popTarget();</span><br><span class="line">    <span class="built_in">this</span>.cleanupDeps();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Watch 在结尾会立即执行一次 watcher.get，其中便会执行 getter，便会根据你监听的key，去实例上读取并返回，存放在 watcher.value 上</p><h2 id="deep深度监听"><a href="#deep深度监听" class="headerlink" title="deep深度监听"></a>deep深度监听</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="built_in">this</span>.deep) &#123;</span><br><span class="line">      traverse(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  _traverse(val, seenObjects);</span><br><span class="line">  seenObjects.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_traverse</span> (<span class="params">val, seen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i, keys;</span><br><span class="line">  <span class="keyword">var</span> isA = <span class="built_in">Array</span>.isArray(val);</span><br><span class="line">  <span class="keyword">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class="built_in">Object</span>.isFrozen(val) || val <span class="keyword">instanceof</span> VNode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断值是否已经响应式</span></span><br><span class="line">  <span class="keyword">if</span> (val.__ob__) &#123;</span><br><span class="line">    <span class="keyword">var</span> depId = val.__ob__.dep.id;</span><br><span class="line">    <span class="keyword">if</span> (seen.has(depId)) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    seen.add(depId);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//是否是数组</span></span><br><span class="line">  <span class="keyword">if</span> (isA) &#123;</span><br><span class="line">    i = val.length;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123; _traverse(val[i], seen); &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//递归遍历对象</span></span><br><span class="line">    keys = <span class="built_in">Object</span>.keys(val);</span><br><span class="line">    i = keys.length;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123; _traverse(val[keys[i]], seen); &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是深层级的对象，其中的每个属性也都是响应式的，每个属性都有自己的依赖收集器</p><p>通过不断深入的读取每个属性，这样每个属性就都可以收集到 <code>watch-watcher</code> 了</p><p>这样不管对象内多深的属性变化，都会通知到 <code>watch-watcher</code></p><h2 id="回调更新"><a href="#回调更新" class="headerlink" title="回调更新"></a>回调更新</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Watcher.prototype.update = <span class="function"><span class="keyword">function</span> <span class="title">update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>()&#123;&#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.sync) &#123;</span><br><span class="line">    <span class="built_in">this</span>.run(); <span class="comment">//同步执行</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    queueWatcher(<span class="built_in">this</span>); <span class="comment">//先执行这里</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Watcher.prototype.run = <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.active) &#123;</span><br><span class="line">    <span class="built_in">this</span>.getAndInvoke(<span class="built_in">this</span>.cb);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对比计算属性返回值</span></span><br><span class="line">Watcher.prototype.getAndInvoke = <span class="function"><span class="keyword">function</span> <span class="title">getAndInvoke</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="built_in">this</span>.get();</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    value !== <span class="built_in">this</span>.value ||</span><br><span class="line">    isObject(value) ||</span><br><span class="line">    <span class="built_in">this</span>.deep</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// set new value</span></span><br><span class="line">    <span class="keyword">var</span> oldValue = <span class="built_in">this</span>.value;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.dirty = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.user) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//执行回调函数</span></span><br><span class="line">        cb.call(<span class="built_in">this</span>.vm, value, oldValue);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        handleError(e, <span class="built_in">this</span>.vm, (<span class="string">&quot;callback for watcher \&quot;&quot;</span> + (<span class="built_in">this</span>.expression) + <span class="string">&quot;\&quot;&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cb.call(<span class="built_in">this</span>.vm, value, oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020121616image-20201216161914318.png"                      alt="image-20201216161914318"                ></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>watcher属性本质就是<code>user watcher</code>，它还支持deep，sync，immediate等配置，监听属性适合观察某个值得变化去完成一段复杂的业务逻辑。</p><p>如何实现watch监听？<code>正是因为watch对应key是被数据拦截的属性</code>，在选项watch下：</p><ul><li>每一个key都会对应一个watcher对象</li><li>watcher对象的getter函数就是获取当前key对应的值，从而建立key对应Dep对象与当前watcher对象建立联系</li><li>当key改变时就会触发视图更新，从而执行key对应的回调函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种移动端Bug解决方案</title>
      <link href="2020/12/08/%E5%90%84%E7%A7%8D%E7%A7%BB%E5%8A%A8%E7%AB%AFBug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2020/12/08/%E5%90%84%E7%A7%8D%E7%A7%BB%E5%8A%A8%E7%AB%AFBug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="各种移动端Bug解决方案持续更新"><a href="#各种移动端Bug解决方案持续更新" class="headerlink" title="各种移动端Bug解决方案持续更新"></a>各种移动端Bug解决方案持续更新</h1><p><a class="link"   href="https://www.notion.so/Bug-075fd58447e94728a6e1ac2b84e10764" >各种移动端Bug解决方案<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue—props原理</title>
      <link href="2020/12/06/Vue-props%E5%8E%9F%E7%90%86/"/>
      <url>2020/12/06/Vue-props%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>今天分析下props的内部原理</p><a id="more"></a><blockquote><p>带着问题看源码</p><p>1、父组件 怎么传值给 子组件的 props</p><p>2、子组件如何读取props</p><p>3、父组件 data 更新，子组件的props 如何更新</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;parent&quot;</span>&gt;</span><br><span class="line">          &lt;h1&gt;分析props&lt;/h1&gt;</span><br><span class="line">          &lt;hello-world :msg=<span class="string">&quot;parentMsg&quot;</span>&gt;&lt;/hello-world&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//child.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;hello&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg:&#123;</span><br><span class="line">      type:<span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>模板解析过程中，如果某个标签的名字是组件名，虚拟DOM渲染过程中会将<code>子组件实例化</code>，模板解析时候从标签属性上解析出数据当做参数传递给子组件，其中就包括<code>props数据</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析父组件</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">with</span>(<span class="params"><span class="built_in">this</span></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> _c(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="attr">staticClass</span>:<span class="string">&quot;parent&quot;</span>&#125;,[</span><br><span class="line">            _c(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">attrs</span>:&#123;&#125;&#125;)</span><br><span class="line">            _c(<span class="string">&#x27;hello-world&#x27;</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">&quot;msg&quot;</span>:parentMsg&#125;&#125;)</span><br><span class="line">        ],<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>with 的作用是，绑定大括号内代码的 <strong>变量访问作用域</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="function"><span class="title">with</span>(<span class="params"><span class="built_in">this</span></span>)</span>&#123; <span class="built_in">console</span>.log(parentName) &#125;</span><br><span class="line">&#125;</span><br><span class="line">test.call(&#123;<span class="attr">parentName</span>:<span class="string">&quot;测试名字&quot;</span>&#125;)  <span class="comment">//测试名字</span></span><br></pre></td></tr></table></figure><p>props的实现原理简单的理解：父组件提供数据，子组件通过props字段选择组件需要哪些内如，通过子组件props选项将需要的数据筛选出来添加到子组件的上下文中</p><h2 id="normalizeProps"><a href="#normalizeProps" class="headerlink" title="normalizeProps"></a>normalizeProps</h2><p>Vue.component()注册组件的时候会调用Vue.extend()生成一个Vue基础构造器，内部会调用mergeOptions函数合并属性， mergeOptions又会调用normalizeProps对props的属性进行一些规范化的修饰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeProps</span> (<span class="params">options, vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> props = options.props;</span><br><span class="line">  <span class="keyword">if</span> (!props) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  <span class="keyword">var</span> res = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> i, val, name;</span><br><span class="line">  <span class="comment">//如果props是个数组 </span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(props)) &#123;</span><br><span class="line">    i = props.length;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      val = props[i];</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        name = camelize(val);</span><br><span class="line">        <span class="comment">//保存到res里面  例如:&#123; msg: &#123;type: null&#125; &#125;</span></span><br><span class="line">        res[name] = &#123; <span class="attr">type</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">          <span class="comment">//...错误处理</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果props是个对象  </span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPlainObject(props)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">      val = props[key];</span><br><span class="line">      name = camelize(key);</span><br><span class="line">      res[name] = isPlainObject(val)</span><br><span class="line">        ? val</span><br><span class="line">        : &#123; <span class="attr">type</span>: val &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">   <span class="comment">//...错误处理</span></span><br><span class="line">  &#125;</span><br><span class="line">  options.props = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 经过normalizeProps规范后，props被修饰为一个对象格式，例子里的执行到这里等于:<code>&#123; msg: &#123;type: null&#125; &#125;</code></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    initState(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initState</span>(<span class="params">vm</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> opts = vm.$options;    </span><br><span class="line">    <span class="keyword">if</span> (opts.props) &#123;</span><br><span class="line">        initProps(vm, opts.props);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="initProps"><a href="#initProps" class="headerlink" title="initProps"></a>initProps</h2><p>initProps接受2个参：<code>vm</code>  <code>propsOptions</code>。</p><p>第一个参是 vm实例。</p><p>第二个参是 规格化后的props选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initProps</span> (<span class="params">vm, propsOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> propsData = vm.$options.propsData || &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> props = vm._props = &#123;&#125;;</span><br><span class="line">  <span class="comment">//缓存props的key</span></span><br><span class="line">  <span class="keyword">var</span> keys = vm.$options._propKeys = [];</span><br><span class="line">  <span class="keyword">var</span> isRoot = !vm.$parent;</span><br><span class="line">  <span class="comment">//如果不是根组件则变成响应式</span></span><br><span class="line">  <span class="keyword">if</span> (!isRoot) &#123;</span><br><span class="line">    toggleObserving(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> loop = <span class="function"><span class="keyword">function</span> (<span class="params"> key </span>) </span>&#123;</span><br><span class="line">    keys.push(key);</span><br><span class="line">    <span class="keyword">var</span> value = validateProp(key, propsOptions, propsData, vm);</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> hyphenatedKey = hyphenate(key);</span><br><span class="line">       <span class="comment">//...错误处理</span></span><br><span class="line">      defineReactive(props, key, value, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...错误处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      defineReactive(props, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      <span class="comment">//设置代理 把vm.x 访问 vm._props.x</span></span><br><span class="line">      proxy(vm, <span class="string">&quot;_props&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> propsOptions) loop( key );</span><br><span class="line">  toggleObserving(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 每一个 实例都会有 一个 _props 的同时，也会把属性直接放在 实例上。</p><table><thead><tr><th style="text-align:left">propsData</th><th style="text-align:left">保存通过父组件传入或者用户通过propsData传入的props数据</th></tr></thead><tbody><tr><td style="text-align:left">props</td><td style="text-align:left">指向vm._props指针。所有设置到props变量中的属性保存到vm.props</td></tr><tr><td style="text-align:left">keys</td><td style="text-align:left">指向 vm.$options._propskeys</td></tr><tr><td style="text-align:left">isRoot</td><td style="text-align:left">判断是否是根组件</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleObserving</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  shouldObserve = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码主要做了三件事</p><p>1、遍历 props</p><p>2、给 props 设置响应式</p><p>3、给 props 设置代理 (把vm.x 访问 vm._props.x)</p><h2 id="validateProp"><a href="#validateProp" class="headerlink" title="validateProp"></a>validateProp</h2><p>调用这个函数得到的props数据通过defineReactive函数设置到vm._props中，目的就是<code>校验</code>，就是检查一下我们传递的数据是否满足 <code>prop</code>的定义规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行validateProp检查propsData里的key值是否符合propsOptions里对应的要求，并将值保存到value里面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateProp</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  key,</span></span></span><br><span class="line"><span class="function"><span class="params">  propOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">  propsData,</span></span></span><br><span class="line"><span class="function"><span class="params">  vm</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prop = propOptions[key];</span><br><span class="line">  <span class="keyword">var</span> absent = !hasOwn(propsData, key);</span><br><span class="line">  <span class="keyword">var</span> value = propsData[key];</span><br><span class="line">  <span class="comment">// boolean casting</span></span><br><span class="line">  <span class="keyword">var</span> booleanIndex = getTypeIndex(<span class="built_in">Boolean</span>, prop.type);</span><br><span class="line">  <span class="keyword">if</span> (booleanIndex &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (absent &amp;&amp; !hasOwn(prop, <span class="string">&#x27;default&#x27;</span>)) &#123;</span><br><span class="line">      value = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span> || value === hyphenate(key)) &#123;</span><br><span class="line">      <span class="comment">// only cast empty string / same name to boolean if</span></span><br><span class="line">      <span class="comment">// boolean has higher priority</span></span><br><span class="line">      <span class="keyword">var</span> stringIndex = getTypeIndex(<span class="built_in">String</span>, prop.type);</span><br><span class="line">      <span class="keyword">if</span> (stringIndex &lt; <span class="number">0</span> || booleanIndex &lt; stringIndex) &#123;</span><br><span class="line">        value = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//✅✅✅检测如果 prop 没有定义 default 属性，那么返回 undefined，通过这块逻辑我们知道除了 Boolean 类型的数据，其余没有设置    default 属性的 prop 默认值都是 undefined。</span></span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    value = getPropDefaultValue(vm, prop, key);</span><br><span class="line">    <span class="comment">// since the default value is a fresh copy,</span></span><br><span class="line">    <span class="comment">// make sure to observe it.</span></span><br><span class="line">    <span class="keyword">var</span> prevShouldObserve = shouldObserve;</span><br><span class="line">    toggleObserving(<span class="literal">true</span>);</span><br><span class="line">    observe(value);</span><br><span class="line">    toggleObserving(prevShouldObserve);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">    <span class="comment">// skip validation for weex recycle-list child component props</span></span><br><span class="line">    !(<span class="literal">false</span> &amp;&amp; isObject(value) &amp;&amp; (<span class="string">&#x27;@binding&#x27;</span> <span class="keyword">in</span> value))</span><br><span class="line">  ) &#123;</span><br><span class="line">    assertProp(prop, key, value, vm, absent);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要就做 3 件事情：</p><ol><li>处理 <code>Boolean</code> 类型的数据。</li><li>处理默认数据。</li><li><code>prop</code> 断言，并最终返回 <code>prop</code> 的值。</li></ol><h2 id="proxy代理"><a href="#proxy代理" class="headerlink" title="proxy代理"></a><strong>proxy</strong>代理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    target, sourceKey, key</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;    </span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;            </span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">this</span>[sourceKey][key]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;            </span><br><span class="line">          <span class="built_in">this</span>[sourceKey][key] = val;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这段代码做了2 个事</strong></p><p>1、使用 props 在 vm 上占位，使得可以通过 vm.xxx 的形式访问到 props </p><p>2、设置 [Object.defineProperty] 的 get 和 set ，间接获取和赋值 vm._props</p><h2 id="defineReactive响应式"><a href="#defineReactive响应式" class="headerlink" title="defineReactive响应式"></a>defineReactive响应式</h2><p>在 <code>defineReactive</code> 的时候会添加一个自定义 <code>setter</code>，当我们直接对 <code>prop</code> 赋值的时候会输出警告。</p><p><code>prop</code> 的响应式有一点不同的是当 <code>vm</code> 是非根实例的时候，会先执行 <code>toggleObserving(false)</code>，它的目的是为了响应式的优化</p><h2 id="Props-更新"><a href="#Props-更新" class="headerlink" title="Props 更新"></a>Props 更新</h2><p> 如果是基本类型，是这个流程</p><ol><li>父组件数据改变，只会把新的数据传给子组件</li><li>子组件拿到新数据，就会直接替换到原来的 props</li><li>替换就是直接等哈，看下源码，重要语句标红</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildComponent</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    vm, propsData</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (propsData &amp;&amp; vm.$options.props) &#123;        </span><br><span class="line">      <span class="comment">// 保存 props 的地方，用于访问转接，具体看文章下面</span></span><br><span class="line">      <span class="keyword">var</span> props = vm._props;        </span><br><span class="line">      <span class="comment">// 所有子组件上设置的 props 的 key</span></span><br><span class="line">      <span class="keyword">var</span> propKeys = vm.$options._propKeys || [];        </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; propKeys.length; i++) &#123;            </span><br><span class="line">        <span class="keyword">var</span> key = propKeys[i];</span><br><span class="line">        props[key] = propsData[key]</span><br><span class="line">      &#125;</span><br><span class="line">     vm.$options.propsData = propsData;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是对象，是这个流程</p><ol><li>父组件传 对象 给 子组件，并且父子组件 页面都使用到了这个数据</li><li>结果那么这个对象，会收集到 父子组件的 watcher</li><li>所以当 对象内部被修改的时候，会通知到 父和子 更新。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、父组件 data 的值 和 子组件的 props <strong>没有任何联系</strong>，更改 props 不影响父组件 data （其实也影响如果data是个对象）</p><p>2、props 也是<strong>响应式</strong>的，跟 data 本质 差不多</p><p>3、props 会访问转接，赋值转接 ，其实操作的是 <strong>vm._props</strong> 的属性</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue—响应式对象</title>
      <link href="2020/12/04/Vue-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%AF%B9%E8%B1%A1/"/>
      <url>2020/12/04/Vue-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>被Object.defineProperty绑定过的对象，会变成「响应式」化。也就是改变这个对象的时候会触发get和set事件。进而触发一些视图更新</p><a id="more"></a><blockquote><p>带着问题看源码</p><p>1、Vue 是怎么知道数据改变？</p><p>2、Vue 在数据改变时，怎么知道通知哪些视图更新？</p><p>3、Vue 在数据改变时，视图怎么知道什么时候更新？</p></blockquote><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我被读了，我要不要做点什么好?&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="params">newVal</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val === newVal) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      val = newVal;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;数据被改变了，我要把新的值渲染到页面上去!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  text: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对data上的text属性进行绑定</span></span><br><span class="line">defineReactive(data, <span class="string">&#x27;text&#x27;</span>, data.text);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.text); <span class="comment">// 控制台输出 &lt;我被读了，我要不要做点什么好?&gt;</span></span><br><span class="line">data.text = <span class="string">&#x27;hello Vue&#x27;</span>; <span class="comment">// 控制台输出 &lt;hello Vue &amp;&amp; 数据被改变了，我要把新的值渲染到页面上去!&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Observer-「响应式」"><a href="#Observer-「响应式」" class="headerlink" title="Observer 「响应式」"></a><strong>Observer 「响应式」</strong></h2><p>Vue中用Observer类来管理上述响应式化Object.defineProperty的过程。我们可以用如下代码来描述，将this.data也就是我们在Vue代码中定义的data属性全部进行「响应式」绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 响应式绑定数据通过方法</span></span><br><span class="line">   observe(<span class="built_in">this</span>.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 将data中我们定义的每个属性进行响应式绑定</span></span><br><span class="line">    defineReactive(obj, keys[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码中"><a href="#源码中" class="headerlink" title="源码中"></a>源码中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shouldObserve = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleObserving</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  shouldObserve = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   尝试为一个值创建一个观察者实例； </span></span><br><span class="line"><span class="comment"> *  如果成功观察到，则返回新观察者； </span></span><br><span class="line"><span class="comment"> *  如果该值已经具有一个观察者，则返回现有观察者。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">value, asRootData</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// value是不是object 不能是vnode实例</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(value) || value <span class="keyword">instanceof</span> VNode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ob;</span><br><span class="line">  <span class="comment">//判断带不带 ob标识</span></span><br><span class="line">  <span class="keyword">if</span> (hasOwn(value, <span class="string">&#x27;__ob__&#x27;</span>) &amp;&amp; value.__ob__ <span class="keyword">instanceof</span> Observer) &#123;</span><br><span class="line">    ob = value.__ob__;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    shouldObserve &amp;&amp;   <span class="comment">//全局控制 shouldObserve === false </span></span><br><span class="line">    !isServerRendering() &amp;&amp;</span><br><span class="line">    (<span class="built_in">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</span><br><span class="line">    <span class="built_in">Object</span>.isExtensible(value) &amp;&amp;   <span class="comment">//可扩展属性</span></span><br><span class="line">    !value._isVue       <span class="comment">//不是vue实例</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    ob = <span class="keyword">new</span> Observer(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class="line">    ob.vmCount++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 附加到每个观察对象的观察者类。附加后，</span></span><br><span class="line"><span class="comment"> 观察者会将目标对象的属性键转换为用于收集依赖项并调度更新的getter / setter。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Observer = <span class="function"><span class="keyword">function</span> <span class="title">Observer</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.value = value;</span><br><span class="line">  <span class="built_in">this</span>.dep = <span class="keyword">new</span> Dep(); <span class="comment">//创建dep实例 后面再说先跳过</span></span><br><span class="line">  <span class="built_in">this</span>.vmCount = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//目的 为valu添加ob标识 变成响应式 并且this指向当前实例</span></span><br><span class="line">  <span class="comment">//下一次执行上面的hasOwn(value, &#x27;__ob__&#x27;) 直接true了</span></span><br><span class="line">  def(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasProto) &#123;</span><br><span class="line">      protoAugment(value, arrayMethods);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      copyAugment(value, arrayMethods, arrayKeys);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.observeArray(value);  <span class="comment">//遍历数组每一个元素 递归把他们都观察起来</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.walk(value);<span class="comment">//遍历对象每一个属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//enumerable 是不可枚举 如果不传则是 undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">def</span> (<span class="params">obj, key, val, enumerable</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    value: val,</span><br><span class="line">    enumerable: !!enumerable,  <span class="comment">//false 代表不可枚举 不能加入for循环</span></span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 观察数组项的列表。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Observer.prototype.observeArray = <span class="function"><span class="keyword">function</span> <span class="title">observeArray</span> (<span class="params">items</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">     observe(items[i]);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 遍历所有属性并将它们转换为* getter / setter。</span></span><br><span class="line"><span class="comment">  * 仅当*值类型为Object时，才应调用此方法。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Observer.prototype.walk = <span class="function"><span class="keyword">function</span> <span class="title">walk</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">     defineReactive$$1(obj, keys[i]);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h2 id="defineReactive-1"><a href="#defineReactive-1" class="headerlink" title="defineReactive$$1"></a>defineReactive$$1</h2><p>就是把对象变成响应式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Define a reactive property on an Object.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive$$1</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">   obj,</span></span></span><br><span class="line"><span class="function"><span class="params">   key,</span></span></span><br><span class="line"><span class="function"><span class="params">   val,</span></span></span><br><span class="line"><span class="function"><span class="params">   customSetter,</span></span></span><br><span class="line"><span class="function"><span class="params">   shallow</span></span></span><br><span class="line"><span class="function"><span class="params"> </span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">// 如果有childe  则递归调用observe</span></span><br><span class="line">   <span class="keyword">var</span> childOb = !shallow &amp;&amp; observe(val);</span><br><span class="line">   <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">     enumerable: <span class="literal">true</span>,</span><br><span class="line">     configurable: <span class="literal">true</span>,</span><br><span class="line">     get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">       <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">         dep.depend();    <span class="comment">//依赖收集</span></span><br><span class="line">         <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">           childOb.dep.depend();</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">             dependArray(value);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> value</span><br><span class="line">     &#125;,</span><br><span class="line">     set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">       <span class="comment">/* eslint-disable no-self-compare */</span></span><br><span class="line">       <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">/* eslint-enable no-self-compare */</span></span><br><span class="line">       <span class="keyword">if</span> (customSetter) &#123;</span><br><span class="line">         customSetter();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// #7981: for accessor properties without setter</span></span><br><span class="line">       <span class="keyword">if</span> (getter &amp;&amp; !setter) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">       <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">         setter.call(obj, newVal);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         val = newVal;</span><br><span class="line">       &#125;</span><br><span class="line">       childOb = !shallow &amp;&amp; observe(newVal);</span><br><span class="line">       dep.notify();  <span class="comment">//派发更新</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>响应式对象就是给它对象上的属性添加getter/setter,无论访问还是修改它都有一定的逻辑需要执行</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020121014image-20201210145546930.png"                      alt="image-20201210145546930" style="zoom:70%;"                 ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020121015image-20201210150502903.png"                      alt="image-20201210150502903" style="zoom:70%;"                 ></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、data 中每个声明的属性，都会有一个 专属的依赖收集器 <code>subs</code></p><p>2、当页面使用到 某个属性时，页面的 <code>watcher</code> 就会被 放到 依赖收集器 <code>subs</code> 中</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020121015image-20201210150707130.png"                      alt="image-20201210150707130"                ></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue—DOM挂载机制</title>
      <link href="2020/12/03/Vue-DOM%E6%8C%82%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>2020/12/03/Vue-DOM%E6%8C%82%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>Vue 中我们是通过 <code>$mount</code> 实例方法去挂载 <code>vm</code> 的<br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Temp <span class="keyword">from</span> <span class="string">&#x27;./Temp.vue&#x27;</span>;</span><br><span class="line"><span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="comment">// el是实例挂载点，会将根组件替换掉原文档中id为 app 标签</span></span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="comment">// 通过render函数渲染</span></span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 这里App是根组件</span></span><br><span class="line">        h(App)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Temp.vue</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line"> 这是消息：&#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="initMixin"><a href="#initMixin" class="headerlink" title="initMixin"></a>initMixin</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMixin</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// a uid</span></span><br><span class="line">    vm._uid = uid$<span class="number">3</span>++;</span><br><span class="line">    <span class="comment">// a flag to avoid this being observed</span></span><br><span class="line">    vm._isVue = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// expose real self  初始化</span></span><br><span class="line">    vm._self = vm;</span><br><span class="line">    <span class="comment">/******************/</span></span><br><span class="line">    initLifecycle(vm);</span><br><span class="line">    initEvents(vm);</span><br><span class="line">    initRender(vm);</span><br><span class="line">    callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>);</span><br><span class="line">    initInjections(vm); <span class="comment">// resolve injections before data/props</span></span><br><span class="line">    initState(vm);</span><br><span class="line">    initProvide(vm); <span class="comment">// resolve provide after data/props</span></span><br><span class="line">    <span class="comment">/**************************/</span></span><br><span class="line">    callHook(vm, <span class="string">&#x27;created&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">      <span class="comment">//跳转 10976行</span></span><br><span class="line">      vm.$mount(vm.$options.el);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="mount"><a href="#mount" class="headerlink" title="$mount"></a>$mount</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="built_in">this</span>, el, hydrating)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mount = Vue.prototype.$mount;</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  el = el &amp;&amp; query(el);</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> options = <span class="built_in">this</span>.$options;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">//如果没有render函数，那么获取模板将模板编译成渲染函数</span></span><br><span class="line">  <span class="keyword">if</span> (!options.render) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.call(<span class="built_in">this</span>, el, hydrating)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们将vue原型上的<code>$mount</code>方法保存在mount中。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202012121629474342020121216.png"                      alt="image-20201212162947434"                ></p><p>然后Vue原型上<code>$mount</code>方法上被一个<code>新的方法覆盖</code>了。新方法会调用原始的方法，这种方法通常被称为<code>函数劫持</code>。通常函数劫持可以在原有功能的基础上<code>新增其他功能</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> el === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> selected = <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">    <span class="keyword">if</span> (!selected) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">&#x27;Cannot find element: &#x27;</span> + el</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> selected</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> el</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>query的主要作用是获取DOM元素</p><h2 id="mountComponent"><a href="#mountComponent" class="headerlink" title="mountComponent"></a>mountComponent</h2><p>$mount方法将id转换为dom元素后，使用mountComponent函数将Vue.js实例挂载到DOM上。</p><blockquote><p>实例挂载到DOM上实际就是将模板渲染到指定DOM元素中。而且是持续性的，当状态发生改变，可以重新触发渲染到指定DOM元素中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm,</span></span></span><br><span class="line"><span class="function"><span class="params">  el,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  vm.$el = el;</span><br><span class="line">  <span class="keyword">if</span> (!vm.$options.render) &#123;</span><br><span class="line">    vm.$options.render = createEmptyVNode;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//开发环境会发出⚠️警告</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 执行生命周期beforeMount方法</span></span><br><span class="line">  callHook(vm, <span class="string">&#x27;beforeMount&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义方法</span></span><br><span class="line">  <span class="keyword">var</span> updateComponent;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//挂载</span></span><br><span class="line">    updateComponent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//vm._render() ==&gt; 生成vnode  传入update</span></span><br><span class="line">      vm._update(vm._render(), hydrating);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</span><br><span class="line">    before: <span class="function"><span class="keyword">function</span> <span class="title">before</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (vm._isMounted) &#123;</span><br><span class="line">        callHook(vm, <span class="string">&#x27;beforeUpdate&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>);</span><br><span class="line">  hydrating = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</span><br><span class="line">    vm._isMounted = <span class="literal">true</span>;</span><br><span class="line">    callHook(vm, <span class="string">&#x27;mounted&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm  <span class="comment">//返回vm实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vm._update</code>的作用调用虚拟DOM中<code>patch方法</code>去执行<code>节点对比</code>与<code>渲染操作</code></p><p><code>vm._render()</code>执行渲染函数得到一份最新的<code>VNode节点树</code></p><p>==先执行渲染函数得到一份最新的node节点，然后通过_update方法对最新的Vnode和旧Vnode进行对比并更新dom节点。==</p><h2 id="new-Watcher"><a href="#new-Watcher" class="headerlink" title="new Watcher"></a>new Watcher</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</span><br><span class="line">    before: <span class="function"><span class="keyword">function</span> <span class="title">before</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (vm._isMounted) &#123;</span><br><span class="line">        callHook(vm, <span class="string">&#x27;beforeUpdate&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>);</span><br></pre></td></tr></table></figure><p>在new Watcher中很重要的一步就是将<code>updateComponent</code> 赋值给<code>watcher.getter</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Watcher = <span class="function"><span class="keyword">function</span> <span class="title">Watcher</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm,</span></span></span><br><span class="line"><span class="function"><span class="params">  expOrFn,</span></span></span><br><span class="line"><span class="function"><span class="params">  cb,</span></span></span><br><span class="line"><span class="function"><span class="params">  options,</span></span></span><br><span class="line"><span class="function"><span class="params">  isRenderWatcher</span></span></span><br><span class="line"><span class="function"><span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.getter = expOrFn;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.getter = parsePath(expOrFn);</span><br><span class="line">    </span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202012121655076302020121216.png"                      alt="image-20201212165507630"                ></p><p><strong>挂载是持续性的，这个关键在于用new watcher，当它的第二个参数<code>updateComponent</code> 支持函数，它会同时观察函数中读取所有vue实例上的响应式数据</strong></p><p>挂载完毕后还有执行<code>mounted</code>钩子函数</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202012131047035452020121310.png"                      alt="image-20201213104703545" style="zoom:50%;"                 ></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-初始化原理</title>
      <link href="2020/12/01/Vue-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8E%9F%E7%90%86/"/>
      <url>2020/12/01/Vue-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Vue的初始化逻辑写的非常清楚，把不同的功能逻辑拆成一些单独的函数执行，让主线逻辑一目了然，这样的编程思想是非常值得借鉴和学习的。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">    !(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>._init(options);</span><br><span class="line">&#125;</span><br><span class="line">initMixin(Vue);</span><br><span class="line">stateMixin(Vue);</span><br><span class="line">eventsMixin(Vue);</span><br><span class="line">lifecycleMixin(Vue);</span><br><span class="line">renderMixin(Vue);</span><br></pre></td></tr></table></figure><p>构造函数中首先进行安全检查，然后进行_init初始化</p><h2 id="init"><a href="#init" class="headerlink" title="_init"></a>_init</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMixin</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="built_in">this</span>;</span><br><span class="line">    vm.$options = mergeOptions(</span><br><span class="line">        resolveConstructorOptions(vm.constructor),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">        ...</span><br><span class="line">    vm._self = vm;</span><br><span class="line">    initLifecycle(vm);</span><br><span class="line">    initEvents(vm);</span><br><span class="line">    initRender(vm);</span><br><span class="line">    callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>);</span><br><span class="line">    initInjections(vm); <span class="comment">// 在数据/道具之前解决注入问题</span></span><br><span class="line">    initState(vm);</span><br><span class="line">    initProvide(vm); <span class="comment">// 解决提供数据/道具后的问题</span></span><br><span class="line">    callHook(vm, <span class="string">&#x27;created&#x27;</span>); </span><br><span class="line">    </span><br><span class="line">      <span class="comment">//如果没有el选项，它就处于未挂载状态，没有关联的dom，</span></span><br><span class="line">      <span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">         <span class="comment">//调用mount挂载vm，渲染成真实dom</span></span><br><span class="line">         vm.$mount(vm.$options.el);</span><br><span class="line">       &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当函数initMixin被调用，会向vue构造函数的<code>prototype</code>属性添加<code>init</code>方法，当执行new Vue(),就会调用_init方法，该方法实现一系列初始化操作，包括生命周期，及响应式系统流程的启动等</p><h3 id="mergeOptions"><a href="#mergeOptions" class="headerlink" title="mergeOptions"></a>mergeOptions</h3><p>这个函数的目的将用户传递的<code>options</code>,与当前构造函数的<code>options</code>及==父级实例==构造函数的<code>options</code>合并成一个新的<code>options</code> 赋值给<code>$options</code>属性，</p><p>为什么会有父级？ </p><p>因为vue.js可能是一个子组件</p><p>初始化事件与属性后触发生命周期<code>beforeCreate</code>，</p><p>随后初始化provide/inject和state后触发<code>created</code></p><h2 id="callHook函数原理"><a href="#callHook函数原理" class="headerlink" title="callHook函数原理"></a>callHook函数原理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHook</span> (<span class="params">vm, hook</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// #7573 disable dep collection when invoking lifecycle hooks</span></span><br><span class="line">  pushTarget();</span><br><span class="line">  <span class="keyword">var</span> handlers = vm.$options[hook];</span><br><span class="line">  <span class="keyword">if</span> (handlers) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = handlers.length; i &lt; j; i++) &#123;</span><br><span class="line">      <span class="comment">//捕获钩子函数发生的错误 js单线程如果错误了就会停止往下执行</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        handlers[i].call(vm);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        handleError(e, vm, (hook + <span class="string">&quot; hook&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm._hasHookEvent) &#123;</span><br><span class="line">    vm.$emit(<span class="string">&#x27;hook:&#x27;</span> + hook);</span><br><span class="line">  &#125;</span><br><span class="line">  popTarget();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>callHook的作用是触发用户设置生命周期钩子</code>，而用户设置的生命周期钩子会在new Vue（）通过参数传递给vue，可以通过options参数得到用户设置的生命周期钩子<code>（vm.$options.created获取到的是一个数组，数组包含钩子函数）</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202012112320016442020121123.png"                      alt="image-20201211232001644"                ></p><h3 id="为什么生命周期函数钩子转换成数组？"><a href="#为什么生命周期函数钩子转换成数组？" class="headerlink" title="为什么生命周期函数钩子转换成数组？"></a>为什么生命周期函数钩子转换成数组？</h3><p>我们知道在Vue.mixin中也可以写入生命周期钩子，如果与一个组件一起混用，需要同时触发2个生命周期函数，而转成数组后，可以在同一个生命周期钩子列表中保存多个生命周期钩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;混入对象的钩子被调用&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mixin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">&#x27;./mixin&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mixins:[mixin],</span><br><span class="line">    name:<span class="string">&quot;temp&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">         msg:<span class="string">&quot;hello vue&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202012112330004232020121123.png"                      alt="image-20201211233000423"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202012112332129822020121123.png"                      alt="image-20201211233212982"                ></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>各种初始化逻辑我们先不看。在初始化的最后，检测到如果有el属性，则调用vm.$mount方法挂载vm，挂载的目标就是==把模板渲染成最终的 DOM==</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要有一个好的架构</title>
      <link href="2020/11/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9A%84%E6%9E%B6%E6%9E%84/"/>
      <url>2020/11/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9A%84%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1、为什么要有一个好的架构"><a href="#1、为什么要有一个好的架构" class="headerlink" title="1、为什么要有一个好的架构"></a>1、为什么要有一个好的架构</h2><p> 首先明确一点，<code>架构是为需求服务的</code>。</p><a id="more"></a><p> 前端架构存在的目的，就我个人理解来说，有以下几点：</p><p>  1、提高代码的可读性。一个好的架构，代码的可读性一定是很强的。简单来说，假如有一个新人加入团队，那么他接手这个项目，一定是容易上手的，能简单轻松的了解整个前端部分的相互关系，从而找到自己需要重点关注的点。而不是需要花很多时间去熟悉这个项目的很多细节，才能开始上手做东西。就文件来说，可以从文件名上，分清哪些是页面、哪些是逻辑、哪些是样式、哪些是可以复用的组件、哪些是图标组、又有哪些是移动端或是PC端专享的样式/逻辑等。就代码来说，包括统一的命名风格，封装在同一个文件里的代码的相关性足够强等。</p><p>  2、提高代码的可维护性。一个好的架构，一定是易于维护的，例如在新增需求、更改需求、修正bug，都不会造成意料之外的变化，比如说修改了一个页面组件的内容，却导致另外一个页面组件发生变化（这也太坑了）。因此，要低耦合，高内聚，以及输入和输出是可预期的。</p><p>  3、提高代码的可扩展性。一个好的架构，一定扩展性要强，不能写死。需求变更太TM正常了，新增需求也太TM正常了。因此好的架构，必须要考虑到这些情况的发生，因为他们是一定会发生的。所以，<code>一定要避免把代码写死</code>。比如页面组件A里需要有一个日历组件，而这个日历组件引用的是别人的（比如从github上找的）。那么尽量不要直接在页面组件A里面直接引用这个日历组件，而是将写一个日历组件B，在这个日历组件B里封装你引用的日历组件C，然后通过这个日历组件B来进行操作。<code>原因很简单，假如某天产品经理说，这个日历组件太丑了，我们换一个吧。如果你直接在页面组件A里内嵌这个引用的日历组件C，你很可能就要改很多代码（因为不同日历组件的使用方法和暴露的接口可能不同）</code>。假如你还在其他多个地方引用了这个日历组件，那就更糟糕了！每个地方都要改。而若是将引用的日历组件C封装到自己写的日历组件B之中，那么你只需要改日历组件B里的相应代码即可，而因为日历组件B暴露的接口是不变的，那么自然不用修改页面中的代码了。</p><p> 附图，以日历组件为例，是否考虑到扩展性的结果</p><p> <strong>未考虑到扩展性</strong></p><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202011302242444772020113022.png"                      alt="image-20201130224244477"                ></p><p> <strong>考虑到扩展性：</strong></p><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202011302243019392020113022.png"                      alt="image-20201130224301939"                ></p><p>  4、便于协同。包括前端和后端的协同，前端和前端之间的协同。具体来说，前后端的协同通常是以ajax为交互，那么应至少有一个用于专门封装了所有ajax请求的文件，所有ajax请求都封装在这里。在开发时，这里封装的方法应该可以模拟发送和接收约定好的交互内容，方便开发联调。而前端和前端的协同，主要体现在同时在更改代码时，不会影响对方代码的正常运行。因此要求封装、解耦以及低干扰度是必须的。</p><p>  5、自动化自动打包，压缩，混淆，如果有必要，再加上自动单元测试。</p><p>  总结：总结来说，一个好的架构的目的是，让前端写代码写的舒服，让后端联调的舒服，让产品经理改需求改的舒服。</p><h2 id="2、我如何设计架构"><a href="#2、我如何设计架构" class="headerlink" title="2、我如何设计架构"></a>2、我如何设计架构</h2><p> 我不敢说自己的架构是好的架构（显然不是啦），只能分享自己最近做的一个项目，它的架构的如何做的。</p><h3 id="首先，确定需求："><a href="#首先，确定需求：" class="headerlink" title="首先，确定需求："></a><strong>首先，确定需求：</strong></h3><p>  1、一个中小型网站，同时面向移动端和PC端（单端大概15个页面，算上弹窗大约20个）。2、预算有限（给的钱少），开发时间有限（一个月）。3、可能存在一定程度上的需求变更（比如增加页面或修改某些页面内容）。4、客户可能不太在乎优化（但是我自己在乎啊！）5、要求兼容IE9以上。</p><h3 id="其次开始决定："><a href="#其次开始决定：" class="headerlink" title="其次开始决定："></a><strong>其次开始决定：</strong></h3><p>  1、兼容IE9以上说明可以使用主流框架，而无需必须使用jquery。因此我采用了vue，版本是2.0；2、预算有限，时间有限，因此PC端和移动端共html和js，独立css。3、页面有限，因此无需将架构层级划分的比较细，只需要按其类型划分即可；4、根据原型图来看，页面复杂程度有限，复用部分不是很多，因此可以确定哪些东西需要封装复用，哪些比较复杂需要独立封装，哪些比较简单为了简化开发难度可以直接耦合。5、自己比较熟练单页面网站，因此采用以单页面为主，异步加载其他页面的形式。</p><p> 于是使用相关配套的东西，比如webpack，vue-router等，另外为了开发和生产的方便性，采用以下模式进行开发。</p><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202011302243206212020113022.png"                      alt="image-20201130224320621"                ></p><hr><h3 id="第三，划分功能。"><a href="#第三，划分功能。" class="headerlink" title="第三，划分功能。"></a><strong>第三，划分功能。</strong></h3><p> 首先有一个根html，用户需要通过访问它来加载我们的js逻辑，因此js逻辑的代码被写在main.js之中。</p><p> 在main.js之下，我们的前端代码可以被划分为三部分：</p><ol><li>组件树；</li><li>功能模块；</li><li><p>各种资源；</p><p>如下图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202011302243474002020113022.png"                      alt="image-20201130224347400"                ></p><p>功能划分好之后，相同功能的放在同一个文件夹下，命名风格应该类似。</p><p>具体来说，组件树相关的东西，通常是以.vue结尾，放置在components文件夹下；资源，有图片或者国际化资源等，以.png或者.js或.json结尾，放置在resources文件夹下；而功能插件、服务等，因为可能被多处引用，因此为了方便引用，放在src文件夹下，并且该文件夹是components文件夹和resources文件夹的上级文件夹；</p></li></ol><hr><h3 id="第四、细化功能模块"><a href="#第四、细化功能模块" class="headerlink" title="第四、细化功能模块"></a><strong>第四、细化功能模块</strong></h3><p> 功能、组件树以及资源，我们已经明确了有哪些东西，那么接下来，我们要明确这些东西该如何以文件的形式来划分。</p><p> 如下图：</p><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202011302244049912020113022.png"                      alt="image-20201130224404991"                ></p><h3 id="1、项目构建相关"><a href="#1、项目构建相关" class="headerlink" title="1、项目构建相关"></a><strong>1、项目构建相关</strong></h3><p> 因为要使用vue.js，也要使用es6语法，因此<strong>babel</strong>是必须的；又因为要自动化混淆打包，因此<strong>webpack</strong>也是必须的；最后因为要方便多人协同，因此npm的<strong>package.json</strong>的配置，方便不同人可以快速自动化通过npm install来安装依赖，也是必须的；</p><h3 id="2、CDN相关"><a href="#2、CDN相关" class="headerlink" title="2、CDN相关"></a><strong>2、CDN相关</strong></h3><p> 而又因为我们要采用外部字体（需求要求引入非常见字体），因此<strong>CDN加速</strong>是必须的，该字体文件放在html中来配置引用即可；</p><h3 id="3、配置和插件"><a href="#3、配置和插件" class="headerlink" title="3、配置和插件"></a><strong>3、配置和插件</strong></h3><p> 我们需要直接引入一些插件和配置文件；为了使用vue，我们需要一个根组件，那么就是<strong>App.vue</strong>；使用vue-router，我们需要配置路由文件，因此<strong>router-config.js</strong>这个路由配置也是必须的；然后我们还需要以插件形式引入一些功能和服务，因此有了<strong>Plugin-开头的若干个vue插件</strong>，这些都是根据需要封装好的低耦合高内聚方法；</p><h3 id="4、需要的npm依赖"><a href="#4、需要的npm依赖" class="headerlink" title="4、需要的npm依赖"></a><strong>4、需要的npm依赖</strong></h3><p> 当然，要使用vue肯定要引入<strong>vue.js</strong>；类似的还有<strong>vue-router.js</strong>和各种兼容性<strong>polyfill</strong>和全局插件；</p><h3 id="5、抽离出的功能模块"><a href="#5、抽离出的功能模块" class="headerlink" title="5、抽离出的功能模块"></a><strong>5、抽离出的功能模块</strong></h3><p> 除了直接引用的这些插件，我们还有一些和项目高度耦合的功能服务，我认为不能作为插件，但依然需要抽离出来封装好，方便使用和修改；如封装ajax请求的<strong>ajax.js</strong>，所有的ajax请求都放置其中，只对外暴露接口，方便管理和使用；又如实时国际化功能的组件<strong>LanguageManager.js</strong>，他需要引入国际化资源和管理国际化资源的加载；又例如实现跨组件通信的<strong>event-bus.js</strong>又比如管理用户信息的<strong>user.js</strong></p><h3 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a><strong>6、总结</strong></h3><p> 而这些划分，都体现在上图之中。这就是<strong>src目录下的功能模块文件</strong>，我们需要的绝大多数功能都可以包括在其中，我们只需要按照实际开发中的需要，将对应的功能写入在这些文件中并引用即可；</p><h3 id="第五、组件树"><a href="#第五、组件树" class="headerlink" title="第五、组件树"></a><strong>第五、组件树</strong></h3><p> 之前谈了功能模块的划分，接下来是组件树；</p><p> 因此是中小型页面，因此组件树的层级无需太深，但该抽离出来的依然还是要抽离，尽量保证抽离出来的组件解耦以及一个页面组件的逻辑不要太多；</p><p> 如下图：</p><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/SouthEast2020113022.png"                      alt="img"                ></p><h3 id="0、根组件"><a href="#0、根组件" class="headerlink" title="0、根组件"></a><strong>0、根组件</strong></h3><p> 所有组件最终往上找，都会找到共同的根组件App.vue，根组件只负责管理他的直接子组件；每个组件都只负责管理自己的直接子组件，不跨级管理，并且不依赖于自己的子组件（否则可能因为子组件的未加载或错误而导致父组件错误），做到解耦和内聚；</p><h3 id="1、弹窗dialog和弹窗tips"><a href="#1、弹窗dialog和弹窗tips" class="headerlink" title="1、弹窗dialog和弹窗tips"></a><strong>1、弹窗dialog和弹窗tips</strong></h3><p> 因为弹窗dialog和弹窗提示tips可能同时存在，因此将其划分为2个组件，方便管理；</p><h3 id="2、未登录页面和登录页面"><a href="#2、未登录页面和登录页面" class="headerlink" title="2、未登录页面和登录页面"></a><strong>2、未登录页面和登录页面</strong></h3><p> 因为页面存在登录和未登录状态，而为了加载速度考虑，当未登录时，不加载已登录页面，因此需要划分出来，并进行异步加载处理；</p><h3 id="3、未登录页面"><a href="#3、未登录页面" class="headerlink" title="3、未登录页面"></a><strong>3、未登录页面</strong></h3><p> 未登录页面又分为三种情况：1、初始页面：毫无疑问要直接加载2、登录弹窗：点击登录时加载（异步）3、注册弹窗：点击注册时加载（异步）之所以分拆开，是因为根据需求，已登录用户刷新页面，可以直接进入登录后页面，因此无需登录和注册，这种处理可以减少流量消耗，提升加载页面加载速度（特别是注册弹窗需要加载的内容还比较多）；</p><h3 id="4、已登录页面"><a href="#4、已登录页面" class="headerlink" title="4、已登录页面"></a><strong>4、已登录页面</strong></h3><p> 已登录页面有较多页面，采用默认加载初始页，然后异步加载其他页面（访问时）；</p><h3 id="5、弹窗dialog"><a href="#5、弹窗dialog" class="headerlink" title="5、弹窗dialog"></a><strong>5、弹窗dialog</strong></h3><p> 由于逻辑较少，代码量不多，因此为了方便管理，统一将其合并在一个vue文件中，共同相同的打开逻辑，根据传递的key决定打开哪一个。这样在新增弹窗时，无需再去写弹窗的打开、关闭逻辑。假如有较复杂的弹窗，可以以子组件的形式引入到当前vue文件中，如此也方便管理；</p><h3 id="6、国际化管理"><a href="#6、国际化管理" class="headerlink" title="6、国际化管理"></a><strong>6、国际化管理</strong></h3><p> 和页面高耦合，负责加载对应的国际化资源，并进行切换管理；</p><h3 id="7、页面组件"><a href="#7、页面组件" class="headerlink" title="7、页面组件"></a><strong>7、页面组件</strong></h3><p> 可能有子页面和复用的组件，按照正常方式引用即可。</p><h3 id="8、样式文件"><a href="#8、样式文件" class="headerlink" title="8、样式文件"></a><strong>8、样式文件</strong></h3><p> 可以独立写为.css文件，但因为我的公共样式文件比较少，因此我还是将其放在一个.vue文件中，并在App.vue里来引用</p><h3 id="8、页面组件起名"><a href="#8、页面组件起名" class="headerlink" title="8、页面组件起名"></a><strong>8、页面组件起名</strong></h3><p> 通常以.vue为结尾，除了国际化LanguageManager.js因为高耦合度，因此以.js结尾并是一个单独的vue实例，表示他更像是一个功能模块，而不是一个vue的页面组件；</p><p> 基础页面，如登录和未登录页面，<code>公共组件（并且是header和footer这种），以**base-**开头；弹窗统一以**box-**为开头;可复用的组件以**extend-**开头；引入的外部组件以**import-**开头</code>；<code>普通页面组件以**page-**开头</code>（这些页面往往是一个独立的页面，并且挂靠在登录或未登录页面下）；注册弹窗因为逻辑比较复杂，并且同类较多，因此以<strong>register-</strong>为开头；</p><p> 通过以文件名来划分，不同的页面组件之间的区分可以说是一目了然，同时也方便管理；</p><hr><h1 id="3、还没有谈到的内容"><a href="#3、还没有谈到的内容" class="headerlink" title="3、还没有谈到的内容"></a><strong>3、还没有谈到的内容</strong></h1><p> 想了想，目前还没有谈到的内容有以下几点：</p><p>  1、路由：以路由为驱动来写页面，似乎是一种不错的选择；好处是只需要通过查看路由的配置文件router-config.js，就可以了解页面组件的架构；不过我自己关于vue-router的实践经验比较少，因此就略过不谈了；</p><p>  2、单元测试：按道理说，单元测试是非常有必要的，因此在进行架构设计时，必须考虑到这一点；不过作者我目前在的公司关于前端方面都不太正规，实在没这方面的经验，又因为作者我本人转行做前端的时间也比较短，虽然周周9.12.7，但也没来得及学习这方面的知识（没有需求驱动，这方面动力不足哈哈）</p><p>  3、自动化配置：关于webpack的自动化，是前端架构的重要组成部分，因此配置也是蛮重要的；不过一是这方面需要很多笔墨的，二是网上也有一些别人分享的文章（肯定比我的好），所以我这里就不细说了；</p><p>  4、一些自动化工具：依然尴尬，没有大厂经验，路子比较野，所以大厂专有的一些工具是木有的，而自己找的话又嫌麻烦，所以没有优化到极致，只做到了基本满足目前项目需求的程度，见谅见谅；等以后有这方面经验的话我再写博客来分享吧~</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次服务器数据被黑 😂</title>
      <link href="2020/09/16/%E6%95%B0%E6%8D%AEMoogose%E8%A2%AB%E9%BB%91/"/>
      <url>2020/09/16/%E6%95%B0%E6%8D%AEMoogose%E8%A2%AB%E9%BB%91/</url>
      
        <content type="html"><![CDATA[<p>幸亏这次丢失的数据不多，也只是自己个人的测试数据，如果是公司的商用数据库数据，那被勒索多少 BTC 也得给啊 😁</p><a id="more"></a><h2 id="服务器又一次被恶意攻击，MongoDB-被删库"><a href="#服务器又一次被恶意攻击，MongoDB-被删库" class="headerlink" title="服务器又一次被恶意攻击，MongoDB 被删库"></a>服务器又一次被恶意攻击，MongoDB 被删库</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2009%2016%2016%2028%2027%201600244907.png"                      alt="image-20200915164254240"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2009%2016%2016%2028%2022%201600244902.png"                      alt="image-20200915164549369"                ></p><h2 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mongo --version</span><br><span class="line">MongoDB shell version v4<span class="number">.0</span><span class="number">.6</span></span><br><span class="line">git version: caa42a1f75a56c7643d0b68d3880444375ec42e3</span><br><span class="line">OpenSSL version: OpenSSL <span class="number">1.0</span><span class="number">.1f</span> <span class="number">6</span> Jan <span class="number">2014</span></span><br><span class="line">allocator: tcmalloc</span><br><span class="line">modules: none</span><br><span class="line">build environment:</span><br><span class="line">    distmod: ubuntu1404</span><br><span class="line">    distarch: x86_64</span><br><span class="line">    target_arch: x86_64</span><br></pre></td></tr></table></figure><h2 id="重新卸载"><a href="#重新卸载" class="headerlink" title="重新卸载"></a>重新卸载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">停止服务：</span><br><span class="line">sudo service mongod stop</span><br><span class="line">删除软件包：</span><br><span class="line">sudo yum erase $(rpm -qa | grep mongodb-org)</span><br><span class="line"> 删除数据和日志目录：</span><br><span class="line">sudo rm -r /<span class="keyword">var</span>/log/mongodb（日志）</span><br><span class="line">sudo rm -r /<span class="keyword">var</span>/lib/mongo（数据）</span><br></pre></td></tr></table></figure><h2 id="安装重启服务"><a href="#安装重启服务" class="headerlink" title="安装重启服务"></a>安装重启服务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">sudo apt-get install -y mongodb-org</span><br><span class="line"></span><br><span class="line"># 开启服务</span><br><span class="line">sudo service mongod start</span><br><span class="line"></span><br><span class="line"># 停止服务</span><br><span class="line">sudo service mognod stop</span><br><span class="line"></span><br><span class="line"># 重启服务</span><br><span class="line">sudo service mongod restart</span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo;</span><br></pre></td></tr></table></figure><h2 id="配置文件信息"><a href="#配置文件信息" class="headerlink" title="配置文件信息"></a>配置文件信息</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dbPath</span>=。。。 <span class="comment">#数据文件存放目录</span></span><br><span class="line"><span class="attr">path</span>=。。。 <span class="comment">#日志文件存放目录</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">27017</span> <span class="comment">#端口号</span></span><br><span class="line"><span class="attr">fork</span>=<span class="literal">true</span> <span class="comment">#以守护程序的方式启用,即在后台运行</span></span><br><span class="line"><span class="attr">logappend</span> = <span class="literal">true</span> <span class="comment">#日志以追加的形式添加</span></span><br><span class="line"><span class="attr">bind_ip</span> = <span class="number">0.0</span>.<span class="number">0.0</span> <span class="comment">#可以访问的地址. 127.0.0.1表示自己访问, 0.0.0.0 表示所有人都能访问</span></span><br></pre></td></tr></table></figure><h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">修改etc/mongod.conf文件内的配置信息</span><br><span class="line">net:</span><br><span class="line">  port: <span class="number">12345</span> <span class="comment">//端口号</span></span><br><span class="line">  bindIp: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,<span class="number">1</span>**<span class="number">.16</span>*<span class="number">.1</span>**<span class="number">.18</span>   <span class="comment">//内网</span></span><br><span class="line"></span><br><span class="line">  # 重启服务</span><br><span class="line">sudo service mongod restart</span><br><span class="line">提示</span><br><span class="line">mongod stop/waiting</span><br><span class="line">mongod start/running, process <span class="number">19206</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//连接MongoDB并指定端口</span></span><br><span class="line">mongo <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span>:<span class="number">12345</span></span><br></pre></td></tr></table></figure><h2 id="限制端口访问"><a href="#限制端口访问" class="headerlink" title="限制端口访问"></a>限制端口访问</h2><p>想要实现：</p><p>限制外网访问 mongo，只允许特定的 IP 进来访问 mongo 的话，则：</p><p>Mongo 的配置中，是无法实现这个效果的。</p><p>只能换用其他办法，比如：</p><p>通过设置防火墙，添加：</p><p>只允许某些 IP，入网方向，能够访问 mongo 的对应的端口</p><p>从而禁止掉其他的 IP 访问 mongo</p><p>而此处的阿里云的 ECS 服务器中，可以通过设置安全组，实现和防火墙一样的效果。</p><p>具体设置办法：</p><p>进去阿里云控制后台-》云服务器 ECS-》安全组-〉你的 ECS 服务器所在的区域-》对应的 ECS 服务器-〉配置规则：</p><p>增加 2 个规则：</p><p>（1）规则 1： 允许特定的 IP（单个 IP，某个 IP 地址段（内的所有的 IP），某几个 IP）允许访问某端口</p><p>（2）规则 2：禁止掉，其他的 IP 访问该端口</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2009%2016%2016%2028%2003%201600244883.png"                      alt="image-20200916131318130"                ></p><h2 id="配置管理员账号"><a href="#配置管理员账号" class="headerlink" title="配置管理员账号"></a>配置管理员账号</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 切换到 admin 数据库</span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"># 创建用户</span><br><span class="line">db.createUser(&#123;<span class="attr">user</span>: <span class="string">&#x27;tanya&#x27;</span>, <span class="attr">pwd</span>: <span class="string">&#x27;tanya&#x27;</span>, <span class="attr">roles</span>: [&#123;<span class="attr">role</span>: <span class="string">&#x27;userAdminAnyDatabase&#x27;</span>, <span class="attr">db</span>: <span class="string">&#x27;admin&#x27;</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"># 授权</span><br><span class="line">db.auth(<span class="string">&#x27;tanya&#x27;</span>, <span class="string">&#x27;tanya&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 切换到其他数据库</span><br><span class="line">use dream-wall</span><br><span class="line"></span><br><span class="line"># 创建用户</span><br><span class="line">db.createUser(&#123;<span class="attr">user</span>: <span class="string">&#x27;tanya_dream-wall_runner&#x27;</span>, <span class="attr">pwd</span>: <span class="string">&#x27;tanya&#x27;</span>, <span class="attr">roles</span>: [&#123;<span class="attr">role</span>: <span class="string">&#x27;readWrite&#x27;</span>, <span class="attr">db</span>: <span class="string">&#x27;dream-wall&#x27;</span>&#125;]&#125;)</span><br><span class="line">db.createUser(&#123;<span class="attr">user</span>: <span class="string">&#x27;tanya_dream-wall_wheel&#x27;</span>, <span class="attr">pwd</span>: <span class="string">&#x27;tanya&#x27;</span>, <span class="attr">roles</span>: [&#123;<span class="attr">role</span>: <span class="string">&#x27;read&#x27;</span>, <span class="attr">db</span>: <span class="string">&#x27;dream-wall&#x27;</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"># 修改配置，开启授权</span><br><span class="line">sudo vi /etc/mongod.conf</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  authorization: <span class="string">&#x27;enabled&#x27;</span></span><br><span class="line"></span><br><span class="line"># 重启 mongo 服务，使配置生效</span><br><span class="line">sudo service mongod restart</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是：每次要进行数据库操作都需要先进行授权 db.auth(‘tanya’, ‘tanya’)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 登录到指定数据库，无需授权</span><br><span class="line">mongo <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:xx/dream-wall -u tanya_dream-wall_runner -p tanya</span><br><span class="line"></span><br><span class="line"># 验证一下</span><br><span class="line">show tables</span><br><span class="line">db.dreams.find()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="安全事故猛于虎"><a href="#安全事故猛于虎" class="headerlink" title="安全事故猛于虎"></a>安全事故猛于虎</h4><p>这里给再次给自己也给大家提个醒，安全事故猛于虎，安全责任重于山。</p><ul><li>一定不要为了图方便，就忽略某些安全配置，平时做什么都要有安全意识。</li><li>重要数据及时备份。</li><li>服务器设置 IP 黑白名单，关闭一切可以关闭的端口</li><li>如果跟我似的，访问服务的 ip 经常变，可以考虑修改一些服务的默认端口，增加被扫到的概率</li><li>一定要设置密码，为了防止被爆，最好是无规则的强密码</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://blog.csdn.net/dandanfengyun/article/details/95497728" >https://blog.csdn.net/dandanfengyun/article/details/95497728<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.crifan.com/mongodb_add_restrict_ip_access/" >https://www.crifan.com/mongodb_add_restrict_ip_access/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.bbsmax.com/A/x9J238pM56/" >https://www.bbsmax.com/A/x9J238pM56/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://github.com/savoygu/blog/blob/master/博客/Node.js项目线上服务器部署与发布/Node.js项目线上服务器部署与发布.md#52-修改-mongodb-默认端口" >https://github.com/savoygu/blog/blob/master/博客/Node.js项目线上服务器部署与发布/Node.js项目线上服务器部署与发布.md#52-修改-mongodb-默认端口<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端自动化部署之Shell</title>
      <link href="2020/06/01/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%B9%8BShell/"/>
      <url>2020/06/01/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E4%B9%8BShell/</url>
      
        <content type="html"><![CDATA[<p>众所周知前端是一个不善言辞并不会使用cmd的的一类人，开个玩笑！！！</p><a id="more"></a><h1 id="前端项目发布流程"><a href="#前端项目发布流程" class="headerlink" title="前端项目发布流程"></a><strong>前端项目发布流程</strong></h1><ul><li>开发新功能啦 -&gt; 切新分支 <code>git ck -b newBranch</code></li><li>开发完成后 -&gt; 提交代码 <code>git add .</code> <code>git commit -m &#39;msg&#39;</code></li><li>合并到内外侧分支 -&gt; 合并到 <code>Rel</code> 内外侧分支 <code>git marge rel</code></li><li>就拿 <code>Vue</code> <code>React</code> 项目来说，发布测试之前我们还需要将之前生产的代码给删除，不然体积会越来越大 <code>rm -rf /linux目录路径~当前项目/*</code></li><li>发布内外侧（还有个预发布），<code>build - FileZilla | ZOC7 - 上传</code> 不管你是拖拽，还是linux命令都可以，开心就好嘛</li></ul><p>上面就是发布一个新功能的流程，可想而知，你让我一天做一次还能接受，要是隔几分钟来一次谁受得了？当然现实就是这样的操作隔几分钟就会来一次！！！并且同时改几个项目也是存在的，所以，这种操作要把人整神…</p><h2 id="说个故事"><a href="#说个故事" class="headerlink" title="说个故事"></a>说个故事</h2><p>有一天我开发了一个功能，按照上面流程把代码发布到了内外侧，这时候测试姐姐测试了，发现我把<strong>登录写成登陆</strong>了，通知到我，你有一个超级严重的bug，需要现在改，改好就传，我收到这条指令，菊花不由得一紧，我当机立断切换分支，改起我的代码来，时间一分一秒过去，在一分钟的时间内我就改完bug，毕竟拧螺丝非常简单。</p><p>该上传代码了，上传操作用了我10分钟，在测试姐姐看来，我修改这个代码用了11分钟，测试姐姐心里肯定就在想这个菜逼，改个字要这么久？我等着这么烦，后面给他打分往低了打，哼~~，让某某前端崽儿拿不到奖金。</p><p>我也很无奈啊！！！</p><h2 id="Shell神器"><a href="#Shell神器" class="headerlink" title="Shell神器"></a>Shell神器</h2><p>其实有很多后端在用的东西，前端都能拿来减少自己平时开发的重复工作，Shell就是其中一种。</p><p>关于Shell知识的话，很多教程啦，去学习吧，我把我的脚本拿出来和大家交流交流。</p><h2 id="我的自动化脚本"><a href="#我的自动化脚本" class="headerlink" title="我的自动化脚本"></a>我的自动化脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 在&quot;set -e&quot;之后出现的代码，一旦出现了返回值非零，整个脚本就会立即退出，那么就可以避免一些脚本的危险操作。</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;shell脚本本身的名字: <span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;传给shell的第一个参数: <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;传给shell的第二个参数: <span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="comment">#获取当前分支</span></span><br><span class="line">branch=$(git symbolic-ref --short HEAD)</span><br><span class="line"><span class="comment">#获取当前分支完整路径</span></span><br><span class="line"><span class="built_in">echo</span> -e $(git symbolic-ref HEAD)</span><br><span class="line"><span class="comment"># refs/heads/master</span></span><br><span class="line"><span class="built_in">echo</span> -e $(git symbolic-ref --short HEAD)</span><br><span class="line"><span class="comment"># master</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span>x != <span class="string">&quot;devx&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span>x != <span class="string">&quot;testx&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span>x != <span class="string">&quot;prex&quot;</span> ]&amp;&amp; [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> != <span class="string">&quot;master&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[41;37m 不存在 <span class="variable">$1</span> 环境  只有 -&gt; dev(内测) test(外侧) pre(预发布) \\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 链接服务器</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">devFn</span></span>() &#123;</span><br><span class="line">    ssh -p 22 root@120.27.2x0.xxx rm -rf /home/chan/koa2/*</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 连接成功，开始上传代码....... \\033[0m&quot;</span></span><br><span class="line">    <span class="comment">#rsync 三种模式：本地模式、ssh 模式、rsync 模式。</span></span><br><span class="line">    <span class="comment">#rsync -e &quot;ssh -p 1876&quot;  --exclude=storage -a  /Users/lovewcc/Documents/04_Vue/easy-vue/dist/*      root@120.27.220.173:/home/chan/koa2/</span></span><br><span class="line">    rsync -avz -e ssh /Users/lovewcc/Documents/04_Vue/easy-vue/dist/* root@120.27.220.173:/home/chan/koa2/</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 上传成功,预览试试吧 \\033[0m\\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">testFn</span></span>() &#123;</span><br><span class="line">    ssh -p 端口 root@ip rm -rf 服务器项目路径/*</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 连接成功，上传代码中... \\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">    rsync -e <span class="string">&quot;ssh -p 873&quot;</span>  --exclude=storage -a  本地代码路径/dist/*      root@ip:服务器项目路径/</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 外侧上传成功 \\033[0m\\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">preFn</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;执行链接预发布服务器&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">build</span></span>() &#123;</span><br><span class="line">    <span class="comment"># cd source</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;master&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m&quot;</span><span class="variable">$1</span><span class="string">&quot;支打包开始 \\033[0m&quot;</span></span><br><span class="line">          yarn run build</span><br><span class="line">    <span class="keyword">else</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span>x == <span class="string">&quot;testx&quot;</span> ]</span><br><span class="line">          yarn run build:<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 打包完毕 \\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 连接 <span class="variable">$1</span> 服务器 \\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;master&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        devFn</span><br><span class="line">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span>x == <span class="string">&quot;devx&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        devFn</span><br><span class="line">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span>x == <span class="string">&quot;testx&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        testFn</span><br><span class="line">    <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span>x == <span class="string">&quot;prex&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        preFn</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\\033[41;37m 应该不会走到这里来吧... \\033[0m&quot;</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断是否是rel分支</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;branch&#125;</span> == <span class="string">&quot;master&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\n\\033[32m 当前在rel分支\\n 不出意外应该刚发布过内测\\n 所以无需执行git操作\\n 所以是否直接发布 <span class="variable">$1</span> 环境\\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p $<span class="string">&#x27;\\n\\033[31m是否直接打包上传？y or n: \\033[0m&#x27;</span> isbuild</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$isbuild</span>&quot;</span> != <span class="string">&#x27;y&#x27;</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    build <span class="variable">$1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">#此sh脚本只适用于单子发布rel环境,提醒</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\n\\033[31m dev(内测) test(外侧) pre(预发布) \\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[31m 当前需要发布 <span class="variable">$1</span> 环境 \\033[0m&quot;</span></span><br><span class="line">    <span class="comment">#询问是否继续发布当前环境</span></span><br><span class="line">    <span class="built_in">read</span> -p $<span class="string">&#x27;\\n\\033[31m是否继续操作？y or n: \\033[0m&#x27;</span> isVersion</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$isVersion</span>&quot;</span> != <span class="string">&#x27;y&#x27;</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\n\\033[32m 已确认环境 \\033[0m\\n&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[31m <span class="variable">$1</span> 环境，当前分支为： <span class="variable">$&#123;branch&#125;</span> \\033[0m&quot;</span></span><br><span class="line">    <span class="comment">#确认当前分支，是否继续</span></span><br><span class="line">    <span class="built_in">read</span> -p $<span class="string">&#x27;\\n\\033[31m请确认分支，是否继续操作？y or n: \\033[0m&#x27;</span> isContinue</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$isContinue</span>&quot;</span> != <span class="string">&#x27;y&#x27;</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\n\\033[32m 已确认分支，分支为 -&gt; <span class="variable">$&#123;branch&#125;</span> \\033[0m\\n&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 开始提交 <span class="variable">$&#123;branch&#125;</span> 分支代码，执行 add commit  \\033[0m\\n&quot;</span></span><br><span class="line">    git add .</span><br><span class="line">    <span class="built_in">read</span> -p $<span class="string">&#x27;\\n\\033[31m请输入本次commit信息：\\033[0m&#x27;</span> commitInfo</span><br><span class="line">    git commit -m <span class="variable">$&#123;commitInfo&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 开始切换分支 \\033[0m\\n&quot;</span></span><br><span class="line">    git checkout rel</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 开始拉取 rel origin \\033[0m\\n&quot;</span></span><br><span class="line">    git pull origin rel</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m 开始 merge 修改至 rel \\033[0m\\n&quot;</span></span><br><span class="line">    git merge <span class="variable">$&#123;branch&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断merge是否成功</span></span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\\033[32m merge <span class="variable">$&#123;branch&#125;</span> -&gt; rel 成功 \\033[0m\\n&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\\n\\033[32m 开始推送 rel 至远端 origin \\033[0m\\n&quot;</span></span><br><span class="line"></span><br><span class="line">        git push origin rel</span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\\n\\033[32m 推送 rel 至远端 origin 成功 \\033[0m\\n&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\\n\\033[32m 执行打包 \\033[0m\\n&quot;</span></span><br><span class="line"></span><br><span class="line">        build <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e  <span class="string">&quot;\\033[31m merge失败，请检查 \\033[0m&quot;</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shell.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中设置页面切换时的过渡动画</title>
      <link href="2020/04/15/vue%E4%B8%AD%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2%E6%97%B6%E7%9A%84%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/"/>
      <url>2020/04/15/vue%E4%B8%AD%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2%E6%97%B6%E7%9A%84%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="vue中设置页面切换时的过渡动画"><a href="#vue中设置页面切换时的过渡动画" class="headerlink" title="vue中设置页面切换时的过渡动画"></a>vue中设置页面切换时的过渡动画</h1><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 页面切换动画transitionName --&gt;</span><br><span class="line">    &lt;transition :name=<span class="string">&quot;transitionName&quot;</span>&gt;</span><br><span class="line">      &lt;!-- 缓存数据 &lt;router-view&gt; --&gt;</span><br><span class="line">      &lt;keep-alive&gt;</span><br><span class="line">        &lt;router-view v-<span class="keyword">if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/keep-alive&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">    &lt;transition :name=<span class="string">&quot;transitionName&quot;</span>&gt;</span><br><span class="line">      &lt;router-view v-<span class="keyword">if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      transitionName: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">create</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body.scrollHeight &gt;= <span class="built_in">document</span>.documentElement.clientHeight) &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.style.height = <span class="built_in">document</span>.body.scrollHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.style.height = <span class="built_in">document</span>.documentElement.clientHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 页面切换动画 */</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">//使用watch 监听$router的变化</span></span><br><span class="line">    $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="comment">//console.log(&quot;to=&quot; + to.meta.index, &quot;from=&quot; + from.meta.index);</span></span><br><span class="line">      <span class="comment">//(1) 如果to的索引值为0，不添加任何动画；如果to索引大于from索引,判断为前进状态,反之则为后退状态</span></span><br><span class="line">      <span class="keyword">if</span> (to.meta.index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.meta.index &lt; <span class="keyword">from</span>.meta.index) &#123;</span><br><span class="line">          <span class="built_in">this</span>.transitionName = <span class="string">&quot;slide-right&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.transitionName = <span class="string">&quot;slide-left&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (to.meta.index == <span class="number">0</span> &amp;&amp; <span class="keyword">from</span>.meta.index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.transitionName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//(2) 当然，如果你没有需要设置索引值为0的页面可以直接用着一段</span></span><br><span class="line">      <span class="comment">// if (to.meta.index &lt; from.meta.index) &#123;</span></span><br><span class="line">      <span class="comment">//   this.transitionName = &quot;slide-right&quot;;</span></span><br><span class="line">      <span class="comment">// &#125; else &#123;</span></span><br><span class="line">      <span class="comment">//   this.transitionName = &quot;slide-left&quot;;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: <span class="number">0</span>;</span><br><span class="line">  padding: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">html,</span><br><span class="line">body &#123;</span><br><span class="line">  height: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">#app &#123;</span><br><span class="line">  height: <span class="number">100</span>%;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/********页面切换动画 *********/</span></span><br><span class="line">.slide-right-enter-active,</span><br><span class="line">.slide-right-leave-active,</span><br><span class="line">.slide-left-enter-active,</span><br><span class="line">.slide-left-leave-active &#123;</span><br><span class="line">  <span class="comment">/* will-change属性可以提前通知浏览器我们要对元素做什么动画，这样浏览器可以提前准备合适的优化设置 */</span></span><br><span class="line">  will-change: transform;</span><br><span class="line">  transition: all ease <span class="number">0.</span>4s;</span><br><span class="line">  -webkit-transition: all ease <span class="number">0.</span>4s;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">  left: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.slide-right-enter &#123;</span><br><span class="line">  transform: translateX(-<span class="number">100</span>%);</span><br><span class="line">  -webkit-transform: translateX(-<span class="number">100</span>%);</span><br><span class="line">&#125;</span><br><span class="line">.slide-right-leave-active &#123;</span><br><span class="line">  transform: translateX(<span class="number">100</span>%);</span><br><span class="line">  -webkit-transform: translateX(<span class="number">100</span>%);</span><br><span class="line">&#125;</span><br><span class="line">.slide-left-enter &#123;</span><br><span class="line">  transform: translateX(<span class="number">100</span>%);</span><br><span class="line">  -webkit-transform: translateX(<span class="number">100</span>%);</span><br><span class="line">&#125;</span><br><span class="line">.slide-left-leave-active &#123;</span><br><span class="line">  transform: translateX(-<span class="number">100</span>%);</span><br><span class="line">  -webkit-transform: translateX(-<span class="number">100</span>%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********页面切换动画 *********/</span></span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202011281723430302020112915.png"                      alt="image-20201128172343030" style="zoom:50%;"                 ></p><p>有个bug如果子页面没有高度，进入子页面再返回底部导航会有抖动bug</p><p>比如</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%8A%96%E5%8A%A82020112915.gif"                      alt="底部导航抖动" style="zoom: 50%;"                 ></p><p>加上一定高度后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.promise</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/2020-11-28%2016.32.422020112915.gif"                      alt="2020-11-28 16.32.42" style="zoom: 50%;"                 ></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue阅读源码准备了什么</title>
      <link href="2020/03/15/Vue%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E5%87%86%E5%A4%87%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>2020/03/15/Vue%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E5%87%86%E5%A4%87%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1、掌握-Vue-所有API"><a href="#1、掌握-Vue-所有API" class="headerlink" title="1、掌握 Vue 所有API"></a>1、掌握 Vue 所有API</h2><p>​    我把 Vue 的所有 API 都详细研究使用过了一遍，而且尽量在项目中都有使用，让自己有深一点的体会</p><p>​    而且我对着官方文档，一个个做了详细的笔记，而且联想过了使用场景。</p><a id="more"></a><h2 id="2、JavaScript-扎实基础"><a href="#2、JavaScript-扎实基础" class="headerlink" title="2、JavaScript 扎实基础"></a>2、JavaScript 扎实基础</h2><p>​    幸好自己之前花了大力气去给自己打基础，让自己现在的 JavaScript 基础还算不错。</p><p>逼着自己把很多本 JavaScript 书都看完了，并且做了详细笔记。像是【 JavaScript易维护】【JavaScript性能 】，【JavaScript 高级程序设计】【巴菲特给股东的信】看了两遍，说不上精通，也算是还可以？</p><h2 id="3、看完-JavaScript-设计模式"><a href="#3、看完-JavaScript-设计模式" class="headerlink" title="3、看完 JavaScript 设计模式"></a>3、看完 JavaScript 设计模式</h2><p>​    光是 JavaScript 设计模式 这本书 我就看了一年半，不能说自己把所有设计模式都掌握了，掌握了大部分吧，设计模式港真真的很有趣，不然我也不会决心学</p><p>​    在这里推荐 张容铭的 【JavaScript设计模式】，书讲得非常透彻和详细，我是从完全不懂开始看的</p><p>​    也经常使用一部分，我一直以设计模式为我的项目基构。就是 能用设计模式的地方，我都尽量使用设计模式。</p><p>​    设计模式看起来就像是 剑客 的剑谱，有招有式，连人家武侠剧发功的时候都知道 喊出 招式的名字… 降龙十八掌！！！！</p><p>​    野路子难登大雅之堂，主要是不好看啊，代码为了好维护，易扩展</p><h2 id="4、学会调试"><a href="#4、学会调试" class="headerlink" title="4、学会调试"></a>4、学会调试</h2><p>​    我很大胆地说，如果你不会调试，你看 Vue 源码，或者你会想死，你会出现这个场景…</p><blockquote><p>MMP，这个方法是怎么跳到 那个方法的，那个方法和 这个方法又是怎么联系起来的？</p></blockquote><p>​    也许你可以慢慢 使用 函数名字 去寻找，但是无疑你会多消耗几倍时间，而且你会更烦</p><p>​    使用调试真的方便，以前我也真的不喜欢调试，觉得好像很难？？？</p><p>​    更喜欢使用 console.log 去打印信息…..</p><p>​    是啊，我自己写项目的时候，我还是会使用 console.log 去调试…….</p><p>​    那是因为我自己代码，我知道怎么跑，你 看别人的代码，还是超级抽象的框架，使用 console.log 的方式…..</p><p>​    放心，相信我，你会掉很多头发………</p><p>​    这里，我使用的是 VSCode 去调试，真的简单又方便，我当时也真的很难去让自己又要学一个东西</p><p>​    但是我咬咬牙，我还是学了，感谢自己……</p><p>​    我可以保证，你从不懂到掌握，只要不到十分钟，简直就是 现实版的 十分钟精通到入门</p><p>​    好吧，下面开始说，Vue 的简单总结。</p><p><strong>Vue 源码的简短的总结</strong></p><h3 id="1、封装了很多常用的函数！"><a href="#1、封装了很多常用的函数！" class="headerlink" title="1、封装了很多常用的函数！"></a>1、封装了很多常用的函数！</h3><p>为了 复用 且 易维护</p><p>常用的类型判断、 类型转换 、数据格式转换（数组转对象）…..</p><p>举些例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123;    <span class="keyword">return</span> obj !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUndef</span>(<span class="params">v</span>) </span>&#123;    <span class="keyword">return</span> v === <span class="literal">undefined</span> || v === <span class="literal">null</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDef</span>(<span class="params">v</span>) </span>&#123;    <span class="keyword">return</span> v !== <span class="literal">undefined</span> &amp;&amp; v !== <span class="literal">null</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">val</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> val == <span class="literal">null</span> ?    <span class="string">&#x27;&#x27;</span> :    </span><br><span class="line">    <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span> ?    </span><br><span class="line">    <span class="built_in">JSON</span>.stringify(val, <span class="literal">null</span>, <span class="number">2</span>) :    <span class="built_in">String</span>(val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toObject</span>(<span class="params">arr</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> res = &#123;&#125;;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;        </span><br><span class="line">        <span class="keyword">if</span> (arr[i]) &#123;</span><br><span class="line">            extend(res, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>​    你说说不定过了几年，判断是否是一个对象，不再是 什么 typeof obj==”object”</p><p>​    如果没有封装，那岂不是所有代码涉及到的都要改一遍，且不说如果有很多个都变了…..那你就头大了</p><h3 id="节点操作兼容函数"><a href="#节点操作兼容函数" class="headerlink" title="节点操作兼容函数"></a>节点操作兼容函数</h3><p>addClass ,removeClass，createElement，appendChild，removeChild </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">el, cls</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (!cls || !(cls = cls.trim())) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (el.classList) &#123;        </span><br><span class="line">        <span class="keyword">if</span> (cls.indexOf(<span class="string">&#x27; &#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            cls.split(<span class="regexp">/\s+/</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123; <span class="keyword">return</span> el.classList.add(c); &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            el.classList.add(cls);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;        </span><br><span class="line">       <span class="keyword">var</span> cur = <span class="string">&quot; &quot;</span> + (el.getAttribute(<span class="string">&#x27;class&#x27;</span>) || <span class="string">&#x27;&#x27;</span>) + <span class="string">&quot; &quot;</span>;        </span><br><span class="line">       <span class="keyword">if</span> (cur.indexOf(<span class="string">&#x27; &#x27;</span> + cls + <span class="string">&#x27; &#x27;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            el.setAttribute(<span class="string">&#x27;class&#x27;</span>, (cur + cls).trim());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>这些函数都很有用，所以我都记下来了，毕竟是 框架封装的，肯定是最完善的</p><h3 id="2、真的用了很多设计模式"><a href="#2、真的用了很多设计模式" class="headerlink" title="2、真的用了很多设计模式"></a>2、真的用了很多设计模式</h3><p>就我看到的设计模式就有</p><p> Vue涉及的设计模式观察者模式、状态模式、节流模式、参与者模式、备忘录模式、单例模式装饰者模式、组合继承模式、链模式………</p><p>我怀疑 Vue 把所有的设计模式都用完了…. 真的….. 如果你不懂设计模式</p><p>你真不会领悟到他这么写的精髓</p><p>我就选 Vue 常用的一个设计模式来讲</p><p>【参与者模式】</p><p>Vue 封装的很多函数都是用了 参与者模式，也可以叫做柯里化</p><p>先来简单解释下 参与者模式</p><p>1、保存第一次调用 传入参数</p><p>2、返回定制函数，函数内使用 参数</p><blockquote><p><a class="link"   href="https://blog.csdn.net/Forever201295/article/details/104032369" >https://blog.csdn.net/Forever201295/article/details/104032369<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>简单实现像这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123; <span class="keyword">return</span> a+b &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为了定制函数，把第一次调用时的参数闭包保存</span></span><br><span class="line">add5 = add(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">var</span> result  = add5(<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>看一下 Vue其中一个 使用柯里化 的封装函数</p><p><strong>makeMap</strong></p><p>创建 对象 map，返回函数，用于后面查找 某个东西是否存在 map 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeMap</span>(<span class="params"> str,  expectsLowerCase </span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> map = <span class="built_in">Object</span>.create(<span class="literal">null</span>);   </span><br><span class="line">    <span class="keyword">var</span> list = str.split(<span class="string">&#x27;,&#x27;</span>);    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        map[list[i]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> expectsLowerCase ?        </span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> map[val.toLowerCase()]; &#125; :        </span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="keyword">return</span> map[val]; &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 应用</span></span><br><span class="line"><span class="keyword">var</span> isUnaryTag = makeMap(   </span><br><span class="line"> <span class="string">&#x27;area,base,br,col,embed,frame,hr,img,input,isindex,keygen,&#x27;</span> +  </span><br><span class="line"> <span class="string">&#x27;link,meta,param,source,track,wbr&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查找 area 标签是否存在 上面保存过的 字符串中</span></span><br><span class="line">isUnaryTag(<span class="string">&#x27;area&#x27;</span>)</span><br></pre></td></tr></table></figure><p>**3、使用很多闭包！</p><p>据我看过的地方</p><p>1、解析组件模板 使用了闭包作为缓存，为了重复解析</p><p>2、cached 函数，一个专门使用闭包 为缓存的函数</p><p>3、上面所讲到 的 柯里化所有涉及的函数，makeMap,parthPath,</p><p>4、createPatchFunction 当属篇幅最大的使用闭包的函数了，把一堆函数作为闭包，然后返回 一个函数。他最大的作用是 比较更新DOM 节点</p><p><strong>4、使用很多标志位</strong></p><p>Vue 常用标志位来</p><p><strong>1、表明是否已经做了某件事</strong></p><p> _isMounted：dom 是否已经挂载</p><p>_isDestroyed ：组件是否已经摧毁</p><p>pending：表明更新回调的 setTimeout 已经执行</p><p>waiting：是否已经初始化更新队列，在等待新的成员进入对垒</p><p>flushing：更新队列是否已经开始逐个更新成员</p><p>……</p><p><strong>2、指明当前东西的身份</strong></p><p>isStatic：是否是静态节点</p><p>isComment：是否是注释节点</p><p>isCloned：是否是克隆节点</p><p>isOnce：是否有v-once 指令（如果有当前指令，会跳过编译）</p><p>_isComponent：是否是组件</p><p>…..</p><p>​    多用标志位，控制流程，替代多余的判断（直接判断标志位来确认身份，不用做太多的判断），减少开销</p><p>​    上面那些变量，大家没看源码，可能有些懵逼，没关系，就当先知道有这个东西就好了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202012121140537732020121211.png"                      alt="image-20201212114053773"                ></p><h2 id="Vue-源码分几步走"><a href="#Vue-源码分几步走" class="headerlink" title="Vue 源码分几步走"></a>Vue 源码分几步走</h2><p>我给自己定的任务是 分为两个部分</p><p><strong>Vue 的主体内容</strong></p><p>1、Vue初始化初始化原理</p><p>2、render渲染机制 </p><p>3、依赖收集 </p><p>4、依赖更新</p><p>5、Virtual DOM ，dom 节点 生成虚拟Vnode 节点</p><p>6、Diff、Patch， 节点比较更新</p><p>7、Compile， 模板编译</p><p>8、NextTick ，延迟执行回调</p><p>9、LifeCircle ，生命周期</p><p>10、Model ，双向绑定</p><p>11、Event ，事件机制</p><p><strong>Vue 组件选项</strong></p><p>1、computed</p><p>2、filter</p><p>3、mixin</p><p>4、directive</p><p>5、slot</p><p>6、props</p><p>7、watch</p><p>​    我就大约以这些为我的学习目标进行 源码阅读的，每一块都是一个非常大的内容，每一块内容都不是几天能看完的，有时候还需要一点灵感。当然还有很多内容，但是我的目标也并不是全部，一字不漏读完，我要的是他的精髓即可，或许等我掌握了这些，再去开发其他的内容，这样或许更简单</p><p>​    反正我始终提醒自己不要焦躁，因为这个东西真的是急不来，长期以往，不要妄想一步登天，一开始总会很难，但是久了也一样很难，哈哈哈哈哈</p><p>​    如果你有兴趣也读源码，我们可以一起讨论学习….</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mmbiz.qpic.cn/mmbiz_jpg/HCyqJSXNAiaRKWRsWg3Muds9Z1oZORoMTy7z0N25rrNAbxhmqd6wpaicib4gtYUoN9hYxicxQlSzZyicMgDEDQaIppQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1"                      alt="img" style="zoom: 25%;"                 ></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云 http 升级 https</title>
      <link href="2020/03/13/%E9%98%BF%E9%87%8C%E4%BA%91http%E5%8D%87%E7%BA%A7https/"/>
      <url>2020/03/13/%E9%98%BF%E9%87%8C%E4%BA%91http%E5%8D%87%E7%BA%A7https/</url>
      
        <content type="html"><![CDATA[<blockquote><p>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密。为了数据传输的安全，HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p></blockquote><a id="more"></a><h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200313231641.png"                      alt=""                ></p><p>然后在 SSL 证书中下载申请来的证书</p><p>有 2 个：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200313231806.png"                      alt=""                ></p><h3 id="配置阿里云-nginx"><a href="#配置阿里云-nginx" class="headerlink" title="配置阿里云 nginx"></a>配置阿里云 nginx</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200313232143.png"                      alt=""                ></p><p>我的配置文件在<code>/ect/nginx</code>，现在把刚才的两个证书文件复制过来，待会直接配置使用就行了。nginx 的配置文件是<code>nginx.conf</code>，里面的配置内容有以下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #keepalive_timeout  <span class="number">0</span>;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line">    #gzip  on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  www.xxx.cn;</span><br><span class="line"># 在这里，我做了https全加密处理，在访问http的时候自动跳转到https</span><br><span class="line">   rewrite ^(.*) https:<span class="comment">//$host$1 permanent;</span></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /home/chan/www;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  <span class="number">404</span>              /<span class="number">404.</span>html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server 配置https就看这里啦</span><br><span class="line">    #</span><br><span class="line">     server &#123;</span><br><span class="line">        listen <span class="number">443</span>;</span><br><span class="line">        server_name www.xxx.cn;</span><br><span class="line">        ssl on;</span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root  /home/chan/www;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate      cert/ssl.pem;</span><br><span class="line">        ssl_certificate_key  cert/ssl.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        #location / &#123;</span><br><span class="line">            #index index.html index.htm;</span><br><span class="line">           # proxy_pass http://127.0.0.1:8081;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        error_page  <span class="number">404</span>              /<span class="number">404.</span>html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>运行浏览器</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200313232516.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitFlow 工作流</title>
      <link href="2020/02/25/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
      <url>2020/02/25/GitFlow%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>GitFlow 工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。</p><a id="more"></a><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p><a class="link"   href="https://www.bilibili.com/video/av32573821/" >Git 工作流指南 - GitFlow 工作流<i class="fas fa-external-link-alt"></i></a></p><p><iframe src="//player.bilibili.com/player.html?aid=32573821&cid=56999550&page=1"  width="800px" height="550px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"><br> </iframe></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><hr><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225120815.png"                      alt=""                ></p><p>GitFlow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。</p><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>GitFlow 工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并 push 分支到中央仓库中。</p><h3 id="历史分支"><a href="#历史分支" class="headerlink" title="历史分支"></a>历史分支</h3><p>相对使用仅有的一个 master 分支，GitFlow 工作流使用 2 个分支来记录项目的历史。master 分支存储了正式发布的历史，而 develop 分支作为功能的集成分支。这样也方便 master 分支上的所有提交分配一个版本号。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225130619.png"                      alt=""                ></p><p>剩下要说明的问题围绕着这 2 个分支的区别展开。</p><h3 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h3><p>每个新功能位于一个自己的分支，这样可以 push 到<code>中央仓库</code>以备份和协作。但功能分支不是从 master 分支上拉出新分支，而是使用 develop 分支作为父分支。当新功能完成时，合并回 develop 分支。新功能提交应该从不直接与 master 分支交互。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225130648.png"                      alt=""                ></p><p>注意，从各种含义和目的上来看，功能分支加上 develop 分支就是功能分支工作流的用法。但 GitFlow 工作流没有在这里止步。</p><h3 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225130727.png"                      alt=""                ></p><p>一旦 develop 分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从 develop 分支上 fork 一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做 Bug 修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到 master 分支并分配一个版本号打好 Tag。另外，这些从新建发布分支以来的做的修改要合并回 develop 分支。</p><p>使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本 4.0』，并且在仓库的目录结构中可以实际看到）。</p><p>常用的分支约定：</p><ul><li>用于新建发布分支的分支: <code>develop</code></li><li>用于合并的分支: <code>master</code></li><li>分支命名: <code>release</code>-_ 或 release/_</li></ul><h3 id="维护分支"><a href="#维护分支" class="headerlink" title="维护分支"></a>维护分支</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225130815.png"                      alt=""                ></p><p>维护分支或说是热修复（hotfix）分支用于生成快速给产品发布版本（production releases）打补丁，这是唯一可以直接从 master 分支 fork 出来的分支。修复完成，修改应该马上合并回 master 分支和 develop 分支（当前的发布分支），master 分支应该用新的版本号打好 Tag。</p><p>为 Bug 修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在 master 分支上处理的临时发布。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面的示例演示本工作流如何用于管理单个发布循环。假设你已经创建了一个<code>中央仓库</code>。</p><h3 id="创建开发分支"><a href="#创建开发分支" class="headerlink" title="创建开发分支"></a>创建开发分支</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225130837.png"                      alt=""                ></p><p>第一步为 master 分支配套一个 develop 分支。简单来做可以本地创建一个空的 develop 分支，push 到服务器上：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch develop</span><br><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> develop</span><br></pre></td></tr></table></figure><p>以后这个分支将会包含了项目的全部历史，而 master 分支将只包含了部分历史。其它开发者这时应该克隆中央仓库，建好 develop 分支的跟踪分支：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh:<span class="regexp">//u</span>ser@host<span class="regexp">/path/</span>to/repo.git</span><br><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure><p>现在每个开发都有了这些历史分支的本地拷贝。</p><h3 id="小红和小明开始开发新功能"><a href="#小红和小明开始开发新功能" class="headerlink" title="小红和小明开始开发新功能"></a>小红和小明开始开发新功能</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225130957.png"                      alt=""                ></p><p>这个示例中，小红和小明开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于 master 分支，而是应该基于 <code>develop</code> 分支：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">some</span>-<span class="built_in">feature</span> develop</span><br></pre></td></tr></table></figure><p>他们用老套路添加提交到各自功能分支上：编辑、暂存、提交：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git <span class="keyword">add</span></span><br><span class="line">git <span class="keyword">commit</span></span><br></pre></td></tr></table></figure><h3 id="小红完成功能开发"><a href="#小红完成功能开发" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225131037.png"                      alt=""                ></p><p>添加了提交后，小红觉得她的功能 OK 了。如果团队使用 Pull Requests，这时候可以发起一个用于合并到 develop 分支。否则她可以直接合并到她本地的 develop 分支后 push 到中央仓库：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="built_in">origin</span> develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge <span class="built_in">some</span>-<span class="built_in">feature</span></span><br><span class="line">git <span class="built_in">push</span></span><br><span class="line">git branch -d <span class="built_in">some</span>-<span class="built_in">feature</span></span><br></pre></td></tr></table></figure><p>第一条命令在合并功能前确保 develop 分支是最新的。注意，功能决不应该直接合并到 master 分支。冲突解决方法和集中式工作流一样。</p><h2 id="小红开始准备发布"><a href="#小红开始准备发布" class="headerlink" title="小红开始准备发布"></a>小红开始准备发布</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225131059.png"                      alt=""                ></p><p>这个时候小明正在实现他的功能，小红开始准备她的第一个项目正式发布。像功能开发一样，她用一个新的分支来做发布准备。这一步也确定了发布的版本号：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout -b release-<span class="number">0</span>.<span class="number">1</span> develop</span><br></pre></td></tr></table></figure><p>这个分支是清理发布、执行所有测试、更新文档和其它为下个发布做准备操作的地方，像是一个专门用于改善发布的功能分支。</p><p>只要小红创建这个分支并 push 到中央仓库，这个发布就是功能冻结的。任何不在 develop 分支中的新功能都推到下个发布循环中。</p><h3 id="小红完成发布"><a href="#小红完成发布" class="headerlink" title="小红完成发布"></a>小红完成发布</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225131203.png"                      alt=""                ></p><p>一旦准备好了对外发布，小红合并修改到 master 分支和 develop 分支上，删除发布分支。合并回 develop 分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。另外，如果小红的团队要求 Code Review，这是一个发起 Pull Request 的理想时机。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout master</span><br><span class="line"><span class="attribute">git</span> merge release-<span class="number">0</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">git</span> push</span><br><span class="line"><span class="attribute">git</span> checkout develop</span><br><span class="line"><span class="attribute">git</span> merge release-<span class="number">0</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">git</span> push</span><br><span class="line"><span class="attribute">git</span> branch -d release-<span class="number">0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>发布分支是作为功能开发（develop 分支）和对外发布（master 分支）间的缓冲。只要有合并到 master 分支，就应该打好 Tag 以方便跟踪。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> <span class="number">0.1</span> -m <span class="string">&quot;Initial public release&quot;</span> <span class="literal">master</span></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>Git 有提供各种勾子（hook），即仓库有事件发生时触发执行的脚本。可以配置一个勾子，在你 push 中央仓库的 master 分支时，自动构建好对外发布。</p><h3 id="最终用户发现-Bug"><a href="#最终用户发现-Bug" class="headerlink" title="最终用户发现 Bug"></a>最终用户发现 Bug</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200225131248.png"                      alt=""                ></p><p>对外发布后，小红回去和小明一起做下个发布的新功能开发，直到有最终用户开了一个 <code>Issues</code> 抱怨当前版本的一个 Bug。为了处理 Bug，小红（或小明）从 master 分支上拉出了一个<code>维护分支</code>，提交修改以解决问题，然后直接合并回 master 分支：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b issue-<span class="comment">#001 master</span></span><br><span class="line"><span class="comment"># Fix the bug</span></span><br><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git merge issue-<span class="comment">#001</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>就像发布分支，维护分支中新加这些重要修改需要包含到 develop 分支中，所以小红要执行一个合并操作。然后就可以安全地删除这个分支了：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge issue-<span class="meta">#001</span></span><br><span class="line">git <span class="keyword">push</span></span><br><span class="line">git branch -d issue-<span class="meta">#001</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到了这里， GitFlow 工作流已经感觉很舒适了。你应该也牢固的掌握了本地仓库的潜能，push/pull 模式和 Git 健壮的分支和合并模型。</p><p>记住，这里演示的工作流只是可能用法的例子，而不是在实际工作中使用 Git 不可违逆的条例。所以不要畏惧按自己需要对工作流的用法做取舍。不变的目标就是让 Git 为你所用。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa2+mysql+router 后台开发项目</title>
      <link href="2020/02/24/koa2+mysql%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/02/24/koa2+mysql%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>koa2 与 mysql 在个人项目中经常用到记录一下</p><a id="more"></a><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="1-建立文件夹名为-koa-decorator-目录如下"><a href="#1-建立文件夹名为-koa-decorator-目录如下" class="headerlink" title="1.建立文件夹名为 koa-decorator 目录如下"></a>1.建立文件夹名为 koa-decorator 目录如下</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── dist----------------------------------- 编译后的</span><br><span class="line">├── src ----------------------------------- 项目的所有代码</span><br><span class="line">│ ├──config ----------------------------- 配置文件</span><br><span class="line">│ ├──controller ------------------------- 控制器</span><br><span class="line">│ ├──lib -------------------------------- 一些项目的核心文件（如路由的装饰器文件就在这里）</span><br><span class="line">│ ├──logic ------------------------------ 一些数据校验</span><br><span class="line">│ ├──middleware ------------------------- 中间件</span><br><span class="line">│ ├──models------------------------------ 操作数据表相关逻辑代码(根据项目复杂度可以再分Service层)</span><br><span class="line">│ ├──util-------------------------------- 相关的工具文件</span><br><span class="line">│ ├──index.js---------------------------- 项目的入口文件</span><br><span class="line">├── View --------------------------------- 一些静态文件(上传的图片)</span><br><span class="line">├── .babelrc ------------------------------ babelrc 的相关配置</span><br><span class="line">├── .gitignore ---------------------------- git 的忽略配置文件</span><br><span class="line">├── dev.js -------------------------------- 开发环境的启动文件</span><br><span class="line">├── production.js ------------------------- 生产环境的启动文件</span><br></pre></td></tr></table></figure><h3 id="2-入口文件"><a href="#2-入口文件" class="headerlink" title="2.入口文件"></a>2.入口文件</h3><p>编写开发环境 dev.js 和 生产环境的 production.js 的启动文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> dev.js</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;babel-register&quot;</span>);</span><br><span class="line">process.env.NODE_ENV = <span class="string">&quot;development&quot;</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./src&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> production.js</span><br><span class="line">process.env.NODE_ENV = <span class="string">&quot;production&quot;</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./dist&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-配置-package-json"><a href="#3-配置-package-json" class="headerlink" title="3.配置 package.json"></a>3.配置 package.json</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">   <span class="string">&quot;build&quot;</span>: <span class="string">&quot;babel src  --out-dir dist&quot;</span>,</span><br><span class="line">   <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;set NODE_ENV=development &amp;&amp;  supervisor  --watch src dev.js&quot;</span>,</span><br><span class="line">   <span class="string">&quot;start&quot;</span>: <span class="string">&quot;npm run build &amp;&amp; set NODE_ENV=production  &amp;&amp; supervisor --watch dist production.js&quot;</span>,</span><br><span class="line">   <span class="string">&quot;pm2&quot;</span>: <span class="string">&quot;pm2 start production.js --name &amp;#39;wx-node&amp;#39; --env  NODE_ENV=&amp;#39;production&amp;#39; --output ./logs/logs-out.log  --error ./logs/logs-error.log  --watch dist&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><ol><li><p>运行 npm run build : 是用 babel 直接将 src 目录编译在 dist 目录</p></li><li><p>运行 npm run dev ： 是设置环境变量为 development 并且监听 src 目录，启动 dev.js 运行，为开发环境</p></li><li><p>运行 npm run start : 是 运行第一个命令 npm run build 并且设置环境变量为 production  监听 dist 目录,启动 production.js 运行，为生产或者测试环境</p></li><li><p>运行 npm run pm2： 这是使用 pm2 来守护项目进程,并且设置环境变量和日志记</p></li></ol><h3 id="4-nodejs-入口文件"><a href="#4-nodejs-入口文件" class="headerlink" title="4.nodejs 入口文件"></a>4.nodejs 入口文件</h3><p>创建 server 文件下 index,js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&amp;#39;koa&amp;#39;);</span><br><span class="line">const &#123; resolve &#125; = require(&amp;#39;path&amp;#39;);</span><br><span class="line">const views = require(&amp;#39;koa-views&amp;#39;);</span><br><span class="line">const R = require(&amp;#39;ramda&amp;#39;);</span><br><span class="line">const MIDDLEWARES = [ &amp;#39;common&amp;#39;, &amp;#39;router&amp;#39; ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useMiddlewares = <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">  R.map(</span><br><span class="line">    R.compose(R.forEachObjIndexed(<span class="function">(<span class="params">initWith</span>) =&gt;</span> initWith(app)), <span class="built_in">require</span>, <span class="function">(<span class="params">name</span>) =&gt;</span></span><br><span class="line">      resolve(__dirname, <span class="string">`./middlewares/<span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">    )</span><br><span class="line">  )(MIDDLEWARES);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">//创建实例</span></span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">  <span class="comment">//views</span></span><br><span class="line">  app.use(</span><br><span class="line">    views(resolve(__dirname, &amp;#39;../views&amp;#39;), &#123;</span><br><span class="line">      extension : &amp;#39;html&amp;#39;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// error logger</span></span><br><span class="line">  app.on(&amp;#39;error&amp;#39;, (err, ctx) =&gt; &#123;</span><br><span class="line">    console.log(&amp;#39;error occured:&amp;#39;, err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> useMiddlewares(app);</span><br><span class="line">  <span class="comment">// 监听端口</span></span><br><span class="line">  app.listen(<span class="number">4455</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    console.log(&amp;#39;http://127.0.0.1:4455 is runing&amp;#39;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="5-Router-路由二次封装配置"><a href="#5-Router-路由二次封装配置" class="headerlink" title="5.Router 路由二次封装配置"></a>5.Router 路由二次封装配置</h3><p>在 lib 文件中创建 decorator.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">&quot;glob&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">&quot;ramda&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> symbolPrefix = <span class="built_in">Symbol</span>(<span class="string">&quot;prefix&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> routerMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isArray = <span class="function"><span class="params">c</span> =&gt;</span> (_.isArray(c) ? c : [c]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Route</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">app, apiPath</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.app = app;</span><br><span class="line">    <span class="built_in">this</span>.apiPath = apiPath;</span><br><span class="line">    <span class="built_in">this</span>.router = <span class="keyword">new</span> Router();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    glob.sync(resolve(<span class="built_in">this</span>.apiPath, <span class="string">&quot;./**/*.js&quot;</span>)).forEach(<span class="built_in">require</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [conf, controller] <span class="keyword">of</span> routerMap) &#123;</span><br><span class="line">      <span class="keyword">const</span> controllers = isArray(controller);</span><br><span class="line">      <span class="keyword">let</span> prefixPath = conf.target[symbolPrefix];</span><br><span class="line">      <span class="keyword">if</span> (prefixPath) prefixPath = normalizePath(prefixPath);</span><br><span class="line">      <span class="keyword">const</span> routerPath = prefixPath + conf.path;</span><br><span class="line">      <span class="built_in">this</span>.router[conf.method](routerPath, ...controllers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.app.use(<span class="built_in">this</span>.router.routes());</span><br><span class="line">    <span class="built_in">this</span>.app.use(<span class="built_in">this</span>.router.allowedMethods());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> normalizePath = <span class="function"><span class="params">path</span> =&gt;</span> (path.startsWith(<span class="string">&quot;/&quot;</span>) ? path : <span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="function"><span class="params">conf</span> =&gt;</span> <span class="function">(<span class="params">target, key, descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">  conf.path = normalizePath(conf.path);</span><br><span class="line"></span><br><span class="line">  routerMap.set(</span><br><span class="line">    &#123;</span><br><span class="line">      target: target,</span><br><span class="line">      ...conf</span><br><span class="line">    &#125;,</span><br><span class="line">    target[key]</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> controller = <span class="function"><span class="params">path</span> =&gt;</span> <span class="function"><span class="params">target</span> =&gt;</span> (target.prototype[symbolPrefix] = path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> get = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  router(&#123;</span><br><span class="line">    method: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    path: path</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> post = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  router(&#123;</span><br><span class="line">    method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    path: path</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> put = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  router(&#123;</span><br><span class="line">    method: <span class="string">&quot;put&quot;</span>,</span><br><span class="line">    path: path</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> del = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  router(&#123;</span><br><span class="line">    method: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">    path: path</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> use = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  router(&#123;</span><br><span class="line">    method: <span class="string">&quot;use&quot;</span>,</span><br><span class="line">    path: path</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> all = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  router(&#123;</span><br><span class="line">    method: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    path: path</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decorate = <span class="function">(<span class="params">args, middleware</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [target, key, descriptor] = args;</span><br><span class="line"></span><br><span class="line">  target[key] = isArray(target[key]);</span><br><span class="line">  target[key].unshift(middleware);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> convert = <span class="function"><span class="params">middleware</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> decorate(args, middleware);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> auth = convert(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ctx.session.user&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.session.user);</span><br><span class="line">  <span class="keyword">if</span> (!ctx.session.user) &#123;</span><br><span class="line">    <span class="keyword">return</span> (ctx.body = &#123;</span><br><span class="line">      success: <span class="literal">false</span>,</span><br><span class="line">      code: <span class="number">401</span>,</span><br><span class="line">      err: <span class="string">&quot;登录信息失效，重新登录&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> admin = <span class="function"><span class="params">roleExpected</span> =&gt;</span></span><br><span class="line">  convert(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; role &#125; = ctx.session.user;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;admin session&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(ctx.session.user);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!role || role !== roleExpected) &#123;</span><br><span class="line">        <span class="keyword">return</span> (ctx.body = &#123;</span><br><span class="line">          success: <span class="literal">false</span>,</span><br><span class="line">          code: <span class="number">403</span>,</span><br><span class="line">          err: <span class="string">&quot;你没有权限，来错地方了&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">await</span> next();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> (ctx.body = &#123;</span><br><span class="line">        success: <span class="literal">false</span>,</span><br><span class="line">        code: <span class="number">505</span>,</span><br><span class="line">        err: <span class="string">&quot;Cannot destructure property `role` of &#x27;undefined&#x27; or &#x27;null&#x27;.&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> required = <span class="function"><span class="params">rules</span> =&gt;</span></span><br><span class="line">  convert(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> errors = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> checkRules = R.forEachObjIndexed(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      errors = R.filter(<span class="function"><span class="params">i</span> =&gt;</span> !R.has(i, ctx, ctx.request[key]))(value);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    checkRules(rules);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errors.length) &#123;</span><br><span class="line">      ctx.body = &#123;</span><br><span class="line">        success: <span class="literal">false</span>,</span><br><span class="line">        code: <span class="number">412</span>,</span><br><span class="line">        err: <span class="string">`<span class="subst">$&#123;errors.join(<span class="string">&quot;,&quot;</span>)&#125;</span> is required`</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>middle 文件夹中创建 route.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Route &#125; = <span class="built_in">require</span>(<span class="string">&quot;../lib/decorator&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> apiPath = resolve(__dirname, <span class="string">&quot;../routes&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> router = <span class="keyword">new</span> Route(app, apiPath);</span><br><span class="line"></span><br><span class="line">  router.init();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>创建 routes 文件夹下 user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; controller, get, post, put &#125; = <span class="built_in">require</span>(<span class="string">&quot;../lib/decorator&quot;</span>);</span><br><span class="line"></span><br><span class="line">@controller(<span class="string">&quot;/api/v0/user&quot;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">userController</span> </span>&#123;</span><br><span class="line">  @get(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">ctx, next</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (ctx.body = &#123;</span><br><span class="line">      success: <span class="literal">false</span>,</span><br><span class="line">      err: <span class="string">&quot;用户&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-mysql-配置"><a href="#6-mysql-配置" class="headerlink" title="6.mysql 配置"></a>6.mysql 配置</h3><p>创建 config 文件夹–&gt;default.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器配置信息</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  port: <span class="number">4455</span>,</span><br><span class="line">  database: &#123;</span><br><span class="line">    DATABASE: <span class="string">&quot;order_test&quot;</span>,</span><br><span class="line">    USERNAME: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    PASSWORD: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    PORT: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">    HOST: <span class="string">&quot;localhost&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>创建 lib 文件夹中 mysql.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config/default.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pool = mysql.createPool(&#123;</span><br><span class="line">  host     : config.database.HOST,</span><br><span class="line">  user     : config.database.USERNAME,</span><br><span class="line">  password : config.database.PASSWORD,</span><br><span class="line">  database : config.database.DATABASE,</span><br><span class="line">  port     : config.database.PORT</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> query = <span class="function">(<span class="params">sql, values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行sql脚本对数据库进行读写</span></span><br><span class="line">    pool.getConnection(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        connection.query(sql, values, <span class="function">(<span class="params">err, rows</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接正常&#x27;</span>);</span><br><span class="line">            resolve(rows);</span><br><span class="line">          &#125;</span><br><span class="line">          connection.release();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库表格创建</span></span><br><span class="line"><span class="keyword">const</span> createTables = &#123;</span><br><span class="line">  users          : <span class="string">`CREATE TABLE IF NOT EXISTS user_info (</span></span><br><span class="line"><span class="string">      id INT PRIMARY KEY NOT NULL AUTO_INCREMENT COMMENT &#x27;(自增长)&#x27;,</span></span><br><span class="line"><span class="string">      user_id VARCHAR ( 100 ) NOT NULL COMMENT &#x27;账号&#x27;,</span></span><br><span class="line"><span class="string">      user_name VARCHAR ( 100 ) NOT NULL COMMENT &#x27;用户名&#x27;,</span></span><br><span class="line"><span class="string">      user_pwd VARCHAR ( 100 ) NOT NULL COMMENT &#x27;密码&#x27;,</span></span><br><span class="line"><span class="string">      user_head VARCHAR ( 225 ) COMMENT &#x27;头像&#x27;,</span></span><br><span class="line"><span class="string">      user_mobile VARCHAR ( 20 ) COMMENT &#x27;手机&#x27;,</span></span><br><span class="line"><span class="string">      user_email VARCHAR ( 64 ) COMMENT &#x27;邮箱&#x27;,</span></span><br><span class="line"><span class="string">      user_creatdata TIMESTAMP NOT NULL DEFAULT NOW( ) COMMENT &#x27;注册日期&#x27;,</span></span><br><span class="line"><span class="string">      user_login_time TIMESTAMP DEFAULT NOW( ) COMMENT &#x27;登录时间&#x27;,</span></span><br><span class="line"><span class="string">      user_count INT COMMENT &#x27;登录次数&#x27;</span></span><br><span class="line"><span class="string">    ) ENGINE = INNODB charset = utf8;`</span>,</span><br><span class="line">  role           : <span class="string">`CREATE TABLE IF NOT EXISTS role_info (</span></span><br><span class="line"><span class="string">      id INT PRIMARY KEY NOT NULL AUTO_INCREMENT COMMENT &#x27;(自增长)&#x27;,</span></span><br><span class="line"><span class="string">      role_name VARCHAR ( 20 ) NOT NULL COMMENT &#x27;角色名&#x27;,</span></span><br><span class="line"><span class="string">      role_description VARCHAR ( 255 ) DEFAULT NULL COMMENT &#x27;描述&#x27;</span></span><br><span class="line"><span class="string">    ) ENGINE = INNODB charset = utf8;`</span>,</span><br><span class="line">  permission     : <span class="string">`CREATE TABLE IF NOT EXISTS permission_info (</span></span><br><span class="line"><span class="string">      id INT PRIMARY KEY NOT NULL AUTO_INCREMENT COMMENT &#x27;(自增长)&#x27;,</span></span><br><span class="line"><span class="string">      permission_name VARCHAR ( 20 ) NOT NULL COMMENT &#x27;权限名&#x27;,</span></span><br><span class="line"><span class="string">      permission_description VARCHAR ( 255 ) DEFAULT NULL COMMENT &#x27;描述&#x27;</span></span><br><span class="line"><span class="string">    ) ENGINE = INNODB charset = utf8;`</span>,</span><br><span class="line">  userRole       : <span class="string">`CREATE TABLE IF NOT EXISTS user_role (</span></span><br><span class="line"><span class="string">      id INT PRIMARY KEY NOT NULL AUTO_INCREMENT COMMENT &#x27;(自增长)&#x27;,</span></span><br><span class="line"><span class="string">      user_id INT NOT NULL COMMENT &#x27;关联用户&#x27;,</span></span><br><span class="line"><span class="string">      role_id INT NOT NULL COMMENT &#x27;关联角色&#x27;,</span></span><br><span class="line"><span class="string">      KEY fk_user_role_role_info_1 ( role_id ),</span></span><br><span class="line"><span class="string">      KEY fk_user_role_user_info_1 ( user_id ),</span></span><br><span class="line"><span class="string">      CONSTRAINT fk_user_role_role_info_1 FOREIGN KEY ( role_id ) REFERENCES role_info ( id ) ON DELETE CASCADE ON UPDATE CASCADE,</span></span><br><span class="line"><span class="string">      CONSTRAINT fk_user_role_user_info_1 FOREIGN KEY ( user_id ) REFERENCES user_info ( id ) ON DELETE CASCADE ON UPDATE CASCADE</span></span><br><span class="line"><span class="string">    ) ENGINE = INNODB charset = utf8;`</span>,</span><br><span class="line">  rolePermission : <span class="string">`CREATE TABLE IF NOT EXISTS role_permission (</span></span><br><span class="line"><span class="string">      id INT PRIMARY KEY NOT NULL AUTO_INCREMENT COMMENT &#x27;(自增长)&#x27;,</span></span><br><span class="line"><span class="string">      role_id INT NOT NULL COMMENT &#x27;关联角色&#x27;,</span></span><br><span class="line"><span class="string">      permission_id INT NOT NULL COMMENT &#x27;关联权限&#x27;,</span></span><br><span class="line"><span class="string">      KEY fk_role_permission_role_info_1 ( role_id ),</span></span><br><span class="line"><span class="string">      KEY fk_role_permission_permission_info_1 ( permission_id ),</span></span><br><span class="line"><span class="string">      CONSTRAINT fk_role_permission_role_info_1 FOREIGN KEY ( role_id ) REFERENCES role_info ( id ) ON DELETE CASCADE ON UPDATE CASCADE,</span></span><br><span class="line"><span class="string">      CONSTRAINT fk_role_permission_permission_info_1 FOREIGN KEY ( permission_id ) REFERENCES permission_info ( id ) ON DELETE CASCADE ON UPDATE CASCADE</span></span><br><span class="line"><span class="string">    ) ENGINE = INNODB charset = utf8;`</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createTable = <span class="function">(<span class="params">sql</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> query(sql, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建表 ----创建一次之后可以注释不需要</span></span><br><span class="line">createTable(createTables.users);</span><br><span class="line">createTable(createTables.role);</span><br><span class="line">createTable(createTables.permission);</span><br><span class="line">createTable(createTables.userRole);</span><br><span class="line">createTable(createTables.rolePermission);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过名字查找用户</span></span><br><span class="line"><span class="keyword">const</span> findDataByName = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> _sql = <span class="string">`select * from user_info where user_name=&quot;<span class="subst">$&#123;name&#125;</span>&quot;;`</span>;</span><br><span class="line">  <span class="keyword">return</span> query(_sql);</span><br><span class="line">&#125;;</span><br><span class="line">findDataByName(<span class="string">&#x27;jack&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"><span class="comment">//其他方法相似</span></span><br></pre></td></tr></table></figure><p>在路由文件中 router 文件夹下–&gt;user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; controller, get, post, put &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../lib/decorator&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> userModel = <span class="built_in">require</span>(<span class="string">&#x27;../lib/mysql.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">@controller(<span class="string">&#x27;/api/v0/user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">userController</span> </span>&#123;</span><br><span class="line">  @get(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">ctx, next</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> userModel.findDataByName(<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="keyword">return</span> (ctx.body = &#123;</span><br><span class="line">      success : <span class="literal">false</span>,</span><br><span class="line">      data    : result</span><br><span class="line">      err     : <span class="string">&#x27;用户&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line"><span class="comment">//其他操作类型</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://segmentfault.com/a/1190000018535128#item-1-5" >koa2+vue+mysql 全栈开发记录<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa2 使用 es7 的装饰器 decorator</title>
      <link href="2020/02/23/koa2%E4%BD%BF%E7%94%A8es7%20%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8decorator/"/>
      <url>2020/02/23/koa2%E4%BD%BF%E7%94%A8es7%20%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8decorator/</url>
      
        <content type="html"><![CDATA[<p>目前 JavaScript 对 decorator 是不支持，但是可以用 babel  来编译.</p><a id="more"></a><h2 id="装饰器配置"><a href="#装饰器配置" class="headerlink" title="装饰器配置"></a>装饰器配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@babel/cli&quot;</span>: <span class="string">&quot;^7.8.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.8.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>: <span class="string">&quot;^7.8.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>: <span class="string">&quot;^7.8.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/register&quot;</span>: <span class="string">&quot;^7.8.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-preset-env&quot;</span>: <span class="string">&quot;^1.7.0&quot;</span> <span class="comment">//支持import 导入</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>babel 配置文件 .babelrc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123;</span><br><span class="line">      <span class="string">&quot;loose&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建一个 js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</span><br><span class="line">  @speak(<span class="string">&quot;Chinese&quot;</span>)</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;i can run !&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>target | 指装饰的对象 boy speak紧跟的class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>key |  修饰的方法  run</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;any&#125;</span> </span>descriptor |  特定的描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">language</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">    <span class="built_in">console</span>.log(descriptor);</span><br><span class="line"></span><br><span class="line">    target.language = language;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">luke.run();</span><br></pre></td></tr></table></figure><p>入口文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">require(&amp;#39;@babel/register&amp;#39;);</span><br><span class="line"><span class="comment">// 引入被执行的文件</span></span><br><span class="line">require(&amp;#39;./server/index.js&amp;#39;);</span><br></pre></td></tr></table></figure><h2 id="import-支持"><a href="#import-支持" class="headerlink" title="import 支持"></a>import 支持</h2><p>nodejs 仍未支持 import/export 语法，需要安装必要的 npm 包–babel，使用 babel 将 js 文件编译成 node.js 支持的 commonjs 格式的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-register babel-preset-env -D</span><br></pre></td></tr></table></figure><p>babel 配置文件 .babelrc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;transform-es2015-modules-commonjs&quot;</span></span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="1-入口文件"><a href="#1-入口文件" class="headerlink" title="### 1.入口文件"></a>### 1.入口文件</h3><p>编写开发环境 dev.js 和 生产环境的 production.js 的启动文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> dev.js</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;babel-register&quot;</span>);</span><br><span class="line">process.env.NODE_ENV = <span class="string">&quot;development&quot;</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./src&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> production.js</span><br><span class="line">process.env.NODE_ENV = <span class="string">&quot;production&quot;</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./dist&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-配置-package-json"><a href="#2-配置-package-json" class="headerlink" title="2.配置 package.json"></a>2.配置 package.json</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">   <span class="string">&quot;build&quot;</span>: <span class="string">&quot;babel src  --out-dir dist&quot;</span>,</span><br><span class="line">   <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;set NODE_ENV=development &amp;&amp;  supervisor  --watch src dev.js&quot;</span>,</span><br><span class="line">   <span class="string">&quot;start&quot;</span>: <span class="string">&quot;npm run build &amp;&amp; set NODE_ENV=production  &amp;&amp; supervisor --watch dist production.js&quot;</span>,</span><br><span class="line">   <span class="string">&quot;pm2&quot;</span>: <span class="string">&quot;pm2 start production.js --name &#x27;wx-node&#x27; --env  NODE_ENV=&#x27;production&#x27; --output ./logs/logs-out.log  --error ./logs/logs-error.log  --watch dist&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><ol><li><p>运行 npm run build : 是用 babel 直接将 src 目录编译在 dist 目录</p></li><li><p>运行 npm run dev ： 是设置环境变量为 development 并且监听 src 目录，启动 dev.js 运行，为开发环境</p></li><li><p>运行 npm run start : 是 运行第一个命令 npm run build 并且设置环境变量为 production  监听 dist 目录,启动 production.js 运行，为生产或者测试环境</p></li><li><p>运行 npm run pm2： 这是使用 pm2 来守护项目进程,并且设置环境变量和日志记</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://www.cnblogs.com/beyonds/p/11190359.html" >koa2 使用 es7 的装饰器 decorator - 天高任鸟飞吧 - 博客园<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的 CSS 小技巧</title>
      <link href="2020/02/02/%E5%B8%B8%E7%94%A8%E7%9A%84CSS%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>2020/02/02/%E5%B8%B8%E7%94%A8%E7%9A%84CSS%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="css-一行文本超出…"><a href="#css-一行文本超出…" class="headerlink" title="css 一行文本超出…"></a>css 一行文本超出…</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="IOS-手机容器滚动条滑动不流畅"><a href="#IOS-手机容器滚动条滑动不流畅" class="headerlink" title="IOS 手机容器滚动条滑动不流畅"></a>IOS 手机容器滚动条滑动不流畅</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: auto;</span><br><span class="line">-webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br></pre></td></tr></table></figure><h2 id="修改滚动条样式"><a href="#修改滚动条样式" class="headerlink" title="修改滚动条样式"></a>修改滚动条样式</h2><p>隐藏 div 元素的滚动条</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>::-webkit-scrollbar &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line">//======另一种==========</span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><p>这是一个 css 属性，我一般称之为 css 表达式。可以计算 css 的值。最有趣的是他可以计算不同单位的差值。很好用的一个功能，缺点是不容易阅读。接盘侠没办法一眼看出 20px 是啥。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">25%</span> - <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多行换行"><a href="#多行换行" class="headerlink" title="多行换行"></a>多行换行</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120811image-20201208112820957.png"                      alt="image-20201208112820957" style="zoom:67%;"                 ></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure><h2 id="消息小三角"><a href="#消息小三角" class="headerlink" title="消息小三角"></a>消息小三角</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208142457817.png"                      alt="image-20201208142457817" style="zoom:67%;"                 ></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">22px</span> <span class="number">22px</span> <span class="number">22px</span> <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent <span class="number">#fff</span> transparent transparent;</span><br><span class="line">  <span class="comment">/* 定位 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">38px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-flex-布局最后一行列表左对齐的-N-种方法"><a href="#CSS-flex-布局最后一行列表左对齐的-N-种方法" class="headerlink" title="CSS flex 布局最后一行列表左对齐的 N 种方法"></a>CSS flex 布局最后一行列表左对齐的 N 种方法</h2><p>我们布局经常会遇到这样的情况</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208142529643.png"                      alt="image-20201208142529643" style="zoom:50%;"                 ></p><p>方法一：模拟 space-between 和间隙</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">24%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>n)) &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="built_in">calc</span>(<span class="number">4%</span> / <span class="number">3</span>); //间隙隔开</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208142556100.png"                      alt="image-20201208142556100" style="zoom:50%;"                 ></p><p><strong>首先最后一行需要左对齐的布局更适合使用 CSS grid 布局实现</strong>，但是，repeat()函数兼容性有些要求，IE 浏览器并不支持。如果项目需要兼容 IE，则此方法需要斟酌。</p><p>方法二：根据个数最后一个元素动态 margin</p><p>例如，假设每行 4 个元素，结果最后一行只有 3 个元素，则最后一个元素的 margin-right 大小是“列表宽度+间隙大小”的话，那最后 3 个元素也是可以完美左对齐的。</p><ul><li><code>.list:last-child:nth-child(4n - 1)</code>说明最后一行，要么 3 个元素，要么 7 个元素……</li><li><code>.list:last-child:nth-child(4n - 2)</code>说明最后一行，要么 2 个元素，要么 6 个元素……</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 两端对齐 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">24%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 如果最后一行是3个元素 */</span></span><br><span class="line"><span class="selector-class">.list</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>n - <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="built_in">calc</span>(<span class="number">24%</span> + <span class="number">4%</span> / <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 如果最后一行是2个元素 */</span></span><br><span class="line"><span class="selector-class">.list</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>n - <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="built_in">calc</span>(<span class="number">48%</span> + <span class="number">8%</span> / <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208142648370.png"                      alt="image-20201208142648370" style="zoom:50%;"                 ></p><h2 id="flex-项中子元素文本截断-text-overflow-ellipsis-失效这个小-“bug”"><a href="#flex-项中子元素文本截断-text-overflow-ellipsis-失效这个小-“bug”" class="headerlink" title="flex 项中子元素文本截断 text-overflow:ellipsis 失效这个小 “bug”"></a>flex 项中子元素文本截断 text-overflow:ellipsis 失效这个小 “bug”</h2><p>栗子 🌰</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208142712205.png"                      alt="image-20201208142712205" style="zoom:70%;"                 ></p><p>我们不能为 .item-con 元素设置个宽度，这样就无法适应不同屏幕尺寸的终端设备。</p><p>解决方案：在 flex 项中设置 min-width: 0;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex</span> <span class="selector-class">.col1</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex</span> <span class="selector-class">.col2</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">0</span>; <span class="comment">/*解决方案*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex</span> <span class="selector-class">.col2</span> <span class="selector-class">.item-con</span> &#123;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208142744995.png"                      alt="image-20201208142744995" style="zoom:70%;"                 ></p><h2 id="css-竖向子元素上下平均分配空间"><a href="#css-竖向子元素上下平均分配空间" class="headerlink" title="css 竖向子元素上下平均分配空间"></a>css 竖向子元素上下平均分配空间</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208142826701.png"                      alt="image-20201208142826701" style="zoom:70%;"                 ></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios 源码解析</title>
      <link href="2020/01/22/Axios%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>2020/01/22/Axios%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="首先对-axios-提出几个问题"><a href="#首先对-axios-提出几个问题" class="headerlink" title="首先对 axios 提出几个问题"></a>首先对 axios 提出几个问题</h2><ol><li>为什么 <code>axios</code> 既可以当函数调用，也可以当对象使用，比如<code>axios(&#123;url,method&#125;)</code>、<code>axios.get</code>。</li><li>简述 axios 调用流程。</li><li>有用过拦截器吗？原理是怎样的？</li><li>有使用 axios 的取消功能吗？是怎么实现的？</li><li>为什么支持浏览器中发送请求也支持 node 发送请求？</li></ol><p>带着问题我们进入源码去看看吧</p><a id="more"></a><h2 id="axios-简介"><a href="#axios-简介" class="headerlink" title="axios 简介"></a>axios 简介</h2><p><code>axios</code> 是目前最常用的 <code>HTTP</code> 请求库，即可以用于前端浏览器也可以在后端 <code>node.js</code> 中使用，在 <code>github</code> 上的 <code>star</code> 数已经有 <code>6w+</code> 了，它也是 <code>vue.js</code> 官方极力推荐的，前端（全栈）开发必不可少的库，它的主要特性包括</p><ul><li>基于 <code>Promise</code></li><li>支持 前端浏览器环境 和 后端 <code>node.js</code> 环境</li><li>可添加拦截器转换请求和响应数据</li><li>支持请求取消</li><li>自动转换 <code>JSON</code> 数据</li><li>客户端支持防范 <code>XSRF</code></li><li>支持各主流浏览器以及 <code>IE8+</code></li></ul><h2 id="axios-返回信息"><a href="#axios-返回信息" class="headerlink" title="axios 返回信息"></a>axios 返回信息</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200121123122.png"                      alt=""                ></p><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><ul><li>XMLHttpRequest</li><li>Promise 异步编程</li><li>工具函数库：bind、extend、deepCopy、deepMerge……</li><li>拦截器：Interceptor</li><li>拦截器管理：InterceptorManager</li><li>适配器：Adaptor</li><li>工厂函数：createInstance</li></ul><h2 id="为什么-axios-支持对象又支持函数"><a href="#为什么-axios-支持对象又支持函数" class="headerlink" title="为什么 axios 支持对象又支持函数"></a>为什么 axios 支持对象又支持函数</h2><blockquote><p>axios 本质是函数，赋值了一些别名方法，比如 get、post 方法，可被调用，最终调用的还是 Axios.prototype.request 函数。</p></blockquote><h3 id="axios-与-Axios-的关系"><a href="#axios-与-Axios-的关系" class="headerlink" title="axios 与 Axios 的关系"></a>axios 与 Axios 的关系</h3><ol><li>从功能说 axios 是 Axios 的实例 (拥有功能,有属性)</li><li>从语法说 axios 不是 Axios 的实例 (是个函数)</li><li>axios 是 Axios.prototype.request 函数 bind()返回的函数</li><li>axios 作为对象有 Axios 原型上的所有方法.有 Axios 对象上所有属性</li></ol><h3 id="instance-与-axios-的区别"><a href="#instance-与-axios-的区别" class="headerlink" title="instance 与 axios 的区别?"></a>instance 与 axios 的区别?</h3><p>相同:</p><ul><li>都是一个能发任意请求的函数:request</li><li>都有发特定请求的方法:get post put delete</li><li>都有默认配置参数与拦截器属性</li></ul><p>不同:</p><ul><li>默认配置可能不一样</li><li>没有 create cancelToken all 方法</li></ul><h3 id="利用-工厂函数包装"><a href="#利用-工厂函数包装" class="headerlink" title="利用 工厂函数包装"></a>利用 工厂函数包装</h3><p>通过工厂函数对实例化对象过程进行包装</p><ul><li>request 方法处理</li><li>实例挂载<ul><li>this 的处理</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params">defaultConfig</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  创建Axios的实例</span></span><br><span class="line"><span class="comment">      原型对象上有一些用来发请求的方法: get()/post()/put()/delete()/request()</span></span><br><span class="line"><span class="comment">      自身上有2个重要属性: defaults/interceptors</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">new</span> Axios(defaultConfig);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// axios和axios.create()对应的就是request函数</span></span><br><span class="line">  <span class="comment">// 下面这句话相当于 ===&gt; Axios.prototype.request.bind(context)</span></span><br><span class="line">  <span class="keyword">var</span> instance = bind(Axios.prototype.request, context);</span><br><span class="line">   <span class="comment">// 返回新函数,新函数内部调用request,里面的this 指向 context 也就是Axios的实例</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将Axios原型对象上的方法拷贝到instance上: request()/get()/post()/put()/delete()</span></span><br><span class="line">  <span class="comment">//===&gt; 就可以使用axios.get()</span></span><br><span class="line">  <span class="comment">//===&gt; request() === axios.request(&#123;&#125;) === axios(&#123;&#125;)</span></span><br><span class="line">  utils.extend(instance, Axios.prototype, context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将Axios实例对象上的属性拷贝到instance上: defaults和interceptors属性</span></span><br><span class="line">  utils.extend(instance, context);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> axios = createInstance(defaults);</span><br><span class="line">...</span><br><span class="line"><span class="comment">//源码中导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = axios;</span><br></pre></td></tr></table></figure><h4 id="Axios-prototype-request-是什么呢"><a href="#Axios-prototype-request-是什么呢" class="headerlink" title="Axios.prototype.request 是什么呢?"></a>Axios.prototype.request 是什么呢?</h4><p>是个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于发请求的函数</span></span><br><span class="line"><span class="comment">//我们使用的axios就是此函数bind()返回的函数</span></span><br><span class="line">Axios.prototype.request = <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*eslint no-param-reassign:0*/</span></span><br><span class="line">  <span class="comment">// Allow for axios(&#x27;example/url&#x27;[, config]) a la fetch API</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> config === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    config = <span class="built_in">arguments</span>[<span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">    config.url = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config = config || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">  <span class="comment">// 给原型对象添加 四个方法</span></span><br><span class="line">    utils.forEach([<span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;options&#x27;</span>], <span class="function"><span class="keyword">function</span> <span class="title">forEachMethodNoData</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">      <span class="comment">/*eslint func-names:0*/</span></span><br><span class="line">      Axios.prototype[method] = <span class="function"><span class="keyword">function</span>(<span class="params">url, config</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.request(utils.merge(config || &#123;&#125;, &#123;</span><br><span class="line">          method: method,</span><br><span class="line">          url: url</span><br><span class="line">        &#125;));</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200122102604.png"                      alt=""                ></p><h2 id="axios-调用流程"><a href="#axios-调用流程" class="headerlink" title="axios 调用流程"></a>axios 调用流程</h2><blockquote><p>实际是调用的 Axios.prototype.request 方法，最终返回的是 promise 链式调用，实际请求是在 dispatchRequest 中派发的。</p></blockquote><p>因为 <code>axios</code> 是对异步任务的封装，所以必不可少的，我们需要使用 <code>Promise</code> 来进行包装</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request(config) 将请求拦截器/dispatchRequest()/响应拦截器 通过Promise链串起来,返回Promise dispatchRequest(config)</span><br><span class="line">转换请求数据 ===&gt; 调用xhrAdapter()发请求 ===&gt; 请求返回后转化响应数据,返回Promise xhrAdapter(config)</span><br><span class="line">创建XHR对象,根据config进行相应设置,发送特定请求,并接受响应数据,返回Promise request(config) ==&gt; dispatchRequest(config)</span><br><span class="line">==&gt; xhrAdapter(config)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200122164443.png"                      alt=""                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200122134727.png"                      alt=""                ></p><h2 id="拦截器-Interceptor-原理"><a href="#拦截器-Interceptor-原理" class="headerlink" title="拦截器 - Interceptor 原理"></a>拦截器 - Interceptor 原理</h2><blockquote><p>用 axios.interceptors.request.use 添加请求成功和失败拦截器函数，用 axios.interceptors.response.use 添加响应成功和失败拦截器函数。在 Axios.prototype.request 函数组成 promise 链式调用时，Interceptors.protype.forEach 遍历请求和响应拦截器添加到真正发送请求 dispatchRequest 的两端，从而做到请求前拦截和响应后拦截。拦截器也支持用 Interceptors.protype.eject 方法移除。</p></blockquote><p>给实例对象添加 <code>request</code> 和 <code>response</code> 拦截器</p><p>构造函数 Axios</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Axios</span>(<span class="params">instanceConfig</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 默认参数</span></span><br><span class="line">  <span class="built_in">this</span>.defaults = instanceConfig;</span><br><span class="line">  <span class="comment">// 拦截器 请求和响应拦截器</span></span><br><span class="line">  <span class="built_in">this</span>.interceptors = &#123;</span><br><span class="line">    request: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">    response: <span class="keyword">new</span> InterceptorManager()</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h3><p>拦截器对象，用来注册和管理拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求前拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求后拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>构造函数中 InterceptorManager 的实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorManager</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers = []; <span class="comment">//提供数组</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类似与回调函数1  回调函数2</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>resolvedHandler  回调函数1</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>rejectedHandler  回调函数2</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">use</span>(<span class="params">resolvedHandler, rejectedHandler</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers.push(&#123;</span><br><span class="line">      resolvedHandler,</span><br><span class="line">      rejectedHandler</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="InterceptorManager-prototype-forEach-遍历"><a href="#InterceptorManager-prototype-forEach-遍历" class="headerlink" title="InterceptorManager.prototype.forEach 遍历"></a>InterceptorManager.prototype.forEach 遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  创建用于保存请求/响应拦截函数的数组</span></span><br><span class="line"><span class="comment">  数组的中间放发送请求的函数</span></span><br><span class="line"><span class="comment">  数组的左边放请求拦截器函数(成功/失败)</span></span><br><span class="line"><span class="comment">  数组的右边放响应拦截器函数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后添加的请求拦截器保存在数组的前面</span></span><br><span class="line"><span class="built_in">this</span>.interceptors.request.forEach(<span class="function"><span class="keyword">function</span> <span class="title">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">  chain.unshift(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 后添加的响应拦截器保存在数组的后面</span></span><br><span class="line"><span class="built_in">this</span>.interceptors.response.forEach(<span class="function"><span class="keyword">function</span> <span class="title">pushResponseInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">  chain.push(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过promise的then()串连起所有的请求拦截器/请求方法/响应拦截器</span></span><br><span class="line"><span class="keyword">while</span> (chain.length) &#123;</span><br><span class="line">  promise = promise.then(chain.shift(), chain.shift());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结构<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200122094434.png"                      alt=""                ></p><h3 id="异步任务链"><a href="#异步任务链" class="headerlink" title="异步任务链"></a>异步任务链</h3><p>把请求包装在 <code>Promise</code> 任务链中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(configs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.interceptors.request.handlers.forEach(<span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">  promise = promise.then(handler.resolvedHandler, handler.rejectedHandler);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise = promise.then(<span class="built_in">this</span>.dispatch, <span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.interceptors.response.handlers.forEach(<span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">  promise = promise.then(handler.resolvedHandler, handler.rejectedHandler);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>请求和响应的拦截器可以写 Promise。</li><li>如果设置了多个<strong>请求</strong>响应器，<strong>后设置的先执行</strong>。</li><li>如果设置了多个<strong>响应</strong>拦截器，<strong>先设置的先执行</strong>。</li></ol><h2 id="axios-如何取消请求"><a href="#axios-如何取消请求" class="headerlink" title="axios 如何取消请求?"></a>axios 如何取消请求?</h2><blockquote><p>通过传递 config 配置 cancelToken 的形式，来取消的。判断有传 cancelToken，在 promise 链式调用的 dispatchRequest 抛出错误，在 adapter 中 request.abort()取消请求，使 promise 走向 rejected，被用户捕获取消信息。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cancel; <span class="comment">// 用于保存取消请求的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProducts1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  axios(&#123;</span><br><span class="line">    url: <span class="string">&quot;http://localhost:4000/products1&quot;</span>,</span><br><span class="line">    cancelToken: <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// c是用于取消当前请求的函数</span></span><br><span class="line">      <span class="comment">// 保存取消函数, 用于之后可能需要取消当前请求</span></span><br><span class="line">      cancel = c;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).then(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">      cancel = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请求1成功了&quot;</span>, response.data);</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">      cancel = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请求1失败了&quot;</span>, error.message, error);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="new-axios-CancelToken-做了什么"><a href="#new-axios-CancelToken-做了什么" class="headerlink" title="new axios.CancelToken 做了什么"></a>new axios.CancelToken 做了什么</h3><p><strong>当配置了<code>cancelToken</code>对象时</strong></p><ol><li>创建了一个用于将来取消请求的 cacelPromise</li><li>并定义了一个用于取消请求的 cancel 函数</li><li>将 cancel 函数传递出来</li></ol><p><strong>取消请求</strong></p><ol><li>执行 cancel 函数,传入错误的 message</li><li>内部会让 cancelPromise 变成成功,且成功的值为一个 Cancel 对象</li><li>在 cancelPromise 的成功回调中,中断请求,并让发请求的 promise 失败,失败的 reason 为 Cancel 对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CancelToken</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> executor !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;executor must be a function.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 为将来取消请求准备一个promise对象, 并保存resolve函数</span></span><br><span class="line">  <span class="keyword">var</span> resolvePromise;</span><br><span class="line">  <span class="built_in">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">promiseExecutor</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    resolvePromise = resolve;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保存当前token对象</span></span><br><span class="line">  <span class="keyword">var</span> token = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 立即执行接收的执行器函数, 并传入用于取消请求的cancel函数</span></span><br><span class="line">  executor(<span class="function"><span class="keyword">function</span> <span class="title">cancel</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果token中有reason了, 说明请求已取消</span></span><br><span class="line">    <span class="keyword">if</span> (token.reason) &#123;</span><br><span class="line">      <span class="comment">// Cancellation has already been requested</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将token的reason指定为一个Cancel对象</span></span><br><span class="line">    token.reason = <span class="keyword">new</span> Cancel(message);</span><br><span class="line">    <span class="comment">// 将取消请求的promise指定为成功, 值为reason</span></span><br><span class="line">    resolvePromise(token.reason);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cancel 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cancel</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cancel.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Cancel&quot;</span> + (<span class="built_in">this</span>.message ? <span class="string">&quot;: &quot;</span> + <span class="built_in">this</span>.message : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于标识是一个取消的error</span></span><br><span class="line">Cancel.prototype.__CANCEL__ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Cancel;</span><br></pre></td></tr></table></figure><p>在 xhr.js 中调用 CancelToken 函数中的 promise 的 then</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 如果配置了cancelToken</span><br><span class="line">    <span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">      <span class="regexp">//</span> 指定用于中断请求的回调函数</span><br><span class="line">      config.cancelToken.promise.then(<span class="keyword">function</span> onCanceled(cancel) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="regexp">//</span> 中断请求</span><br><span class="line">        request.abort();</span><br><span class="line">        <span class="regexp">//</span> 让请求的promise失败</span><br><span class="line">        reject(cancel);</span><br><span class="line">        <span class="regexp">//</span> Clean up request</span><br><span class="line">        request = null;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中 cancel 对象哪里来的呢?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">token.reason = <span class="keyword">new</span> Cancel(message);</span><br><span class="line">resolvePromise(token.reason);</span><br></pre></td></tr></table></figure><h2 id="适配器-支持浏览器也支持-node-环境-Adapter"><a href="#适配器-支持浏览器也支持-node-环境-Adapter" class="headerlink" title="适配器(支持浏览器也支持 node 环境) - Adapter"></a>适配器(支持浏览器也支持 node 环境) - Adapter</h2><blockquote><p>axios.defaults.adapter 默认配置中根据环境判断是浏览器还是 node 环境，使用对应的适配器。适配器支持自定义。</p></blockquote><ul><li>browser : XMLHttpRequest / Fetch</li><li>node : http / https</li></ul><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p>请求数据转换 : <code>transformRequest</code></p><p>响应数据转换 : <code>transformResponse</code></p><p><code>axios.defaults.transformResponse</code> 数组中默认就有一个函数，所以使用 concat 链接自定义的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  baseURL: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  url: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  method: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  transformResponse: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//配置项对数据处理</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">var</span> ISO_8601 = <span class="regexp">/(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)T(\d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;)Z/</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> d.getMonth() + <span class="number">1</span> + <span class="string">&quot;/&quot;</span> + d.getDate() + <span class="string">&quot;/&quot;</span> + d.getFullYear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展配置  对响应数据格式化转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">data</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;any&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">axios</span><br><span class="line">  .get(<span class="string">&quot;https://api.github.com/users/mzabriskie&quot;</span>, &#123;</span><br><span class="line">    transformResponse: axios.defaults.transformResponse.concat(<span class="function"><span class="keyword">function</span>(<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ISO_8601.test(data[k])) &#123;</span><br><span class="line">          data[k] = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(data[k]));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;created&quot;</span>).innerHTML = formatDate(res.data.created_at);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="几个好用的工具方法"><a href="#几个好用的工具方法" class="headerlink" title="几个好用的工具方法"></a>几个好用的工具方法</h2><h3 id="deepCopy-函数"><a href="#deepCopy-函数" class="headerlink" title="- deepCopy 函数"></a>- deepCopy 函数</h3><p>基于上面说的，我们需要封装一个方法，用于深度克隆对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deepCopy = <span class="function"><span class="params">source</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> target = <span class="built_in">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">    <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> source[key] === <span class="string">&quot;object&quot;</span> &amp;&amp; source !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        target[key] = deepCopy(source[key]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target[key] = source[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="configMerge-函数"><a href="#configMerge-函数" class="headerlink" title="- configMerge 函数"></a>- configMerge 函数</h3><p>对于配置合并，并不能简单的进行处理，需要针对不同的配置进行不同的处理，有的是覆盖，有的合并</p><ul><li><code>baseURL</code>、<code>url</code>、 <code>method</code> 等是直接覆盖的</li><li><code>headers</code> 是需要进行合并处理的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mergeConfig = <span class="function">(<span class="params">obj1, obj2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> target = deepCopy(obj1);</span><br><span class="line">  <span class="keyword">let</span> source = deepCopy(obj2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(source).reduce(<span class="function">(<span class="params">t, k</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">&quot;url&quot;</span>, <span class="string">&quot;method&quot;</span>, <span class="string">&quot;baseURL&quot;</span>].includes(k)) &#123;</span><br><span class="line">      t[k] = source[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">&quot;headers&quot;</span>].includes(k)) &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;target&#x27;, target.headers);</span></span><br><span class="line">      <span class="comment">// console.log(&#x27;source&#x27;, source.headers);</span></span><br><span class="line">      t[k] = <span class="built_in">Object</span>.assign(target[k], source[k]);</span><br><span class="line">      <span class="comment">// console.log(&#x27;t&#x27;, t);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最后看下整个流程图"><a href="#最后看下整个流程图" class="headerlink" title="最后看下整个流程图"></a>最后看下整个流程图</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200122112713.png"                      alt=""                ></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://juejin.im/post/5df349b5518825123751ba66#heading-15" >学习 axios 源码整体架构…<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios封装</title>
      <link href="2020/01/22/Axios%E5%B0%81%E8%A3%85/"/>
      <url>2020/01/22/Axios%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="2020-11-14更新"><a href="#2020-11-14更新" class="headerlink" title="2020.11.14更新"></a>2020.11.14更新</h2><p>axios的封装根据需求的不同而不同。这里非常感谢评论里一些很中肯的建议，我也对此进行了思考和针对不同需求的改善。主要有以下改变：</p><p><strong>1.优化axios封装，去掉之前的get和post</strong></p><p><strong>2.断网情况处理</strong></p><p><strong>3.更加模块化的api管理</strong></p><p><strong>4.接口域名有多个的情况</strong></p><p><strong>5.api挂载到vue.prototype上省去引入的步骤</strong></p><a id="more"></a><p>base.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> base = &#123;    </span><br><span class="line">    sq: <span class="string">&#x27;https://alibaba.com/api/v1&#x27;</span>,    </span><br><span class="line">    bd: <span class="string">&#x27;http://alibaba.com/api/test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> base;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>articleApi.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">&#x27;./base&#x27;</span>; <span class="comment">// 导入接口域名列表</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./http&#x27;</span>; <span class="comment">// 导入http中创建的axios实例</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>; <span class="comment">// 根据需求是否导入qs模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> article = &#123;    </span><br><span class="line">    <span class="comment">// 新闻列表    </span></span><br><span class="line">    articleList () &#123;        </span><br><span class="line">        <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">$&#123;base.sq&#125;</span>/topics`</span>);    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="comment">// 新闻详情,演示    </span></span><br><span class="line">    articleDetail (id, params) &#123;        </span><br><span class="line">        <span class="keyword">return</span> axios.get(<span class="string">`<span class="subst">$&#123;base.sq&#125;</span>/topic/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;            </span><br><span class="line">            params: params        </span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// post提交    </span></span><br><span class="line">    login (params) &#123;        </span><br><span class="line">        <span class="keyword">return</span> axios.post(<span class="string">`<span class="subst">$&#123;base.sq&#125;</span>/accesstoken`</span>, qs.stringify(params));    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他接口…………</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> article;</span><br></pre></td></tr></table></figure><p>http.js中axios封装的优化，先直接贴代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * axios封装</span></span><br><span class="line"><span class="comment"> * 请求拦截、响应拦截、错误统一处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store/index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 提示函数 </span></span><br><span class="line"><span class="comment"> * 禁止点击蒙层、显示一秒后关闭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> tip = <span class="function"><span class="params">msg</span> =&gt;</span> &#123;    </span><br><span class="line">    Toast(&#123;        </span><br><span class="line">        message: msg,        </span><br><span class="line">        duration: <span class="number">1000</span>,        </span><br><span class="line">        forbidClick: <span class="literal">true</span>    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 跳转登录页</span></span><br><span class="line"><span class="comment"> * 携带当前页面路由，以期在登录页面完成登录后返回当前页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> toLogin = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    router.replace(&#123;</span><br><span class="line">        path: <span class="string">&#x27;/login&#x27;</span>,        </span><br><span class="line">        query: &#123;</span><br><span class="line">            redirect: router.currentRoute.fullPath</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 请求失败后的错误统一处理 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>status 请求失败的状态码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> errorHandle = <span class="function">(<span class="params">status, other</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 状态码判断</span></span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="comment">// 401: 未登录状态，跳转登录页</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">            toLogin();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 403 token过期</span></span><br><span class="line">        <span class="comment">// 清除token并跳转登录页</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            tip(<span class="string">&#x27;登录过期，请重新登录&#x27;</span>);</span><br><span class="line">            <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">            store.commit(<span class="string">&#x27;loginSuccess&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                toLogin();</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 404请求不存在</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            tip(<span class="string">&#x27;请求的资源不存在&#x27;</span>); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(other);   </span><br><span class="line">        &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create(&#123;    <span class="attr">timeout</span>: <span class="number">1000</span> * <span class="number">12</span>&#125;);</span><br><span class="line"><span class="comment">// 设置post请求头</span></span><br><span class="line">instance.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 请求拦截器 </span></span><br><span class="line"><span class="comment"> * 每次请求前，如果存在token则在请求头中携带token </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">instance.interceptors.request.use(    </span><br><span class="line">    config =&gt; &#123;        </span><br><span class="line">        <span class="comment">// 登录流程控制中，根据本地是否存在token判断用户的登录情况        </span></span><br><span class="line">        <span class="comment">// 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token        </span></span><br><span class="line">        <span class="comment">// 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码        </span></span><br><span class="line">        <span class="comment">// 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。        </span></span><br><span class="line">        <span class="keyword">const</span> token = store.state.token;        </span><br><span class="line">        token &amp;&amp; (config.headers.Authorization = token);        </span><br><span class="line">        <span class="keyword">return</span> config;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    error =&gt; <span class="built_in">Promise</span>.error(error))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.interceptors.response.use(    </span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    res =&gt; res.status === <span class="number">200</span> ? <span class="built_in">Promise</span>.resolve(res) : <span class="built_in">Promise</span>.reject(res),    </span><br><span class="line">    <span class="comment">// 请求失败</span></span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; response &#125; = error;</span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">            <span class="comment">// 请求已发出，但是不在2xx的范围 </span></span><br><span class="line">            errorHandle(response.status, response.data.message);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 处理断网的情况</span></span><br><span class="line">            <span class="comment">// eg:请求超时或断网时，更新state的network状态</span></span><br><span class="line">            <span class="comment">// network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏</span></span><br><span class="line">            <span class="comment">// 关于断网组件中的刷新重新获取数据，会在断网组件中说明</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">window</span>.navigator.onLine) &#123;</span><br><span class="line">               store.commit(<span class="string">&#x27;changeNetwork&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure><p>Index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> article <span class="keyword">from</span> <span class="string">&#x27;./articleApi&#x27;</span>;</span><br><span class="line"><span class="comment">// 其他模块的接口……</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;    </span><br><span class="line">    article,</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $api <span class="keyword">from</span> <span class="string">&#x27;./utils/http&#x27;</span></span><br><span class="line">Vue.prototype.$api = $api</span><br></pre></td></tr></table></figure><p>项目中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line"><span class="function"><span class="title">onRefresh</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.$api.article.articleDetail(<span class="string">&#x27;id&#x27;</span>, &#123;        </span><br><span class="line">        api: <span class="number">123</span>      </span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 执行某些操作   </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;res :&gt;&gt; &#x27;</span>, res);   </span><br><span class="line">    &#125;)  </span><br><span class="line">  <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   this.isLoading = false;</span></span><br><span class="line">  <span class="comment">//   this.count++;</span></span><br><span class="line">  <span class="comment">// &#125;, 1000);</span></span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="axios取消接口请求"><a href="#axios取消接口请求" class="headerlink" title="axios取消接口请求"></a>axios取消接口请求</h2><p><strong>1.应用场景，为什么要取消请求</strong><br>我给你这样一个场景你变能理解为什么需要取消请求这种骚操作了（非常常见的场景，这里是用vue写的）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/image-202011291005412982020112915.png"                      alt="image-20201129100541298" style="zoom: 50%;"                 ></p><p>1.当我点击动态栏的时候，<code>通过ajax获取当参数</code>为2的时候的数据，然后在将原本参数为1的tab页的数据清空（默认进来展示的tab1），</p><p>2.渲染tab2的页面，我们知道ajax是异步操作的，获取的数据过多或者用户网速较差的时候，这个获取数据的ajax操作需要一定的时间来将数据拿到再渲染到页面上</p><p>3.在这个时间段内，如果我再次点击tab3也就是“系统公告”的时候，代码又将id=3的参数传给后台，去获取tab3的数据，而id=2的时候的接口数据或许还在从服务器回到前台的路上</p><p>4.就想从tab1到tab2一样的我们去清空数组中盛放的tab2的数据，清空的是什么？tab2的数据还在返回来的路上还没被push进数组呢！所以这里我们清空了一次空数组！！！</p><p>5.此时我们页面是处在tab3了，里面的数据因为是被push进去我们本地用来盛放数据的数组的，所以，此时的数据会是id=2的数据 &amp;&amp; id=3的数据，这样，问题就暴露出来了！</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><blockquote><p>现在我得到的数据多余我要的 &gt; 多出来的数据是因为上一个tab页请求延迟造成的 &gt; 那我就在当前页请求数据的时候掐断上一个页面还没完成的请求就好了</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/2020-11-29%2011.52.36-tuya2020112915.gif"                      alt="2020-11-29 11.52.36-tuya"                ></p><h3 id="在axios中取消接口请求操作"><a href="#在axios中取消接口请求操作" class="headerlink" title="在axios中取消接口请求操作"></a>在axios中取消接口请求操作</h3><p>好了，接下来才是我们的主题，Axios官方提供了一个取消接口请求的方法，但是怎么用这个方法官网写的很简略（不知道是不是我没找全的问题），反正官网的axios取消接口请求累的半死没看懂，后来是扒了很多大佬的博客，才自己理解出来的<br> Axios 提供了一个 CancelToken的函数，这是一个构造函数，该函数的作用就是用来取消接口请求的，至于怎么用，看代码吧，我在代码中写了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page&quot;</span> id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;getMsg&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;get-msg&quot;</span>&gt;获取数据&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;cancelGetMsg&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cancel&quot;</span>&gt;取消获取&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;item in items&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span><br><span class="line">      items: [],</span><br><span class="line">      cancel: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getMsg () &#123;</span><br><span class="line">        <span class="keyword">let</span> CancelToken = axios.CancelToken</span><br><span class="line">        <span class="keyword">let</span> self = <span class="built_in">this</span></span><br><span class="line">        axios.get(<span class="string">&#x27;http://jsonplaceholder.typicode.com/comments&#x27;</span>, &#123;</span><br><span class="line">          cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">            self.cancel = c</span><br><span class="line">            <span class="built_in">console</span>.log(c)</span><br><span class="line">            <span class="comment">// 这个参数 c 就是CancelToken构造函数里面自带的取消请求的函数，这里把该函数当参数用</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.items = res.data</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//手速够快就不用写这个定时器了，点击取消获取就可以看到效果了</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">//只要我们去调用了这个cancel()方法，没有完成请求的接口便会停止请求</span></span><br><span class="line">          self.cancel()</span><br><span class="line">        &#125;, <span class="number">100</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//cancelGetMsg 方法跟上面的setTimeout函数是一样的效果，因为手速不够快，哦不，是因为网速太快，导致我来不及点取消获取按钮，数据就获取成功了</span></span><br><span class="line">      cancelGetMsg () &#123;</span><br><span class="line">        <span class="comment">// 在这里去判断你的id 1 2 3，你默认是展示的tab1，点击的时候不管你上一个请求有没有执行完都去调用这个cancel()，</span></span><br><span class="line">        <span class="built_in">this</span>.cancel()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="重复点击问题"><a href="#重复点击问题" class="headerlink" title="重复点击问题"></a><strong>重复点击问题</strong></h3><p>那我们经常开发的时候会遇到一个重复点击的问题，短时间内多次点击同一个按钮发送请求会加重服务器的负担，消耗浏览器的性能，多以绝大多数的时候我们需要做一个取消重复点击的操作<br> 在vue开发中，这个方法一样完美解决这一问题，通常我们会封装一遍axios，这里我们便可以将此功能封装到拦截器里面去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  axios.defaults.timeout = <span class="number">5000</span>;</span><br><span class="line">  axios.defaults.baseURL =<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pending = []; <span class="comment">//声明一个数组用于存储每个ajax请求的取消函数和ajax标识</span></span><br><span class="line">  <span class="keyword">let</span> cancelToken = axios.CancelToken;</span><br><span class="line">  <span class="keyword">let</span> removePending = <span class="function">(<span class="params">ever</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> p <span class="keyword">in</span> pending)&#123;</span><br><span class="line">          <span class="keyword">if</span>(pending[p].u === ever.url + <span class="string">&#x27;&amp;&#x27;</span> + ever.method) &#123; <span class="comment">//当当前请求在数组中存在时执行函数体</span></span><br><span class="line">              pending[p].f(); <span class="comment">//执行取消操作</span></span><br><span class="line">              pending.splice(p, <span class="number">1</span>); <span class="comment">//把这条记录从数组中移除</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//http request 拦截器</span></span><br><span class="line">  axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    config.data = <span class="built_in">JSON</span>.stringify(config.data);</span><br><span class="line">    config.headers = &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ------------------------------------------------------------------------------------</span></span><br><span class="line">    removePending(config); <span class="comment">//在一个ajax发送前执行一下取消操作</span></span><br><span class="line">    config.cancelToken = <span class="keyword">new</span> cancelToken(<span class="function">(<span class="params">c</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="comment">// 这里的ajax标识我是用请求地址&amp;请求方式拼接的字符串，当然你可以选择其他的一些方式</span></span><br><span class="line">       pending.push(&#123; <span class="attr">u</span>: config.url + <span class="string">&#x27;&amp;&#x27;</span> + config.method, <span class="attr">f</span>: c &#125;);  </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// -----------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//http response 拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// ------------------------------------------------------------------------------------------</span></span><br><span class="line">    removePending(res.config);  <span class="comment">//在一个ajax响应后再执行一下取消操作，把已经完成的请求从pending中移除</span></span><br><span class="line">    <span class="comment">// -------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span>(response.data.errCode ==<span class="number">2</span>)&#123;</span><br><span class="line">      router.push(&#123;</span><br><span class="line">        path:<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        querry:&#123;<span class="attr">redirect</span>:router.currentRoute.fullPath&#125;<span class="comment">//从哪个页面跳转</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>这是我自己项目用来封装axios的代码，里面加入了取消重复点击事件的方法（灵感来源于 大田角<a class="link"   href="https://www.jianshu.com/p/4445595488e2），以后写项目一劳永逸啦，妈妈再也不用担心我的代码重复请求的问题啦！！" >https://www.jianshu.com/p/4445595488e2），以后写项目一劳永逸啦，妈妈再也不用担心我的代码重复请求的问题啦！！<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>完整的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * axios封装</span></span><br><span class="line"><span class="comment"> * 请求拦截、响应拦截、错误统一处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;../../router/index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../../store/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提示函数</span></span><br><span class="line"><span class="comment"> * 禁止点击蒙层、显示一秒后关闭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> tip = <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  Toast(&#123;</span><br><span class="line">    message: msg,</span><br><span class="line">    duration: <span class="number">1000</span>,</span><br><span class="line">    forbidClick: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转登录页</span></span><br><span class="line"><span class="comment"> * 携带当前页面路由，以期在登录页面完成登录后返回当前页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> toLogin = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  router.replace(&#123;</span><br><span class="line">    path: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    query: &#123;</span><br><span class="line">      redirect: router.currentRoute.fullPath,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求失败后的错误统一处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>status 请求失败的状态码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> errorHandle = <span class="function">(<span class="params">status, other</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 状态码判断</span></span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="comment">// 401: 未登录状态，跳转登录页</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">      toLogin();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 403 token过期</span></span><br><span class="line">    <span class="comment">// 清除token并跳转登录页</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">      tip(<span class="string">&quot;登录过期，请重新登录&quot;</span>);</span><br><span class="line">      <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">      store.commit(<span class="string">&quot;loginSuccess&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        toLogin();</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 404请求不存在</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">      tip(<span class="string">&quot;请求的资源不存在&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(other);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//声明一个数组用于存储每个请求的取消函数和axios标识</span></span><br><span class="line"><span class="keyword">let</span> pending = [];</span><br><span class="line"><span class="keyword">let</span> cancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">let</span> removePending = <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果截取请求这样的：http://jsonplaceholder.typicode.com/posts?userId=2</span></span><br><span class="line">    <span class="keyword">const</span> nurl = config.url.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;存储每个请求的取消函数和axios标识 :&gt;&gt; &#x27;</span>, pending);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> pending) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;p :&gt;&gt; &#x27;</span>, p);</span><br><span class="line">    <span class="comment">//当前请求在数组中存在时执行函数体</span></span><br><span class="line">    <span class="keyword">if</span> (pending[p].u === nurl + <span class="string">&quot;&amp;&quot;</span> + config.method) &#123;</span><br><span class="line">      pending[p].f(); <span class="comment">//执行取消操作</span></span><br><span class="line">      pending.splice(p, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create(&#123; <span class="attr">timeout</span>: <span class="number">1000</span> * <span class="number">12</span> &#125;);</span><br><span class="line"><span class="comment">// 设置post请求头</span></span><br><span class="line">instance.defaults.headers.post[<span class="string">&quot;Content-Type&quot;</span>] =</span><br><span class="line">  <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求拦截器</span></span><br><span class="line"><span class="comment"> * 每次请求前，如果存在token则在请求头中携带token</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">  (config) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 登录流程控制中，根据本地是否存在token判断用户的登录情况</span></span><br><span class="line">    <span class="comment">// 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token</span></span><br><span class="line">    <span class="comment">// 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码</span></span><br><span class="line">    <span class="comment">// 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。</span></span><br><span class="line">    <span class="comment">/**********取消请求*********/</span></span><br><span class="line">    removePending(config); <span class="comment">//在一个axios发送前执行一下取消操作</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;在每一个axios发送前执行一下取消操作 :&gt;&gt; &quot;</span>);</span><br><span class="line">    config.cancelToken = <span class="keyword">new</span> cancelToken(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 这里的axios标识我是用请求地址&amp;请求方式拼接的字符串，当然你可以选择其他的一些方式</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;c就是cancel函数 :&gt;&gt; &#x27;</span>, c);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;config.method :&gt;&gt; &#x27;</span>, config.method);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;config.url :&gt;&gt; &#x27;</span>, config.url);</span><br><span class="line">      <span class="keyword">const</span> nurl = config.url.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">  </span><br><span class="line">      pending.push(&#123; <span class="attr">u</span>: nurl + <span class="string">&quot;&amp;&quot;</span> + config.method, <span class="attr">f</span>: c &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/************************/</span></span><br><span class="line">    <span class="keyword">const</span> token = store.state.token;</span><br><span class="line">    token &amp;&amp; (config.headers.Authorization = token);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  (error) =&gt; <span class="built_in">Promise</span>.error(error)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.interceptors.response.use(</span><br><span class="line">  <span class="comment">// 请求成功</span></span><br><span class="line">  <span class="comment">//   (res) =&gt; (res.status === 200 ? Promise.resolve(res) : Promise.reject(res)),</span></span><br><span class="line">  (res) =&gt; &#123;</span><br><span class="line">    removePending(res.config); <span class="comment">//在一个axios响应后再执行一下取消操作，把已经完成的请求从pending中移除</span></span><br><span class="line">    <span class="keyword">return</span> res.status === <span class="number">200</span> ? <span class="built_in">Promise</span>.resolve(res) : <span class="built_in">Promise</span>.reject(res);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 请求失败</span></span><br><span class="line">  (error) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error :&gt;&gt; &#x27;</span>, error);</span><br><span class="line">    <span class="keyword">const</span> &#123; response &#125; = error;</span><br><span class="line">    <span class="keyword">if</span> (response) &#123;</span><br><span class="line">      <span class="comment">// 请求已发出，但是不在2xx的范围</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;error :&gt;&gt; &#x27;</span>, response);</span><br><span class="line">      errorHandle(response.status, response.data.message);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 处理断网的情况</span></span><br><span class="line">      <span class="comment">// eg:请求超时或断网时，更新state的network状态</span></span><br><span class="line">      <span class="comment">// network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏</span></span><br><span class="line">      <span class="comment">// 关于断网组件中的刷新重新获取数据，会在断网组件中说明</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">window</span>.navigator.onLine) &#123;</span><br><span class="line">        store.commit(<span class="string">&quot;changeNetwork&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决之后效果"><a href="#解决之后效果" class="headerlink" title="解决之后效果"></a>解决之后效果</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/fuckb/2020-11-29%2014.59.42-tuya2020112915.gif"                      alt="2020-11-29 14.59.42-tuya"                ></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://juejin.cn/post/6844903652881072141#heading-10" >掘金<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.jb51.net/article/163434.htm" >vue axios重复点击取消上一次请求封装的方法<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试-原型及原型链</title>
      <link href="2020/01/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>2020/01/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p>2020 想跳槽一下，相关面试系列文章梳理</p><a id="more"></a><h2 id="7建对象的几种方法"><a href="#7建对象的几种方法" class="headerlink" title="7建对象的几种方法"></a>7建对象的几种方法</h2><p>通常三种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//======1</span></span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span> &#125;);</span><br><span class="line"><span class="comment">//======2</span></span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;love&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> B();</span><br><span class="line"><span class="comment">//======3</span></span><br><span class="line"><span class="keyword">var</span> c = &#123; <span class="attr">name</span>: <span class="string">&quot;petter&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> c1 = <span class="built_in">Object</span>.create(c);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190324141429.png"                      alt=""                ><br><strong>构造函数–使用 new 运算符-&gt;生成一个实例</strong>。</p><p>函数都有一个<code>prototype</code>属性，创建函数的时候 js 自动生成的，这个属性会<code>创建一个 空对象</code>就<code>是原型对象</code>。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190324143532.png"                      alt=""                ><br>原型对象如何<code>区分</code>我是被<code>哪个构造函数所引用</code>，原型对象中有一个<code>(构造器)constructor</code>会默认你声明(或者指向)的那个函数。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190324143151.png"                      alt=""                ></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>我从我的原型对象向上找<code>构造这个实例</code>的相关联的对象；这个关联的对象再往上找它又有<code>创造它的的原型对象</code>，以此类推一直到 Object.prototype 为止.原型链的顶端 Object.prototype，</p><blockquote><p>原型链靠什么向上找的过程：向上找主要靠 prototype 和——proto-这二个</p></blockquote><p>原型对象与原型链起了什么作业<br>当我构造函数中有很多属性和方法，我的实例就可以共用这些东西<br>当我创建很多实例，要去共用这些方法和属性。我不能每个实例都拷贝这些属性和方法；他们之间其实可以共同存在一个地方（原型对象）</p><p>任何一个实例对象通过原型链找到它上面的原型对象的<code>属性和方法</code>这个是被实例所共享的；</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190324145426.png"                      alt=""                ></p><blockquote><p>一个实例没有找到属性或方法它就向原型对象上找，如果上级原型对象找不到则会根据原型对象的——proto-的原型对象上去找</p></blockquote><p>注意：</p><ol><li>构造函数才会有 prototype，对象没有 prototype。</li><li>实例对象才会有——proto-，如果发现函数也有-proto-。</li><li>函数也是对象,</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A._proto_ === <span class="built_in">Function</span>.prototype; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>A 的原型对象就是 Function 的原型对象</p><h2 id="instanceof-的原理"><a href="#instanceof-的原理" class="headerlink" title="instanceof 的原理"></a>instanceof 的原理</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190324151128.png"                      alt=""                ><br><strong>实例对象的（-proto-）和构造函数的 prototype 是不是引用同一个地址</strong><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190324151805.png"                      alt=""                ><br>a 继承 b，b 继承 c<br>a 继承的对象用 instanceof 判断 b 或者 c 都返回 true，怎么区分是 b 的实例还是 c 的实例呢？<br>这就用到 constructor 的属性是哪个构造函数<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190324152232.png"                      alt=""                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2021012817image-20210128171034712.png"                      alt="image-20210128171034712"                ></p><h2 id="new-运算符背后原理"><a href="#new-运算符背后原理" class="headerlink" title="new 运算符背后原理"></a>new 运算符背后原理</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2021012817image-20210128171705889.png"                      alt="image-20210128171705889"                ></p><ol><li>new 运算符后面跟的构造函数，一个新对象被创建，继承这个构造函数的原型对象(foo.prototype)</li><li>构造函数 foo 被执行，执行的时候相应的传参，同时上下文 this 被指定这个新实例，newfoo 等同于 new foo();只能用在不传参的情况下</li><li>如果构造函数返回了一个新’对象‘，那么这个对象会取代 new 出来的结果，如果构造函数没有返回对象，那么 new 出来的结果为步骤 1 创建的对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new2 = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="built_in">Object</span>.create(func.prototype);</span><br><span class="line">  <span class="keyword">var</span> k = func.call(o);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> k == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>说到原型链还可以联系到继承</p><blockquote><p>面试题：原型如何实现继承？Class 如何实现继承？Class 本质是什么？</p></blockquote><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试，Javascript，基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试-React</title>
      <link href="2020/01/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-React/"/>
      <url>2020/01/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-React/</url>
      
        <content type="html"><![CDATA[<p>能力遇到瓶颈，2020 想跳槽一下，相关面试系列文章梳理<br><a id="more"></a></p><h3 id="Vdom"><a href="#Vdom" class="headerlink" title="Vdom"></a>Vdom</h3><h3 id="Jsx的本质是什么"><a href="#Jsx的本质是什么" class="headerlink" title="Jsx的本质是什么"></a>Jsx的本质是什么</h3><p>React.createElement 即是h函数，返回vnode</p><p>patch(el,vnode) 和 patch(vnode,newvnode)更新</p><p>第一个参数可能是组件，也可能是html tag</p><h4 id="React生命周期有哪些，16版本生命周期发生了哪些变化？"><a href="#React生命周期有哪些，16版本生命周期发生了哪些变化？" class="headerlink" title="React生命周期有哪些，16版本生命周期发生了哪些变化？"></a>React生命周期有哪些，16版本生命周期发生了哪些变化？</h4><h4 id="setState是同步的还是异步的？"><a href="#setState是同步的还是异步的？" class="headerlink" title="setState是同步的还是异步的？"></a>setState是同步的还是异步的？</h4><p>有时异步（普通使用） 有时同步（settimeout  自己定义的Dom事件）</p><p>有时合并（对象形式） 有时不合并（函数形式）</p><p>后者比较好理解（像object.assign) </p><h5 id="setState主流程"><a href="#setState主流程" class="headerlink" title="setState主流程"></a>setState主流程</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2004%2029%2013%2004%2058%201588136698.png"                      alt="image-20200429130431692" style="zoom:40%;"                 ></p><p> 比如对比下<code>同步</code>和<code>异步</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2004%2029%2013%2006%2043%201588136803.png"                      alt="image-20200429130631548" style="zoom:40%;"                 ></p><p>函数执行的时候会初始一个<code>isBatchingUpdate</code>这个值为true，这个函数执行完设置false，settimeout和自定义事件执行后在触发setState函数的时候已经是false了，所以走右边的路线</p><h4 id="batchUpdate机制"><a href="#batchUpdate机制" class="headerlink" title="batchUpdate机制"></a>batchUpdate机制</h4><ul><li>生命周期和它调用的函数</li><li>React注册的事件</li><li><strong>React可以管理的入口</strong></li></ul><h4 id="为什么有时连续多次-setState只有一次生效？"><a href="#为什么有时连续多次-setState只有一次生效？" class="headerlink" title="为什么有时连续多次 setState只有一次生效？"></a>为什么有时连续多次 setState只有一次生效？</h4><h4 id="React如何实现自己的事件机制？"><a href="#React如何实现自己的事件机制？" class="headerlink" title="React如何实现自己的事件机制？"></a>React如何实现自己的事件机制？</h4><p>合成机制</p><ol><li>event是SyntheticEvent （生散题k-evnt）模拟dom原生事件</li><li>event.nativeEvent是原生事件对象</li><li>所有事件都被挂载到doucument上</li><li>和dom事件不一样，和vue事件也不一样</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2004%2029%2012%2042%2019%201588135339.png"                      alt="image-20200429124142293" style="zoom:40%;"                 ></p><p>通过合成事件去派发事件（通过event.target知道那个原生触发的，找到对应组件，组件中那个触发onclik事件）</p><p>把event传给对应触发的事件函数</p><h4 id="为什么要用合成事件机制？"><a href="#为什么要用合成事件机制？" class="headerlink" title="为什么要用合成事件机制？"></a>为什么要用合成事件机制？</h4><p>更好的兼容性和跨平台。（摆脱dom事件逻辑）</p><p>挂载到document，减少内存消耗，避免频繁解绑，（滚动或者瀑布流事件，挂载到最外层，当组件销毁时候就不需要去解绑dom事件）</p><p>方便事件的统一管理<strong>（事务机制）</strong></p><h4 id="为何-React事件要自己绑定-this？"><a href="#为何-React事件要自己绑定-this？" class="headerlink" title="为何 React事件要自己绑定 this？"></a>为何 React事件要自己绑定 this？</h4><p>在上面提到的事件处理流程中， <code>React</code>在 <code>document</code>上进行统一的事件分发， <code>dispatchEvent</code>通过循环调用所有层级的事件来模拟事件冒泡和捕获。</p><p>在 <code>React</code>源码中，当具体到某一事件处理函数将要调用时，将调用 <code>invokeGuardedCallback</code>方法。</p><p>可见，事件处理函数是直接调用的，并没有指定调用的组件，所以不进行手动绑定的情况下直接获取到的 <code>this</code>是不准确的，所以我们需要手动将当前组件绑定到 <code>this</code>上。</p><h4 id="原生事件和-React事件的区别？"><a href="#原生事件和-React事件的区别？" class="headerlink" title="原生事件和 React事件的区别？"></a>原生事件和 React事件的区别？</h4><ul><li><code>React</code> 事件使用驼峰命名，而不是全部小写。</li><li>通过 <code>JSX</code> , 你传递一个函数作为事件处理程序，而不是一个字符串。</li><li>在 <code>React</code> 中你不能通过返回 <code>false</code> 来阻止默认行为。必须明确调用 <code>preventDefault</code>。</li></ul><h4 id="React和原生事件的执行顺序是什么？可以混用吗？"><a href="#React和原生事件的执行顺序是什么？可以混用吗？" class="headerlink" title="React和原生事件的执行顺序是什么？可以混用吗？"></a>React和原生事件的执行顺序是什么？可以混用吗？</h4><p><code>React</code>的所有事件都通过 <code>document</code>进行统一分发。当真实 <code>Dom</code>触发事件后冒泡到 <code>document</code>后才会对 <code>React</code>事件进行处理。</p><p>所以原生的事件会先执行，然后执行 <code>React</code>合成事件，最后执行真正在 <code>document</code>上挂载的事件</p><p><code>React</code>事件和原生事件最好不要混用。原生事件中如果执行了 <code>stopPropagation</code>方法，则会导致其他 <code>React</code>事件失效。因为所有元素的事件将无法冒泡到 <code>document</code>上，导致所有的 <code>React</code>事件都将无法被触发。。</p><h4 id="React组件的渲染流程是什么？"><a href="#React组件的渲染流程是什么？" class="headerlink" title="React组件的渲染流程是什么？"></a>React组件的渲染流程是什么？</h4><ol><li>使用 <code>React.createElement</code>或 <code>JSX</code>编写 <code>React</code>组件，实际上所有的 <code>JSX</code>代码最后都会转换成 <code>React.createElement(...)</code>， <code>Babel</code>帮助我们完成了这个转换的过程。</li><li><code>createElement</code>函数对 <code>key</code>和 <code>ref</code>等特殊的 <code>props</code>进行处理，并获取 <code>defaultProps</code>对默认 <code>props</code>进行赋值，并且对传入的孩子节点进行处理，最终构造成一个 <code>ReactElement</code>对象（所谓的虚拟 <code>DOM</code>）。</li><li>ReactDOM.render<code>将生成好的虚拟</code>DOM<code>渲染到指定容器上，其中采用了批处理、事务等机制并且对特定浏览器进行了性能优化，最终转换为真实</code>DOM`。</li></ol><h4 id="React更新过程怎么样"><a href="#React更新过程怎么样" class="headerlink" title="React更新过程怎么样"></a>React更新过程怎么样</h4><p>首先props state更新 —&gt; dirComponents(可能是子组件)</p><p>render()生成newvnode</p><p>patch(el,vnode)</p><p>更新分2个节点 ： reconciliation（和解）阶段（执行diff js计算） 和 commit阶段</p><p>当组件足够复杂，组件更新时计算和渲染压力大，同时再有dom操作动画或鼠标需求将卡顿</p><p>解决方案fiber</p><p>将reconciliation阶段进行任务拆分（commit无法拆分）</p><p>浏览器需要支持<code>requestIdleCallback</code>。</p><h4 id="虚拟Dom是什么？"><a href="#虚拟Dom是什么？" class="headerlink" title="虚拟Dom是什么？"></a>虚拟Dom是什么？</h4><p>而 <code>React</code>会先将你的jsx代码转换成一个 <code>JavaScript</code>对象，然后这个 <code>JavaScript</code>对象再转换成真实 <code>DOM</code>。这个 <code>JavaScript</code>对象就是所谓的虚拟 <code>DOM</code></p><h4 id="虚拟Dom比-普通Dom更快吗？"><a href="#虚拟Dom比-普通Dom更快吗？" class="headerlink" title="虚拟Dom比 普通Dom更快吗？"></a>虚拟Dom比 普通Dom更快吗？</h4><p>首次渲染， <code>VitrualDom</code>不具有任何优势，甚至它要进行更多的计算，消耗更多的内存。</p><p><code>VitrualDom</code>的优势在于 <code>React</code>的 <code>Diff</code>算法和批处理策略， <code>React</code>在页面更新之前，提前计算好了如何进行更新和渲染 <code>DOM</code>。实际上，这个计算过程我们在直接操作 <code>DOM</code>时，也是可以自己判断和实现的，但是一定会耗费非常多的精力和时间，而且往往我们自己做的是不如 <code>React</code>好的。所以，在这个过程中 <code>React</code>帮助我们”提升了性能”。</p><p><code>虚拟Dom</code>中的 <code>$$typeof</code>属性的作用是什么？</p><h4 id="为什么代码中一定要引入-React？"><a href="#为什么代码中一定要引入-React？" class="headerlink" title="为什么代码中一定要引入 React？"></a>为什么代码中一定要引入 React？</h4><p><code>JSX</code>只是为 <code>React.createElement(component,props,...children)</code>方法提供的语法糖。</p><p>所有的 <code>JSX</code>代码最后都会转换成 <code>React.createElement(...)</code>， <code>Babel</code>帮助我们完成了这个转换的过程。</p><p>所以使用了 <code>JSX</code>的代码都必须引入 <code>React</code>。</p><h4 id="为什么-React组件首字母必须大写？"><a href="#为什么-React组件首字母必须大写？" class="headerlink" title="为什么 React组件首字母必须大写？"></a>为什么 React组件首字母必须大写？</h4><p><code>babel</code>在编译时会判断 <code>JSX</code>中组件的<code>首字母</code>，当首字母为小写时，其被认定为原生 <code>DOM</code>标签， <code>createElement</code>的第一个变量被编译为字符串；当首字母为大写时，其被认定为自定义组件， <code>createElement</code>的第一个变量被编译为对象；</p><p><code>React</code>在渲染 <code>真实Dom</code>时做了哪些性能优化？</p><p>什么是高阶组件？如何实现？</p><p><code>HOC</code>在业务场景中有哪些实际应用场景？</p><p>高阶组件( <code>HOC</code>)和 <code>Mixin</code>的异同点是什么？</p><p><code>Hook</code>有哪些优势？</p><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>按需加载 </p><p> Reloadable库  （import ‘xx.page’).then</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试，Javascript，基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试-JS 事件循环 EventLoop</title>
      <link href="2020/01/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
      <url>2020/01/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>2020 想跳槽一下，相关面试系列文章梳理</p><a id="more"></a><h1 id="JS-运行机制"><a href="#JS-运行机制" class="headerlink" title="JS 运行机制"></a>JS 运行机制</h1><h2 id="推荐-2-分钟视频讲的真不错"><a href="#推荐-2-分钟视频讲的真不错" class="headerlink" title="推荐 2 分钟视频讲的真不错"></a>推荐 2 分钟视频讲的真不错</h2><iframe src="//player.bilibili.com/player.html?aid=285227869&bvid=BV1kf4y1U7Ln&cid=177957175&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="事件循环是个什么东西"><a href="#事件循环是个什么东西" class="headerlink" title="事件循环是个什么东西"></a>事件循环是个什么东西</h2><p>就我们所知，浏览器的 js 是单线程的，也就是说，在同一时刻，最多也只有一个代码段在执行，可是浏览器又能很好的处理异步请求，那么到底是为什么呢？<br>关于执行中的线程：</p><p>主线程：也就是 js 引擎执行的线程，这个线程只有一个，页面渲染、函数处理都在这个主线程上执行。<br>工作线程：也称幕后线程，这个线程可能存在于浏览器或 js 引擎内，与主线程是分开的，处理文件读取、网络请求等异步事件。</p><h2 id="了解下阻塞还是非阻塞"><a href="#了解下阻塞还是非阻塞" class="headerlink" title="了解下阻塞还是非阻塞"></a>了解下阻塞还是非阻塞</h2><p>关于 js 阻塞还是非阻塞的问题，我觉得可以这么理解，不够在这之前，我们先理解下同步、异步、阻塞还是非阻塞的解释，在网上看到一段描述的非常好，引用下</p><blockquote><p>同步阻塞：小明一直盯着下载进度条，到 100% 的时候就完成。<br>同步非阻塞：小明提交下载任务后就去干别的，每过一段时间就去瞄一眼进度条，看到 100% 就完成。（轮询）<br>异步阻塞：小明换了个有下载完成通知功能的软件，下载完成就“叮”一声。不过小明仍然一直等待“叮”的声音（看起来很傻，不是吗最蠢）<br>异步非阻塞：仍然是那个会“叮”一声的下载软件，小明提交下载任务后就去干别的，听到“叮”的一声就知道完成了。（最机智）</p></blockquote><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p><strong><em>同步任务优先于异步任务。</em></strong></p><ul><li>在同步队列被执行完之前，任何异步的操作都不会被执行</li><li>同步任务执行完之后才执行异步任务</li></ul><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(vari=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&lt;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) [</span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(<span class="params">i</span>)</span>;</span><br><span class="line">), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>涉及异步队列涉及的时间，浏览器发现 settimeout 不会马上放到运行栈里去，for 循环体执行完才去执行异步队列，异步队列没有到时间去收编 settimeout，再等待事件循环里处理</p><p>Event Loop 事件循环</p><ol><li>运行栈运行的是同步任务。</li><li>浏览器识别了事件是一个异步任务，他不会把他放在运行栈里，而是拿走。</li><li>拿走了之后也不是立马放在异步队列中，同步任务执行完以后，再放入异步队列。</li><li>运行栈里没有任务了，就开始执行异步任务。</li><li>执行完后如果运行栈里没有任务了，再监听异步队列。</li><li>这个循环的过程就是 EventLoop<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190329001003.png"                      alt=""                ></li><li>异步任务<br>setTimeout 和 setInterval<br>DOM 事件<br>Promise</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;one:&quot;</span> + i);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;two:&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="async-await-又是如何处理的呢-？"><a href="#async-await-又是如何处理的呢-？" class="headerlink" title="async/await 又是如何处理的呢 ？"></a>async/await 又是如何处理的呢 ？</h2><p>async/await： 这哥俩个其实是 Promise 和 Generator 的语法糖，所以我们把它们转成我们熟悉的 Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> async2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于下面</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(async2()).then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190329002750.png"                      alt=""                ></p><h2 id="分析一道题"><a href="#分析一道题" class="headerlink" title="分析一道题"></a>分析一道题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">  reslove(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  fun1();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">  p.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    fun3();</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> fun4();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fun2();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 0 1 3 7 10 5 9 6 2 8</span></span><br></pre></td></tr></table></figure><ol><li>分析如下执行第一条语句 new Promise 函数主动触发打印’4’</li><li>走到底部的 setTimeout 遇到 fn2()放到消息队列，执行’0’</li><li>调用栈清空，执行 fn2()函数，遇到 etTimeout 继续把里面的函数放到消息队列</li><li>执行 fun1()，打印’1’，弹出 fun1</li><li>执行’3’ 6.遇到 then()放到微任务中去，</li><li>调用栈又清空了，先执行微任务中的队列，fun3()执行，打印’7’</li><li>遇到 awai 任务进去执行，又遇到 setTimeout，消息队列排队’8’, 执行’10‘</li><li>回到刚才的地方执行 console.log(res)，打印’5‘</li><li>执行’9’,继续执行第二个 then 打印‘6’ 11.调用栈清空，微任务队列也清空，最后执行消息队列中的‘2’，‘8’</li></ol><h2 id="为什么-JavaScript-是单线程的？"><a href="#为什么-JavaScript-是单线程的？" class="headerlink" title="为什么 JavaScript 是单线程的？"></a>为什么 JavaScript 是单线程的？</h2><p>单线程意思就是说同一个时间只能做一件事。那这样的话效率不是很低？也没有啦，其实 javascript 的单线程特点是跟他的用途有关的。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。假如不是单线程的话，在一个线程当我们在给某个 DOM 节点增加内容的时候，另一个线程正在删除这个 DOM 节点的内容，那还得了，那不是乱套了吗。所以 javascript 只能是单线程是最优方案。</p><p>总结：</p><p>理解 js 单线程的概念 一个时间只能干一件事<br>理解任务队列<br>EventLoop<br>哪些会被放入异步队列<br>放入异步队列的时机</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试，Javascript，基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试-算法</title>
      <link href="2020/01/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-%E7%AE%97%E6%B3%95/"/>
      <url>2020/01/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>想学好前端，先练好内功，只有内功深厚者，前端之路才会走得更远</strong>。<br><a id="more"></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2004%2029%2011%2025%2044%201588130744.png"                      alt="202004262253311587912811"                ></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>1.默认第一个元素是最小值，</p><p>2.内循环从第二个（i+1）元素开始遍历找到比第一个元素小的，调换位置</p><p>3.继续循环</p><p>特点就是最快找到最小值或最大值</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否是数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">array</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(array);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 位置交换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">array</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">left</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">right</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (left &gt; array.length - <span class="number">1</span> || right &gt; array.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  [ array[left], array[right] ] = [ array[right], array[left] ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * 不断的从左边位置后找最小值</span></span><br><span class="line"><span class="comment"> * 特点第一轮排序就已经找到了最小值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selection</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!checkArray(arr)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//初始最小值 最小值往左排，</span></span><br><span class="line">    <span class="keyword">let</span> miniIndex = i;</span><br><span class="line">    <span class="comment">// 每次排位一个 i+1位置继续排列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, i, miniIndex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(selection([ <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span> ]));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>1.依次比较左右相邻2个位置大小，</p><p>2.如果大就换个位置继续比较。</p><p>3.外循环比较i是数组长度 递减–，这样内循环每次就缩小比较范围</p><blockquote><p>能解决什么问题：1.查找数组间最大差值 2。奇偶排序 设置2个游标 分别指向奇 偶游标</p></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * 特点第一轮排序就能找到最右边的最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> a = [ <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span> ];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!checkArray(arr)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 下面的i是你下次要遍历的最大边界</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubble(a));</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h3><p>1.排序默认从第二个开始遍历</p><p>2.每一次遍历序号之前的元素全部遍历一遍，比较大小，交换位置</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * 适合小型数组 算法比选择和冒泡性能好</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>array </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = array;</span><br><span class="line">  <span class="keyword">let</span> temp;</span><br><span class="line">  <span class="comment">//注意是从第二个位置开始</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    temp = array[i]; <span class="comment">//储存一个临时变量</span></span><br><span class="line">    <span class="comment">//每一次都比较当前索引之前的序列全都比较一遍</span></span><br><span class="line">    <span class="comment">//比如【3，2，1，5】，当前1 要跟 2 3都比较一遍 下一次5 跟 3，2，1 都比较一遍</span></span><br><span class="line">    <span class="comment">//array[j - 1] 是前面一个数 temp后面一个数</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; array[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">      array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    array[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [ <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span> ];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(insertionSort(array));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h3><p>构造一个大顶堆，取堆顶也就是最大值</p><p>再将剩下的数字构建一个大顶堆，取堆顶数字</p><p>重复以上操作最终得到一个<code>从大到小</code>的数组</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2004%2029%2023%2057%2004%201588175824.png"                      alt="image-20200429235650713" style="zoom:40%;"                 ></p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;堆排序耗时&#x27;</span>);</span><br><span class="line"><span class="comment">// 初始化大顶堆，从第一个非叶子结点开始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(array.length / <span class="number">2</span> - <span class="number">1</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">heapify(array, i, array.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 排序，每一次 for 循环找出一个当前最大值，数组长度减一</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(array.length - <span class="number">1</span>); i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">// 根节点与最后一个节点交换</span></span><br><span class="line">swap(array, <span class="number">0</span>, i);</span><br><span class="line"><span class="comment">// 从根节点开始调整，并且最后一个结点已经为当前最大值，不需要再参与比较，所以第三个参数为 i，即比较到最后一个结点前一个即可</span></span><br><span class="line">heapify(array, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;堆排序耗时&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个大顶堆</span></span><br><span class="line"><span class="keyword">const</span> heapify = <span class="function">(<span class="params">array, i, length</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> temp = array[i]; <span class="comment">// 当前父节点</span></span><br><span class="line"><span class="comment">// j &lt; length 的目的是对结点 i 以下的结点全部做顺序调整</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">2</span> * i + <span class="number">1</span>; j &lt; length; j = <span class="number">2</span> * j + <span class="number">1</span>) &#123;</span><br><span class="line">temp = array[i]; <span class="comment">// 将 array[i] 取出，整个过程相当于找到 array[i] 应处于的位置</span></span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">1</span> &lt; length &amp;&amp; array[j] &lt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">j++; <span class="comment">// 找到两个孩子中较大的一个，再与父节点比较</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; array[j]) &#123;</span><br><span class="line">swap(array, i, j); <span class="comment">// 如果父节点小于子节点:交换；否则跳出</span></span><br><span class="line">i = j; <span class="comment">// 交换后，temp 的下标变为 j</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(heapSort(array));</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h3><blockquote><p>希尔排序是对直接插入排序算法的优化和升级</p></blockquote><ul><li><p>先将整个待排序的记录序列分割成为若干子序列。</p></li><li><p>分别进行直接插入排序。</p></li><li><p>待整个序列中的记录基本有序时，再对全体记录进行依次直接插入排序。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2004%2030%2009%2034%2009%201588210449.png"                      alt="image-20200430093356206" style="zoom:33%;"                 ></p></li></ul><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">98</span>, <span class="number">42</span>, <span class="number">25</span>, <span class="number">54</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">72</span>, <span class="number">41</span>, <span class="number">10</span>, <span class="number">121</span> ];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//初始化步长 arr长度的一半</span></span><br><span class="line">  <span class="keyword">let</span> gap = <span class="built_in">Math</span>.floor(array.length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span> &lt;= gap) &#123;</span><br><span class="line">    <span class="comment">// 把距离为 gap 的元素编为一个组，扫描所有组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> temp = array[i]; <span class="comment">//依次3, 25, 72, 41, 10, 121</span></span><br><span class="line">      <span class="comment">// 对距离为 gap 的元素组进行排序</span></span><br><span class="line">      <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; array[j]; j -= gap) &#123;</span><br><span class="line">        <span class="comment">//如果右边比左边小则交换位置</span></span><br><span class="line">        swap(array, j, j + gap);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>); <span class="comment">// 减小增量</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(shellSort(arr));</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="基本思想-5"><a href="#基本思想-5" class="headerlink" title="基本思想"></a>基本思想</h3><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> * 思想将序列中带序号数字分成若干组，每个数字分一组</span></span><br><span class="line"><span class="comment"> * 将若干组22 合并 合并后保证有序</span></span><br><span class="line"><span class="comment"> * 重复第二步直到只剩一组 排序完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arr = [ <span class="number">19</span>, <span class="number">97</span>, <span class="number">09</span>, <span class="number">17</span>, <span class="number">01</span>, <span class="number">08</span>, <span class="number">02</span> ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断数组长度1 表示已经分组</span></span><br><span class="line">  <span class="keyword">if</span> (array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; length &#125; = array;</span><br><span class="line">    <span class="comment">//找中间元素</span></span><br><span class="line">    <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//分左右二组</span></span><br><span class="line">    <span class="keyword">const</span> left = mergeSort(array.slice(<span class="number">0</span>, middle));</span><br><span class="line">    <span class="keyword">const</span> right = mergeSort(array.slice(middle, length));</span><br><span class="line">    array = merge(left, right);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; left.length &amp;&amp; j &lt; right.length) &#123;</span><br><span class="line">    <span class="comment">//判断每一个数组第一个元素左边大还是右边大 比如 [3,4,5] [1,2]</span></span><br><span class="line">    <span class="comment">//比较后把那个大的数组后面的数字也一同加入新数组中</span></span><br><span class="line">    result.push(left[i] &lt; right[j] ? left[i++] : right[j++]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.concat(i &lt; left.length ? left.slice(i) : right.slice(j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mergeSort(arr));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="基本思想-6"><a href="#基本思想-6" class="headerlink" title="基本思想"></a>基本思想</h3><ol><li><p>从中间数组找一个值</p></li><li><p>设计2个双指针左右各一个</p></li><li>左边找比中间值小的元素，右边找比它大的元素 交换他们</li><li>左边超过右边则停止比较</li></ol><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * 从中间数组找一个值</span></span><br><span class="line"><span class="comment"> * 设计2个双指针左右各一个</span></span><br><span class="line"><span class="comment"> * 左边找比中间值小的元素，右边找比它大的元素 交换他们</span></span><br><span class="line"><span class="comment"> * 直到左超过了右边</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//传数组的下标</span></span><br><span class="line">  <span class="keyword">return</span> quick(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">if</span> (array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    index = partition(array, left, right);</span><br><span class="line">    <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">      quick(array, left, index - <span class="number">1</span>); <span class="comment">//[3,5,1,2,4]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">      quick(array, index, right);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 找到中心轴的数字</span></span><br><span class="line">  <span class="keyword">const</span> pivot = array[<span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>)];</span><br><span class="line">  <span class="comment">// 双指针</span></span><br><span class="line">  <span class="keyword">let</span> i = left;</span><br><span class="line">  <span class="keyword">let</span> j = right;</span><br><span class="line">  <span class="comment">// 满足双指针重合就停止</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">    <span class="comment">// 找到比中心轴小的数字则放左边，继续++</span></span><br><span class="line">    <span class="keyword">while</span> (array[i] &lt; pivot) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到比中心轴大的数字则放右边，继续--</span></span><br><span class="line">    <span class="keyword">while</span> (array[j] &gt; pivot) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">      swap(array, i, j);</span><br><span class="line">      i++;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(quickSort([ <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span> ]));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><h3 id="基本思想-7"><a href="#基本思想-7" class="headerlink" title="基本思想"></a>基本思想</h3><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 桶排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucketSort</span>(<span class="params">array, bucketSize = <span class="number">5</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length &lt; <span class="number">2</span>) <span class="keyword">return</span> array;</span><br><span class="line">  <span class="keyword">const</span> bucket = createBuckets(array, bucketSize);</span><br><span class="line">  <span class="keyword">return</span> sortBuckets(buckets);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBuckets</span>(<span class="params">array, bucketSize</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//初始化最大值最小值</span></span><br><span class="line">  <span class="keyword">let</span> miniValue = array[<span class="number">0</span>],</span><br><span class="line">    maxValue = array[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 寻找最大值最小值;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &lt; miniValue) &#123;</span><br><span class="line">      miniValue = array[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] &gt; maxValue) &#123;</span><br><span class="line">      maxValue = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//分配每一个桶的容量大小</span></span><br><span class="line">  <span class="keyword">const</span> bucketCount = <span class="built_in">Math</span>.floor((maxValue - miniValue) / bucketSize + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> buckets = [];</span><br><span class="line">  <span class="comment">//分配桶</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">    buckets[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把数组中的值放入相应的桶中</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="comment">//计算将元素放到哪个桶中</span></span><br><span class="line">    <span class="keyword">const</span> bucketIndex = <span class="built_in">Math</span>.floor((array[i] - miniValue) / bucketSize);</span><br><span class="line">    buckets[bucketIndex].push(array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buckets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每一个桶排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>buckets </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortBuckets</span>(<span class="params">buckets</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//初始化一个新数组</span></span><br><span class="line">  <span class="keyword">const</span> sortedArray = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (buckets[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//插入排序</span></span><br><span class="line">      insertionSort(buckets[i]);</span><br><span class="line">      <span class="comment">//加入新数组</span></span><br><span class="line">      sortedArray.push(...buckets[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sortedArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h3 id="基本思想-8"><a href="#基本思想-8" class="headerlink" title="基本思想"></a>基本思想</h3><ol><li><p>求最大值就知道需要的数组有多长（非常消耗内存，开辟数组在内存空间大小）</p></li><li><p>把每一个值作为<code>下标</code>放入对应counts数组中，出现的次数作为<code>值</code>,次数越多值越大</p></li><li><p>循环counts把下标把值都放入array数组中，返回array就是排好序的数组</p></li></ol><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计数排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMaxValue</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &gt; max) &#123;</span><br><span class="line">      max = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countingSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> maxValue = findMaxValue(array);</span><br><span class="line">  <span class="comment">//创建计数数组 数组从0开始 所以要+1</span></span><br><span class="line">  <span class="keyword">const</span> counts = <span class="keyword">new</span> <span class="built_in">Array</span>(maxValue + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  array.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//item是下标值，如果不存在则初始为0</span></span><br><span class="line">    <span class="keyword">if</span> (!counts[item]) &#123;</span><br><span class="line">      counts[item] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接着+1 次</span></span><br><span class="line">    counts[item]++;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 索引</span></span><br><span class="line">  <span class="keyword">let</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  counts.forEach(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//item是出现的次数直到剪到0次 如【1，2，2】</span></span><br><span class="line">    <span class="keyword">while</span> (item &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      array[sortedIndex++] = i;</span><br><span class="line">      item--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countingSort([ <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span> ]));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h3 id="基本思想-9"><a href="#基本思想-9" class="headerlink" title="基本思想"></a>基本思想</h3><p>其实就是桶思想的一种</p><p>先排个位数，十位数  百位数 千位数。。放入桶里</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/uPic/2020%2004%2029%2011%2026%2050%201588130810.png"                      alt="202004271241311587962491"                ></p><p>如何去判断个位数 十位数 百位数</p><p>比如 421 个位数是1 ，那我们是不是取模， 421 /1 = 42 余数就是1，十位数 421 /10 余数是 2  百位数 421 /100 余数是4</p><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [ <span class="number">19</span>, <span class="number">240</span>, <span class="number">100</span>, <span class="number">532</span>, <span class="number">305</span>, <span class="number">430</span>, <span class="number">124</span> ];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMinValue</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMaxValue</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分布式排序算法</span></span><br><span class="line"><span class="comment"> * 根据进制去选择  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;&#x27;*&#x27;&#125;</span> </span>array </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>radixBase 10进制 就参数10 8进制就选8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">radixSort</span>(<span class="params">array, radixBase = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> minValue = findMinValue(array);</span><br><span class="line">  <span class="keyword">const</span> maxValue = findMaxValue(array);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//从最后一位开始排序所有数</span></span><br><span class="line">  <span class="keyword">let</span> significantDigit = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 后续进行第二个有效位数排序 第三个有效位数排序 直到没有待排序的有效位</span></span><br><span class="line">  <span class="comment">// 比如 （999 - 900） /1 /10 /100 （99-19） /1 /10 但是/100就不行了</span></span><br><span class="line">  <span class="keyword">while</span> ((maxValue - minValue) / significantDigit &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//获取每一次有效位后排好的数组，直到最后没有有效位</span></span><br><span class="line">    array = countingSortForRadix(array, radixBase, significantDigit, minValue);</span><br><span class="line">    significantDigit *= radixBase;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countingSortForRadix</span>(<span class="params">array, radixBase, significantDigit, minValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bucketsIndex;</span><br><span class="line">  <span class="comment">// 基数初始化桶</span></span><br><span class="line">  <span class="keyword">const</span> buckets = [];</span><br><span class="line">  <span class="comment">// 创建临时数组 作用：帮助后面移值到原始数组中</span></span><br><span class="line">  <span class="keyword">const</span> tmp = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; radixBase; i++) &#123;</span><br><span class="line">    buckets[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//[ 421, 240, 100, 532, 305, 430, 124 ]</span></span><br><span class="line">  <span class="comment">//第二次 【240,100,430,421,532,124,305】</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="comment">//计算有效位进行计数排序</span></span><br><span class="line">    bucketsIndex = <span class="built_in">Math</span>.floor(((array[i] - minValue) / significantDigit) % radixBase);</span><br><span class="line">    <span class="comment">//累计出现的次数</span></span><br><span class="line">    buckets[bucketsIndex]++;</span><br><span class="line">    <span class="comment">// ==== 0   1   2  3 4 5....</span></span><br><span class="line">    <span class="comment">//      1次 2次  0次。。。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  第一次循环个位数出现的次数</span></span><br><span class="line">  <span class="comment">// 0:3</span></span><br><span class="line">  <span class="comment">// 1:1</span></span><br><span class="line">  <span class="comment">// 2:1</span></span><br><span class="line">  <span class="comment">// 3:0</span></span><br><span class="line">  <span class="comment">// 4:1</span></span><br><span class="line">  <span class="comment">// 5:1</span></span><br><span class="line">  <span class="comment">// 6:0</span></span><br><span class="line">  <span class="comment">// 7:0</span></span><br><span class="line">  <span class="comment">// 8:0</span></span><br><span class="line">  <span class="comment">// 9:0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 累积结果得到计数值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; radixBase; i++) &#123;</span><br><span class="line">    buckets[i] += buckets[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;累积结果得到计数值&#x27;</span>, buckets);</span><br><span class="line">  <span class="comment">// 倒叙重新放入临时数组;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">//计算有效位进行计数排序</span></span><br><span class="line">    bucketsIndex = <span class="built_in">Math</span>.floor(((array[i] - minValue) / significantDigit) % radixBase);</span><br><span class="line">    <span class="comment">//找buckets中有效位对应的下标</span></span><br><span class="line">    tmp[--buckets[bucketsIndex]] = array[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把临时数组新排好给array</span></span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(radixSort(array));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://juejin.im/post/5d371aa6e51d455d850d3bbe#heading-3" >算法之美<i class="fas fa-external-link-alt"></i></a></p><p><a href="">JavaScript 数据结构与算法第三版</a></p><p><a href="">bilibili网上教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试，Javascript，基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试-CSS 相关</title>
      <link href="2020/01/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-CSS%E7%9B%B8%E5%85%B3/"/>
      <url>2020/01/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95-CSS%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>2020 想跳槽一下，相关面试系列文章梳理</p><a id="more"></a><h2 id="CSS-盒模型"><a href="#CSS-盒模型" class="headerlink" title="CSS 盒模型"></a>CSS 盒模型</h2><p>标准模型和 IE 模型<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190322194544.png"                      alt=""                ></p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>标准盒子模型：宽度=内容的宽度（content）+ border + padding + margin<br>低版本 IE 盒子模型：宽度=内容宽度（content+border+padding）+ margin</p><h4 id="css-如何设置这-2-种模型"><a href="#css-如何设置这-2-种模型" class="headerlink" title="css 如何设置这 2 种模型"></a>css 如何设置这 2 种模型</h4><p>box-sizing：content-box 标准模型 （默认）<br>box-sizing：border-box ie 模型</p><p>比如：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190323001804.png"                      alt=""                ><br>对比<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190323002442.png"                      alt=""                ></p><h2 id="CSS-选择器有哪些？哪些属性可以继承？"><a href="#CSS-选择器有哪些？哪些属性可以继承？" class="headerlink" title="CSS 选择器有哪些？哪些属性可以继承？"></a>CSS 选择器有哪些？哪些属性可以继承？</h2><p>CSS 选择符：</p><ol><li>id 选择器(#myid)</li><li>类选择器(.myclassname)</li><li>标签选择器(div, h1, p)</li><li>相邻选择器(h1 + p)</li><li>子选择器（ul &gt; li）</li><li>后代选择器（li a）</li><li>通配符选择器（*）</li><li>属性选择器（a[rel=”external”]）</li><li>伪类选择器（a:hover, li:nth-child）</li></ol><p>可继承的属性：font-size, font-family, color</p><p>不可继承的样式：border, padding, margin, width, height</p><p>优先级（就近原则）：!important &gt; [ id &gt; class &gt; tag ] <code>!important 比内联优先级高</code></p><h2 id="CSS3-新增伪类有那些"><a href="#CSS3-新增伪类有那些" class="headerlink" title="CSS3 新增伪类有那些?"></a>CSS3 新增伪类有那些?</h2><p>p:first-of-type 选择属于其父元素的首个元素<br>p:last-of-type 选择属于其父元素的最后元素<br>p:only-of-type 选择属于其父元素唯一的元素<br>p:only-child 选择属于其父元素的唯一子元素<br>p:nth-child(2) 选择属于其父元素的第二个子元素<br>:enabled :disabled 表单控件的禁用状态。<br>:checked 单选框或复选框被选中。</p><h2 id="display-有哪些值？-position-的值？"><a href="#display-有哪些值？-position-的值？" class="headerlink" title="display 有哪些值？ position 的值？"></a>display 有哪些值？ position 的值？</h2><p>inline（默认）–内联<br>none–隐藏<br>block–块显示<br>table–表格显示<br>list-item–项目列表<br>inline-block</p><p>static（默认）：按照正常文档流进行排列；<br>relative（相对定位）：不脱离文档流，参考自身静态位置通过 top, bottom, left, right 定位；<br>absolute(绝对定位)：参考距其最近一个不为 static 的父级元素通过 top, bottom, left, right 定位；<br>fixed(固定定位)：所固定的参照对像是可视窗口。</p><h2 id="display-none-与-visibility：hidden-的区别？"><a href="#display-none-与-visibility：hidden-的区别？" class="headerlink" title="display:none 与 visibility：hidden 的区别？"></a>display:none 与 visibility：hidden 的区别？</h2><p>display：none 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）</p><p>visibility：hidden 隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p><h2 id="position-fixed-在-android-下无效怎么处理？"><a href="#position-fixed-在-android-下无效怎么处理？" class="headerlink" title="position:fixed;在 android 下无效怎么处理？"></a>position:fixed;在 android 下无效怎么处理？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta</span><br><span class="line">  name=<span class="string">&quot;viewport&quot;</span></span><br><span class="line">  content=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="如果需要手动写动画，你认为最小时间间隔是多久，为什么？"><a href="#如果需要手动写动画，你认为最小时间间隔是多久，为什么？" class="headerlink" title="如果需要手动写动画，你认为最小时间间隔是多久，为什么？"></a>如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h2><p>多数显示器默认频率是 60Hz，即 1 秒刷新 60 次，所以理论上最小间隔为 1/60＊1000ms ＝ 16.7ms。</p><h2 id="CSS-属性-overflow-属性定义溢出元素内容区的内容会如何处理"><a href="#CSS-属性-overflow-属性定义溢出元素内容区的内容会如何处理" class="headerlink" title="CSS 属性 overflow 属性定义溢出元素内容区的内容会如何处理?"></a>CSS 属性 overflow 属性定义溢出元素内容区的内容会如何处理?</h2><p>参数是 scroll 时候，必会出现滚动条。<br>参数是 auto 时候，子元素内容大于父元素时出现滚动条。<br>参数是 visible 时候，溢出的内容出现在父元素之外。<br>参数是 hidden 时候，溢出隐</p><h2 id="JS-如何获取盒模型的宽和高"><a href="#JS-如何获取盒模型的宽和高" class="headerlink" title="JS 如何获取盒模型的宽和高"></a>JS 如何获取盒模型的宽和高</h2><p>dom.style.widht/height (只限内联样式的宽和高）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190323003602.png"                      alt=""                ><br>如果不是内联元素就取不到对应的值<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190323003805.png"                      alt=""                ></p><p>然后我们试试这个<br>dom.currentStyle.width/height (渲染以后得到的宽和高） 只有 ie 支持<br>window.getComputedStyle(dom).width/height 谷歌火狐支持</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190323004345.png"                      alt=""                ></p><p>dom.getBoundClientRect().width/height 非常重要 计算元素的绝对位置 （视窗左上角相对元素的位置）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190323004802.png"                      alt=""                ></p><p>思考一个问题<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190323010536.png"                      alt=""                ></p><p>为什么 bottom 与 left 的值不一样？？</p><h4 id="盒模型解释边距重叠"><a href="#盒模型解释边距重叠" class="headerlink" title="盒模型解释边距重叠"></a>盒模型解释边距重叠</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190322200649.png"                      alt=""                ></p><h2 id="BFC-边距重叠解决方案"><a href="#BFC-边距重叠解决方案" class="headerlink" title="BFC 边距重叠解决方案"></a>BFC 边距重叠解决方案</h2><h3 id="概念（块级格式化上下文）"><a href="#概念（块级格式化上下文）" class="headerlink" title="概念（块级格式化上下文）"></a>概念（块级格式化上下文）</h3><blockquote><p>边界重叠是指两个或多个盒子(可能相邻也可能嵌套)的相邻边界(其间没有任何非空内容、补白、边框)重合在一起而形成一个单一边界。两个或多个块级盒子的<code>垂直</code>相邻边界会重合，它们的边界宽度是相邻边界宽度中的<code>最大值</code>。注意水平边界是不会重合的。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190322200939.png"                      alt=""                ><br>兄弟元素重叠 取最大值（上下）<br>空元素 边距重叠</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>bfc 这个元素的垂直方向的边距会发生重叠</li><li>bfc 的区域不会与浮动元素的区域重叠 （清除浮动）</li><li>bfc 的页面是一个独立的容器 外面的元素不会影响里面的元素</li><li>计算 bfc 高度的时候 浮动元素也会参与计算</li></ol><h3 id="创建-BFC"><a href="#创建-BFC" class="headerlink" title="创建 BFC"></a>创建 BFC</h3><p>float 值不为 none 只要创建了浮动就创建了 BFC<br>overflow：hidden<br>position 不是 realtive 或者<br>display table flex</p><h3 id="BFC-的使用场景"><a href="#BFC-的使用场景" class="headerlink" title="BFC 的使用场景"></a>BFC 的使用场景</h3><p>一种情况</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      * &#123;</span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      #wrapper &#123;</span><br><span class="line"><span class="css">        <span class="attribute">background</span>: lightpink;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-id">#wrapper</span> &gt; <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">5px</span> auto <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: green;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190322232523.png"                      alt=""                ></p><p>给子元素的增加一个父级，父级设置<code>overflow: hidden</code>可以解决这个上下边距重叠的问题<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190322232756.png"                      alt=""                ></p><p>另一种情况<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190322233847.png"                      alt=""                ></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .float &#123;</span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="number">#008000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">110px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: peru;</span></span><br><span class="line"><span class="css">      <span class="attribute">overflow</span>: auto;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>创建 bfc 之后的效果</strong><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190322234320.png"                      alt=""                ></p><p>第三种场景</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .float &#123;</span><br><span class="line"><span class="css">      <span class="attribute">background</span>: hotpink;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .left &#123;</span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="number">#008000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190322235259.png"                      alt=""                ></p><blockquote><p>BFC 子元素既是 float 元素也会参与高度计算</p></blockquote><p>如图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190323000027.png"                      alt=""                ></p><h2 id="水平居中与垂直居中"><a href="#水平居中与垂直居中" class="headerlink" title="水平居中与垂直居中"></a>水平居中与垂直居中</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Users/lovewcc/Documents/02_Project/04_博客/source/_posts/20191009134453.png"                      alt=""                ></p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><h3 id="1-1-行内元素"><a href="#1-1-行内元素" class="headerlink" title="1.1 行内元素"></a>1.1 行内元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-块级元素"><a href="#1-2-块级元素" class="headerlink" title="1.2 块级元素"></a>1.2 块级元素</h3><h4 id="1-2-1-块级元素一般居中方法"><a href="#1-2-1-块级元素一般居中方法" class="headerlink" title="1.2.1 块级元素一般居中方法"></a>1.2.1 块级元素一般居中方法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-子元素含-float"><a href="#1-2-2-子元素含-float" class="headerlink" title="1.2.2 子元素含 float"></a>1.2.2 子元素含 float</h4><p>fit-content<br>以下两种情况下的较大值:</p><p>1.固有的最小宽度 2.固有首选宽度（max-content）和可用宽度（available）的较小值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: fit-content;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  foat: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-Flex-弹性盒子"><a href="#1-2-3-Flex-弹性盒子" class="headerlink" title="1.2.3 Flex 弹性盒子"></a>1.2.3 Flex 弹性盒子</h4><p>1） flex 2012 版</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-4-绝对定位"><a href="#1-2-4-绝对定位" class="headerlink" title="1.2.4 绝对定位"></a>1.2.4 绝对定位</h4><p>1）transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）left: 50%</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: 宽度;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">0.5</span>*宽度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）left/right: 0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: 宽度;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、垂直居中"><a href="#二、垂直居中" class="headerlink" title="二、垂直居中"></a>二、垂直居中</h3><h4 id="2-1-行内元素"><a href="#2-1-行内元素" class="headerlink" title="2.1 行内元素"></a>2.1 行内元素</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: 高度;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: 高度;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：① 子元素 line-height 值为父元素 height 值。② 单行文本。</strong></p><h4 id="2-2-块级元素"><a href="#2-2-块级元素" class="headerlink" title="2.2 块级元素"></a>2.2 块级元素</h4><h5 id="2-2-1-行内块级元素"><a href="#2-2-1-行内块级元素" class="headerlink" title="2.2.1 行内块级元素"></a>2.2.1 行内块级元素</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>, <span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适应 IE7。</p><h5 id="2-2-2-table"><a href="#2-2-2-table" class="headerlink" title="2.2.2 table"></a>2.2.2 table</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>元素高度可以动态改变, 不需再 CSS 中定义, 如果父元素没有足够空间时, 该元素内容也不会被截断。</li></ul><p><strong>缺点</strong></p><ul><li>IE6~7, 甚至 IE8 beta 中无效。</li></ul><h5 id="2-2-3-Flex-弹性盒子"><a href="#2-2-3-Flex-弹性盒子" class="headerlink" title="2.2.3 Flex 弹性盒子"></a>2.2.3 Flex 弹性盒子</h5><p>1）flex 2012 版</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>内容块的宽高任意, 优雅的溢出。</li><li>可用于更复杂高级的布局技术中。</li></ul><p><strong>缺点</strong></p><ul><li>IE8/IE9 不支持。</li><li>需要浏览器厂商前缀。</li><li>渲染上可能会有一些问题。</li></ul><h5 id="2-2-4-绝对定位"><a href="#2-2-4-绝对定位" class="headerlink" title="2.2.4 绝对定位"></a>2.2.4 绝对定位</h5><p>1）transform</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>( <span class="number">0</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>代码少。</li></ul><p><strong>缺点</strong></p><ul><li>IE8 不支持, 属性需要追加浏览器厂商前缀, 可能干扰其他 transform 效果, 某些情形下会出现文本或元素边界渲染模糊的现象。</li></ul><p>2）top: 50%</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: 高度;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">0.5</span>高度;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>适用于所有浏览器。</li></ul><p><strong>缺点</strong></p><ul><li>父元素空间不够时, 子元素可能不可见 (当浏览器窗口缩小时, 滚动条不出现时). 如果子元素设置了 overflow:auto, 则高度不够时, 会出现滚动条。</li></ul><p>3）top/bottom: 0;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>简单。</li></ul><p><strong>缺点</strong></p><ul><li>没有足够空间时, 子元素会被截断, 但不会有滚动条。</li></ul><h2 id="三栏布局的五种写法"><a href="#三栏布局的五种写法" class="headerlink" title="三栏布局的五种写法"></a>三栏布局的五种写法</h2><p><code>已知高度</code>, <code>左右距离固定</code>, <code>中间自适应</code>三栏布局在 html 很常见，基础知识回顾</p><blockquote><p>双飞翼布局与圣杯布局的不同之处，圣杯布局的的左中右三列容器，中间 middle 多了一个子容器存在，通过控制 middle 的子容器的 margin 或者 padding 空出左右两列的宽度。</p></blockquote><h2 id="最常见的圣杯布局实现方法"><a href="#最常见的圣杯布局实现方法" class="headerlink" title="最常见的圣杯布局实现方法"></a>最常见的圣杯布局实现方法</h2><p>关键点</p><ol><li>圣杯布局的关键点是通过 margin-left 与 left 属性将左右两列放置到准确的位置</li><li>圣杯布局的关键点父元素需要设置 padding</li><li>圣杯布局的关键点 margin-left 取值为百分比时，是以其父元素的宽度为基准的</li></ol><html><br><iframe width="100%" height="300" src="//jsrun.net/ZYXKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br></html><h2 id="最常见的双飞翼布局实现方法"><a href="#最常见的双飞翼布局实现方法" class="headerlink" title="最常见的双飞翼布局实现方法"></a>最常见的双飞翼布局实现方法</h2><p>关键点</p><ol><li>双飞翼布局的关键点是通过 margin-left 属性将左右两列放置到准确的位置，通过控制 middle 的子容器的 margin 或者 padding 空出左右两列的宽度</li><li>双飞翼布局的关键点父元素不需要设置 padding</li><li>双飞翼布局的关键点 margin-left 取值为百分比时，是以其父元素的宽度为基准的</li></ol><iframe width="100%" height="300" src="//jsrun.net/hYXKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe><h4 id="浮动布局方法"><a href="#浮动布局方法" class="headerlink" title="浮动布局方法-"></a>浮动布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout float&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .layout.float .left &#123;</span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.float .right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.float .mid &#123;</span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>浮动解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="table-cell-布局方法"><a href="#table-cell-布局方法" class="headerlink" title="table-cell 布局方法-"></a>table-cell 布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout table&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .layout.table .left-mid-right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.left-mid-right</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table-cell;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.table .left &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.table .right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.table .mid &#123;</span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>flexbox布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="flex-布局方法"><a href="#flex-布局方法" class="headerlink" title="flex 布局方法-"></a>flex 布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout flexbox&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .layout.flexbox &#123;</span><br><span class="line"><span class="css">      <span class="attribute">margin-top</span>: <span class="number">130px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.flexbox .left-mid-right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.flexbox .left &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.flexbox .right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.flexbox .mid &#123;</span><br><span class="line"><span class="css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>flexbox布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="定位布局方法"><a href="#定位布局方法" class="headerlink" title="定位布局方法-"></a>定位布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout absolute&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.layout</span><span class="selector-class">.absolute</span> <span class="selector-class">.left-mid-right</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.absolute .left &#123;</span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.absolute .right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.absolute .mid &#123;</span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">right</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="grid-布局方法"><a href="#grid-布局方法" class="headerlink" title="grid 布局方法-"></a>grid 布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .layout.grid .left-mid-right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      grid-template-rows: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      grid-template-<span class="attribute">columns</span>: <span class="number">300px</span> auto <span class="number">300px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.grid .left &#123;</span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.grid .right &#123;</span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.grid .mid &#123;</span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网格布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="扩展问题"><a href="#扩展问题" class="headerlink" title="扩展问题"></a>扩展问题</h4><ol><li>扩展每个布局的优缺点<br>浮动：脱离文档流（必须清浮动） 优点：兼容性比较好<br>定位：脱离文档流 你后面的子元素也必须脱离文档流，效果比较差 优点：快捷、<br>flex：css3 中出现解决上述 2 种布局的缺点；<br>表格：优点：在一定的场景下兼容性还不错，缺点如果某一列的高度增加了则其他 2 列的高度也会同样增加<br>网格：新技术，网格布局 优缺点. 不是所有的浏览器都支持 grid</li><li>高度去掉之后 哪个方案就不适用了<br>浮动 x<br> 扩展点： 浮动如何清除 BFC 是什么<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190322132630.png"                      alt=""                ><br>定位 x<br>flex ✔️<br>表格 ✔️<br>grid x</li><li>兼容性哪个比较好，项目中用哪个最好？</li></ol><blockquote><p>写页面的时候还需要注意语义化：<code>section</code> 章 ，<code>article</code> 容器</p></blockquote><h2 id="上下高度固定，中间自适应"><a href="#上下高度固定，中间自适应" class="headerlink" title="上下高度固定，中间自适应"></a>上下高度固定，中间自适应</h2><p>定位布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout abosult&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .layout.abosult .top-mid-bottom &#123;</span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="number">#14e014</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .layout.abosult .top &#123;</span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .layout.abosult .bottom &#123;</span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .layout.abosult .mid &#123;</span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">bottom</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;top-mid-bottom&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>定位解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>flex 布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout flex&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .layout.flex .top-mid-bottom &#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="number">#14e014</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.flex .top &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.flex .bottom &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.flex .mid &#123;</span><br><span class="line"><span class="css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;top-mid-bottom&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>flex解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>table 布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;table-top-center-bottom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">    .table-top-center-bottom &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .table-top &#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table-row;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .table-center &#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table-row;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="number">#ff3c4a</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .table-bottom &#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table-row;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="number">#49a094</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-top&quot;</span>&gt;</span>上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-center&quot;</span>&gt;</span>table-布局 -中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-bottom&quot;</span>&gt;</span>下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>grid 布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .layout.grid .top-mid-bottom &#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">      grid-template-row: <span class="number">300px</span> auto <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: <span class="number">#14e014</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    .layout.grid .top &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.grid .bottom &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .layout.grid .mid &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: yellow;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;top-mid-bottom&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>flex解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h1 id="《50道CSS基础面试题（附答案）》中的答案真的就只是答案吗？"><a href="#《50道CSS基础面试题（附答案）》中的答案真的就只是答案吗？" class="headerlink" title="《50道CSS基础面试题（附答案）》中的答案真的就只是答案吗？"></a><a class="link"   href="https://segmentfault.com/a/1190000013860482" >《50道CSS基础面试题（附答案）》中的答案真的就只是答案吗？<i class="fas fa-external-link-alt"></i></a></h1>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试，Javascript，基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 初体验打造超溜的前端环境</title>
      <link href="2019/12/31/Docker%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>2019/12/31/Docker%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>总结一下有如下问题：<br>手动部署成本太高，改错别字都很麻烦<br>一台服务器由于时间累积导致环境变得“脏乱差”<br>重装系统成本太高，难以迁移</p><a id="more"></a><p>而 Docker，正是我解决所有问题 SCP-500 万能药！<br>那么 Docker 是如何做的呢？<br>镜像与容器<br>Docker 中有两个重要概念。<br>一个是容器（Container）：容器特别像一个虚拟机，容器中运行着一个完整的操作系统。可以在容器中装 Nodejs，可以执行 npm install，可以做一切你当前操作系统能做的事情<br>另一个是镜像（Image）：镜像是一个文件，它是用来创建容器的。如果你有装过 Windows 操作系统，那么 Docker 镜像特别像“Win7 纯净版.rar”文件<br>上边就是你所需要了解的 Docker 全部基础知识。就这么简单<br>顺便一提，在 Docker 中，我们通常称你当前使用的真实操作系统为“宿主机”(Host)</p><h2 id="写个-vue-node-的案例实战下"><a href="#写个-vue-node-的案例实战下" class="headerlink" title="写个 vue+node 的案例实战下"></a>写个 vue+node 的案例实战下</h2><p><strong>目录结构</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">├── vue_docker    <span class="comment">//vue项目</span></span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── babel.config.js</span><br><span class="line">│   ├── dist</span><br><span class="line">│   │   ├── css</span><br><span class="line">│   │   ├── favicon.ico</span><br><span class="line">│   │   ├── img</span><br><span class="line">│   │   ├── index.html</span><br><span class="line">│   │   └── js</span><br><span class="line">│   ├── docker-compose.debug.yml</span><br><span class="line">│   ├── docker-compose.yml</span><br><span class="line">│   ├── nginx             <span class="comment">//nginx配置信息</span></span><br><span class="line">│   │   └── <span class="keyword">default</span>.conf</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── public</span><br><span class="line">│   │   ├── favicon.ico</span><br><span class="line">│   │   └── index.html</span><br><span class="line">│   ├── src</span><br><span class="line">│   │   ├── App.vue</span><br><span class="line">│   │   ├── assets</span><br><span class="line">│   │   ├── components</span><br><span class="line">│   │   ├── main.js</span><br><span class="line">│   │   ├── router</span><br><span class="line">│   │   └── views</span><br><span class="line">│   └── yarn.lock</span><br><span class="line">└── vue_docker_server   <span class="comment">//node项目</span></span><br><span class="line">    ├── Dockerfile</span><br><span class="line">    ├── docker-compose.debug.yml</span><br><span class="line">    ├── docker-compose.yml</span><br><span class="line">    ├── package.json</span><br><span class="line">    ├── server.js</span><br><span class="line">    ├── test.txt</span><br><span class="line">    └── yarn.lock</span><br></pre></td></tr></table></figure><h3 id="部署-vue"><a href="#部署-vue" class="headerlink" title="部署 vue"></a>部署 vue</h3><p>过程省略了写过 vue 的都知道…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191231220957.png"                      alt=""                ></p><h3 id="部署-node"><a href="#部署-node" class="headerlink" title="部署 node"></a>部署 node</h3><p>创建 server.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;koa-bodyparser&quot;</span>);</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.body = <span class="string">&quot;hello,word&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/api/json&quot;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">    data: <span class="string">&quot;This is message from node container&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;http://localhost:8000&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="部署-nginx-config-配置文件"><a href="#部署-nginx-config-配置文件" class="headerlink" title="部署 nginx config 配置文件"></a>部署 nginx config 配置文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路径:/nginx/default.conf/</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    access_log  /<span class="keyword">var</span>/log/nginx/host.access.log  main;</span><br><span class="line">    error_log  /<span class="keyword">var</span>/log/nginx/error.log  error;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        # 这个是nginx的默认文件路径</span><br><span class="line">        # root   /usr/share/nginx/html;</span><br><span class="line">        # 自定义的nginx显示路径</span><br><span class="line">        root   /home/web/app;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># 代理以 api 为前缀的请求</span><br><span class="line"> location ~^/api &#123;</span><br><span class="line">proxy_pass http:<span class="comment">//192.168.8.93:8000;</span></span><br><span class="line">proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    #error_page  <span class="number">404</span>              /<span class="number">404.</span>html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        # root   /usr/share/nginx/html;</span><br><span class="line">        root   /home/web/app;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="docker-二种启动模式"><a href="#docker-二种启动模式" class="headerlink" title="docker 二种启动模式"></a>docker 二种启动模式</h2><h3 id="Dockerfile-启动"><a href="#Dockerfile-启动" class="headerlink" title="Dockerfile 启动"></a>Dockerfile 启动</h3><p>在 vue 项目根目录创建 Dockerfile 文件配置如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">COPY</span> dist<span class="regexp">/ /u</span>sr<span class="regexp">/share/</span>nginx<span class="regexp">/html/</span></span><br><span class="line"><span class="keyword">COPY</span> nginx<span class="regexp">/default.conf /</span>etc<span class="regexp">/nginx/</span>conf.d/<span class="keyword">default</span>.conf</span><br></pre></td></tr></table></figure><ol><li>自定义构建镜像的时候基于<code>Dockerfile</code>来构建。</li><li>FROM nginx 命令的意思该镜像是基于 <code>nginx:latest</code> 镜像而构建的。</li><li>COPY dist/ /usr/share/nginx/html/ 命令的意思是将项目根目录下 dist 文件夹下的所有文件复制到镜像中 /usr/share/nginx/html/ 目录下。</li><li>COPY nginx/default.conf /etc/nginx/conf.d/default.conf 命令的意思是将 nginx 目录下的 default.conf 复制到 etc/nginx/conf.d/default.conf，用本地的 default.conf 配置来替换 nginx 镜像里的默认配置。</li></ol><p><strong>执行命令</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t vuenginxcontainer .</span><br></pre></td></tr></table></figure><p><strong><code>-t</code> 是给镜像命名 <code>.</code>是基于当前目录的 Dockerfile 来构建镜像</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls | grep vuenginxcontainer</span><br></pre></td></tr></table></figure><p>到此时我们的 vue 应用镜像 vuenginxcontainer 已经成功创建。接下来，我们基于该镜像启动一个 docker 容器。</p><p>基于 vuenginxcontainer 镜像启动容器，运行命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p <span class="number">3000</span>:<span class="number">80</span> \</span><br><span class="line">-d --name vueApp \</span><br><span class="line">vuenginxcontainer</span><br></pre></td></tr></table></figure><ol><li><code>docker run</code> 基于镜像启动一个容器</li><li><code>-p 3000:80</code> 端口映射，将宿主的 3000 端口映射到容器的 80 端口</li><li><code>-d</code> 后台方式运行</li><li><code>--name</code> 容器名 查看 docker 进程</li></ol><p><code>docker ps</code>可以发现名为 vueApp 的容器已经运行起来。此时访问 <a class="link"   href="http://localhost:3000" >http://localhost:3000<i class="fas fa-external-link-alt"></i></a> 应该就能访问到该 vue 应用</p><h4 id="node-docker-部署"><a href="#node-docker-部署" class="headerlink" title="node_docker 部署"></a>node_docker 部署</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM node</span><br><span class="line"></span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line"></span><br><span class="line">COPY package*.json ./</span><br><span class="line"></span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line">EXPOSE <span class="number">8080</span></span><br><span class="line">CMD [ <span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span> ]</span><br></pre></td></tr></table></figure><p><strong>执行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t nodewebserver .</span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p <span class="number">5000</span>:<span class="number">8080</span> \</span><br><span class="line">-d --name nodeserver \</span><br><span class="line">nodewebserver</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200102132305.png"                      alt=""                ></p><h4 id="docker-compose-启动"><a href="#docker-compose-启动" class="headerlink" title="docker-compose 启动"></a>docker-compose 启动</h4><h5 id="vue-项目-docker-compose-配置"><a href="#vue-项目-docker-compose-配置" class="headerlink" title="vue 项目 docker-compose 配置"></a>vue 项目 docker-compose 配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;2&quot;</span></span><br><span class="line">services:</span><br><span class="line">  # 服务名称</span><br><span class="line">  nginx:</span><br><span class="line">    # 镜像:版本</span><br><span class="line">    image: nginx</span><br><span class="line">    # 映射容器80端口到本地80端口</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3000:80&quot;</span></span><br><span class="line">    # 数据卷 映射本地文件到容器</span><br><span class="line">    volumes:</span><br><span class="line">      # 映射nginx.conf文件到容器的/etc/nginx/conf.d目录并覆盖default.conf文件</span><br><span class="line">      - ./nginx/<span class="keyword">default</span>.conf:<span class="regexp">/etc/</span>nginx/conf.d/<span class="keyword">default</span>.conf</span><br><span class="line">      # 映射build文件夹到容器的/usr/share/nginx/html文件夹与config中的root路径一致</span><br><span class="line">      - ./dist:<span class="regexp">/home/</span>web/app</span><br><span class="line">    # 覆盖容器启动后默认执行的命令。</span><br><span class="line">    command: <span class="regexp">/bin/</span>bash -c <span class="string">&quot;nginx -g &#x27;daemon off;&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>关闭</span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h4 id="node-项目-docker-compose-配置"><a href="#node-项目-docker-compose-配置" class="headerlink" title="node 项目 docker-compose 配置"></a>node 项目 docker-compose 配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    image: node:<span class="number">10.13</span>-alpine</span><br><span class="line">    user: node</span><br><span class="line">    working_dir: <span class="regexp">/home/</span>node/app</span><br><span class="line">    environment:</span><br><span class="line">      - PORT=<span class="number">8000</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./:/home/node/app # 将本地目录映射到容器内</span><br><span class="line">    command: [&quot;node&quot;, &quot;server.js&quot;] # 运行命令</span><br><span class="line">    ports:</span><br><span class="line">      - 8000:8000 # 本地端口:容器端口</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>关闭</span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h4 id="跨域转发"><a href="#跨域转发" class="headerlink" title="跨域转发"></a>跨域转发</h4><p>想要将 vueApp 容器 上的请求转发到 nodeserver 容器上。首先需要知道 nodeserver 容器的 ip 地址和端口，目前已知 nodeserver 容器内部服务监听在 8080 端口，还需要知道 ip 即可。</p><p>如何查看容器地址?</p><p><code>docker inspect 02277acc3efc</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 代理以 api 为前缀的请求</span><br><span class="line">  location ~^/api &#123;</span><br><span class="line">         proxy_pass http:<span class="comment">//192.168.8.93:8000;</span></span><br><span class="line">         proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">         proxy_set_header Host $http_host;</span><br><span class="line">         proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191231222101.png"                      alt=""                ></p><h2 id="docker-compose-yml-配置详解"><a href="#docker-compose-yml-配置详解" class="headerlink" title="docker-compose.yml 配置详解"></a>docker-compose.yml 配置详解</h2><p>每个 docker-compose.yml 必须定义 image 或者 build 中的一个，其它的是可选的。</p><p>image<br>指定镜像 tag 或者 ID。示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">image: redis 或者 node 或者 nginx</span><br><span class="line">image: ubuntu:<span class="number">14.04</span></span><br><span class="line">image: tutum/influxdb</span><br><span class="line">image: example-registry.com:<span class="number">4000</span>/postgresql</span><br><span class="line">image: a4bc65fd</span><br></pre></td></tr></table></figure><h3 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h3><p>内容只是把以上命令整合到一起执行：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份原代码</span></span><br><span class="line">tar -zcvf gentle-vue.tar ./gentle-vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原代码文件夹</span></span><br><span class="line">rm -rf gentle-vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/FJ_WoMenDeShiJie/gentle-vue.git</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32m\n代码拉取\n\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 node_modules</span></span><br><span class="line">cp ./node.tar ./gentle-vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># build 打包 vue 项目，生成 dist 文件夹</span></span><br><span class="line"><span class="built_in">cd</span> ./gentle-vue</span><br><span class="line">tar -zxvf node.tar</span><br><span class="line">npm run build</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32m\nvue项目打包完成\n\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原镜像</span></span><br><span class="line">docker rmi gentle-vue &amp;&gt; /dev/null</span><br><span class="line"><span class="built_in">echo</span>  -e <span class="string">&quot;\033[32m\n删除原镜像文件\n\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 dockerfile 到工程目录下</span></span><br><span class="line">cp ../dockerfile ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -t gentle-vue .</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32m\n新镜像构建成功\n\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原容器</span></span><br><span class="line">docker rm -f gentle-vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -p 3000:80 -d --name gentle-vue gentle-vue</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32m\n前端工程部署完成\n\033[0m&quot;</span></span><br><span class="line">这样部署就方便多了。</span><br></pre></td></tr></table></figure><h2 id="Docker-的常用命令"><a href="#Docker-的常用命令" class="headerlink" title="Docker 的常用命令"></a>Docker 的常用命令</h2><h3 id="镜像常用命令"><a href="#镜像常用命令" class="headerlink" title="镜像常用命令"></a>镜像常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker pull [镜像名称:版本] 拉取镜像</span><br><span class="line">docker images  镜像列表</span><br><span class="line">docker rmi [镜像名称:版本] 删除镜像</span><br><span class="line">docker history [镜像名称] 镜像操作记录</span><br><span class="line">docker tag [镜像名称:版本][新镜像名称:新版本]</span><br><span class="line">docker inspect [镜像名称:版本] 查看镜像详细</span><br><span class="line">docker search [关键字] 搜索镜像</span><br><span class="line">docker login 镜像登陆</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="容器常用命令"><a href="#容器常用命令" class="headerlink" title="容器常用命令"></a>容器常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a 容器列表(所有容器)</span><br><span class="line">docker ps  查看所有(运行的)容器</span><br><span class="line">docker exec -ti &lt;id&gt; bash  以 bash 命令进入容器内</span><br><span class="line">docker run -ti --name [容器名称][镜像名称:版本] bash 启动容器并进入</span><br><span class="line">docker logs 查看容器日志</span><br><span class="line">docker top &lt;container_id&gt; 查看容器最近的一个进程</span><br><span class="line">docker run -ti --name [容器名称] -p 8080:80 [镜像名称:版本] bash  端口映射</span><br><span class="line">docker rm &lt;container_id&gt; 删除容器</span><br><span class="line">docker stop &lt;container_id&gt; 停止容器</span><br><span class="line">docker start &lt;container_id&gt; 开启容器</span><br><span class="line">docker restart &lt;container_id&gt; 重启容器</span><br><span class="line">docker inspect &lt;container_id&gt; 查看容器详情</span><br><span class="line">docker commit [容器名称] my_image:v1.0  容器提交为新的镜像</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://mp.weixin.qq.com/s/LCUFcIAfyiRmFPsYjyjYnQ" >前端工程师学 Docker ？ 看这篇就够了<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://mp.weixin.qq.com/s/AcjsHdg8ivgXN7FMA7jeYg" >Docker 搭建你的第一个 Node 项目到服务器<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://github.com/axetroy/blog/issues/178" >Docker 打造超溜的前端环境<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://beginor.github.io/2017/06/08/use-compose-instead-of-run.html" >使用 docker-compose 替代 docker run<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://docs.docker.com/compose/compose-file/" >官方文档<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端路由原理解析和实现</title>
      <link href="2019/12/15/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>2019/12/15/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在单页应用如此流行的今天，曾经令人惊叹的前端路由已经成为各大框架的基础标配，每个框架都提供了强大的路由功能，导致路由实现变的复杂。想要搞懂路由内部实现还是有些困难的，但是如果只想了解路由实现基本原理还是比较简单的。本文针对前端路由主流的实现方式 hash 和 history，提供了原生 JS/React/Vue 共计六个版本供参考，每个版本的实现代码约 25~40 行左右（含空行）。</p></blockquote><a id="more"></a><h2 id="什么是前端路由？"><a href="#什么是前端路由？" class="headerlink" title="什么是前端路由？"></a>什么是前端路由？</h2><p>路由的概念来源于服务端，在服务端中路由描述的是 URL 与处理函数之间的<code>映射关系</code>。</p><p>在 Web 前端单页应用 SPA(Single Page Application)中，路由描述的是 URL 与 UI 之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面）。</p><h2 id="如何实现前端路由？"><a href="#如何实现前端路由？" class="headerlink" title="如何实现前端路由？"></a>如何实现前端路由？</h2><h3 id="要实现前端路由，需要解决两个核心："><a href="#要实现前端路由，需要解决两个核心：" class="headerlink" title="要实现前端路由，需要解决两个核心："></a>要实现前端路由，需要解决两个核心：</h3><ol><li><p>⭐ 如何改变 URL 却不引起页面刷新？</p></li><li><p>⭐ 如何检测 URL 变化了？</p></li></ol><p>下面分别使用 hash 和 history 两种实现方式回答上面的两个核心问题。</p><h4 id="hash-实现"><a href="#hash-实现" class="headerlink" title="hash 实现"></a>hash 实现</h4><p>hash 是 URL 中 hash (#) 及后面的那部分，常用作锚点在页面内进行导航，改变 URL 中的 <code>hash</code> 部分<code>不会引起页面刷新</code><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/Users/lovewcc/Documents/02_Project/04_博客/source/_posts/20191121170151.png"                      alt=""                ><br>通过 <code>hashchange</code> 事件监听 URL 的变化，改变 URL 的方式只有这几种：通过浏览器前进后退改变 URL、通过<a/>标签改变 URL、通过 window.location 改变 URL，这几种情况改变 URL 都会触发 hashchange 事件</p><h4 id="history-实现"><a href="#history-实现" class="headerlink" title="history 实现"></a>history 实现</h4><p>history 提供了 <code>pushState</code> 和 <code>replaceState</code> 两个方法，这两个方法改变 URL 的 path 部分不会引起页面刷新</p><p>history 提供类似 hashchange 事件的 popstate 事件，但 <code>popstate</code> 事件有些不同：通过浏览器前进后退改变 URL 时会触发 popstate 事件，通过 pushState/replaceState 或<a/>标签改变 URL 不会触发 popstate 事件。好在我们可以<strong>拦截 pushState/replaceState 的调用</strong>和<a/>标签的点击事件来检测 URL 变化，所以监听 URL 变化可以实现，只是没有 hashchange 那么方便。</p><h3 id="原生-JS-版前端路由实现"><a href="#原生-JS-版前端路由实现" class="headerlink" title="原生 JS 版前端路由实现"></a>原生 JS 版前端路由实现</h3><h4 id="基于-hash-实现"><a href="#基于-hash-实现" class="headerlink" title="基于 hash 实现"></a>基于 hash 实现</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Users/lovewcc/Documents/02_Project/04_博客/source/_posts/20191121170422.png"                      alt=""                ></p><p>HTML 部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义路由 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 渲染路由对应的 UI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;routeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript 部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面加载完不会触发 hashchange，这里主动触发一次 hashchange 事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, onLoad);</span><br><span class="line"><span class="comment">// 监听路由变化</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;hashchange&quot;</span>, onHashChange);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由视图</span></span><br><span class="line"><span class="keyword">let</span> routerView = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  routerView = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#routeView&quot;</span>);</span><br><span class="line">  onHashChange();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由变化时，根据路由渲染对应 UI</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onHashChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;location.hash&quot;</span>, location.hash);</span><br><span class="line">  <span class="keyword">switch</span> (location.hash) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;#/home&quot;</span>:</span><br><span class="line">      routerView.innerHTML = <span class="string">&quot;Home&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;#/about&quot;</span>:</span><br><span class="line">      routerView.innerHTML = <span class="string">&quot;About&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充:</strong></p><blockquote><p>DOMContentLoaded 顾名思义，就是 dom 内容加载完毕。那什么是 dom 内容加载完毕呢？我们从打开一个网页说起。当输入一个 URL，页面的展示首先是空白的，然后过一会，页面会展示出内容，但是页面的有些资源比如说图片资源还无法看到，此时页面是可以正常的交互，过一段时间后，图片才完成显示在页面。从页面空白到展示出页面内容，会触发 DOMContentLoaded 事件。而这段时间就是 HTML 文档被加载和解析完成。<br>参考<br><a class="link"   href="https://www.cnblogs.com/caizhenbo/p/6679478.html" >DOMContentLoaded 与 load 的区别<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="基于-history-实现"><a href="#基于-history-实现" class="headerlink" title="基于 history 实现"></a>基于 history 实现</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Users/lovewcc/Documents/02_Project/04_博客/source/_posts/20191121173104.png"                      alt=""                ></p><p>html 部分:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;routeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js 部分:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面加载完不会触发 hashchange，这里主动触发一次 hashchange 事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, onLoad);</span><br><span class="line"><span class="comment">// 监听路由变化</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;popstate&quot;</span>, onPopState);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由视图</span></span><br><span class="line"><span class="keyword">var</span> routerView = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  routerView = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#routeView&quot;</span>);</span><br><span class="line">  onPopState();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 🌟🌟🌟🌟🌟拦截 &lt;a/&gt; 标签点击事件默认行为， 点击时使用 pushState 修改 URL并更新手动 UI，从而实现点击链接更新 URL 和 UI 的效果。</span></span><br><span class="line">  <span class="keyword">var</span> linkList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;a[href]&quot;</span>);</span><br><span class="line">  linkList.forEach(<span class="function"><span class="params">el</span> =&gt;</span></span><br><span class="line">    el.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//阻止默认事件</span></span><br><span class="line">      e.preventDefault();</span><br><span class="line">      <span class="comment">//history系统自带属性</span></span><br><span class="line">      history.pushState(<span class="string">&quot;这里是否可以添加state状态&quot;</span>, <span class="string">&quot;&quot;</span>, el.getAttribute(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">      <span class="comment">//el.getAttribute(&#x27;href&#x27;) ---&gt;  点击时使用 pushState 修改 URL并更新手动 UI/home 或者 /about</span></span><br><span class="line">      onPopState();</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由变化时，根据路由渲染对应 UI</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onPopState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;location.pathname&quot;</span>, location.pathname); <span class="comment">// location.pathname /home</span></span><br><span class="line">  <span class="keyword">switch</span> (location.pathname) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;/home&quot;</span>:</span><br><span class="line">      routerView.innerHTML = <span class="string">&quot;Home&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;/about&quot;</span>:</span><br><span class="line">      routerView.innerHTML = <span class="string">&quot;About&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Users/lovewcc/Documents/02_Project/04_博客/source/_posts/20191121174354.png"                      alt=""                ></p><h3 id="React-版前端路由实现"><a href="#React-版前端路由实现" class="headerlink" title="React 版前端路由实现"></a>React 版前端路由实现</h3><h4 id="基于-hash-实现-1"><a href="#基于-hash-实现-1" class="headerlink" title="基于 hash 实现"></a>基于 hash 实现</h4><p>html 部分:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span> =&gt;</span> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#125; /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span> =&gt;</span> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#125; /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js 部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserRouter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    currentPath: utils.extractHashPath(<span class="built_in">window</span>.location.href)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  onHashChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> currentPath = utils.extractHashPath(e.newURL);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;onHashChange:&quot;</span>, currentPath);</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; currentPath &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;hashchange&quot;</span>, <span class="built_in">this</span>.onHashChange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;hashchange&quot;</span>, <span class="built_in">this</span>.onHashChange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// window.location.href  http://localhost:3000/#/home</span></span><br><span class="line">    <span class="comment">//onPopState  undefined</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;RouteContext.Provider value=&#123;&#123; <span class="attr">currentPath</span>: <span class="built_in">this</span>.state.currentPath &#125;&#125;&gt;</span><br><span class="line">        &#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">      &lt;/RouteContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Route-实现"><a href="#Route-实现" class="headerlink" title="Route 实现"></a>Route 实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; path, render &#125;) =&gt; (</span><br><span class="line">  &lt;RouteContext.Consumer&gt;&#123;<span class="function">(<span class="params">&#123; currentPath &#125;</span>) =&gt;</span> currentPath === path &amp;&amp; render()&#125;&lt;/RouteContext.Consumer&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Link-实现"><a href="#Link-实现" class="headerlink" title="Link 实现"></a>Link 实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; to, ...props &#125;) =&gt; <span class="xml"><span class="tag">&lt;<span class="name">a</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">href</span>=<span class="string">&#123;</span>&quot;#&quot; + <span class="attr">to</span>&#125; /&gt;</span></span>;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Users/lovewcc/Documents/02_Project/04_博客/source/_posts/20191121185918.png"                      alt=""                ></p><h3 id="基于-history-实现-1"><a href="#基于-history-实现-1" class="headerlink" title="基于 history 实现"></a>基于 history 实现</h3><p>使用方式和 react-router 类似：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;HistoryRouter&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;Link to=<span class="string">&quot;/home&quot;</span>&gt;home&lt;/Link&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;Link to=<span class="string">&quot;/about&quot;</span>&gt;about&lt;/Link&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Route path=<span class="string">&quot;/home&quot;</span> render=&#123;<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/about&quot;</span> render=&#123;<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">&lt;/HistoryRouter&gt;</span><br></pre></td></tr></table></figure><h4 id="HistoryRouter-实现"><a href="#HistoryRouter-实现" class="headerlink" title="HistoryRouter 实现"></a>HistoryRouter 实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HistoryRouter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    currentPath: utils.extractUrlPath(<span class="built_in">window</span>.location.href)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  onPopState = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> currentPath = utils.extractUrlPath(<span class="built_in">window</span>.location.href);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;onPopState:&quot;</span>, currentPath);</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; currentPath &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;popstate&quot;</span>, <span class="built_in">this</span>.onPopState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;popstate&quot;</span>, <span class="built_in">this</span>.onPopState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;RouteContext.Provider value=&#123;&#123; <span class="attr">currentPath</span>: <span class="built_in">this</span>.state.currentPath, <span class="attr">onPopState</span>: <span class="built_in">this</span>.onPopState &#125;&#125;&gt;</span><br><span class="line">        &#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">      &lt;/RouteContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Route-实现-1"><a href="#Route-实现-1" class="headerlink" title="Route 实现"></a>Route 实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; path, render &#125;) =&gt; (</span><br><span class="line">  &lt;RouteContext.Consumer&gt;&#123;<span class="function">(<span class="params">&#123; currentPath &#125;</span>) =&gt;</span> currentPath === path &amp;&amp; render()&#125;&lt;/RouteContext.Consumer&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Link-实现-区别在这里"><a href="#Link-实现-区别在这里" class="headerlink" title="Link 实现 (区别在这里)"></a>Link 实现 (区别在这里)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; to, ...props &#125;) =&gt; (</span><br><span class="line">  &lt;RouteContext.Consumer&gt;</span><br><span class="line">    &#123;<span class="function">(<span class="params">&#123; onPopState &#125;</span>) =&gt;</span> (</span><br><span class="line">      &lt;a</span><br><span class="line">        href=<span class="string">&quot;&quot;</span></span><br><span class="line">        &#123;...props&#125;</span><br><span class="line">        onClick=&#123;<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//阻止默认事件</span></span><br><span class="line">          e.preventDefault();</span><br><span class="line">          <span class="comment">//改变浏览器的路径</span></span><br><span class="line">          <span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="string">&quot;&quot;</span>, to);</span><br><span class="line">          onPopState();</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )&#125;</span><br><span class="line">  &lt;/RouteContext.Consumer&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>前端路由的核心实现原理很简单，但是结合具体框架后，框架增加了很多特性，如动态路由、路由参数、路由动画等等，这些导致路由实现变的复杂。本文去粗取精只针对前端路由最核心部分的实现进行分析，并基于 hash 和 history 两种模式，分别提供原生 JS/React 三种实现，共计四个实现版本供参考，希望对你有所帮助。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[【第 1611 期】前端路由原理解析](</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux源码探索-applyMiddleware</title>
      <link href="2019/12/03/Redux%E6%BA%90%E7%A0%81%E6%8E%A2%E7%B4%A2-applyMiddleware/"/>
      <url>2019/12/03/Redux%E6%BA%90%E7%A0%81%E6%8E%A2%E7%B4%A2-applyMiddleware/</url>
      
        <content type="html"><![CDATA[<p>顾名思义，applyMiddleware 就是中间件的意思。applyMiddleware 接收中间件为参数，并<code>返回</code>一个以<code>createStore为参数的函数</code>；</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/ applyMiddleware.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">&#x27;Dispatching while constructing your middleware is not allowed. &#x27;</span> +</span><br><span class="line">          <span class="string">&#x27;Other middleware would not be applied to this dispatch.&#x27;</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// middlewareAPI 作为参数执行一遍所有的中间件</span></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    <span class="comment">// 根据 compose 生产的其实是类似 mid1(mid2(mid3(store.dispatch)))</span></span><br><span class="line">    <span class="comment">// 所以在数组最后的 middleware 其实是第一个执行的</span></span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要结合实际的中间件来理解，下面是 <code>logger</code> 中间件的示例代码:</p><ol><li>可以看到中间件 logger 其实是一个函数，参数为 dispatch 和 getState，这个对应上面的 <code>middlewareAPI</code>.</li><li>middleware(middlewareAPI) 执行后得到的还是个函数，参数是 next，看上面的 compose, 这个 next 其实就是 store.dispatch，返回的是新的 dispatch.</li><li>假如是 newDispatch,根据上面的 compose，你会发现，这个 newDispatch 是作为中间件链的下一个 middleware 的参数值（就是 next）这样一环扣一环，得到一个最终的 dispatch</li><li>在实际调用最终的 dispatch 时，你会发现，middleware 的执行顺序又变成是从左往右了（因为最终返回的 dispatch 是第一个中间件的函数）</li><li>执行过程中，遇到 next(action)，这时候其实就是右边一个 middleware 的返回的 dispatch，控制权就转到这个 middleware 了，</li><li>这样执行到最后，控制权返回，再执行 next 后面的代码</li><li>最终就是形成了中间件的洋葱模型，看下面的示意图</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger 中间件的示例代码</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="function">(<span class="params">&#123; getState, dispatch &#125;</span>) =&gt;</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;dispatching&quot;</span>, action);</span><br><span class="line">  <span class="keyword">let</span> result = next(action);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;next state&quot;</span>, store.getState());</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 洋葱模型示意图</span></span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">|   mid21                                                     |</span><br><span class="line">|         +---------------------------------------------+     |</span><br><span class="line">|         | mid2    +-----------------------------+     |     |</span><br><span class="line">|         |         | mid2   +-------------+      |     |     |</span><br><span class="line">|         |         |        |             |      |     |     |</span><br><span class="line">-&gt; next() -&gt; next() -&gt;next() -&gt; dispatch() -&gt;    -&gt;    -&gt;    -&gt;</span><br><span class="line">|         |         |        |             |      |     |     |</span><br><span class="line">|         |         |        +-------------+      |     |     |</span><br><span class="line">|         |         +-----------------------------+     |     |</span><br><span class="line">|         +---------------------------------------------+     |</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比如这个 logger 中间件的执行顺序会是 打印 dispatching -&gt; 等待 next 执行返回 -&gt; 打印 next state</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过熟悉 redux 的源码，我们也对 redux 的代码结构本身有了一个完整的理解，我们可以理解 redux 的整个工作流程：</p><ol><li>设计全局 state 的数据结构状态树</li><li>设计更改 state 数据、状态的 actionType 常量</li><li>根据 actionType，编写 actionCreator</li><li>根据各个 actionCreator 的返回值，用 reducer 做数据处理</li><li>有个 reducer 之后，我们用 createStore 来得到全局唯一的 store，来管理 state</li><li>用 bindActionCreator 函数将 actionCreator 和 store.dispatch 绑定起来，得到一组能更改 state 的函数</li><li>分发使用各个状态修改函数（dispatch）</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux源码探索-bindActionCreators</title>
      <link href="2019/12/02/Redux%E6%BA%90%E7%A0%81%E6%8E%A2%E7%B4%A2-bindActionCreators/"/>
      <url>2019/12/02/Redux%E6%BA%90%E7%A0%81%E6%8E%A2%E7%B4%A2-bindActionCreators/</url>
      
        <content type="html"><![CDATA[<p>bindActionCreators 的代码比较简单，就是将 actionCreator 和 dispatch 联结在一起。</p><a id="more"></a><p>对于多个 actionCreator，我们可以像 reducers 一样，组织成一个 key/action 的组合。由于很多情况下，action 是 actionCreator 返回的，实际上要这样调用 <code>store.dispatch(actionCreator(...args))</code>，很麻烦是吧？只能再封装一层呗，这就是函数式思想的体现，通过反复组合，将嵌套函数分离。（在这里，我不得不再夸一次 redux 的作者）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bindActionCreators.js 部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法的做用，其实就是一个简写的调用方法，方便使用</span></span><br><span class="line"><span class="comment">// 结果就是返回一个函数: `dispatch(actionCreator(xxx))`</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="compose-js"><a href="#compose-js" class="headerlink" title="compose.js"></a>compose.js</h4><p>compose 的代码不难理解，它调用了 ES5 的 Array.prototype.reduce 方法，将形如 fn(arg1)(arg2)(arg3)…的柯里化函数按照顺序执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> a(b(...args)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux源码探索-combineReducers</title>
      <link href="2019/12/02/Redux%E6%BA%90%E7%A0%81%E6%8E%A2%E7%B4%A2-combineReducers/"/>
      <url>2019/12/02/Redux%E6%BA%90%E7%A0%81%E6%8E%A2%E7%B4%A2-combineReducers/</url>
      
        <content type="html"><![CDATA[<p>这个函数可以组合一组 reducers，然后返回一个新的 reducer。</p><a id="more"></a><p>由于 redux 只维护<code>唯一</code>的 state，随着整个项目越来越大，state 状态树也会越来越庞大，state 的层级也会越来越深，当某个 action.type 所对应的 case 只是要修改 state.a.b.c.d.e.f 这个属性时，我的 handleCase 函数写起来就非常难看，我<code>必须</code>在这个函数的头部验证 <code>state 对象有没有那个属性</code>。这是让开发者非常头疼的一件事。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个合并后的 reducer 函数, state 默认值为空对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (shapeAssertionError) &#123;</span><br><span class="line">    <span class="keyword">throw</span> shapeAssertionError;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//.....</span></span><br><span class="line">  <span class="keyword">let</span> hasChanged = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> nextState = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 循环执行 reducer，这部分写的很清晰</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = finalReducerKeys[i];</span><br><span class="line">    <span class="keyword">const</span> reducer = finalReducers[key];</span><br><span class="line">    <span class="keyword">const</span> previousStateForKey = state[key];</span><br><span class="line">    <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action);</span><br><span class="line">    <span class="comment">// 这里验证是否会没有 state 返回</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> errorMessage = getUndefinedStateErrorMessage(key, action);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line">    nextState[key] = nextStateForKey;</span><br><span class="line">    hasChanged = hasChanged || nextStateForKey !== previousStateForKey;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// state 有改变返回下一个 state，否则返回原来的 state</span></span><br><span class="line">  <span class="keyword">return</span> hasChanged ? nextState : state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>combineReducers</code>实现方法很简单，它遍历传入的 reducers，返回一个新的 reducer，这个新对象的 key 跟传入的 reducers 一样，它的 value 则是传入的 reducers 的不同 key 对应的 value 展开的{ key: value }。貌似讲的有点绕啊~，举个例子好讲明白：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reducers = &#123;</span><br><span class="line">    todos: (state, action) &#123; <span class="comment">// 此处的 state 参数是全局 state.todos属性</span></span><br><span class="line">        <span class="keyword">switch</span> (action.type) &#123;...&#125; <span class="comment">// 返回的 new state 更新到全局 state.todos 属性中</span></span><br><span class="line">    &#125;,</span><br><span class="line">    activeFilter: (state, action) &#123; <span class="comment">// 拿到 state.activeFilter 作为此处的 state</span></span><br><span class="line">        <span class="keyword">switch</span> (action.type) &#123;...&#125; <span class="comment">// new state 更新到全局 state.activeFilter 属性中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> rootReducer = combineReducers(reducers)</span><br></pre></td></tr></table></figure><p><strong>不足</strong><br><code>combineReducers</code>是有缺陷的，源码中 mapValues 只是一级深度的映射，目前 redux 并没有提供简便的映射到 state.a.b 一级以上深度的 state 的方法。这是它目前的不足之处。我们在不改源码的情况下，可以通过嵌套 combineReducers 来达到目的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> todosReducers = &#123;</span><br><span class="line">  active: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//拿到全局 state.todos.active</span></span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> A: <span class="comment">//处理 A 场景</span></span><br><span class="line">        <span class="keyword">return</span> handleA(state);</span><br><span class="line">      <span class="keyword">case</span> B: <span class="comment">//处理 B 场景</span></span><br><span class="line">        <span class="keyword">return</span> handleB(state);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  completed: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//拿到全局 state.todos.completed</span></span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> C: <span class="comment">//处理 C 场景</span></span><br><span class="line">        <span class="keyword">return</span> handleC(state);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> todosRootReducer = combineReducers(todosReducers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reducers = &#123;</span><br><span class="line">  todos: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//拿到全局 state.todos</span></span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> A:</span><br><span class="line">      <span class="keyword">case</span> B:</span><br><span class="line">      <span class="keyword">case</span> C:</span><br><span class="line">        <span class="comment">// A B C 场景都传递给 todosRootReducer</span></span><br><span class="line">        <span class="keyword">return</span> todosRootReducer(state, action);</span><br><span class="line">      <span class="keyword">case</span> D:</span><br><span class="line">      <span class="comment">//...handle state</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rootReducer(state, action) 这里的 state 是真正的全局 state</span></span><br><span class="line"><span class="keyword">var</span> rootReducer = combineReducers(reducers);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://github.com/WisestCoder/blog/issues/1" >redux 源码分析与设计思路剖析<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://blog.hhking.cn/2019/07/12/redux-interpretation/" >Redux 源码解读<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux源码探索-createStore</title>
      <link href="2019/12/01/Redux%E6%BA%90%E7%A0%81%E6%8E%A2%E7%B4%A2-createStore/"/>
      <url>2019/12/01/Redux%E6%BA%90%E7%A0%81%E6%8E%A2%E7%B4%A2-createStore/</url>
      
        <content type="html"><![CDATA[<p>redux 的源码非常的简洁，总共加起来就几百行，所以不难理解；建议先去熟悉 redux 的 API 和用法再来看本文，会更得心应手。</p><a id="more"></a><p>大家看目录结构，一共有 6 个问件。先说下各个文件大概功能。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── utils                #工具函数 包括控制台输出一个警告，我们可以不用看</span><br><span class="line">├── applyMiddleware.js   #使用自定义的 middleware 来扩展 Redux</span><br><span class="line">├── bindActionCreators.js #把 action creators 转成拥有同名 keys 的对象,使用时可以直接调用</span><br><span class="line">├── combineReducers.js     #一个比较大的应用，需要对 reducer 函数 进行拆分，拆分后的每一块独立负责管理 state 的一部分</span><br><span class="line">├── compose.js       #从右到左来组合多个函数，函数编程中常用到</span><br><span class="line">├── createStore.js   #创建一个 Redux Store 来放所有的state</span><br><span class="line">└── index.js             #入口 js</span><br></pre></td></tr></table></figure><p>createStore 是 redux 非常重要的一个 API，createStore 会生成一个 store，用来维护一个全局的 state。store 作为一个<code>对象</code>,提供了直接获取对象页面数据<code>getState</code>方法,触发更新了 store 的<code>dispatch</code>方法,以及订阅 store 状态变化的<code>subscribe</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = &#123;</span><br><span class="line">  dispatch,</span><br><span class="line">  getState,</span><br><span class="line">  subscribe,</span><br><span class="line">  replaceReducer</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思考如何实现 store?创建 store 从<code>createStore</code>函数入手,一般简单需要接受<code>reducer</code>函数作为参数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> reduce <span class="keyword">from</span> <span class="string">&quot;./reduce&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reduce);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>createStore 返回一个完整的 store 对象,我们需要实现一个 getState,dispatch 和 subscribe 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断接受的参数个数，来指定 reducer 、 preloadedState 和 enhancer</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    enhancer = preloadedState</span><br><span class="line">    preloadedState = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果 enhancer 存在并且适合合法的函数，那么调用 enhancer，并且终止当前函数执行</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Expected the enhancer to be a function.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Expected the reducer to be a function.&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 储存当前的 currentReducer</span></span><br><span class="line">  <span class="keyword">var</span> currentReducer = reducer</span><br><span class="line">  <span class="comment">// 储存当前的状态</span></span><br><span class="line">  <span class="keyword">var</span> currentState = preloadedState</span><br><span class="line">  <span class="comment">// 储存当前的监听函数列表</span></span><br><span class="line">  <span class="keyword">var</span> currentListeners = []</span><br><span class="line">  <span class="comment">// 储存下一个监听函数列表</span></span><br><span class="line">  <span class="keyword">var</span> nextListeners = currentListeners</span><br><span class="line">  <span class="keyword">var</span> isDispatching = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个函数可以根据当前监听函数的列表生成新的下一个监听函数列表引用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">      nextListeners = currentListeners.slice()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ... getState ...</span><br><span class="line"></span><br><span class="line">  ... subscribe ...</span><br><span class="line"></span><br><span class="line">  ... dispatch ...</span><br><span class="line"></span><br><span class="line">  ... replaceReducer ...</span><br><span class="line"></span><br><span class="line">  ... observable ...</span><br><span class="line"></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer,</span><br><span class="line">    [$$observable]: observable</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是 createStore 的基本雏形,实际上就是设计模式中的<code>发布订阅模式</code></p><p>以上只是本人简单的分析与源码中还是有一些出入.</p><p><code>源码</code>中 createStore 接受 3 个参数：<code>reducer</code>, <code>preloadedState</code>, <code>enhancer</code>；第一个参数 reducer 和第三个参数 enhancer 我们接下来会具体介绍，第二个参数是<strong>preloadedState，它是 state 的初始值</strong>。</p><p>createStore 的返回值是 dispatch，subscribe，getState，replaceReducer，[$$observable]: observable，共同组成了一个 store，接下来我们也会讲到讲这些方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码中最后return</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  dispatch,</span><br><span class="line">  subscribe,</span><br><span class="line">  getState,</span><br><span class="line">  replaceReducer,</span><br><span class="line">  [$$observable]: observable</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="1-action"><a href="#1-action" class="headerlink" title="1. action"></a>1. action</h4><p>action 代表的是用户的操作。redux 规定 action 一定要包含一个 type 属性，且 type 属性也要唯一，相同的 type，redux 视为同一种操作，因为处理 action 的函数 reducer 只判断 action 中的 type 属性。</p><h4 id="2-reducer"><a href="#2-reducer" class="headerlink" title="2. reducer"></a>2. reducer</h4><p>reducer 接受两个参数，state 以及 action 函数返回的 action 对象，并返回最新的 state，如下 reducer 的 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> A:</span><br><span class="line">      <span class="keyword">return</span> handleA(state);</span><br><span class="line">    <span class="keyword">case</span> B:</span><br><span class="line">      <span class="keyword">return</span> handleB(state);</span><br><span class="line">    <span class="keyword">case</span> C:</span><br><span class="line">      <span class="keyword">return</span> handleC(state);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state; <span class="comment">// 如果没有匹配上就直接返回原 state</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>reducer 只是一个模式匹配的东西，真正处理数据的函数，<code>一般是额外在别的地方写</code>的（当然直接写在 reducer 中也没问题，只是不利于后期维护），在 reducer 中调用罢了。</p><p><code>reducer 为什么叫 reducer 呢</code>？因为 action 对象各种各样，每种对应某个 case ，但最后都汇总到 state 对象中，从多到一，这是一个减少( reduce )的过程，所以完成这个过程的函数叫 reducer。</p><h4 id="3-getState"><a href="#3-getState" class="headerlink" title="3 getState"></a>3 getState</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> currentState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个项目的<code>currentState</code> 是处于一个<code>闭包</code>之中，所以能一直存在，getState 会返回当前最新的 state。</p><h4 id="4-subscribe"><a href="#4-subscribe" class="headerlink" title="4 subscribe"></a>4 subscribe</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">// 标记订阅状态，取消订阅时避免重复取消订阅的逻辑执行，造成的性能损耗</span></span><br><span class="line">  <span class="keyword">let</span> isSubscribed = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 添加 listener 之前，确保不改动 currentListeners，而是 currentListeners 的复制出来的 nextListeners</span></span><br><span class="line">  ensureCanMutateNextListeners();</span><br><span class="line">  <span class="comment">// 添加回调函数 listener 到 nextListeners</span></span><br><span class="line">  nextListeners.push(listener);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 🌟🌟订阅的返回值是个函数，调用这个返回值来取消订阅（类似于 setTimeout 的返回值可以用来取消定时器）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// reducer 执行时不能取消订阅</span></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">&quot;You may not unsubscribe from a store listener while the reducer is executing. &quot;</span> +</span><br><span class="line">          <span class="string">&quot;See https://redux.js.org/api-reference/store#subscribe(listener) for more details.&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记为未订阅</span></span><br><span class="line">    isSubscribed = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 这里会再次确认 nextListeners 和 currentListeners 时，浅复制一份新的 nextListeners 出来</span></span><br><span class="line">    ensureCanMutateNextListeners();</span><br><span class="line">    <span class="comment">// 找到需要取消订阅的 listener，通过 splice 从数组中删除，变化体现在 nextListeners 数组中</span></span><br><span class="line">    <span class="keyword">const</span> index = nextListeners.indexOf(listener);</span><br><span class="line">    nextListeners.splice(index, <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>subscribe 接收一个 listener，它的作用是给 store 添加监听函数。nextListeners 储存了整个监听函数列表。 subscribe 的返回值是一个 unsubscribe，是一个解绑函数，调用该解绑函数，会将已经添加的监听函数删除，该监听函数处于一个闭包之中，会一直存在，所以在解绑函数中能删除该监听函数。（由此可见 redux 源码设计的精巧，多处地方巧用闭包，精简了许多代码。）</p><p>这里注意到一个函数 ensureCanMutateNextListeners，是干嘛用的呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createStore.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">    nextListeners = currentListeners.slice();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑下面这种场景：</p><ol><li>dispatch 过程中，监听回调 listener 数组 [ a, b, c ,d ] 在循环执行，但是刚执行完 a，a 被取消监听了，这时候数组就会变成 [ b, c ,d ]，c 是数组的第二项了。原本要执行第二项的 b 就被跳过了，而去执行 c 去了。</li><li>这个函数的作用是为了保证在 dispatch 过程中，新增或者取消订阅不会影响到当前的 dispatch，避免类似这种场景下 bug 的产生。</li><li>浅复制一份 currentListeners，保证当前的 dispatch 的不变，新增或者取消的会在 nextListeners 中体现，也就是下次 dispatch 时。 (subscribe 的注释里也有说明)</li></ol><h4 id="5-dispatch"><a href="#5-dispatch" class="headerlink" title="5 dispatch"></a>5 dispatch</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开始执行 reducer</span></span><br><span class="line">    isDispatching = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// reducer 的参数是当前的 state 和指定的 action，返回值作为新的 state, 所以要保证 reducer 一定要有 state 返回</span></span><br><span class="line">    currentState = currentReducer(currentState, action);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// reducer 执行完成</span></span><br><span class="line">    isDispatching = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 这里获取最新的回调函数数组, 然后循环逐个执行.</span></span><br><span class="line"><span class="comment">   * 这里让 currentListeners = nextListeners, 如果这时候出现新增或者取消订阅, 之前的 ensureCanMutateNextListeners 就起作用了,</span></span><br><span class="line"><span class="comment">   * 改动不会影响当前执行的数组, 下次执行 dispatch 才会拿到改过后的数组</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> listeners = (currentListeners = nextListeners);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> listener = listeners[i];</span><br><span class="line">    listener();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> action;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dispatch 接收一个参数 action。代码会先调用 createStore 传入的参数 reducer 方法，reducer 接受当前 state 和 action，通过判断 actionType，来做对应的操作，并返回最新的 currentState。dispatch 还会触发整个监听函数列表，所以最后整个监听函数列表都会按顺序执行一遍。<code>dispatch返回值就是传入的action</code>。</p><h4 id="6-replaceReducer"><a href="#6-replaceReducer" class="headerlink" title="6 replaceReducer"></a>6 replaceReducer</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Expected the nextReducer to be a function.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  currentReducer = nextReducer;</span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>replaceReducer</code>是替换当前的 reducer 的函数，replaceReducer 接受一个<code>新的reducer</code>，替换完成之后，会执行 dispatch({ type: ActionTypes.INIT }) ，用来初始化 store 的状态。官方举出了三种 replaceReducer 的使用场景，分别是：</p><ol><li>当你的程序要进行代码分割的时候</li><li>当你要动态的加载不同的 reducer 的时候</li><li>当你要实现一个实时 reloading 机制的时候</li></ol><h4 id="7-observable"><a href="#7-observable" class="headerlink" title="7 observable"></a>7 observable</h4><p>这个 API 并不是暴露给使用者的，这个是 redux 内部用的，大家不用深究（千万不要死脑筋啊~~~）。什么，你不信？好吧，实话告诉你，就是内部用的，在测试代码中会用到，感兴趣的可以去 test 目录下查看。</p><p>今天就先分析到这里…..拜里个拜~💤</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://github.com/WisestCoder/blog/issues/1" >redux 源码分析与设计思路剖析<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://blog.hhking.cn/2019/07/12/redux-interpretation/" >Redux 源码解读<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React2019 年最劲爆的新特性 React-Hooks</title>
      <link href="2019/11/28/React%E4%BB%8A%E5%B9%B4%E6%9C%80%E5%8A%B2%E7%88%86%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7React%20Hooks/"/>
      <url>2019/11/28/React%E4%BB%8A%E5%B9%B4%E6%9C%80%E5%8A%B2%E7%88%86%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7React%20Hooks/</url>
      
        <content type="html"><![CDATA[<p>React 在 v16.8 的版本中推出了 React Hooks 新特性，虽然社区还没有最佳实践如何基于 React Hooks 来打造复杂应用(至少我还没有)，凭借着阅读社区中大量的关于这方面的文章，下面我将通过十个案例来帮助你认识理解并可以熟练运用 React Hooks 大部分特性。</p><a id="more"></a><h3 id="为什么-React-要搞一个-Hooks？"><a href="#为什么-React-要搞一个-Hooks？" class="headerlink" title="为什么 React 要搞一个 Hooks？"></a>为什么 React 要搞一个 Hooks？</h3><blockquote><p>想要复用一个有状态的组件太麻烦了！</p></blockquote><p>react 都核心思想就是，<a href="">将一个页面拆成一堆独立的，可复用的组件</a>，并且用<code>自上而下</code>的单向数据流的形式将这些组件串联起来。但假如你在大型的工作项目中用 react，你会发现你的项目中实际上很多 react 组件冗长且难以复用。尤其是那些写成 class 的组件，它们本身包含了状态（state），所以复用这类组件就变得很麻烦。<br>那之前，官方推荐怎么解决这个问题呢？</p><p><strong>答案</strong>是：<code>渲染属性</code>（Render Props）和<code>高阶组件</code>（Higher-Order Components）。我们可以举例这两种模式。</p><h4 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h4><p>渲染属性指的是使用一个值为函数的 prop 来传递需要动态渲染的 nodes 或组件。如下面的代码可以看到我们的 DataProvider 组件包含了所有跟状态相关的代码，而 Cat 组件则可以是一个单纯的展示型组件，这样一来 DataProvider 就可以单独复用了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cat <span class="keyword">from</span> <span class="string">&#x27;components/cat&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataProvider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123; <span class="attr">target</span>: <span class="string">&#x27;Zac&#x27;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="built_in">this</span>.props.render(<span class="built_in">this</span>.state)&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;DataProvider render=&#123;<span class="function"><span class="params">data</span> =&gt;</span> (</span><br><span class="line">  &lt;Cat target=&#123;data.target&#125; /&gt;</span><br><span class="line">)&#125;/&gt;</span><br><span class="line"></span><br><span class="line">============改写下=======</span><br><span class="line">&lt;DataProvider&gt;</span><br><span class="line">  &#123;<span class="function"><span class="params">data</span> =&gt;</span> (</span><br><span class="line">    &lt;Cat target=&#123;data.target&#125; /&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/DataProvider&gt;</span><br></pre></td></tr></table></figure><h4 id="Higher-Order-Components"><a href="#Higher-Order-Components" class="headerlink" title="Higher-Order Components"></a>Higher-Order Components</h4><p>高阶组件这个概念就更好理解了，说白了就是一个函数接受一个组件作为参数，经过一系列加工后，最后返回一个新的组件。看下面的代码示例，withUser 函数就是一个高阶组件，它返回了一个新的组件，这个组件具有了它提供的获取用户信息的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withUser = <span class="function"><span class="params">WrappedComponent</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = sessionStorage.getItem(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">props</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> <span class="attr">user</span>=<span class="string">&#123;user&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> UserPage = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  <span class="comment">//复用每一个组件都需要获取user参数</span></span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;user-container&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;My name is &#123;props.user&#125;!&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withUser(UserPage);</span><br></pre></td></tr></table></figure><p>很多库也运用了这种模式，比如我们常用的 React Router。但我们仔细看这两种模式，会发现它们会增加我们代码的<code>层级关系</code>。最直观的体现，打开 devtool 看看你的组件层级嵌套是不是很夸张吧<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191025132524.png"                      alt=""                ></p><h4 id="生命周期钩子函数的逻辑太混乱"><a href="#生命周期钩子函数的逻辑太混乱" class="headerlink" title="生命周期钩子函数的逻辑太混乱"></a>生命周期钩子函数的逻辑太混乱</h4><p>比如我们需要在 componentDidMount 中发起 ajax 请求获取数据，绑定一些事件监听等等。同时，有时候我们还需要在 componentDidUpdate 做一遍同样的事情。当项目变复杂后，这一块的代码也变得不那么直观。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">    <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">         <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">           count: <span class="built_in">this</span>.state.count+<span class="number">1</span></span><br><span class="line">         &#125;)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">//销毁</span></span><br><span class="line">     <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.timer)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="class-中的-this-绑定"><a href="#class-中的-this-绑定" class="headerlink" title="class 中的 this 绑定"></a>class 中的 this 绑定</h4><p>用 class 来创建 react 组件时，还有一件很麻烦的事情，就是 this 的指向问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.handleClick(e)&#125;&gt;</span><br></pre></td></tr></table></figure><h4 id="需求变更"><a href="#需求变更" class="headerlink" title="需求变更"></a>需求变更</h4><p>项目中需求变更是非常常见的问题,之前组件写成无状态组件的形式，因为它们更方便复用，可独立测试。然而很多时候，我们用 function 写了一个简洁完美的无状态组件，后来因为需求变动这个组件必须得有自己的 state，我们又得很麻烦的把 function 改成 class。</p><blockquote><p>在这样的背景下，Hooks 便横空出世了！</p></blockquote><h3 id="先从简单的-Hooks-说起–useState"><a href="#先从简单的-Hooks-说起–useState" class="headerlink" title="先从简单的 Hooks 说起–useState"></a>先从简单的 Hooks 说起–useState</h3><p>我们看一下原来简单的有状态组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        <span class="comment">//根据state的改变重新渲染</span></span><br><span class="line">        &lt;p&gt;You clicked &#123;<span class="built_in">this</span>.state.count&#125; times&lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span> &#125;)&#125;&gt;Click me&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 hooks 之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">========或者==========</span><br><span class="line"><span class="comment">//初始化状态</span></span><br><span class="line"><span class="keyword">const</span> [state, setState] = useState(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//默认只执行一次console.log(&#x27;只执行初始化一次&#x27;);</span></span><br><span class="line"><span class="keyword">const</span> initialState = someExpensiveComputation(props)</span><br><span class="line"><span class="keyword">return</span> initialState</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">setState(<span class="function">(<span class="params">preState</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;...prevState, ...updatedValues&#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>特点:</p><ol><li>setState 组件重新渲染时不会变化，useState 返回的第一个值始终是<code>最新</code>的 state</li><li>state 如果是对象，当只更新对象部分属性时，state 更新不会合并对象</li><li>如果 state 不发生变化，调用 setState 将跳过更新</li><li>建议：将同一时间段更新的 state， 组合初始化在一起</li></ol><p>还有一个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>); <span class="comment">//1</span></span><br><span class="line">add(<span class="number">1</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>普通函数是记忆不住<code>result</code>的变量的.</p><h4 id="为什么-useState-可以记住之前的状态？"><a href="#为什么-useState-可以记住之前的状态？" class="headerlink" title="为什么 useState 可以记住之前的状态？"></a>为什么 useState 可以记住之前的状态？</h4><p>useState 接收的初始值没有规定一定要是 string/number/boolean 这种简单数据类型，它完全可以接收对象或者数组作为参数。唯一需要注意的点是，之前我们的 this.setState 做的是合并状态后返回一个新状态，而 useState 是直接替换老状态后返回新状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">&#x27;banana&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Hooks&#x27;</span> &#125;]);</span><br></pre></td></tr></table></figure><p>useState 无论调用多少次，相互之间是独立的。不同组件调用同一个 hook 也能保证各自状态的独立性。<br>react 是怎么保证多个 useState 的相互独立的？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一次渲染</span></span><br><span class="line">useState(<span class="number">42</span>); <span class="comment">//将age初始化为42</span></span><br><span class="line">useState(<span class="string">&quot;banana&quot;</span>); <span class="comment">//将fruit初始化为banana</span></span><br><span class="line">useState([&#123; <span class="attr">text</span>: <span class="string">&quot;Learn Hooks&quot;</span> &#125;]); <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次渲染</span></span><br><span class="line">useState(<span class="number">42</span>); <span class="comment">//读取状态变量age的值（这时候传的参数42直接被忽略）</span></span><br><span class="line">useState(<span class="string">&quot;banana&quot;</span>); <span class="comment">//读取状态变量fruit的值（这时候传的参数banana直接被忽略）</span></span><br><span class="line">useState([&#123; <span class="attr">text</span>: <span class="string">&quot;Learn Hooks&quot;</span> &#125;]); <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191025134656.png"                      alt=""                ></p><p>假如我们改一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> showFruit = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (showFruit) &#123;</span><br><span class="line">    <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">    showFruit = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">&quot;Learn Hooks&quot;</span> &#125;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191025134456.png"                      alt=""                ></p><blockquote><p>react 是根据 useState 出现的顺序来定的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一次渲染</span></span><br><span class="line">useState(<span class="number">42</span>); <span class="comment">//将age初始化为42</span></span><br><span class="line">useState(<span class="string">&quot;banana&quot;</span>); <span class="comment">//将fruit初始化为banana</span></span><br><span class="line">useState([&#123; <span class="attr">text</span>: <span class="string">&quot;Learn Hooks&quot;</span> &#125;]); <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次渲染</span></span><br><span class="line">useState(<span class="number">42</span>); <span class="comment">//读取状态变量age的值（这时候传的参数42直接被忽略）</span></span><br><span class="line"><span class="comment">// useState(&#x27;banana&#x27;);</span></span><br><span class="line">useState([&#123; <span class="attr">text</span>: <span class="string">&quot;Learn Hooks&quot;</span> &#125;]); <span class="comment">//读取到的却是状态变量fruit的值，导致报错</span></span><br></pre></td></tr></table></figure><h3 id="什么是-Effect-Hooks"><a href="#什么是-Effect-Hooks" class="headerlink" title="什么是 Effect Hooks?"></a>什么是 Effect Hooks?</h3><p>useEffect 组件渲染之后异步执行回调，并在下次渲染前执行<br>useLayoutEffect 组件渲染之后同步执行回调<br>比如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(callback); <span class="comment">//组件每次渲染，都会重新生成 useEffect</span></span><br><span class="line">useEffect(callback, [依赖参数]); <span class="comment">//组件每次渲染之后，根据依赖参数判断是否重新生成 useEffect</span></span><br><span class="line">useEffect(callback, []); <span class="comment">// 只在组件挂载时运行一</span></span><br></pre></td></tr></table></figure><p>我们写的有状态组件，通常会产生很多的副作用（side effect），比如发起 ajax 请求获取数据，添加一些监听的注册和取消注册，手动修改 dom 等等。我们之前都把这些副作用的函数写在生命周期函数钩子里，比如 componentDidMount，componentDidUpdate 和 componentWillUnmount。而现在的 useEffect 就相当与这些声明周期函数钩子的集合体。它以一抵三。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类似于componentDidMount 和 componentDidUpdate:</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 更新文档的标题</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> setCount(count + <span class="number">1</span>)&#125;&gt;Click me&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>useEffect Hook 对应的生命周期：</p><ol><li>componentDidMount</li><li>componentDidUpdate</li><li>componentWillUnmount</li></ol><p>再梳理一遍下面代码的逻辑：</p><ol><li>我们声明了一个状态变量 count，将它的初始值设为 0。</li><li>然后我们告诉 react，我们的这个组件有一个副作用。我们给 useEffecthook 传了一个匿名函数，这个匿名函数就是我们的副作用。</li><li>在这个例子里，我们的副作用是调用 browser API 来修改文档标题。</li><li>当 react 要渲染我们的组件时，它会先记住我们用到的副作用。等 react 更新了 DOM 之后，它再依次执行我们定义的副作用函数。</li></ol><p><strong>这里要注意几点：</strong></p><p>第一，react 首次渲染和之后的每次渲染都会调用一遍传给 useEffect 的函数。而之前我们要用两个声明周期函数来分别表示<code>首次渲染</code>（componentDidMount），和之后的<code>更新导致的重新渲染</code>（componentDidUpdate）<br>第二，useEffect 中定义的副作用函数的执行不会阻碍浏览器更新视图，也就是说这些函数是异步执行的，而之前的 componentDidMount 或 componentDidUpdate 中的代码则是同步执行的。这种安排对大多数副作用说都是合理的</p><h4 id="useEffect-怎么解绑一些副作用"><a href="#useEffect-怎么解绑一些副作用" class="headerlink" title="useEffect 怎么解绑一些副作用"></a>useEffect 怎么解绑一些副作用</h4><p>这种场景很常见，当我们在 componentDidMount 里添加了一个注册，我们得马上在 componentWillUnmount 中，也就是组件被注销之前清除掉我们添加的注册，否则内存泄漏的问题就出现了。</p><p><strong>怎么清除呢？</strong>让我们传给 useEffect 的副作用函数返回一个新的函数即可。这个新的函数将会在组件<code>下一次重新渲染之后</code>执行。这种模式在一些 pubsub 模式的实现中很常见。看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    <span class="comment">// 一定注意下这个顺序：告诉react在下次重新渲染组件之后，同时是下次调用ChatAPI.subscribeToFriendStatus之前执行cleanup</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Loading...&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">&quot;Online&quot;</span> : <span class="string">&quot;Offline&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再举个小李子<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191025141139.png"                      alt=""                ></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清理事件绑定</span></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">&quot;#size&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, changeName, <span class="literal">false</span>);</span><br><span class="line">  <span class="comment">//清理事件绑定</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&quot;#size&quot;</span>).removeEventListener(<span class="string">&quot;click&quot;</span>, changeName, <span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="这种解绑的模式与-componentWillUnmount-区别"><a href="#这种解绑的模式与-componentWillUnmount-区别" class="headerlink" title="这种解绑的模式与 componentWillUnmount 区别?"></a>这种解绑的模式与 componentWillUnmount 区别?</h4><p>componentWillUnmount 只会在组件被<code>销毁前执行一次</code>而已，而 useEffect 里的函数，每次组件渲染后都会执行一遍，包括副作用函数返回的这个清理函数也会重新执行一遍。所以我们一起来看一下下面这个问题。</p><p>为什么要让副作用函数每次组件更新都执行一遍？<br>我们在 componentDidMount 注册，再在 componentWillUnmount 清除注册。但假如这时候 props.friend.id 变了怎么办？我们不得不再添加一个 componentDidUpdate 来处理这种情况：<br>原来的做法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   ChatAPI.subscribeToFriendStatus(</span><br><span class="line">     <span class="built_in">this</span>.props.friend.id,</span><br><span class="line">     <span class="built_in">this</span>.handleStatusChange</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//增加一步动态改变id</span></span><br><span class="line">  <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps</span>)</span> &#123;</span><br><span class="line">   <span class="comment">// 先把上一个friend.id解绑</span></span><br><span class="line">   ChatAPI.unsubscribeFromFriendStatus(</span><br><span class="line">     prevProps.friend.id,</span><br><span class="line">     <span class="built_in">this</span>.handleStatusChange</span><br><span class="line">   );</span><br><span class="line">   <span class="comment">// 再重新注册新但friend.id</span></span><br><span class="line">   ChatAPI.subscribeToFriendStatus(</span><br><span class="line">     <span class="built_in">this</span>.props.friend.id,</span><br><span class="line">     <span class="built_in">this</span>.handleStatusChange</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   ChatAPI.unsubscribeFromFriendStatus(</span><br><span class="line">     <span class="built_in">this</span>.props.friend.id,</span><br><span class="line">     <span class="built_in">this</span>.handleStatusChange</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>看到了吗？很繁琐，而我们但 useEffect 则没这个问题，因为它在每次组件更新后都会重新执行一遍。所以代码的执行顺序是这样的：</p><p>1.页面首次渲染 2.替 friend.id=1 的朋友注册 3.突然 friend.id 变成了 2 4.页面重新渲染 5.清除 friend.id=1 的绑定 6.替 friend.id=2 的朋友注册<br>…</p><h4 id="怎么跳过一些不必要的副作用函数"><a href="#怎么跳过一些不必要的副作用函数" class="headerlink" title="怎么跳过一些不必要的副作用函数"></a>怎么跳过一些不必要的副作用函数</h4><p>我们只需要给 useEffect 传第二个参数即可。用第二个参数来告诉 react 只有当这个参数的值发生改变时，才执行我们传的副作用函数（第一个参数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// 只有当count的值发生变化时，才会重新执行`document.title`这一句</span></span><br></pre></td></tr></table></figure><p>当我们第二个参数传一个<code>空数组[]</code>时，其实就相当于只在<code>首次渲染的时候执行</code>。也就是 componentDidMount 加 componentWillUnmount 的模式。不过这种用法可能带来 bug，少用。</p><h3 id="怎么写自定义的-Effect-Hooks"><a href="#怎么写自定义的-Effect-Hooks" class="headerlink" title="怎么写自定义的 Effect Hooks?"></a>怎么写自定义的 Effect Hooks?</h3><p>为什么要自己去写一个 Effect Hooks? 这样我们才能把可以复用的逻辑抽离出来，变成一个个可以随意插拔的“插销”，哪个组件要用来，我就插进哪个组件里，so easy！看一个完整的例子，你就明白了。</p><p>比如我们可以把上面写的 FriendStatus 组件中判断朋友是否在线的功能抽出来，新建一个 useFriendStatus 的 hook 专门用来判断某个 id 是否在线。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFriendStatus</span>(<span class="params">friendID</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br><span class="line">============这时候FriendStatus组件就可以简写为：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Loading...&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">&#x27;Online&#x27;</span> : <span class="string">&#x27;Offline&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如别的组件需要一个朋友列表也需要显示是否在线的信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//引入方法</span></span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">isOnline</span> ? &quot;<span class="attr">green</span>&quot; <span class="attr">:</span> &quot;<span class="attr">black</span>&quot; &#125;&#125;&gt;</span>&#123;props.friend.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是-useContext"><a href="#什么是-useContext" class="headerlink" title="什么是 useContext"></a>什么是 useContext</h3><p>用来处理多层级传递数据的方式，在以前组件树种，跨层级祖先组件想要给孙子组件传递数据的时候，除了一层层 props 往下透传之外，我们还可以使用 React Context API 来帮我们做这件事</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Provider, Consumer &#125; = React.createContext(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Consumer</span>&gt;</span>&#123;color =&gt; <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;color&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Bar</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Provider value=&#123;<span class="string">&quot;grey&quot;</span>&#125;&gt;</span><br><span class="line">      &lt;Foo /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191025141519.png"                      alt=""                ></p><p>React Hooks 中，我们可以使用 useContext 进行改造</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//接受这个变量</span></span><br><span class="line">  <span class="keyword">const</span> color = useContext(colorContext);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;color&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Bar</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先声明一个变量</span></span><br><span class="line"><span class="keyword">const</span> colorContext = React.createContext(<span class="string">&quot;gray&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;colorContext.Provider value=&#123;<span class="string">&quot;red&quot;</span>&#125;&gt;</span><br><span class="line">      &lt;Foo /&gt;</span><br><span class="line">    &lt;/colorContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191025141949.png"                      alt=""                ><br>传递给 useContext 的是 context 而不是 consumer，返回值即是想要透传的数据了。用法很简单，使用 useContext 可以解决 Consumer 多状态嵌套的问题。</p><p>原本嵌套的方法层级太多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeaderBar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;CurrentUser.Consumer&gt;</span><br><span class="line">      &#123;<span class="function"><span class="params">user</span> =&gt;</span></span><br><span class="line">        &lt;Notifications.Consumer&gt;</span><br><span class="line">          &#123;<span class="function"><span class="params">notifications</span> =&gt;</span></span><br><span class="line">            &lt;header&gt;</span><br><span class="line">              Welcome back, &#123;user.name&#125;!</span><br><span class="line">              You have &#123;notifications.length&#125; notifications.</span><br><span class="line">            &lt;/header&gt;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/CurrentUser.Consumer&gt;</span><br><span class="line">  );&#125;</span><br></pre></td></tr></table></figure><p>现在用 useContext</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeaderBar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//想要传过来的值直接用useContext读取即可,可读性大大增加</span></span><br><span class="line">  <span class="keyword">const</span> user = useContext(CurrentUser);</span><br><span class="line">  <span class="keyword">const</span> notifications = useContext(Notifications);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      Welcome back, &#123;user.name&#125;! You have &#123;notifications.length&#125; notifications.</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是-useReducer"><a href="#什么是-useReducer" class="headerlink" title="什么是 useReducer"></a>什么是 useReducer</h3><p>这个 Hooks 在使用上几乎跟 Redux/React-Redux 一模一样，唯一缺少的就是无法使用 redux 提供的中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//初始化一个值</span></span><br><span class="line"><span class="keyword">const</span> initData = &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + action.payload &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;remove&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - action.payload &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initData);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;Count:&#123;state.count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">payload</span>: <span class="number">5</span> &#125;)&#125;&gt;增加&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;remove&quot;</span>, <span class="attr">payload</span>: <span class="number">1</span> &#125;)&#125;&gt;减少&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/2019-10-25 14.51.21.gif"                      alt=""                ><br><strong>用法跟 Redux 基本上是一致的，用法也很简单，算是提供一个 mini 的 Redux 版本。</strong></p><h3 id="什么是-useCallback"><a href="#什么是-useCallback" class="headerlink" title="什么是 useCallback"></a>什么是 useCallback</h3><p>四个字:记忆函数<br>在类组件中，我们经常犯下面这样的错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;SomeComponent</span><br><span class="line">          style=&#123;&#123; <span class="attr">fontSize</span>: <span class="number">14</span> &#125;&#125;</span><br><span class="line">          doSomething=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;do something&quot;</span>);</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/2019-10-25 15.02.04.gif"                      alt=""                ><br>这样写有什么坏处呢？一旦 App 组件的 props 或者状态改变了就会触发重渲染，即使跟 SomeComponent 组件不相关，由于每次 render 都会产生新的 style 和 doSomething，所以会导致 SomeComponent 重新渲染，倘若 <strong>SomeComponent 是一个大型的组件树</strong>，这样的 Virtual Dom 的比较显然是很浪费的，解决的办法也很简单，将参数抽离成变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fontSizeStyle = &#123; <span class="attr">fontSize</span>: <span class="number">14</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  doSomething = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;do something&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;SomeComponent style=&#123;fontSizeStyle&#125; doSomething=&#123;<span class="built_in">this</span>.doSomething&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类组件中，我们还可以通过 this 这个对象来存储函数，而在函数组件中没办法进行挂载了。所以函数组件在每次渲染的时候如果有传递函数的话<code>都会重渲染子组件</code>。</p><p>而有了 <code>useCallback</code> 就不一样了，你可以通过 useCallback 获得一个记忆后的函数。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/2019-10-25 15.26.00.gif"                      alt=""                ></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> memoizedHandleClick = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Click happened&quot;</span>);</span><br><span class="line">    setCount(count + <span class="number">1</span>);</span><br><span class="line">  &#125;, []); <span class="comment">// 空数组代表无论什么情况下该函数都不会发生改变</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      Count:&#123;count&#125;</span><br><span class="line">      &lt;SomeComponent doSomething=&#123;memoizedHandleClick&#125;&gt;Click Me&lt;/SomeComponent&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老规矩，第二个参数传入一个数组，数组中的每一项一旦值或者引用发生改变，useCallback 就会重新返回一个新的记忆函数提供给后面进行渲染。</p><p>这样只要子组件继承了 PureComponent 或者使用 React.memo 就可以有效避免不必要的 VDOM 渲染。<br>还有一些注意的事情如果此时子组件再传入其他的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> memoizedHandleClick = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Click happened&quot;</span>);</span><br><span class="line">    setCount(count + <span class="number">1</span>);</span><br><span class="line">  &#125;, []); <span class="comment">// 空数组代表无论什么情况下该函数都不会发生改变</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      Count:&#123;count&#125;</span><br><span class="line">      &lt;SomeComponent doSomething=&#123;memoizedHandleClick&#125; count=&#123;count&#125;&gt;</span><br><span class="line">        Click Me</span><br><span class="line">      &lt;/SomeComponent&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只执行一次因为数组为空代表只执行一次<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191025153344.png"                      alt=""                ></p><h3 id="什么是-useMemo"><a href="#什么是-useMemo" class="headerlink" title="什么是 useMemo"></a>什么是 useMemo</h3><p>useCallback 的功能完全可以由 useMemo 所取代，如果你想通过使用 useMemo 返回一个记忆函数也是完全可以的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> memoizedHandleClick = useMemo(</span><br><span class="line">  () =&gt; <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Click happened&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      setCount(count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [count]</span><br><span class="line">); <span class="comment">// 空数组代表无论什么情况下该函数都不会发生改变</span></span><br></pre></td></tr></table></figure><p>唯一的区别是：</p><ol><li>useCallback <code>不会执行</code>第一个参数函数，而是将它返回给你，</li><li>useMemo <code>会执行第一个函数</code>并且将函数执行结果返回给你。<br>所以在前面的例子中，可以返回 handleClick 来达到存储函数的目的。</li></ol><p><strong> useCallback 常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用。</strong><br><strong> useMemo 更适合经过函数计算得到一个确定的值，比如记忆组件。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">&#123; a, b &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Only re-rendered if `a` changes:</span></span><br><span class="line">  <span class="keyword">const</span> child1 = useMemo(<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Child1</span> <span class="attr">a</span>=<span class="string">&#123;a&#125;</span> /&gt;</span></span>, [a]);</span><br><span class="line">  <span class="comment">// Only re-rendered if `b` changes:</span></span><br><span class="line">  <span class="keyword">const</span> child2 = useMemo(<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Child2</span> <span class="attr">b</span>=<span class="string">&#123;b&#125;</span> /&gt;</span></span>, [b]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &#123;child1&#125;</span><br><span class="line">      &#123;child2&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 a/b 改变时，child1/child2 才会重新渲染。从例子可以看出来，只有在第二个参数数组的值发生变化时，才会触发子组件的更新。</p><h3 id="什么是-useRef"><a href="#什么是-useRef" class="headerlink" title="什么是 useRef"></a>什么是 useRef</h3><p>useRef 跟 createRef 类似，都可以用来生成对 DOM 对象的引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [name, setName] = useState(<span class="string">&quot;Nate&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> nameRef = useRef();</span><br><span class="line">  <span class="keyword">const</span> submitButton = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setName(nameRef.current.value);</span><br><span class="line">    nameRef.current.value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;p&gt;&#123;name&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input ref=&#123;nameRef&#125; type=<span class="string">&quot;text&quot;</span> /&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;submitButton&#125;&gt;</span><br><span class="line">          Submit</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/2019-10-25 15.51.16.gif"                      alt=""                ><br>useRef 返回的值传递给组件或者 DOM 的 ref 属性，就可以通过 ref.current 值访问组件或真实的 DOM 节点，从而可以对 DOM 进行一些操作，比如监听事件等等。</p><p>当然 useRef 远比你想象中的功能更加强大，useRef 的功能有点像类属性，或者说您想要在组件中记录一些值，并且这些值在稍后可以更改。</p><p>利用 useRef 就可以绕过 Capture Value 的特性。可以认为 ref 在所有 Render 过程中保持着唯一引用，因此所有对 ref 的赋值或取值，拿到的都只有一个最终状态，而不会在每个 Render 间存在隔离。参考例子：精读《Function VS Class 组件》<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191025155425.png"                      alt=""                ></p><h4 id="什么是-React-Hooks-中存在-Capture-Value-的特性"><a href="#什么是-React-Hooks-中存在-Capture-Value-的特性" class="headerlink" title="什么是 React Hooks 中存在 Capture Value 的特性"></a>什么是 React Hooks 中存在 Capture Value 的特性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageThread</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [message, setMessage] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;You said: &quot;</span> + message);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleSendClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleMessageChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setMessage(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;input value=&#123;message&#125; onChange=&#123;handleMessageChange&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleSendClick&#125;&gt;Send&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在点击 Send 按钮后,再次修改输入框的值，3 秒后的输出依然是点击前输入框的值。这就是所谓的 capture value 的特性。<br>而在类组件中 3 秒后输出的就是修改后的值，因为这时候 message 是挂载在 this 变量上，它保留的是一个引用值，对 this 属性的访问都会获取到最新的值。<br>讲到这里你应该就明白了，useRef 创建一个引用，就可以有效规避 React Hooks 中 Capture Value 特性,<code>ref拿到的是最新的值</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageThread</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> latestMessage = useRef(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;You said: &quot;</span> + latestMessage.current);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleSendClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleMessageChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    latestMessage.current = e.target.value;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;input value=&#123;latestMessage.current.value&#125; onChange=&#123;handleMessageChange&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleSendClick&#125;&gt;Send&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要将赋值与取值的对象变成 useRef，而不是 useState，就可以躲过 capture value 特性，在 3 秒后得到最新的值。</p><h3 id="什么是-useImperativeMethods"><a href="#什么是-useImperativeMethods" class="headerlink" title="什么是 useImperativeMethods"></a>什么是 useImperativeMethods</h3><p>通过 useImperativeHandle 用于让父组件获取子组件内的索</p><h3 id="什么是-useMutationEffect"><a href="#什么是-useMutationEffect" class="headerlink" title="什么是 useMutationEffect"></a>什么是 useMutationEffect</h3><h3 id="什么是-useLayoutEffect"><a href="#什么是-useLayoutEffect" class="headerlink" title="什么是 useLayoutEffect"></a>什么是 useLayoutEffect</h3><p>useLayoutEffect 同步执行副作用<br>大部分情况下，使用 useEffect 就可以帮我们处理组件的副作用，但是如果想要同步调用一些副作用，比如对 DOM 的操作，就需要使用 useLayoutEffect，useLayoutEffect 中的副作用会在 DOM 更新之后同步执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [width, setWidth] = useState(<span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;useEffect&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  useLayoutEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> title = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#title&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> titleWidth = title.getBoundingClientRect().width;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;useLayoutEffect&quot;</span>, width, titleWidth, title.getBoundingClientRect());</span><br><span class="line">    <span class="keyword">if</span> (width !== titleWidth) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        setWidth(titleWidth);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1 id=<span class="string">&quot;title&quot;</span>&gt;hello&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;width&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191025162213.png"                      alt=""                ></p><h5 id="加入定时器后再看看执行顺序"><a href="#加入定时器后再看看执行顺序" class="headerlink" title="加入定时器后再看看执行顺序"></a>加入定时器后再看看执行顺序</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/2019-10-25 16.25.50.gif"                      alt=""                ></p><h2 id="React-Hooks-不足"><a href="#React-Hooks-不足" class="headerlink" title="React Hooks 不足"></a>React Hooks 不足</h2><p>尽管我们通过上面的例子看到 React Hooks 的强大之处，似乎类组件完全都可以使用 React Hooks 重写。但是当下 v16.8 的版本中，还无法实现 <code>getSnapshotBeforeUpdate</code> 和 <code>componentDidCatch</code> 这两个在类组件中的生命周期函数。官方也计划在不久的将来在 React Hooks 进行实现,<strong>期待吧!</strong>😄💪🏻</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux 异步方案选型</title>
      <link href="2019/10/27/Redux%E5%BC%82%E6%AD%A5%E6%96%B9%E6%A1%88%E9%80%89%E5%9E%8B/"/>
      <url>2019/10/27/Redux%E5%BC%82%E6%AD%A5%E6%96%B9%E6%A1%88%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>本文会从一些常见的 Redux 异步方案出发，介绍它们的优缺点，进而讨论一些与异步相伴的常见场景，帮助你在选型时更好地权衡利弊。</p><a id="more"></a><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/reduxWorkStep.jpg"                      alt=""                ></p><blockquote><p>由于 Redux 的理念非常精简，没有追求大而全，这份架构上的优雅却在某种程度上伤害了使用体验：不能开箱即用，甚至是异步这种最常见的场景也要借助社区方案。</p></blockquote><h3 id="redux-thunk：指路先驱"><a href="#redux-thunk：指路先驱" class="headerlink" title="redux-thunk：指路先驱"></a>redux-thunk：指路先驱</h3><blockquote><p>Redux 本身只能处理同步的 Action，但可以通过中间件来拦截处理其它类型的 action，比如函数(Thunk)，再用回调触发普通 Action，从而实现异步处理，在这点上所有 Redux 的异步方案都是类似的。</p></blockquote><p><strong>缺点</strong>:就是重复的模板代码太多：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button, Progress,Loading&#125; <span class="keyword">from</span> <span class="string">&#x27;element-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  onGetData,</span><br><span class="line">  onGetDataSuccess,</span><br><span class="line">  onGetDataFAILED,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      value,</span><br><span class="line">      onAdd,</span><br><span class="line">      data,</span><br><span class="line">      loaddingVisible,</span><br><span class="line">    &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;counter_wrap&quot;</span>&gt;</span><br><span class="line">      ...</span><br><span class="line">              &lt;Button type=<span class="string">&quot;primary&quot;</span> onClick=&#123;onAsyncGetData&#125;&gt;异步加载&lt;/Button&gt;</span><br><span class="line">        &lt;Loading text=<span class="string">&quot;拼命加载中&quot;</span> loading=&#123;!!loaddingVisible&#125;&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            data.length === <span class="number">0</span> ? <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>加载之后可见<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> : <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data[0].name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &lt;/Loading&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;value,loaddingVisible,data&#125; = state;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    value:value,</span><br><span class="line">    data:data,</span><br><span class="line">    loaddingVisible:loaddingVisible</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    onAsyncGetData:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       dispatch(onGetData())</span><br><span class="line">      fetch(<span class="string">&#x27;http://mock.52react.cn/mock/5d886fc46cacdb72c1cb5ff2/v2.2/test&#x27;</span>, &#123;</span><br><span class="line">        method: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// or &#x27;PUT&#x27;</span></span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(&#123;&#125;), <span class="comment">// data can be `string` or &#123;object&#125;!</span></span><br><span class="line">        headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">        .then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data)</span><br><span class="line">          <span class="keyword">const</span> &#123;success,results&#125; = data;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            dispatch(onGetDataSuccess(results))</span><br><span class="line">          &#125;,<span class="number">2000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error)</span><br><span class="line">          dispatch(onGetDataFAILED())</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(App)</span><br></pre></td></tr></table></figure><p>这已经是最简单的场景了，请注意：我们甚至还<strong>没写一行业务逻辑</strong>，如果每个异步处理都像这样，重复且无意义的工作会变成明显的阻碍。</p><p>另一方面，像<code>GET_DATA_SUCCESS</code>、<code>GET_DATA_FAILED</code>这样的字符串声明也非常无趣且易错。<br>如果一个异步需要那么多状态,那么 5,6 个异步都需要那么多状态.太繁琐了</p><h3 id="redux-actions：简化-redux-的使用"><a href="#redux-actions：简化-redux-的使用" class="headerlink" title="redux-actions：简化 redux 的使用"></a>redux-actions：简化 redux 的使用</h3><p>Redux 虽然好用，但是里面还是有些重复代码，所以有了 redux-actions 来简化那些重复代码。</p><p>这部分简化工作主要集中在构造 action 和处理 reducers 方面。</p><p>先来看看原先的 actions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> T <span class="keyword">from</span> <span class="string">&quot;./actionTypes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changeBtnText = <span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: T.CHANGE_BTN_TEXT,</span><br><span class="line">    payload: text</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changeBtnTextAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!getState().isLoading) &#123;</span><br><span class="line">      dispatch(changeBtnText(<span class="string">&quot;正在加载中&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    axios</span><br><span class="line">      .get(<span class="string">&quot;http://test.com&quot;</span>)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (getState().isLoading) &#123;</span><br><span class="line">          dispatch(changeBtnText(<span class="string">&quot;加载完毕&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        dispatch(changeBtnText(<span class="string">&quot;加载有误&quot;</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后再来看看修改后的：<br>这里注意到，异步的 action 就不要用 createAction，因为这个 createAction 返回的是一个对象，而不是一个函数，就会导致 redux-thunk 的代码没有起到作用。</p><p>这里也可以使用 createActions 这个函数同时创建多个 action，但是讲道理，这个语法很奇怪，用 createAction 就好。</p><p>同样 redux-actions 对 reducer 的部分也进行了处理，比如 handleAction 以及 handelActions。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> T <span class="keyword">from</span> <span class="string">&quot;./actionTypes&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">&quot;redux-actions&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通action传值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changeBtnText = createAction(T.CHANGE_BTN_TEXT, <span class="function"><span class="params">text</span> =&gt;</span> text);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changeBtnTextAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!getState().isLoading) &#123;</span><br><span class="line">      dispatch(changeBtnText(<span class="string">&quot;正在加载中&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    axios</span><br><span class="line">      .get(<span class="string">&quot;http://test.com&quot;</span>)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (getState().isLoading) &#123;</span><br><span class="line">          dispatch(changeBtnText(<span class="string">&quot;加载完毕&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        dispatch(changeBtnText(<span class="string">&quot;加载有误&quot;</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看的出来<code>actions</code>的代码量也没有发生变化,再看看<code>reducers</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; handleActions &#125; <span class="keyword">from</span> <span class="string">&quot;redux-actions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> T <span class="keyword">from</span> <span class="string">&quot;./actionTypes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  btnText: <span class="string">&quot;我是按钮&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pageMainReducer = handleActions(</span><br><span class="line">  &#123;</span><br><span class="line">    [T.CHANGE_BTN_TEXT]: &#123;</span><br><span class="line">      <span class="function"><span class="title">next</span>(<span class="params">state, action</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          btnText: action.payload</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">throw</span>(state) &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  initialState</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pageMainReducer;</span><br></pre></td></tr></table></figure><h3 id="redux-promise：redux-actions-的好基友，轻松创建和处理异步-action"><a href="#redux-promise：redux-actions-的好基友，轻松创建和处理异步-action" class="headerlink" title="redux-promise：redux-actions 的好基友，轻松创建和处理异步 action"></a>redux-promise：redux-actions 的好基友，轻松创建和处理异步 action</h3><p>由于 redux-thunk 写起来实在是太麻烦了，社区当然会有其它轮子出现。<code>redux-promise</code>则是其中比较知名的，同样也享受了官网出镜的待遇。</p><p>它自定义了一个 middleware，当检测到有 action 的 payload 属性是 Promise 对象时，就会：</p><ol><li>若 resolve，触发一个此 action 的拷贝，但 payload 为 promise 的 value，并设 status 属性为”success”</li><li>若 reject，触发一个此 action 的拷贝，但 payload 为 promise 的 reason，并设 status 属性为”error”</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button, Progress,Loading&#125; <span class="keyword">from</span> <span class="string">&#x27;element-react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createAction&#125;  <span class="keyword">from</span> <span class="string">&#x27;redux-actions&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  onAddToPromise,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      value,</span><br><span class="line">      onAdd,</span><br><span class="line">      data,</span><br><span class="line">      error,</span><br><span class="line">      loaddingVisible,</span><br><span class="line">      onRemove,</span><br><span class="line">      onAddIfOdd,</span><br><span class="line">      onAsyncAddOne,</span><br><span class="line">      onAsyncGetData,</span><br><span class="line">      onPromise,</span><br><span class="line">    &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;counter_wrap&quot;</span>&gt;</span><br><span class="line">         ...</span><br><span class="line">        &lt;Button type=<span class="string">&quot;primary&quot;</span> onClick=&#123;onPromise&#125;&gt;<span class="built_in">Promise</span>异步加载&lt;/Button&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          error.length &gt; <span class="number">0</span> &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;error&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        &lt;h1&gt;&#123;data&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;value,loaddingVisible,data,error&#125; = state;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    value:value,</span><br><span class="line">    data:data,</span><br><span class="line">    error:error,</span><br><span class="line">    loaddingVisible:loaddingVisible</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    onPromise:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      dispatch(onGetData())</span><br><span class="line">      <span class="comment">//createAction函数的第一个就是type值，后面接受一个函数。</span></span><br><span class="line">      <span class="keyword">const</span> promise = createAction(<span class="string">&#x27;ADD_PROMISE&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">             fetch(<span class="string">&#x27;http://mock.52react.cn/mock/5d886fc46cacdb72c1cb5ff2/v2.2/test&#x27;</span>, &#123;</span><br><span class="line">               method: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// or &#x27;PUT&#x27;</span></span><br><span class="line">               body: <span class="built_in">JSON</span>.stringify(&#123;&#125;), <span class="comment">// data can be `string` or &#123;object&#125;!</span></span><br><span class="line">               headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">                 <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">               &#125;)</span><br><span class="line">             &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">               .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                  resolve(data)</span><br><span class="line">               &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                  reject(error)</span><br><span class="line">             &#125;)</span><br><span class="line">           &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>,promise())</span><br><span class="line">      dispatch(promise())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(App)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们再看来来 reducer 得写法<br><code>handleActions</code>的第一个参数是一个对象，对象中的 key 就是 action 的 type 的值，第二个参数就是初始值的设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reducers.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; handleActions &#125; <span class="keyword">from</span> <span class="string">&quot;redux-actions&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initData = &#123;</span><br><span class="line">  value: <span class="number">0</span>,</span><br><span class="line">  data: [],</span><br><span class="line">  loaddingVisible: <span class="literal">false</span>,</span><br><span class="line">  error: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> handleActions(</span><br><span class="line">  &#123;</span><br><span class="line">    ADD_PROMISE: &#123;</span><br><span class="line">      <span class="comment">//请求成功处理</span></span><br><span class="line">      <span class="function"><span class="title">next</span>(<span class="params">state, action</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; results, success &#125; = action.payload;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          data: results[<span class="number">0</span>].name</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//错误处理</span></span><br><span class="line">      <span class="keyword">throw</span>(state, action) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          ...state,</span><br><span class="line">          error: action.payload.toString()</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  initData</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191028000303.png"                      alt=""                ></p><p>错误得情况下如何返回呢?<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191028000431.png"                      alt=""                ></p><h3 id="redux-多个接口同时调用"><a href="#redux-多个接口同时调用" class="headerlink" title="redux 多个接口同时调用"></a>redux 多个接口同时调用</h3><h4 id="并发求值"><a href="#并发求值" class="headerlink" title="并发求值"></a>并发求值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onPromiseAction = createAction(<span class="string">&quot;ADD_PROMISE&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([asyncGetMockTest(), asyncGetMockTest2()])</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncGetMockTest = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">&quot;http://mock.52react.cn/mock/5d886fc46cacdb72c1cb5ff2/v2.2/test&quot;</span>, &#123;</span><br><span class="line">      method: <span class="string">&quot;POST&quot;</span>, <span class="comment">// or &#x27;PUT&#x27;</span></span><br><span class="line">      body: <span class="built_in">JSON</span>.stringify(&#123;&#125;), <span class="comment">// data can be `string` or &#123;object&#125;!</span></span><br><span class="line">      headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncGetMockTest2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">&quot;http://mock.52react.cn/mock/5d886fc46cacdb72c1cb5ff2/v2.2/test2&quot;</span>, &#123;</span><br><span class="line">      method: <span class="string">&quot;POST&quot;</span>, <span class="comment">// or &#x27;PUT&#x27;</span></span><br><span class="line">      body: <span class="built_in">JSON</span>.stringify(&#123;&#125;), <span class="comment">// data can be `string` or &#123;object&#125;!</span></span><br><span class="line">      headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再看看 reducers 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  ADD_PROMISE: &#123;</span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params">state, action</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;action&#x27;</span>,action)</span><br><span class="line">      <span class="comment">// action接受到数组对数组展开求值</span></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">       ...state,</span><br><span class="line"></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">throw</span>(state, action) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, initData);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191028172557.png"                      alt=""                ></p><h4 id="请求之间有依赖关系如何处理"><a href="#请求之间有依赖关系如何处理" class="headerlink" title="请求之间有依赖关系如何处理"></a>请求之间有依赖关系如何处理</h4><p>根据请求 3 之后再调用请求 4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onPromiseAction = createAction(<span class="string">&quot;ADD_PROMISE&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> test3 = <span class="keyword">await</span> asyncGetMockTest3();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;test3&quot;</span>, test3);</span><br><span class="line">  <span class="keyword">if</span> (test3.success) &#123;</span><br><span class="line">    <span class="keyword">const</span> test4 = <span class="keyword">await</span> asyncGetMockTest4();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(test4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//test3</span></span><br><span class="line"><span class="keyword">const</span> asyncGetMockTest3 = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> fetch(<span class="string">&quot;http://mock.52react.cn/mock/5d886fc46cacdb72c1cb5ff2/v2.2/test2&quot;</span>, &#123;</span><br><span class="line">    method: <span class="string">&quot;POST&quot;</span>, <span class="comment">// or &#x27;PUT&#x27;</span></span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(&#123;&#125;), <span class="comment">// data can be `string` or &#123;object&#125;!</span></span><br><span class="line">    headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> error;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//test4</span></span><br><span class="line"><span class="keyword">const</span> asyncGetMockTest4 = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> fetch(<span class="string">&quot;http://mock.52react.cn/mock/5d886fc46cacdb72c1cb5ff2/v2.2/test&quot;</span>, &#123;</span><br><span class="line">    method: <span class="string">&quot;POST&quot;</span>, <span class="comment">// or &#x27;PUT&#x27;</span></span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(&#123;&#125;), <span class="comment">// data can be `string` or &#123;object&#125;!</span></span><br><span class="line">    headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> error;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191028174119.png"                      alt=""                ></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说：</p><ol><li>redux 是一个可预测的状态容器，</li><li>react-redux 是将 store 和 react 结合起来，使得数据展示和修改对于 react 项目而言更简单</li><li>redux 中间件就是在 dispatch action 前对 action 做一些处理</li><li>redux-thunk 用于对异步做操作</li><li>redux-actions 用于简化 redux 操作</li><li>redux-promise 可以配合 redux-actions 用来处理 Promise 对象，使得异步操作更简单</li><li>redux-saga 可以起到一个控制器的作用，集中处理边际效用，并使得异步操作的写法更优雅。</li><li>OK，虽然说不想写那么多，结果还是写了一大堆。</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『TypeScript 系列』类型推断</title>
      <link href="2019/10/05/TypeScript%20%E7%B3%BB%E5%88%97%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/"/>
      <url>2019/10/05/TypeScript%20%E7%B3%BB%E5%88%97%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>类型是在哪里如何被推断的?</p></blockquote><a id="more"></a><p>TypeScript 里，在有些没有明确指出类型的地方，类型推论会帮助提供类型</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>变量<code>x</code>的类型被推断为数字。 这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时。</p><h3 id="通用类型"><a href="#通用类型" class="headerlink" title="通用类型"></a>通用类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [<span class="number">0</span>, <span class="number">1</span>, <span class="literal">null</span>];</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191010164115.png"                      alt=""                ></p><p>为了推断 x 的类型，我们必须考虑所有元素的类型。 这里有两种选择：<code>number</code>和<code>null</code>。 计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> zoo = [<span class="keyword">new</span> Rhino(), <span class="keyword">new</span> Elephant(), <span class="keyword">new</span> Snake()];</span><br></pre></td></tr></table></figure><p>这里，我们想让<code>zoo</code>被推断为<code>Animal[]</code>类型，但是这个数组里没有对象是<code>Animal</code>类型的，因此不能推断出这个结果。 为了更正，当候选类型不能使用的时候我们需要明确的指出类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> zoo: Animal[] = [<span class="keyword">new</span> Rhino(), <span class="keyword">new</span> Elephant(), <span class="keyword">new</span> Snake()];</span><br></pre></td></tr></table></figure><h3 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h3><p>这个例子会得到一个类型错误，TypeScript 类型检查器使用<code>Window.onmousedown</code>函数的类型来推断右边函数表达式的类型。 因此，就能推断出<code>event</code>参数的类型了。 如果函数表达式不是在<code>上下文类型的位置</code>，<code>event</code>参数的类型需要指定为<code>any</code>，这样也不会报错了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.clickTime); <span class="comment">//&lt;- Error</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191010163529.png"                      alt=""                ><br>修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">mouseEvent: any</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(mouseEvent.button); <span class="comment">//&lt;- Now, no error is given</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>上下文归类</code>会在很多情况下使用到。 通常包含<code>函数的参数</code>，赋值表达式的右边，类型断言，对象成员和数组字面量和返回值语句。 上下文类型也会做为最佳通用类型的候选类型。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  public numLen: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bee</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createZoo</span>(<span class="params"></span>): <span class="title">Animal</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">new</span> Bee(), <span class="keyword">new</span> Lion()];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『TypeScript 系列』枚举</title>
      <link href="2019/09/24/TypeScript%E7%B3%BB%E5%88%97%E6%9E%9A%E4%B8%BE/"/>
      <url>2019/09/24/TypeScript%E7%B3%BB%E5%88%97%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是枚举"><a href="#什么是枚举" class="headerlink" title="什么是枚举"></a>什么是枚举</h2><p>如 TypeScript 官方文档所说，枚举类型是对 JavaScript 标准数据类型集的<code>扩充</code>。对于熟悉 C# 的开发者来说，枚举类型并不陌生，它能够给一系列<code>数值集合</code>提供友好的<code>名称</code>，也就是说枚举表示的是<code>一个命名元素的集合</code>，因而它能够使您的程序避免因硬编码的值而显杂乱且难以维护。<br><a id="more"></a></p><h3 id="简单说起"><a href="#简单说起" class="headerlink" title="简单说起"></a>简单说起</h3><p>默认情况下，枚举是基于 0 的，也就是说第一个值是 0，后面的值依次递增。不要担心，当中的每一个值都可以显式指定，只要不出现重复即可，没有被显式指定的值，都会在前一个值的基础上递增。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Color </span><br><span class="line">&#123;Red, </span><br><span class="line">Green, </span><br><span class="line">Blue&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red = <span class="number">1</span>, Green, Blue = <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>枚举有一个很方便的特性，就是您也可以向枚举传递一个数值，然后获取它对应的名称值。举个例子，如果我们有一个值 2，但是不清楚在 Color 枚举中与之对应的名称是什么，我们就可以通过以下的方式来进行检索：</p><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><p>除了创建一个以属性名做为对象成员的对象之外，数字枚举成员还具有了 反向映射，从枚举值到枚举名字。 例如，在下面的例子中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> colorName: string = Color[<span class="number">2</span>];  <span class="comment">// 2值的不是下标 而是green的值 &#x27;Green&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是像上面的这种写法不是太好，因为如果您给定的数值没有与之对应的枚举项，那么结果就是 undefined。所以，如果您想要得到指定枚举项的字符串名称，可以使用类似这样的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colorName: string = Color[Color.Green];  <span class="comment">// &#x27;Green&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><p>字符串枚举的概念很简单，但是有细微的 运行时的差别。 在一个字符串枚举里，<code>每个成员都必须</code>用字符串字面量，或另外一个字符串枚举成员进行初始化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Direction &#123;</span><br><span class="line">    Up = <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">    Down = <span class="string">&quot;DOWN&quot;</span>,</span><br><span class="line">    Left = <span class="string">&quot;LEFT&quot;</span>,</span><br><span class="line">    Right = <span class="string">&quot;RIGHT&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化,字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。</p><h3 id="异构枚举-不推荐"><a href="#异构枚举-不推荐" class="headerlink" title="异构枚举(不推荐)"></a>异构枚举(不推荐)</h3><p>枚举可以混合字符串和数字成员(我们不建议你怎么做)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum BooleanLikeHeterogeneousEnum &#123;</span><br><span class="line">    No = <span class="number">0</span>,</span><br><span class="line">    Yes = <span class="string">&quot;YES&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行时的枚举"><a href="#运行时的枚举" class="headerlink" title="运行时的枚举"></a>运行时的枚举</h3><p>枚举是在运行时真正存在的对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enum E &#123;</span><br><span class="line">    X, Y, Z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">obj: &#123; X: number &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.X;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="const枚举"><a href="#const枚举" class="headerlink" title="const枚举"></a>const枚举</h3><p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 const枚举。 常量枚举通过在枚举上使用 const修饰符来定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enum Enum &#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B = A * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="外部枚举"><a href="#外部枚举" class="headerlink" title="外部枚举"></a>外部枚举</h3><p>外部枚举用来描述已经存在的枚举类型的形状。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">declare enum Enum &#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B,</span><br><span class="line">    C = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="计算的和常量成员"><a href="#计算的和常量成员" class="headerlink" title="计算的和常量成员"></a>计算的和常量成员</h3><p>每个枚举成员都<code>带有一个值</code>，它可以是 常量或 计算出来的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum E &#123; X &#125;</span><br></pre></td></tr></table></figure><p>枚举成员使用 <code>常量枚举表达式初始化</code>。 常数枚举表达式是TypeScript表达式的子集，它可以在编译阶段求值。 当一个表达式满足下面条件之一时，它就是一个常量枚举表达式：</p><ol><li>一个枚举表达式字面量（主要是字符串字面量或数字字面量）</li><li>一个对之前定义的常量枚举成员的引用（可以是在不同的枚举类型中定义的）</li><li>带括号的常量枚举表达式</li><li>一元运算符 +, -, ~其中之一应用在了常量枚举表达式</li><li>常量枚举表达式做为二元运算符 +, -, *, /, %, &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;, &amp;, |, ^的操作对象。 若常数枚举表达式求值后为 NaN或 Infinity，则会在编译阶段报错。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enum FileAccess &#123;</span><br><span class="line">    <span class="comment">// constant members</span></span><br><span class="line">    None,</span><br><span class="line">    Read    = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    Write   = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    ReadWrite  = Read | Write,</span><br><span class="line">    <span class="comment">// computed member</span></span><br><span class="line">    G = <span class="string">&quot;123&quot;</span>.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a class="link"   href="https://www.jianshu.com/p/42241a597a50" >简书-TypeScript 数据类型——枚举 (Enum)<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『TypeScript 系列』泛型</title>
      <link href="2019/09/12/TypeScript%E7%B3%BB%E5%88%97%E6%B3%9B%E5%9E%8B/"/>
      <url>2019/09/12/TypeScript%E7%B3%BB%E5%88%97%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>组件在构建过程不仅要考虑当下的<code>数据类型</code>,也要考虑未来的扩展.让其灵活</p><p>在像 C#和 Java 这样的语言中，可以使用<code>泛型</code>来创建可重用的组件，<code>一个组件</code>可以支持<code>多种类型的数据</code>。 这样用户就可以以自己的数据类型来使用组件。</p><a id="more"></a><h3 id="不用泛型"><a href="#不用泛型" class="headerlink" title="不用泛型"></a>不用泛型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者 我们可以用any</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 any 这种类型可以用任何类型,这样导致传入的类型和返回的类型可以不统一.</p><p>因此我们需要去<code>规定</code>返回类型与传入类型的相同,我们只用表示类型而不是值</p><h3 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们给这个方法传入类型变量<code>T</code>,这个<code>T</code>帮我们<code>规定</code>传入的类型(比如:number),之后我们就可以使用这个类型,之后我们再次使用这个<code>T</code>当返回值类型.</p><p>不同与 any,它不会丢失一些规则.</p><p>我们在定义了泛型后,可以用 2 种方法使用 1.传入所有的参数,包含类型参数 2.方法更普遍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity &lt; string &gt; <span class="string">&#x27;myString&#x27;</span></span><br></pre></td></tr></table></figure><p>或者 利用了类型推论</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译器会根据传入的参数自动地帮助我们确定T的类型</span></span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">&#x27;myString&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length) <span class="comment">// Error: T doesn&#x27;t have .length</span></span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会报错说我们使用了 arg 的.length 属性，但是没有地方指明 arg 具有这个属性。 记住，这些类型变量代表的是<code>任意类型</code>，所以使用这个函数的人可能传入的是个<code>数字</code>，而数字是没有<code>.length</code>属性的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length) <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以这样理解<code>loggingIdentity</code>的类型：泛型函数<code>loggingIdentity</code>，接收类型参数 T 和参数<code>arg</code>，它是个元素类型是<code>T</code>的数组，并返回元素类型是 T 的数组。 如果我们传入数字数组，将返回一个数字数组，因为此时 T 的的类型为<code>number</code>。 这可以让我们把泛型变量 T 当做类型的一部分使用，而不是整个类型，增加了灵活性</p><h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><p>泛型函数的类型与非泛型函数的类型没什么不同，<code>只是有一个类型参数在最前面</code>，像函数声明一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = identity</span><br><span class="line"><span class="comment">//也可以用不同的泛型参数名</span></span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;U&gt;<span class="function">(<span class="params">arg: U</span>) =&gt;</span> U = identity</span><br></pre></td></tr></table></figure><p>还可以写个泛型接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface GenericIdentityFn &#123;</span><br><span class="line">  &lt;T&gt;(arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类似于这样</span></span><br><span class="line"><span class="comment">//let myIdentity: &#123;&lt;T&gt;(arg:T):T&#125; = identity;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn = identity</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line"></span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;number&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">let</span> stringNumeric = <span class="keyword">new</span> GenericNumber&lt;string&gt;();</span><br><span class="line">stringNumeric.zeroValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line">stringNumeric.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line">alert(stringNumeric.add(stringNumeric.zeroValue, <span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure><p>与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。</p><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>之前的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length) <span class="comment">// Error: T doesn&#x27;t have .length</span></span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们可以约束下 arg 的某一种类型是可以又 lenght 属性的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface Lengthwise &#123;</span><br><span class="line">    length: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">3</span>);  <span class="comment">// Error, number doesn&#x27;t have a .length property</span></span><br><span class="line">loggingIdentity(&#123;<span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="在泛型里使用类类型"><a href="#在泛型里使用类类型" class="headerlink" title="在泛型里使用类类型"></a>在泛型里使用类类型</h3><p>使用原型属性推断并约束构造函数与类实例的关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeeKeeper</span> </span>&#123;</span><br><span class="line">    hasMask: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZooKeeper</span> </span>&#123;</span><br><span class="line">    nametag: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    numLegs: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bee</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    keeper: BeeKeeper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    keeper: ZooKeeper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>&lt;<span class="title">A</span> <span class="title">extends</span> <span class="title">Animal</span>&gt;(<span class="params">c: &#123;<span class="keyword">new</span> () =&gt; A&#125;</span>): <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createInstance(Lion).keeper.nametag;</span><br><span class="line">createInstance(Bee).keeper.hasMask;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『TypeScript 系列』函数</title>
      <link href="2019/09/09/TypeScript%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0/"/>
      <url>2019/09/09/TypeScript%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>加班!加班!加班! 又好久没更了 😓</p><a id="more"></a><blockquote><p>函数是 JavaScript 应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。 TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用</p></blockquote><h2 id="简单函数"><a href="#简单函数" class="headerlink" title="简单函数"></a>简单函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">x: any, y: any</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + <span class="number">234</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数类型包含两部分：</p><ol><li>参数类型</li><li>返回值类型。</li></ol><p>当写出完整函数类型的时候，这两部分都是需要的。 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。 这个名字只是为了增加可读性。 我们也可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数类型 == 参数类型 + 返回值类型</span></span><br><span class="line"><span class="keyword">const</span> myAdd: <span class="function">(<span class="params">x: number, y: number</span>) =&gt;</span> number = <span class="function"><span class="keyword">function</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于返回值，我们在函数和返回值类型之前使用(<code>=&gt;</code>)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为<code>void</code>而不能<code>留空</code>。</p><h2 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h2><p>你会发现如果你在赋值语句的一边指定了类型但是另一边没有类型的话，TypeScript 编译器会<code>自动识别出类型</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd: <span class="function">(<span class="params">baseValue: number, increment: number</span>) =&gt;</span> number = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h2><p>在 TypeScript 里我们可以在参数名旁使用?实现可选参数的功能。 比如，我们想让 last 是可选的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName2</span>(<span class="params">first: string, last?: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first + <span class="string">&quot;,&quot;</span> + last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res3 = buildName2(<span class="string">&quot;jack&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是 undefined 时。 它们叫做有默认初始化值的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName3</span>(<span class="params">first = <span class="string">&quot;jack&quot;</span>, last?: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first + <span class="string">&quot;,&quot;</span> + last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p>有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在 JavaScript 里，你可以使用 arguments 来访问所有传入的参数。在 TypeScript 里，你可以把所有参数收集到一个变量里,可以一个都没有，同样也可以有任意个。编译器创建<code>参数数组</code>，名字是你在省略号<code>（...）</code>后面给定的名字，你可以在函数体内使用这个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: string, ...restOfName: string[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + restOfName.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = buildName(<span class="string">&quot;Joseph&quot;</span>, <span class="string">&quot;Samuel&quot;</span>, <span class="string">&quot;Lucas&quot;</span>, <span class="string">&quot;MacKinzie&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: string, ...restOfName: string[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + restOfName.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buildNameFun: <span class="function">(<span class="params">fname: string, ...rest: string[]</span>) =&gt;</span> string = buildName;</span><br></pre></td></tr></table></figure><h2 id="this-和箭头函数"><a href="#this-和箭头函数" class="headerlink" title="this 和箭头函数"></a>this 和箭头函数</h2><p>this 的值在函数被调用的时候才会指定。 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。 但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deck = &#123;</span><br><span class="line">  suits: [<span class="string">&quot;hearts&quot;</span>, <span class="string">&quot;spades&quot;</span>, <span class="string">&quot;clubs&quot;</span>, <span class="string">&quot;diamonds&quot;</span>],</span><br><span class="line">  cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">  <span class="function"><span class="title">createCardPicker</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> pickerCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">      <span class="keyword">const</span> pickedSuit = <span class="built_in">Math</span>.floor(pickerCard / <span class="number">13</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        suit: <span class="built_in">this</span>.suits[pickedSuit], <span class="comment">// this=&gt;指向全局 global undefined</span></span><br><span class="line">        card: pickerCard % <span class="number">13</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cardPicker = deck.createCardPicker();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pickerCard = cardPicker();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;card:&quot;</span> + pickerCard.card);</span><br></pre></td></tr></table></figure><p>返回的函数里的<code>this</code>被设置成了 window 而不是 deck 对象。</p><h3 id="this-参数"><a href="#this-参数" class="headerlink" title="this 参数"></a>this 参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构上面函数</span></span><br><span class="line">interface card &#123;</span><br><span class="line">  suit: string</span><br><span class="line">  card: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface deck &#123;</span><br><span class="line">  suits: string[]</span><br><span class="line">  card: number[]</span><br><span class="line">  createCardPicker(<span class="built_in">this</span>: deck): <span class="function">() =&gt;</span> card</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deck1 = &#123;</span><br><span class="line">  suits: [<span class="string">&#x27;hearts&#x27;</span>, <span class="string">&#x27;spades&#x27;</span>, <span class="string">&#x27;clubs&#x27;</span>, <span class="string">&#x27;diamonds&#x27;</span>],</span><br><span class="line">  cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">  <span class="function"><span class="title">createCardPicker</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;this&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">this</span>: deck</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> pickerCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>)</span><br><span class="line">      <span class="keyword">const</span> pickedSuit = <span class="built_in">Math</span>.floor(pickerCard / <span class="number">13</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        suit: <span class="built_in">this</span>.suits[pickedSuit], <span class="comment">//this --&gt;deck</span></span><br><span class="line">        card: pickerCard % <span class="number">13</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回调函数里的-this-参数"><a href="#回调函数里的-this-参数" class="headerlink" title="回调函数里的 this 参数"></a>回调函数里的 this 参数</h2><p>当回调函数被调用时，它会被当成一个普通函数调用，<code>this</code>将为<code>undefined</code>。 稍做改动，你就可以通过 this 参数来避免错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface UIElement &#123;</span><br><span class="line">    addClickListener(onclick: <span class="function">(<span class="params"><span class="built_in">this</span>: <span class="keyword">void</span>, e: Event</span>) =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>this: void</code>意味着<code>addClickListener</code>期望 onclick 是一个函数且它不需要一个 this 类型。 然后，为调用代码里的 this 添加类型注解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">  info: string;</span><br><span class="line">  <span class="function"><span class="title">onClickGood</span>(<span class="params"><span class="built_in">this</span>: <span class="keyword">void</span>, e: Event</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// can&#x27;t use this here because it&#x27;s of type void!</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line">uiElement.addClickListener(h.onClickGood);</span><br></pre></td></tr></table></figure><p>因为<code>onClickGood</code>指定了<code>this</code>类型为<code>void</code>，因此传递 addClickListener 是合法的。 当然了，这也意味着不能使用<code>this.info</code></p><p>如果你两者都想要，你不得不使用箭头函数了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">  info: string;</span><br><span class="line">  onClickGood = <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.info = e.message;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个<code>Handler</code>对象都会创建一个箭头函数。 另一方面，方法只会被创建一次，添加到 Handler 的原型链上。 它们在不同 Handler 对象间是共享的。</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>JavaScript 里函数根据传入<code>不同的参数</code>而返回<code>不同类型</code>的数据是很常见的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">&quot;hearts&quot;</span>, <span class="string">&quot;spades&quot;</span>, <span class="string">&quot;clubs&quot;</span>, <span class="string">&quot;diamonds&quot;</span>];</span><br><span class="line"></span><br><span class="line">&lt;!--参数为对象  == 返回 数字--&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123;suit: string; card: number; &#125;[]</span>): <span class="title">number</span></span>;</span><br><span class="line">&lt;!--参数为数字== 返回对象 --&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: number</span>): </span>&#123;suit: string; card: number; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">        <span class="keyword">return</span> pickedCard;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">suit</span>: suits[pickedSuit], <span class="attr">card</span>: x % <span class="number">13</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [&#123; <span class="attr">suit</span>: <span class="string">&quot;diamonds&quot;</span>, <span class="attr">card</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">suit</span>: <span class="string">&quot;spades&quot;</span>, <span class="attr">card</span>: <span class="number">10</span> &#125;, &#123; <span class="attr">suit</span>: <span class="string">&quot;hearts&quot;</span>, <span class="attr">card</span>: <span class="number">4</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line">alert(<span class="string">&quot;card: &quot;</span> + pickedCard1.card + <span class="string">&quot; of &quot;</span> + pickedCard1.suit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line">alert(<span class="string">&quot;card: &quot;</span> + pickedCard2.card + <span class="string">&quot; of &quot;</span> + pickedCard2.suit);</span><br></pre></td></tr></table></figure><blockquote><p>注意，function pickCard(x): any 并不是重载列表的一部分，因此这里只有两个重载</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『TypeScript 系列』类</title>
      <link href="2019/09/01/TypeScript%E7%B3%BB%E5%88%97%E7%B1%BB/"/>
      <url>2019/09/01/TypeScript%E7%B3%BB%E5%88%97%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ECMAScript 2015，也就是 ECMAScript 6 开始，JavaScript 程序员将能够使用基于类的面向对象的方式。 使用 TypeScript，我们允许开发者现在就使用这些特性，并且编译后的 JavaScript 可以在所有主流浏览器和平台上运行，而不需要等到下个 JavaScript 版本。</p></blockquote><a id="more"></a><h2 id="用-ES6-创建一个简单类"><a href="#用-ES6-创建一个简单类" class="headerlink" title="用 ES6 创建一个简单类"></a>用 ES6 创建一个简单类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  greeting: string</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">message: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.greeting = message</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">greet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + <span class="built_in">this</span>.greeting</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">&#x27;world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个类有 3 个成员：</p><ol><li>一个叫做 greeting 的属性，</li><li>一个构造函数</li><li>一个 greet 方法。</li></ol><p>我们在引用任何一个类成员的时候都用了<code>this</code>。它表示我们访问的是类的成员。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params">distance: number = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Animal moved <span class="subst">$&#123;distance&#125;</span>m.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Woof! Woof!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog()</span><br><span class="line">dog.bark()</span><br><span class="line">dog.move(<span class="number">10</span>)</span><br><span class="line">dog.bark()</span><br></pre></td></tr></table></figure><h2 id="复杂版继承"><a href="#复杂版继承" class="headerlink" title="复杂版继承"></a>复杂版继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  name: string</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">theName: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = theName</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params">distance: number = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span></span></span><br><span class="line"><span class="string">        moved <span class="subst">$&#123;distance&#125;</span>m.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params">distanceInMeters = <span class="number">5</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Slithering...&#x27;</span>)</span><br><span class="line">    <span class="built_in">super</span>.move(distanceInMeters)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params">distanceInMeters = <span class="number">45</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Galloping...&#x27;</span>)</span><br><span class="line">    <span class="built_in">super</span>.move(distanceInMeters)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">&#x27;Sammy the Python&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> tom: Animal = <span class="keyword">new</span> Horse(<span class="string">&#x27;Tommy the Palomino&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sam.move()</span><br><span class="line">tom.move(<span class="number">34</span>)</span><br></pre></td></tr></table></figure><p>与前一个例子的不同点是，<code>派生类</code>包含了一个<code>构造函数</code>，它必须调用<code>super()</code>，它会执行基类的构造函数。 而且，在构造函数里访问 this 的属性之前，我们一定要调用 super()。 这个是 TypeScript 强制执行的一条重要规则。</p><p><code>重写move</code>使得 move 方法根据不同的类而具有不同的功能。 注意，即使 tom 被声明为 Animal 类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse 里重写的方法：</p><h2 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h2><p>默认为<code>public</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    public name: string;</span><br><span class="line">    public <span class="function"><span class="title">constructor</span>(<span class="params">theName: string</span>)</span> &#123; <span class="built_in">this</span>.name = theName; &#125;</span><br><span class="line">    public <span class="function"><span class="title">move</span>(<span class="params">distanceInMeters: number</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>理解<code>private</code></p><p><strong>表示不能在声明它的类的外部访问</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    private name: string;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">theName: string</span>)</span> &#123; <span class="built_in">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">&quot;Cat&quot;</span>).name; <span class="comment">// 错误: &#x27;name&#x27; 是私有的.</span></span><br></pre></td></tr></table></figure><p>理解<code>protected</code></p><p><code>protected</code>修饰符与<code>private</code>修饰符的行为很相似，但有一点不同，<code>protected</code>成员在派生类中仍然可以访问。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    protected name: string;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    private department: string;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string, department: string</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="function"><span class="title">getElevatorPitch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="built_in">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">&quot;Howard&quot;</span>, <span class="string">&quot;Sales&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(howard.getElevatorPitch());</span><br><span class="line"><span class="built_in">console</span>.log(howard.name); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h2 id="readonly-修饰符"><a href="#readonly-修饰符" class="headerlink" title="readonly 修饰符"></a>readonly 修饰符</h2><p>可以使用<code>readonly</code>关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ===========》readonly 只读 修饰符</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PresonOnly</span> </span>&#123;</span><br><span class="line">  public readonly name: string</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> PresonOnly(<span class="string">&#x27;jon&#x27;</span>)</span><br><span class="line">john.name = <span class="string">&#x27;&#x27;</span>  <span class="comment">//error 不能修改</span></span><br></pre></td></tr></table></figure><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><p>TypeScript 支持通过 getters/setters 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> passcode = <span class="string">&quot;secret passcode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    private _fullName: string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">fullName</span>(): <span class="title">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._fullName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">newName: string</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">&quot;secret passcode&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>._fullName = newName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Error: Unauthorized update of employee!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">&quot;Bob Smith&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">    alert(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点:</strong></p><ol><li>首先，存取器要求你将编译器设置为输出 ECMAScript 5 或更高。 不支持降级到 ECMAScript 3。</li><li>其次，只带有<code>get</code>不带有<code>set</code>的存取器自动被推断为 readonly</li></ol><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><p>当类被实例化的时候才会被初始化的属性,我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上, 每个实例想要访问这个属性的时候，都要在 origin 前面加上类名。 如同在实例属性上使用 this.前缀来访问属性一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grid</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> origin = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="title">calculateDistanceFromOrigin</span>(<span class="params">point: &#123;x: number; y: number;&#125;</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//看这里 ⬇️</span></span><br><span class="line">        <span class="keyword">let</span> xDist = (point.x - Grid.origin.x);</span><br><span class="line">        <span class="keyword">let</span> yDist = (point.y - Grid.origin.y);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(xDist * xDist + yDist * yDist) / <span class="built_in">this</span>.scale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params">public scale: number</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> Grid(<span class="number">1.0</span>);  <span class="comment">// 1x scale</span></span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> Grid(<span class="number">5.0</span>);  <span class="comment">// 5x scale</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(grid1.calculateDistanceFromOrigin(&#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(grid2.calculateDistanceFromOrigin(&#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public name: string</span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printName(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Department name: &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    abstract printMeeting(): <span class="keyword">void</span>; <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&#x27;Accounting and Auditing&#x27;</span>); <span class="comment">// 在派生类的构造函数中必须调用 super()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printMeeting(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    generateReports(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Generating accounting reports...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> department: Department; <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line">department = <span class="keyword">new</span> Department(); <span class="comment">// 错误: 不能创建一个抽象类的实例</span></span><br><span class="line">department = <span class="keyword">new</span> AccountingDepartment(); <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.printName();</span><br><span class="line">department.printMeeting();</span><br><span class="line">department.generateReports(); <span class="comment">// 错误: 方法在声明的抽象类中不存在</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『TypeScript 系列』接口</title>
      <link href="2019/08/30/TypeScript%E7%B3%BB%E5%88%97%E6%8E%A5%E5%8F%A3/"/>
      <url>2019/08/30/TypeScript%E7%B3%BB%E5%88%97%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约</p></blockquote><a id="more"></a><h2 id="简单的接口"><a href="#简单的接口" class="headerlink" title="简单的接口"></a>简单的接口</h2><p>我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。 然而，有些时候 TypeScript 却并不会这么宽松</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface NameInfo &#123;</span><br><span class="line">  firstname: string;</span><br><span class="line">  lastname: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getFullName = (&#123; ...obj &#125;: NameInfo): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> obj.firstname + obj.lastname;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  getFullName(&#123;</span><br><span class="line">    firstname: <span class="string">&quot;kac&quot;</span>,</span><br><span class="line">    lastname: <span class="string">&quot;123&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果方法中多添加属性则会报错<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190829235008.png"                      alt=""                ></p><h2 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h2><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“<code>option</code> bags”模式时很常用，即给函数传入的参数对象中只有<code>部分属性赋值</code>了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">interface Vegetables &#123;</span><br><span class="line">  color?: string;</span><br><span class="line">  type: string;</span><br><span class="line">  [prop: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getVegetables = <span class="function">(<span class="params">&#123; color, type &#125;: Vegetables</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> color ? <span class="string">`color,+<span class="subst">$&#123;color&#125;</span>,<span class="subst">$&#123;type&#125;</span>`</span> : <span class="string">&quot;没有传颜色&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  getVegetables(&#123;</span><br><span class="line">    color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    type: <span class="string">&quot;看可是你&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  getVegetables(&#123;</span><br><span class="line">    type: <span class="string">&quot;123&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用<code>readonly</code>来指定只读属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Point &#123;</span><br><span class="line">    readonly x: number;</span><br><span class="line">    readonly y: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1: Point = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line">p1.x = <span class="number">5</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><h2 id="readonly-vs-const"><a href="#readonly-vs-const" class="headerlink" title="readonly vs const"></a>readonly vs const</h2><p>最简单判断该用<code>readonly</code>还是<code>const</code>的方法是看要把它做为变量<code>使用</code>还是做为<code>一个属性</code>。 做为变量使用的话用 const，若做为属性则使用 readonly。</p><h2 id="添加一个字符串索引签名"><a href="#添加一个字符串索引签名" class="headerlink" title="添加一个字符串索引签名"></a>添加一个字符串索引签名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface SquareConfig &#123;</span><br><span class="line">  color?: string;</span><br><span class="line">  width?: number;</span><br><span class="line">  [propName: string]: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>讲到索引签名，但在这我们要表示的是 SquareConfig 可以有任意数量的属性，并且只要它们不是 color 和 width，那么就无所谓它们的类型是什么。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『TypeScript 系列』基础类型</title>
      <link href="2019/08/29/TypeScript%E7%B3%BB%E5%88%97%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
      <url>2019/08/29/TypeScript%E7%B3%BB%E5%88%97%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最简单的数据单元：数字，字符串，结构体，布尔值等</p></blockquote><a id="more"></a><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>简单的 true/false 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isBack: boolean = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。 这些浮点数的类型是<code>number</code>。 除了支持十进制和十六进制字面量，<code>TypeScript</code>还支持 ECMAScript 2015 中引入的二进制和八进制字面量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: number = <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> hexLiteral: number = <span class="number">0xf00d</span></span><br><span class="line"><span class="keyword">let</span> binaryLiteral: number = <span class="number">0b1010</span></span><br><span class="line"><span class="keyword">let</span> octalLiteral: number = <span class="number">0o744</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = [string, number]</span><br><span class="line"></span><br><span class="line">x = [<span class="string">&#x27;hje&#x27;</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.1版本之后就会报错  索引超过最大长度</span></span><br><span class="line">x[<span class="number">3</span>] = <span class="number">1</span> <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span> <span class="comment">// error 超过了2种类型</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>我们使用<code>string</code>表示文本数据类型,用法与 JavaScript 无区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: string = <span class="string">&quot;bob&quot;</span>;</span><br><span class="line">name = <span class="string">&quot;smith&quot;</span>;</span><br><span class="line"></span><br><span class="line">I<span class="string">&#x27;ll be $&#123; age + 1 &#125; years old next month.`;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>有两种方式可以定义数组。 第一种，可以在元素类型后面接上<code>[]</code>，表示由此类型元素组成的一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>第二种方式是使用数组泛型，<code>Array&lt;元素类型&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h2><p>元组类型允许表示一个<code>已知元素</code>数量和类型的数组，各元素的类型<code>不必相同</code>。 比如，你可以定义一对值分别为 string 和 number 类型的元组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [string, number]</span><br><span class="line"></span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>] <span class="comment">// OK</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>] <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>当访问一个已知索引的元素，会得到正确的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x[<span class="number">0</span>].substr(<span class="number">1</span>)) <span class="comment">// OK</span></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">1</span>].substr(<span class="number">1</span>)) <span class="comment">// Error, &#x27;number&#x27; does not have &#x27;substr&#x27;</span></span><br></pre></td></tr></table></figure><p>当访问一个越界的元素，会使用联合类型替代：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x[<span class="number">3</span>] = <span class="string">&#x27;world&#x27;</span> <span class="comment">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">5</span>].toString()) <span class="comment">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class="line"><span class="comment">//但是不能越界</span></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span> <span class="comment">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><code>enum</code>类型是对 JavaScript 标准数据类型的一个补充。 像 C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure><h2 id="任意值"><a href="#任意值" class="headerlink" title="任意值"></a>任意值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: any = <span class="number">4</span></span><br><span class="line">notSure = <span class="string">&#x27;maybe a string instead&#x27;</span></span><br><span class="line">notSure = <span class="literal">false</span> <span class="comment">// okay, definitely a boolean</span></span><br></pre></td></tr></table></figure><p>当你只知道一部分数据的类型时，<code>any</code>类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: any[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>某种程度上来说，<code>void</code>类型像是与<code>any</code>类型相反，它表示没有任何类型。 当一个函数<code>没有返回值</code>时，你通常会见到其返回值类型是 void</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;This is my warning message&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个 void 类型的变量没有什么大用，因为你只能为它赋予 undefined 和 null：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="keyword">void</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><p>TypeScript 里，undefined 和 null 两者各自有自己的类型分别叫做 undefined 和 null。 和 void 相似，它们的本身的类型用处不是很大：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>默认情况下<code>null</code>和<code>undefined</code>是<code>所有类型</code>的<code>子</code>类型。 就是说你可以把 null 和 undefined 赋值给<code>number类型</code>的变量。</p><h2 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h2><p><code>never</code>类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 never 的子类型或可以赋值给 never 类型（除了 never 本身之外）。 即使 any 也不可以赋值给 never。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: string</span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> error(<span class="string">&#x27;Something failed&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查。</p><p>类型断言有两种形式。 其一是“尖括号”语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: any = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: number = (&lt;string&gt;someValue).length;</span><br></pre></td></tr></table></figure><p>另一个为<code>as</code>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: any = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: number = (someValue <span class="keyword">as</span> string).length;</span><br></pre></td></tr></table></figure><h2 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h2><p>自 ECMAScript 2015 起，<code>symbol</code>成为了一种新的原生类型</p><p><code>symbol</code>类型的值是通过 Symbol<code>构造函数</code>创建的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;key&#x27;</span>) <span class="comment">// 可选的字符串key</span></span><br></pre></td></tr></table></figure><p>Symbols 是不可改变且唯一的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> sym3 = <span class="built_in">Symbol</span>(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sym2 === sym3 <span class="comment">// false, symbols是唯一的</span></span><br></pre></td></tr></table></figure><p>像字符串一样，symbols 也可以被用做对象属性的键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> prop2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> info2 = &#123;</span><br><span class="line">  [prop2]: <span class="string">&#x27;lison&#x27;</span>,</span><br><span class="line">  id: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  age: <span class="string">&#x27;99&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.table(info2)</span><br></pre></td></tr></table></figure><p>Symbols 也可以与计算出的属性名声明相结合来声明对象的属性和类成员。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getClassNameSymbol = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  [getClassNameSymbol]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> C()</span><br><span class="line"><span class="keyword">let</span> className = c[getClassNameSymbol]() <span class="comment">// &quot;C&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for"></a>Symbol.for</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">let</span> name2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name3 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;jack&#x27;</span>) <span class="comment">//全局范围保护当前页面 （ifram serverWork） 它会去找之前有没有创建过symbol 如果有则不会创建新的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name2 === name3) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name4 = <span class="built_in">Symbol</span>.keyFor(name3) <span class="comment">//查询是否已经创建sysmbol值</span></span><br><span class="line"><span class="built_in">console</span>.log(name4) <span class="comment">// 返回属性名</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现 react 之异步的 setState</title>
      <link href="2019/08/20/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8B%E5%BC%82%E6%AD%A5%E7%9A%84setState/"/>
      <url>2019/08/20/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8B%E5%BC%82%E6%AD%A5%E7%9A%84setState/</url>
      
        <content type="html"><![CDATA[<p>这篇文章的目标明确，我们要实现以下两个功能：</p><ol><li>异步更新 state，将短时间内的多个 setState 合并成一个</li><li>为了解决异步更新导致的问题，增加另一种形式的 setState：接受一个函数作为参数，在函数中可以得到前一个状态并返回下一个状态</li></ol><a id="more"></a><p>React 中的 setState 是怎么做的?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      num: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123; <span class="attr">num</span>: <span class="built_in">this</span>.state.num + <span class="number">1</span> &#125;);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.num); <span class="comment">// 会输出0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="built_in">this</span>.state.num&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果: 组件渲染的结果是 1，并且在控制台中输出了 100 次 0，说明每个循环中，拿到的 state 仍然是更新之前的</p></blockquote><p>这是 React 的优化手段，但是显然它也会在导致一些不符合直觉的问题（就如上面这个例子），所以针对这种情况，React 给出了一种解决方案：setState 接收的参数还可以是一个函数，在<code>这个函数中</code>可以<code>拿先前的状态</code>，并通过这个函数的<code>返回值得到下一个状态</code>。</p><p>我们可以通过这种方式来修正 App 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ ) &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState( <span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log( prevState.num );</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num: prevState.num + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(num ); <span class="comment">// 还是0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并-setState"><a href="#合并-setState" class="headerlink" title="合并 setState"></a>合并 setState</h3><p>我们先来看一下之前的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setState</span>(<span class="params"> stateChange </span>)</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign( <span class="built_in">this</span>.state, stateChange );</span><br><span class="line">    renderComponent( <span class="built_in">this</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次调用 setState 都会更新 state 并马上渲染一次。</p><h3 id="模拟一个-setState-队列"><a href="#模拟一个-setState-队列" class="headerlink" title="模拟一个 setState 队列"></a>模拟一个 setState 队列</h3><p>为了合并 setState，我们需要一个队列来保存每次 setState 的数据，然后在一段时间后，清空这个队列并渲染组件<br>创建<code>set_state_quene.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = []; <span class="comment">//队列数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enqueueSetState</span>(<span class="params"> stateChange, component </span>) </span>&#123;</span><br><span class="line">    queue.push( &#123;</span><br><span class="line">        stateChange,</span><br><span class="line">        component</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改Component.js中的setState方法</span></span><br><span class="line"><span class="function"><span class="title">setState</span>(<span class="params"> stateChange </span>)</span> &#123;</span><br><span class="line">    enqueueSetState( stateChange, <span class="built_in">this</span> ); <span class="comment">//this-&gt;Component实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="清空队列"><a href="#清空队列" class="headerlink" title="清空队列"></a>清空队列</h3><p>接下去思考如何清空队列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flush</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> item;</span><br><span class="line">  <span class="comment">//取出最后一个值</span></span><br><span class="line">  <span class="keyword">while</span> ((item = setStateQueue.shift())) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  stateChange 可以是函数 或者 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> &#123; stateChange, component &#125; = item;</span><br><span class="line">    <span class="comment">//保存之前的状态</span></span><br><span class="line">    <span class="keyword">if</span> (!component.prevState) &#123;</span><br><span class="line">      component.prevState = <span class="built_in">Object</span>.assign(&#123;&#125;, component.state);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//setstate是个方法 回调函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> stateChange === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;stateChange是个函数&quot;</span>, stateChange);</span><br><span class="line">      <span class="built_in">Object</span>.assign(component.state, stateChange(component.prevState, component.props));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//  是一个对象传入更新</span></span><br><span class="line">      <span class="built_in">Object</span>.assign(component.state, stateChange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次循环 保存当前一次的state作为前一次的state</span></span><br><span class="line">    component.prevState = component.state - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这只是实现了 state 的更新，我们还没有渲染组件。渲染组件不能在遍历队列时进行，因为同一个组件可能会多次添加到队列中，我们需要<code>另一个队列保存所有组件</code>，不同之处是，这个队列内不会有重复的组件。</p><p>我们在 enqueueSetState 时，就可以做这件事</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">enqueueSetState</span>(<span class="params">stateChange, component</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果renderQueue 没有 则添加队列</span></span><br><span class="line">  <span class="keyword">let</span> r = renderQueue.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (item = component);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//r不存在证明是第一次添加</span></span><br><span class="line">  <span class="keyword">if</span> (!r) &#123;</span><br><span class="line">    renderQueue.push(component); <span class="comment">//添加组件</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  短时间合并多个setState</span></span><br><span class="line">  setStateQueue.push(&#123;</span><br><span class="line">    stateChange,</span><br><span class="line">    component</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 flush 方法中，我们还需要遍历 renderQueue，来渲染每一个组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flush</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> item, component;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">while</span> ((component = renderQueue.shift())) &#123;</span><br><span class="line">    renderComponent(component);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h3><p>我们需要合并一段时间内所有的 setState，也就是在一段时间后才执行 flush 方法来清空队列，<br>这就表示需要异步执行,会想到什么呢? setTimeout,Promise ?</p><p>先来看这样一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果 3 1 2</span></span><br></pre></td></tr></table></figure><p>我们可以利用事件队列，让 flush 在所有同步任务后执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enqueueSetState</span>(<span class="params">stateChange, component</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果queue的长度是0，也就是在上次flush执行之后第一次往队列里添加</span></span><br><span class="line">  <span class="keyword">if</span> (queue.length === <span class="number">0</span>) &#123;</span><br><span class="line">    defer(flush);</span><br><span class="line">  &#125;</span><br><span class="line">  queue.push(&#123;</span><br><span class="line">    stateChange,</span><br><span class="line">    component</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!renderQueue.some(<span class="function"><span class="params">item</span> =&gt;</span> item === component)) &#123;</span><br><span class="line">    renderQueue.push(component);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 defer 方法，利用 Promise.resolve</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defer</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在一次“事件循环“中，最多只会执行一次 flush 了，在这个“事件循环”中，所有的 setState 都会被合并，并只渲染一次组件。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现 react 之 diff 算法</title>
      <link href="2019/08/18/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8Bdiff%E7%AE%97%E6%B3%95/"/>
      <url>2019/08/18/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8Bdiff%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章是采用 preact 的做法，对比真实 dom 和虚拟 dom，并且在对比的过程中直接更新真实 dom</p></blockquote><a id="more"></a><h3 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h3><p>diff 算法?what?什幺玩意<br>如何減少 DOM 更新:我們需要找出諠染前后真正変化的部分,只更新这一部分.<br>而対比変化,找出需要<code>更新部分的算法</code>称之为<code>diff算法</code><br>対比策略<br>在前面我們实现了<em>render 方法,它能將虚似 DOM 装換成真正的 DOM<br>但是我們需要改迸它,不要止它優乎乎地重新這染整个 DOM 村,而是找出真正<br>変化的部分迸行替換.<br>这部分很多类 React 框架实现方式都不太一样，有的框架会迭拝保存上次<br>諠染的虚似 DOM，然后対比虚批 DOM 前后的変化，得到一系列<code>更新的数 据</code>，然后再將逑些更新到真正的 DOM</em>上。</p><p>不管是 DOM 还是虚拟 DOM，它们的结构都是一棵树，完全对比两棵树变化的算法时间复杂度是 O(n^3)，但是考虑到我们很少会跨层级移动 DOM，所以我们只需要对比同一层级的变化。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200212203522.png"                      alt=""                ></p><p>总而言之，我们的 diff 算法有两个原则：</p><ul><li><p>对比当前真实的 DOM 和虚拟 DOM，在对比过程中直接更新真实 DOM</p></li><li><p>只对比同一层级的变化</p></li></ul><h3 id="diff-方法"><a href="#diff-方法" class="headerlink" title="diff 方法"></a>diff 方法</h3><p>我们需要实现一个 diff 方法，它的作用是对比真实 DOM 和虚拟 DOM，最后返回更新后的 DOM</p><p>我们先来简单看一下的三种虚拟 dom 结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生DOM节点的vnode</span></span><br><span class="line">&#123;</span><br><span class="line">    tag: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        className: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本节点的vnode</span></span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件的vnode</span></span><br><span class="line">&#123;</span><br><span class="line">    tag: ComponentConstrucotr,</span><br><span class="line">    attrs: &#123;</span><br><span class="line">        className: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们首先要改变<code>render</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加dom参数 初始为undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">vnode, container,dom</span>) </span>&#123;</span><br><span class="line">  -  <span class="keyword">const</span> _vnode = _render(vnode); <span class="comment">//返回js节点对象</span></span><br><span class="line">  +  <span class="keyword">const</span> _vnode =  diff(dom,vnode,container)</span><br><span class="line">  <span class="keyword">return</span> container.appendChild(_vnode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最简单的实现是先创建一个 diff 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">dom, vnode, container</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//对比节点的变化</span></span><br><span class="line">  <span class="keyword">const</span> ret = diffNode(dom, vnode);</span><br><span class="line">  <span class="keyword">if</span> (container) &#123;</span><br><span class="line">    container.appendChild(ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffNode</span>(<span class="params">dom, vnode</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="文本节点判断"><a href="#文本节点判断" class="headerlink" title="文本节点判断"></a>文本节点判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffNode</span>(<span class="params">dom, vnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> out = dom; <span class="comment">//初始dom为undefined</span></span><br><span class="line">  <span class="comment">//判断vnode是否为空</span></span><br><span class="line">  <span class="keyword">if</span> (vnode === <span class="literal">undefined</span> || vnode === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//如果vnode是数字类型则强制转化 string类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode === <span class="string">&quot;number&quot;</span>) vnode = <span class="built_in">String</span>(vnode);</span><br><span class="line">  <span class="comment">//判断vnode是否为字符串</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果当前的DOM就是文本节点，则直接更新内容</span></span><br><span class="line">    <span class="keyword">if</span> (dom &amp;&amp; dom.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (dom.textContent !== vnode) &#123;</span><br><span class="line">        dom.textContent = vnode;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果DOM不是文本节点，则新建一个文本节点DOM，并移除掉原来的</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      out = <span class="built_in">document</span>.createTextNode(vnode);</span><br><span class="line">      <span class="keyword">if</span> (dom &amp;&amp; dom.parentNode) &#123;</span><br><span class="line">        dom.parentNode.replaceChild(out, dom);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它没有属性，也没有子元素，就可以直接返回结果了</p><h3 id="非文本节点判断"><a href="#非文本节点判断" class="headerlink" title="非文本节点判断"></a>非文本节点判断</h3><p>vnode 表示的是一个非文本的 DOM 节点，那就要分两种情况了：<br>一：如果真实 DOM 不存在，表示此节点是新增的，或者新旧两个节点的类型不一样，那么就新建一个 DOM 元素，并将原来的子节点（如果有的话）移动到新建的 DOM 节点下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!dom) &#123;</span><br><span class="line">  out = <span class="built_in">document</span>.createElement(vnode.tag);</span><br><span class="line">  diffAttribute(out, vnode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="diffAttribute-对比属性"><a href="#diffAttribute-对比属性" class="headerlink" title="diffAttribute 对比属性"></a>diffAttribute 对比属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * dom 真实dom</span></span><br><span class="line"><span class="comment"> * vnode 虚拟dom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffAttribute</span>(<span class="params">dom, vnode</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//保存之前的dom所以属性</span></span><br><span class="line">  <span class="keyword">const</span> oldAttrs = &#123;&#125;;</span><br><span class="line">  <span class="comment">//新的属性值</span></span><br><span class="line">  <span class="keyword">const</span> newAttrs = vnode.attrs;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;newAttrs&quot;</span>, newAttrs); <span class="comment">// &#123; className: &quot;active&quot;, title: &quot;123&quot; &#125;</span></span><br><span class="line">  <span class="comment">// dom 原有节点对象 vnode 虚拟节点</span></span><br><span class="line">  <span class="keyword">const</span> domAttrs = dom.attributes;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;domAttrs&quot;</span>, domAttrs);</span><br><span class="line"></span><br><span class="line">  [...domAttrs].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    oldAttrs[item.name] = item.value; <span class="comment">//&#123;id:root&#125;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//如果原来的属性不在新的属性当中，则将其移除掉（属性值设为undefined）</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> newAttrs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> oldAttrs)) &#123;</span><br><span class="line">      <span class="comment">//移除dom</span></span><br><span class="line">      setAttribute(dom, key, <span class="literal">undefined</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//更新对应属性 class=&quot;abc&quot; ==&gt; class=&quot;cba&quot;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> newAttrs) &#123;</span><br><span class="line">    <span class="comment">//属性值不相等的情况</span></span><br><span class="line">    <span class="keyword">if</span> (oldAttrs[key] !== newAttrs[key]) &#123;</span><br><span class="line">      <span class="comment">//增加dom</span></span><br><span class="line">      setAttribute(dom, key, newAttrs[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二：如果真实 DOM 存在，并且和虚拟 DOM 是同一类型的，那我们暂时不需要做别的，只需要等待后面对比属性和对比子节点。</p><h3 id="对比子节点的判断"><a href="#对比子节点的判断" class="headerlink" title="对比子节点的判断"></a>对比子节点的判断</h3><p>这里会面临一个问题，前面我们实现的不同 diff 方法，都是明确知道哪一个真实 DOM 和虚拟 DOM 对比，但是子节点是一个数组，它们可能改变了顺序，或者数量有所变化，<code>我们很难确定要和虚拟DOM对比的是哪一个</code>。<br>为了简化逻辑，我们可以让用户提供一些线索：给节点设一个 key 值，<code>重新渲染时对比key</code>值相同的节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较子节点(dom节点和组件)</span></span><br><span class="line"><span class="keyword">if</span> ((vnode.children &amp;&amp; vnode.children.length &gt; <span class="number">0</span>) || (out.childNodes &amp;&amp; out.childNodes.length &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="comment">//对比组件和 子节点</span></span><br><span class="line">  diffChildren(out, vnode.children);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="diffChildren"><a href="#diffChildren" class="headerlink" title="diffChildren"></a>diffChildren</h3><p>一开始 dom 为空值,只去加载 vchildren,对 vchildren 做相应操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffChildren</span>(<span class="params">dom, vchildren</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> domChildren = dom.childNodes;</span><br><span class="line">  <span class="keyword">const</span> children = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> keyed = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将有key的节点和没有key的节点分开</span></span><br><span class="line">  <span class="keyword">if</span> (domChildren.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; domChildren.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> child = domChildren[i];</span><br><span class="line">      <span class="keyword">const</span> key = child.key;</span><br><span class="line">      <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        keyed[key] = child;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        children.push(child);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//一开始先走这里</span></span><br><span class="line">  <span class="keyword">if</span> (vchildren &amp;&amp; vchildren.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> childrenLen = children.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vchildren.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> vchild = vchildren[i];</span><br><span class="line">      <span class="keyword">const</span> key = vchild.key;</span><br><span class="line">      <span class="keyword">let</span> child;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果有key，找到对应key值的节点</span></span><br><span class="line">      <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (keyed[key]) &#123;</span><br><span class="line">          child = keyed[key];</span><br><span class="line">          keyed[key] = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有key，则优先找类型相同的节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (min &lt; childrenLen) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = min; j &lt; childrenLen; j++) &#123;</span><br><span class="line">          <span class="keyword">let</span> c = children[j];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (c &amp;&amp; isSameNodeType(c, vchild)) &#123;</span><br><span class="line">            child = c;</span><br><span class="line">            children[j] = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (j === childrenLen - <span class="number">1</span>) childrenLen--;</span><br><span class="line">            <span class="keyword">if</span> (j === min) min++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 对比</span></span><br><span class="line">      child = diff(child, vchild);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 更新DOM</span></span><br><span class="line">      <span class="keyword">const</span> f = domChildren[i];</span><br><span class="line">      <span class="keyword">if</span> (child &amp;&amp; child !== dom &amp;&amp; child !== f) &#123;</span><br><span class="line">        <span class="comment">// 如果更新前的对应位置为空，说明此节点是新增的</span></span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">          dom.appendChild(child);</span><br><span class="line">          <span class="comment">// 如果更新后的节点和更新前对应位置的下一个节点一样，说明当前位置的节点被移除了</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child === f.nextSibling) &#123;</span><br><span class="line">          removeNode(f);</span><br><span class="line">          <span class="comment">// 将更新后的节点移动到正确的位置</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 注意insertBefore的用法，第一个参数是要插入的节点，第二个参数是已存在的节点</span></span><br><span class="line">          dom.insertBefore(child, f);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对比过程中我们在之前的<code>createElement</code>返回值中增加一个 key 值,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">tag,attrs,...childrens</span>)</span>&#123;</span><br><span class="line">  + attrs = attrs || &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      tag,</span><br><span class="line">      attrs,</span><br><span class="line">      childrens,</span><br><span class="line">   +  key:attrs.key || <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组件的-diff"><a href="#组件的-diff" class="headerlink" title="组件的 diff"></a>组件的 diff</h3><p>如果 vnode 是一个组件，我们也单独拿出来作为一个方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是 函数组件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.tag === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> diffComponent(dom, vnode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>diffComponent 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffComponent</span>(<span class="params">dom, vnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> comp = dom &amp;&amp; dom._component;</span><br><span class="line">  <span class="keyword">let</span> oldDom = dom;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果组件类型没有变化，则重新set props</span></span><br><span class="line">  <span class="keyword">if</span> (comp &amp;&amp; comp.constructor === vnode.tag) &#123;</span><br><span class="line">    setComponentProps(comp, vnode.attrs);</span><br><span class="line">    dom = comp.base;</span><br><span class="line">    <span class="comment">// 如果组件类型变化，则移除掉原来组件，并渲染新的组件</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comp) &#123;</span><br><span class="line">      <span class="comment">//卸载组件</span></span><br><span class="line">      unmountComponent(comp);</span><br><span class="line">      oldDom = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建新组件</span></span><br><span class="line">    comp = createComponent(vnode.tag, vnode.attrs);</span><br><span class="line">    <span class="comment">//设置组件属性</span></span><br><span class="line">    setComponentProps(comp, vnode.attrs);</span><br><span class="line">    <span class="comment">//挂载新组件</span></span><br><span class="line">    dom = comp.base;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldDom &amp;&amp; dom !== oldDom) &#123;</span><br><span class="line">      oldDom._component = <span class="literal">null</span>;</span><br><span class="line">      removeNode(oldDom);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卸载组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">component</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unmountComponent</span>(<span class="params">component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (component.componentWillUnmount) component.componentWillUnmount();</span><br><span class="line">  removeNode(component.base);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新修改-renderComponent"><a href="#重新修改-renderComponent" class="headerlink" title="重新修改 renderComponent"></a>重新修改 renderComponent</h3><p>当然我们还需要去改<code>renderComponent</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">renderComponent</span>(<span class="params">comp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> base;</span><br><span class="line">  <span class="keyword">const</span> render = comp.render(); <span class="comment">//返回jsx对象</span></span><br><span class="line">  <span class="keyword">if</span> (comp.base &amp;&amp; comp.componentWillUpdate) &#123;</span><br><span class="line">    comp.componentWillUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (comp.base) &#123;</span><br><span class="line">    <span class="comment">//代表组件已经挂载了</span></span><br><span class="line">    <span class="keyword">if</span> (comp.componentDidUpdate) comp.componentDidUpdate();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comp.componentDidMount) &#123;</span><br><span class="line">    comp.componentDidMount();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  - base = _render(render); <span class="comment">//返回js节点对象</span></span><br><span class="line">  + base = diffNode(comp.base,render)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;js节点对象&quot;</span>, base);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//原先整个dom替换的方案就被剔除</span></span><br><span class="line">  - <span class="keyword">if</span> (comp.base &amp;&amp; comp.base.parentNode) &#123;</span><br><span class="line">  -   comp.base.parentNode.replaceChild(base, comp.base);</span><br><span class="line">  - &#125;</span><br><span class="line">  comp.base = base;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="体验下-diff-与没有-diff"><a href="#体验下-diff-与没有-diff" class="headerlink" title="体验下 diff 与没有 diff"></a>体验下 diff 与没有 diff</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/2020-02-15 23.13.42.gif"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现 react 之生命周期的方法</title>
      <link href="2019/08/15/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2019/08/15/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>React 生命周期主要包括三个阶段：初始化阶段、运行中阶段和销毁阶段，在 React 不同的生命周期里，会依次触发不同的钩子函数，下面我们就来详细介绍一下 React 的生命周期函数</p><a id="more"></a><p>看一下流程图</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200213171328.png"                      alt=""                ></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      num: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;组件将要加载&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillReceiveProps</span>(<span class="params">nextProps</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;componentWillReceiveProps&quot;</span>, nextProps);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;组件即将更新&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;组件更新完成&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;组件加载完成&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;组件卸载&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      num: <span class="built_in">this</span>.state.num + <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;active&quot;</span> title=<span class="string">&quot;123&quot;</span>&gt;</span><br><span class="line">        hello,<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是类组件react,&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.add.bind(<span class="built_in">this</span>)&#125;&gt;点击我,更新&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们在调用<code>componentWillMount</code>的时候组件是不是<code>还没有被渲染</code>,我们就可以考虑是否在<code>renderComponent</code>方法之前执行我们的将要更新的生命周期方法</p><h3 id="setComponentProps"><a href="#setComponentProps" class="headerlink" title="setComponentProps"></a>setComponentProps</h3><p>如何判断组件是否已经挂载?<br>可以使用<code>comp.base</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setComponentProps</span>(<span class="params">comp, props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 实现生命周期</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!comp.base) &#123;</span><br><span class="line">    <span class="keyword">if</span> (comp.componentWillMount) comp.componentWillMount();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comp.componentWillReceiveProps) &#123;</span><br><span class="line">    comp.componentWillReceiveProps();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//挂载comp上属性</span></span><br><span class="line">  comp.props = props;</span><br><span class="line">  <span class="comment">//  渲染组件</span></span><br><span class="line">  renderComponent(comp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="renderComponent"><a href="#renderComponent" class="headerlink" title="renderComponent"></a>renderComponent</h3><p>那么继续考虑<code>componentWillUpdate</code>,<code>componentDidUpdate</code>,<code>componentDidMount</code>的生命周期在哪里实现? 应该在<code>renderComponent</code>方法中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">renderComponent</span>(<span class="params">comp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> base;</span><br><span class="line">  <span class="keyword">const</span> render = comp.render(); <span class="comment">//返回jsx对象</span></span><br><span class="line">  <span class="keyword">if</span> (comp.base &amp;&amp;  ) &#123;</span><br><span class="line">    comp.componentWillUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (comp.base) &#123;</span><br><span class="line">    <span class="comment">//代表组件已经挂载了</span></span><br><span class="line">    <span class="keyword">if</span> (comp.componentDidUpdate) comp.componentDidUpdate();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comp.componentDidMount) &#123;</span><br><span class="line">    comp.componentDidMount();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  base = _render(render); <span class="comment">//返回js节点对象</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;js节点对象&quot;</span>, base);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//更改状态</span></span><br><span class="line">  <span class="keyword">if</span> (comp.base &amp;&amp; comp.base.parentNode) &#123;</span><br><span class="line">    comp.base.parentNode.replaceChild(base, comp.base);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  comp.base = base;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;comp&quot;</span>, comp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这个生命周期是最简单的实现,并没有考虑很多情况,比如子组件更新完才能父组件更新…</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现 react 之组件实现</title>
      <link href="2019/08/12/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/"/>
      <url>2019/08/12/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>组件分为<code>函数组件</code>和<code>类组件</code></p><a id="more"></a><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  函数式组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;active&quot;</span> title=<span class="string">&quot;123&quot;</span>&gt;</span><br><span class="line">      hello,<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是函数react<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">&quot;jack&quot;</span>,</span><br><span class="line">      num: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;active&quot;</span> title=<span class="string">&quot;123&quot;</span>&gt;</span><br><span class="line">        hello,<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是类组件react,&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.add.bind(<span class="built_in">this</span>)&#125;&gt;点击我,更新&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h4><p>组件基类 React.Component 包含了一些预先定义好的变量和方法，我们来一步一步地实现它：<br>先定义一个 Component 类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props = &#123;&#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.props = props;</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Component;</span><br></pre></td></tr></table></figure><p>通过定义组件我们还可以添加<code>state &amp; props</code>属性,进行初始化</p><h4 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h4><p>组件内部还有个<code>setState</code>方法修改数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;../react-dom/render&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">setState</span>(<span class="params">stateChange</span>)</span> &#123;</span><br><span class="line">      <span class="comment">//更新数据</span></span><br><span class="line">     <span class="built_in">Object</span>.assign(<span class="built_in">this</span>.state,stateChange)</span><br><span class="line">      <span class="comment">//重新渲染组件  this指当前组件</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;Component-this&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">       renderComponent(<span class="built_in">this</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当然我们知道 setState 是异步的,我们只是先实现一个最简单粗暴的 setState.后面会继续迭代这个方法.</p><h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><p>我们继续分析一下<code>render</code>方法<br>我们继续将 render 方法做一些改变,小小的封装一下,设置一个<code>_render</code>方法返回 jsx 节点对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">vnode, container</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _vnode = _render(vnode); <span class="comment">//返回js节点对象</span></span><br><span class="line">  <span class="keyword">return</span> container.appendChild(_vnode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>react 是如何区分如何区分一个<code>类组件</code>与<code>函数组件</code></p></blockquote><p>首先函数组件可以直接 new 函数组件.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200212161546.png"                      alt=""                ><br>那么类组件如何判断?<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200212161341.png"                      alt=""                ></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">home.prototype &amp;&amp; home.prototype.render;</span><br></pre></td></tr></table></figure><h5 id="render-1"><a href="#render-1" class="headerlink" title="_render"></a>_render</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_render</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">  ....</span><br><span class="line">  <span class="comment">//判断组件是函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.tag === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//创建组件</span></span><br><span class="line">     <span class="keyword">const</span> comp = createComponent(vnode.tag,vnode.attrs)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;函数组件&#x27;</span>,comp);</span><br><span class="line">    <span class="comment">//设置组件属性</span></span><br><span class="line">    setComponentProps(comp,vnode.attrs)</span><br><span class="line">    <span class="comment">//组件渲染节点 返回对象</span></span><br><span class="line">    <span class="keyword">return</span> comp.base</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  将虚拟dom转化成真实dom打印到页面中</span></span><br><span class="line">  vnode.childrens.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    render(child, dom);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件的渲染"><a href="#组件的渲染" class="headerlink" title="组件的渲染"></a>组件的渲染</h3><p>用到了<code>createComponent</code>和<code>setComponentProps</code>两个方法.我们来分析下</p><h4 id="createComponent"><a href="#createComponent" class="headerlink" title="createComponent"></a>createComponent</h4><p><code>createComponent</code>方法用来创建组件实例，并且将函数定义组件扩展为类定义组件进行处理，以免其他地方需要区分不同定义方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComponent</span>(<span class="params">comp, props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> inst;</span><br><span class="line">  <span class="comment">// 如果是类定义组件，则直接返回实例</span></span><br><span class="line">  <span class="keyword">if</span> (comp.prototype &amp;&amp; comp.prototype.render) &#123;</span><br><span class="line">    <span class="comment">//类组件</span></span><br><span class="line">    inst = <span class="keyword">new</span> comp(props);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//函数组件 扩展成类组件 构造一个实例, 统一管理</span></span><br><span class="line">    inst = <span class="keyword">new</span> Component(props);</span><br><span class="line">    <span class="comment">//  构造函数的指向</span></span><br><span class="line">    inst.constructor = comp;</span><br><span class="line">    <span class="comment">//定义render函数</span></span><br><span class="line">    inst.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.constructor(props); <span class="comment">//==&gt; 相当于执行 类组件仲 render()&#123;xxxxx&#125; 方法</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="setComponentProps"><a href="#setComponentProps" class="headerlink" title="setComponentProps"></a>setComponentProps</h4><p>setComponentProps 方法用来更新<code>props</code>，在其中可以实现<code>componentWillMount</code>，<code>componentWillReceiveProps</code>两个生命周期方法(生命周期我们下次再说)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setComponentProps</span>(<span class="params">comp, props</span>) </span>&#123;</span><br><span class="line">  comp.props = props;</span><br><span class="line">  <span class="comment">//  渲染组件</span></span><br><span class="line">  renderComponent(comp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="renderComponent"><a href="#renderComponent" class="headerlink" title="renderComponent"></a>renderComponent</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderComponent</span>(<span class="params">comp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> base; <span class="comment">//初始化一个属性用于存放节点对象</span></span><br><span class="line">  <span class="keyword">const</span> render = comp.render(); <span class="comment">//返回jsx对象</span></span><br><span class="line">  base = _render(render); <span class="comment">//返回js节点对象</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;js节点对象&quot;</span>, base);</span><br><span class="line">  comp.base = base;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;comp&quot;</span>, comp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200212162504.png"                      alt=""                ></p><p>现在大部分工作已经完成，我们可以用它来渲染组件了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200212162717.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现 react 之 JSX 和虚拟 DOM</title>
      <link href="2019/08/11/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8BJSX%E5%92%8C%E8%99%9A%E6%8B%9FDOM/"/>
      <url>2019/08/11/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8BJSX%E5%92%8C%E8%99%9A%E6%8B%9FDOM/</url>
      
        <content type="html"><![CDATA[<p>我们可以从最简单分析一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(<span class="string">&quot;ele&quot;</span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><a id="more"></a><p>以上代码的意思就是说传入<code>一个字符串</code>和<code>一个节点对象</code>,将字符串挂载到节点对象中并显示到页面中</p><p>那 render 的含义其实就是<code>渲染</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ReactDOM = &#123;</span><br><span class="line">  render</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;虚拟dom/root节点&#125;</span> <span class="variable">vnode</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;容器&#125;</span> <span class="variable">container</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">vnode, container</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> container.appendChild(dom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的元素就挂载完成</p><p>但 react 远远不止那么简单对吧.我们render第一个参数中还可以传<code>函数组件</code>和<code>类组件</code></p><h2 id="jsx-对象"><a href="#jsx-对象" class="headerlink" title="jsx 对象"></a>jsx 对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ele = (</span><br><span class="line">  &lt;div className=<span class="string">&quot;active&quot;</span> title=<span class="string">&quot;123&quot;</span>&gt;</span><br><span class="line">    hello,<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> react<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 模拟出以下代码</span></span><br><span class="line"><span class="comment"> var ele = React.createElement(&quot;div&quot;, &#123;</span></span><br><span class="line"><span class="comment">  cl: true,</span></span><br><span class="line"><span class="comment">  as: true,</span></span><br><span class="line"><span class="comment">  sName: &quot; active&quot;,</span></span><br><span class="line"><span class="comment">  title: &quot; 123 &quot;</span></span><br><span class="line"><span class="comment">&#125;, &quot;hello, &quot;, React.createElement(&quot;span&quot;, null, &quot; react&quot;));</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>经过转化,应该是这样的</p><p><strong>我们来看看 render 函数是如何实现?</strong></p><p><code>render</code>方法的作用就是将虚拟 DOM 渲染成真实的 DOM</p><p>我们首先要将 ele 中的 dom 对象解析成 jsx 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> React = &#123;</span><br><span class="line">  createElement</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">tag, attrs, ...childrens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tag,</span><br><span class="line">    attrs,</span><br><span class="line">    childrens</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200212004617.png"                      alt=""                ></p><p>如下代码实现<code>ReactDOM.render</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最简单的实现</span></span><br><span class="line"><span class="keyword">const</span> ReactDOM = &#123;</span><br><span class="line">  render</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">vnode, container</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ReactDOM;</span><br></pre></td></tr></table></figure><h3 id="虚拟节点的校验"><a href="#虚拟节点的校验" class="headerlink" title="虚拟节点的校验"></a>虚拟节点的校验</h3><p>接下来继续细化每一个细节,<code>render</code>中要校验一下<code>vnode</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">vnode, container</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断vnode是否为空</span></span><br><span class="line">  <span class="keyword">if</span> (vnode === <span class="literal">undefined</span> || vnode === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//如果vnode是数字类型则强制转化 string类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode === <span class="string">&quot;number&quot;</span>) vnode = <span class="built_in">String</span>(vnode);</span><br><span class="line">  <span class="comment">//判断vnode是否为字符串</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//创建文本节点</span></span><br><span class="line">    <span class="keyword">const</span> textNode = <span class="built_in">document</span>.createTextNode(vnode);</span><br><span class="line">    <span class="keyword">return</span> container.appendChild(textNode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  否则就是虚拟dom对象</span></span><br><span class="line">  <span class="keyword">const</span> &#123; tag, attrs &#125; = vnode;</span><br><span class="line">  <span class="comment">//创建节点对象</span></span><br><span class="line">  <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(tag); <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> container.appendChild(dom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本节点渲染"><a href="#文本节点渲染" class="headerlink" title="文本节点渲染"></a>文本节点渲染</h3><p>继续我们可以考虑<code>&lt;div className=&quot;box&quot;,title=&quot;文本&quot;&gt;</code>节点对象上的属性如何添加呢饿?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"> <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(tag);</span><br><span class="line"> <span class="comment">//判断如果有属性值</span></span><br><span class="line"><span class="keyword">if</span> (attrs) &#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(attrs).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = attrs[key];</span><br><span class="line">    <span class="comment">//添加节点属性</span></span><br><span class="line">    setAttribute(dom, key, value);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们继续分析一下<code>setAttribute</code>添加属性的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对dom中的标签设置属性名   div class=&quot;root&quot; or div onclick=&quot;add()&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setAttribute</span>(<span class="params">dom, key, value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断class属性名</span></span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&quot;className&quot;</span>) &#123;</span><br><span class="line">    key = <span class="string">&quot;class&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断是否是点击事件</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/on\w/</span>.test(key)) &#123;</span><br><span class="line">    key = key.toLocaleLowerCase(); <span class="comment">//onClick -&gt; onclick</span></span><br><span class="line">    dom[key] = value || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">&quot;style&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//例如  div style=&quot;xxxx:xxxx&quot; or  stlye=&#123;&#123;&#125;&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (!value || <span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      dom.style.cssText = value || <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> value) &#123;</span><br><span class="line">        <span class="comment">//  &#123;width:20&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value[k] === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">          dom.style[k] = value[k] + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dom.style[k] = value[k];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//其他属性</span></span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> dom) &#123;</span><br><span class="line">      dom[key] = value || <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新值</span></span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      dom.setAttribute(key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dom.removeAttribute(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子节点渲染"><a href="#子节点渲染" class="headerlink" title="子节点渲染"></a>子节点渲染</h3><p>我们在<code>createElement</code>中有<code>childrens</code>属性,代表其他子节点可以是字符串也可能是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">tag, attrs, ...childrens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tag,</span><br><span class="line">    attrs,</span><br><span class="line">    childrens <span class="comment">//其他子节点</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们需要利用<code>递归</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        渲染子节点  用递归</span></span><br><span class="line"><span class="comment">   *   &lt;div&gt;hello,&lt;span&gt;123&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">if</span> (vnode.childrens) &#123;</span><br><span class="line">  vnode.childrens.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    render(child, dom);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> container.appendChild(dom);</span><br></pre></td></tr></table></figure><p>到这里最简单的 jsx 与虚拟 dom 就分析到这里</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零实现 react 之介绍以及相关配置</title>
      <link href="2019/08/09/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8B%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
      <url>2019/08/09/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0react%E4%B9%8B%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>我们要配置一下创建一个<code>miniReact</code>文件夹,<br>初始化配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure><a id="more"></a><p>下载一些依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add  -g parcel-bundler</span><br><span class="line"></span><br><span class="line">yarn add babel-core babel-preset-env babel-plugin-transform-react-jsx --dev</span><br></pre></td></tr></table></figure><p>parcel 是一个非常好用的零配置打包工具</p><p>接下来新建 index.js 和 index.html，在 index.html 中引入 index.js。</p><p>注意一下 babel 的配置 <code>.babelrc</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;env&quot;</span>],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        [<span class="string">&quot;transform-react-jsx&quot;</span>, &#123;</span><br><span class="line">            <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;React.createElement&quot;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>transform-react-jsx</code>就是将<code>jsx转换成js</code>的 babel 插件，它有一个 pragma 项，可以定义 jsx 转换方法的名称，你也可以将它改成 h（这是很多类 React 框架使用的名称)</p><p>准备工作完成后，我们可以用命令 parcel index.html 将它跑起来了，当然，现在它还什么都没有。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20200212094747.png"                      alt=""                ></p><p>我们再下一次介绍如何解析 jsx</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode书写项目配置eslint+prettier 统一代码风格</title>
      <link href="2019/08/08/VS%20Code%E4%B9%A6%E5%86%99%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%20eslint+prettier%20%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
      <url>2019/08/08/VS%20Code%E4%B9%A6%E5%86%99%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%20eslint+prettier%20%E7%BB%9F%E4%B8%80%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>项目写的人越来越多，统一代码规范的趋势越来越重要，研究下eslint吧<br><a id="more"></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/166295c5abb096f9.jpg"                      alt=""                ></p><p>关于eslint的历史<code>谷歌</code>吧</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">global</span> add eslint </span><br></pre></td></tr></table></figure><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> eslint-<span class="built_in">demo</span></span><br><span class="line"></span><br><span class="line">cd eslint-<span class="built_in">demo</span></span><br><span class="line"></span><br><span class="line">eslint --init</span><br></pre></td></tr></table></figure><p>然后进入智能问答时间O(∩_∩)O~~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">? How would you like to configure ESLint? Answer questions about your style</span><br><span class="line">? Are you using ECMAScript <span class="number">6</span> features? Yes</span><br><span class="line">? Are you using ES6 modules? Yes</span><br><span class="line">? Where will your code run? Browser</span><br><span class="line">? Do you use CommonJS? Yes</span><br><span class="line">? Do you use JSX? No</span><br><span class="line">? What style <span class="keyword">of</span> indentation <span class="keyword">do</span> you use? Tabs</span><br><span class="line">? What quotes <span class="keyword">do</span> you use <span class="keyword">for</span> strings? Single</span><br><span class="line">? What line endings <span class="keyword">do</span> you use? Windows</span><br><span class="line">? Do you <span class="built_in">require</span> semicolons? No</span><br><span class="line">? What format <span class="keyword">do</span> you want your config file to be <span class="keyword">in</span>? JavaScript</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>全部回答之后生成一个.eslint.js文件，内容里面很多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;commonjs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;es6&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;indent&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tab&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;linebreak-style&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;windows&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;quotes&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;single&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;semi&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;never&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>里面很多参数一脸懵逼，没关系全删了，只留下一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;eslint:recommended&quot;</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们写一个简单的demo.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="built_in">arguments</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">arguments</span>[i]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> m) ret[j] = m[j]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(merge(&#123; <span class="attr">a</span>: <span class="number">123</span> &#125;, &#123; <span class="attr">b</span>: <span class="number">456</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  b = <span class="string">&#x27;23444&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt;= b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aaa = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aaa())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后终端输入</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint <span class="built_in">demo</span>.js</span><br></pre></td></tr></table></figure><p>结果显示</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190822111018.png"                      alt=""                ></p><p>解决<code>no-undef</code>:出错的原因是因为JavaScript有很多种运行环境,<br>比如常见的有浏览器和Node.js，另外还有很多软件系统使用JavaScript作为其脚本引擎，比如PostgreSQL就支持使用JavaScript来编写存储引擎，而这些运行环境可能并不存在console这个对象。另外在浏览器环境下会有window对象，而Node.js下没有；在Node.js下会有process对象，而浏览器环境下没有。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="keyword">extends</span>: <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    env: &#123;</span><br><span class="line">        node: <span class="literal">true</span>, <span class="comment">//程序的运行环境</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再运行</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint <span class="built_in">demo</span>.js</span><br></pre></td></tr></table></figure><p>就没有错误了</p><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><h4 id="env"><a href="#env" class="headerlink" title="env"></a>env</h4><p>当然env也可以加入其他环境<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">env: &#123;</span><br><span class="line">    <span class="string">&#x27;browser&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;commonjs&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;es6&#x27;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="rulues"><a href="#rulues" class="headerlink" title="rulues"></a>rulues</h4><p>规则错误等级有三种<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>或’off’：关闭规则。 </span><br><span class="line"><span class="number">1</span>或’warn’：打开规则，并且作为一个警告（并不会导致检查不通过）。 </span><br><span class="line"><span class="number">2</span>或’error’：打开规则，并且作为一个错误 (退出码为<span class="number">1</span>，检查不通过)。</span><br><span class="line"></span><br><span class="line">参数说明： </span><br><span class="line">参数<span class="number">1</span> ： 错误等级 </span><br><span class="line">参数<span class="number">2</span> ： 处理方式</span><br></pre></td></tr></table></figure></p><h4 id="配置代码注释方式"><a href="#配置代码注释方式" class="headerlink" title="配置代码注释方式"></a>配置代码注释方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">忽略 no-undef 检查 </span><br><span class="line"><span class="comment">/* eslint-disable no-undef */</span></span><br><span class="line"></span><br><span class="line">忽略 no-<span class="keyword">new</span> 检查 </span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"></span><br><span class="line">设置检查 </span><br><span class="line"><span class="comment">/*eslint eqeqeq: off*/</span> </span><br><span class="line"><span class="comment">/*eslint eqeqeq: 0*/</span></span><br></pre></td></tr></table></figure><h2 id="项目中配置eslintrc"><a href="#项目中配置eslintrc" class="headerlink" title="项目中配置eslintrc"></a>项目中配置eslintrc</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">extends</span>: <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parser: <span class="string">&#x27;babel-eslint&#x27;</span>,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="comment">//强制使用单引号</span></span><br><span class="line">    quotes: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;single&#x27;</span>],</span><br><span class="line">    <span class="comment">//强制不使用分号结尾</span></span><br><span class="line">    semi: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;never&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vscode中全局配置"><a href="#vscode中全局配置" class="headerlink" title="vscode中全局配置"></a>vscode中全局配置</h2><p>必须安装项目配置了使用eslint<br>必须安装Document This插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;vscode-icons-mac&quot;</span>,</span><br><span class="line"><span class="string">&quot;editor.renderIndentGuides&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;cSpell.ignoreWords&quot;</span>: [<span class="string">&quot;antd&quot;</span>],</span><br><span class="line"><span class="comment">//编辑器失去焦点时自动保存更新后的文件</span></span><br><span class="line"><span class="string">&quot;files.autoSave&quot;</span>: <span class="string">&quot;onFocusChange&quot;</span>,</span><br><span class="line"><span class="string">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;Monokai&quot;</span>,</span><br><span class="line"><span class="string">&quot;git.confirmSync&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;window.title&quot;</span>: <span class="string">&quot;$&#123;activeEditorLong&#125;$&#123;separator&#125;$&#123;rootName&#125;&quot;</span>,</span><br><span class="line"><span class="string">&quot;window.zoomLevel&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;editor.fontSize&quot;</span>: <span class="number">14</span>,</span><br><span class="line"><span class="comment">//为了符合eslint的两个空格间隔原则</span></span><br><span class="line"><span class="string">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="comment">// 文件头部注释</span></span><br><span class="line"><span class="string">&quot;fileheader.Author&quot;</span>: <span class="string">&quot;Mario&quot;</span>,</span><br><span class="line"><span class="string">&quot;fileheader.LastModifiedBy&quot;</span>: <span class="string">&quot;mario&quot;</span>,</span><br><span class="line"><span class="comment">//关闭编辑器默认代码检查,为了不跟eslint配置冲突</span></span><br><span class="line"><span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;javascript.format.enable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">//eslint 格式化插件，保存时应用eslint规则自动格式化后保存</span></span><br><span class="line"><span class="string">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;prettier.eslintIntegration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 去掉代码结尾分号</span></span><br><span class="line"><span class="string">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;git.path&quot;</span>: <span class="string">&quot;/usr/bin/git&quot;</span>,</span><br><span class="line"><span class="string">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;Microsoft YaHei，Menlo, Monaco, &#x27;Courier New&#x27;, monospace&quot;</span>,</span><br><span class="line"><span class="string">&quot;editor.fontWeight&quot;</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line"><span class="string">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span>: <span class="string">&quot;never&quot;</span>,</span><br><span class="line"><span class="string">&quot;explorer.confirmDragAndDrop&quot;</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 获取屏幕&amp;浏览器&amp;页面的高度宽度</title>
      <link href="2019/08/05/HTML%20%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95&amp;%E6%B5%8F%E8%A7%88%E5%99%A8&amp;%E9%A1%B5%E9%9D%A2%E7%9A%84%E9%AB%98%E5%BA%A6%E5%AE%BD%E5%BA%A6/"/>
      <url>2019/08/05/HTML%20%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95&amp;%E6%B5%8F%E8%A7%88%E5%99%A8&amp;%E9%A1%B5%E9%9D%A2%E7%9A%84%E9%AB%98%E5%BA%A6%E5%AE%BD%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>本篇主要介绍Web环境中屏幕、浏览器及页面的高度、宽度信息。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h1><p>\1. <a class="link"   href="http://www.cnblogs.com/polk6/p/5051935.html#Menu1-Introduction" >介绍<i class="fas fa-external-link-alt"></i></a>：介绍页面的容器(屏幕、浏览器及页面)、物理尺寸与分辨率、展示等内容。</p><p>\2. <a class="link"   href="http://www.cnblogs.com/polk6/p/5051935.html#Menu2-Screen" >屏幕信息<i class="fas fa-external-link-alt"></i></a>：介绍屏幕尺寸信息；如：屏幕、软件可用以及任务栏的高度和宽度。</p><p>\3. <a class="link"   href="http://www.cnblogs.com/polk6/p/5051935.html#Menu3-Window" >浏览器信息<i class="fas fa-external-link-alt"></i></a>：介绍浏览器尺寸信息；如：浏览器、内部页面以及工具栏的高度和宽度。</p><p>\4. <a class="link"   href="http://www.cnblogs.com/polk6/p/5051935.html#Menu4-Body" >页面信息<i class="fas fa-external-link-alt"></i></a>：介绍HTML页面尺寸信息；如：body总的、展示的高度和宽度。</p><a id="more"></a><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a><strong>一、介绍</strong></h1><h2 id="1-容器"><a href="#1-容器" class="headerlink" title="1. 容器"></a><strong>1. 容器</strong></h2><p>一个页面的展示，从外到内的容器为：屏幕、浏览器以及页面本身。</p><p>HTML元素展现在页面内，页面展现在浏览器内，而浏览器展现在屏幕内。</p><p>通过Js的一些对象可以获取这些容器的高度、宽度。</p><h2 id="2-物理尺寸和分辨率"><a href="#2-物理尺寸和分辨率" class="headerlink" title="2. 物理尺寸和分辨率"></a><strong>2. 物理尺寸和分辨率</strong></h2><p>容器的尺寸是指当前分辨率下的高度、宽度，而不是物理高度、宽度。</p><p>如：一个22寸的显示器，屏幕分辨率为1366 * 768，那么获取到的屏幕高度为1366px，宽度为768px。</p><h2 id="3-展示图"><a href="#3-展示图" class="headerlink" title="3. 展示图"></a><strong>3. 展示图</strong></h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208143610597.png"                      alt="image-20201208143610597"                ></p><h1 id="二、屏幕信息"><a href="#二、屏幕信息" class="headerlink" title="二、屏幕信息"></a><strong>二、屏幕信息</strong></h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208143554566.png"                      alt="image-20201208143554566" style="zoom:67%;"                 ></p><p><strong>screen.height ：</strong>屏幕高度。</p><p><strong>screen.width ：</strong>屏幕宽度。</p><p><strong>screen.availHeight ：</strong>屏幕可用高度。即屏幕高度减去上下任务栏后的高度，可表示为软件最大化时的高度。</p><p><strong>screen.availWidth ：</strong>屏幕可用宽度。即屏幕宽度减去左右任务栏后的宽度，可表示为软件最大化时的宽度。</p><p><strong>任务栏高/宽度 ：</strong>可通过屏幕高/宽度 减去 屏幕可用高/宽度得出。如：任务栏高度 = screen.height - screen.availHeight 。</p><h1 id="三、浏览器信息"><a href="#三、浏览器信息" class="headerlink" title="三、浏览器信息"></a><strong>三、浏览器信息</strong></h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208143538236.png"                      alt="image-20201208143538236" style="zoom:50%;"                 ></p><p><strong>window.outerHeight ：</strong>浏览器高度。</p><p><strong>window.outerWidth ：</strong>浏览器宽度。</p><p><strong>window.innerHeight ：</strong>浏览器内页面可用高度；此高度包含了水平滚动条的高度(若存在)。可表示为浏览器当前高度去除浏览器边框、工具条后的高度。</p><p><strong>window.innerWidth ：</strong>浏览器内页面可用宽度；此宽度包含了垂直滚动条的宽度(若存在)。可表示为浏览器当前宽度去除浏览器边框后的宽度。</p><p><strong>工具栏高/宽度 ：</strong>包含了地址栏、书签栏、浏览器边框等范围。如：高度，可通过浏览器高度 - 页面可用高度得出，即：window.outerHeight - window.innerHeight。</p><h1 id="四、页面信息"><a href="#四、页面信息" class="headerlink" title="四、页面信息"></a><strong>四、页面信息</strong></h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://typora.pp.52react.cn/h5web/2020120814image-20201208143521659.png"                      alt="image-20201208143521659" style="zoom:50%;"                 ></p><p><strong>body.offsetHeight ：</strong>body总高度。</p><p><strong>body.offsetWidth ：</strong>body总宽度。</p><p><strong>body.clientHeight ：</strong>body展示的高度；表示body在浏览器内显示的区域高度。</p><p><strong>body.clientWidth ：</strong>body展示的宽度；表示body在浏览器内显示的区域宽度。</p><p><strong>滚动条高度/宽度 ：</strong>如高度，可通过浏览器内页面可用高度 - body展示高度得出，即window.innerHeight - body.clientHeight。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解SQL</title>
      <link href="2019/08/04/%E7%90%86%E8%A7%A3SQL/"/>
      <url>2019/08/04/%E7%90%86%E8%A7%A3SQL/</url>
      
        <content type="html"><![CDATA[<p>如何高效的存储和使用这些数据，让页面可以看起来不卡<br><a id="more"></a></p><h2 id="cookie与localStorage"><a href="#cookie与localStorage" class="headerlink" title="cookie与localStorage"></a>cookie与localStorage</h2><table><thead><tr><th>cookie</th><th>localStorage</th></tr></thead><tbody><tr><td>限制4k</td><td>限制最大5M</td></tr><tr><td>—</td><td>—</td></tr><tr><td>浏览器</td><td>存放在本地文件中</td></tr><tr><td></td><td>字符串方式存取</td></tr></tbody></table><h2 id="webSQL"><a href="#webSQL" class="headerlink" title="webSQL"></a>webSQL</h2><h3 id="什么是关系型数据库？"><a href="#什么是关系型数据库？" class="headerlink" title="什么是关系型数据库？"></a>什么是关系型数据库？</h3><p>由一张张二维表组成的数据库</p><h3 id="什么是SQL呢？"><a href="#什么是SQL呢？" class="headerlink" title="什么是SQL呢？"></a>什么是SQL呢？</h3><p>一种操作关系型的DB语言，支持创建表，插入表，修改，删除，查询<br>常见的关系型数据库有：<code>MySQL,SQLite,SQLSever,Oracle</code></p><h4 id="创建一个DB"><a href="#创建一个DB" class="headerlink" title="创建一个DB"></a>创建一个DB</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="built_in">window</span>.openDatabase(</span><br><span class="line">    <span class="string">&quot;order_test&quot;</span>,    <span class="xml">&lt;----数据库名称</span></span><br><span class="line">    &quot;1.0&quot;,           &lt;----版本</span><br><span class="line">    &quot;order map data&quot;,&lt;----描述</span><br><span class="line">    &quot;2*1024*1024&quot;    &lt;----可用空间</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>返回一个<code>db对象</code></p><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table <span class="keyword">if</span> not exists order_data(order_id primary key,format_city,lat,lng,price,create_time)</span><br></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into order_data values($&#123;order.orderId&#125;,<span class="string">&#x27;$&#123;order.format_city&#125;&#x27;</span>,$&#123;order.lat&#125;,$&#123;order.lng&#125; ...);</span><br></pre></td></tr></table></figure><h4 id="主键唯一约束"><a href="#主键唯一约束" class="headerlink" title="主键唯一约束"></a>主键唯一约束</h4><p>一般我们认为主键是自动生成的，myslq可以指定某个整数字段为<code>auto_increment</code>;而webSQL不能指定，需要创建指定当前字段为integer<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table student(id integer primary key,age,score)</span><br></pre></td></tr></table></figure></p><h4 id="Select查询"><a href="#Select查询" class="headerlink" title="Select查询"></a>Select查询</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select format_city <span class="keyword">as</span> city,count(order_id) <span class="keyword">as</span> <span class="string">&#x27;count&#x27;</span>,sum(price) <span class="keyword">as</span> amount <span class="keyword">from</span> order_data by format_city order by date</span><br></pre></td></tr></table></figure><p>我们也可以查询某个order是否存在，判断满足动态更新的需求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select order_id <span class="keyword">from</span> order_data where order_id = $&#123;order.orderId&#125;</span><br></pre></td></tr></table></figure><h4 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h4><h5 id="为什么要创建索引？"><a href="#为什么要创建索引？" class="headerlink" title="为什么要创建索引？"></a>为什么要创建索引？</h5><p>为了提高搜索效率，如果没有建立索引查询某个字段是否等于某个值的数据需要遍历所有的数据，查找复杂度<code>O(N)</code>,但是如果建立索引使用二叉查找树或者它的变种，查找复杂度变<code>O(logN)</code>,Mysql使用的<code>B+树</code>，另外字符串可以使用哈希变数字，字符串所以要比数字低效很多</p><h3 id="关系型数据库的优缺点"><a href="#关系型数据库的优缺点" class="headerlink" title="关系型数据库的优缺点"></a>关系型数据库的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>1.支持复杂的查询，可以联表查询，表达式查询，嵌表查询</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>1.不方便横向扩展，给数据库添加一个字段，如果数据库达到亿级，那么这个操作复杂性就很差了<br>2.海量数据SQL联表查询，性能会非常差<br>3.为了保持事务的一致特性，难以应对高并发</p><h2 id="非关系型数据库也叫NoSQL数据库"><a href="#非关系型数据库也叫NoSQL数据库" class="headerlink" title="非关系型数据库也叫NoSQL数据库"></a>非关系型数据库也叫NoSQL数据库</h2><p>特点：</p><blockquote><p>存储比较灵活，查找没有像关系型数据库那么好用，适用于数据量很大，只需要单表key查询，一致性不很高的场景</p></blockquote><h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><p>为什么要叫IndexedDB或者索引数据库呢？<br>因为它主页通过创建索引惊喜查询</p><p>IndexedDB可以支持插入<code>JSON格式</code>的不一样的数据</p><h3 id="非关系型数据库的横向扩展"><a href="#非关系型数据库的横向扩展" class="headerlink" title="非关系型数据库的横向扩展"></a>非关系型数据库的横向扩展</h3><p>因为可以每个数据的类型不一样，所以不存在添加字段的问题，而相同的类型可以创建索引，提高搜索效率；但是也又小问题，NoSql<code>做不了</code>复杂查询，如果要比如按照city/日期归类，那么需要开一个<code>游标循环</code>处理。时间和性能开销很大；</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190810224204.png"                      alt=""                ></p><h2 id="数据库与Promise"><a href="#数据库与Promise" class="headerlink" title="数据库与Promise"></a>数据库与Promise</h2><p>我们都知道数据库是异步操作；如果我们先发一个请求获取数据，然后插入数据，重复N次后，再查询数据。如何保证每次都成功写入数据库呢？</p><p>我们可以使用Promise来解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promises = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span> ; i&lt;orders.length;i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> order = orders[i]</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">     dataProcess.executeSql(<span class="string">&#x27;插入sql语句&#x27;</span>,<span class="function">(<span class="params">tx,results</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//数据库返回</span></span><br><span class="line">        <span class="keyword">if</span>(results.rows.length）&#123;</span><br><span class="line">          resolve()</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不存在，则向服务器继续请求查询</span></span><br><span class="line">        <span class="keyword">var</span> order = orders[i]</span><br><span class="line">        dataProcess.queryAdderss(order)</span><br><span class="line">     &#125;）</span><br><span class="line">  </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//添加进数组</span></span><br><span class="line">  promise.push(promise)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//所有的Prmise都返回了则调用finished函数</span></span><br><span class="line">Prmise.all(promises).then(dataPromcess.finished)</span><br></pre></td></tr></table></figure><h2 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h2><p>比如网页链接存在参数传递，后台并没有对用户的输入进行过滤，导致用户的输入直接被SQL解释器执行。SQL注入的产生条件：<br>输入一段sql片段  最终拼接成一段攻击代码<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190810230252.png"                      alt=""                ><br> <img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190810230323.png"                      alt=""                ></p><h3 id="防御SQL注入"><a href="#防御SQL注入" class="headerlink" title="防御SQL注入"></a>防御SQL注入</h3><p>归根到底，需要对用户的输入进行过滤，因为在Web攻防中，我们永远不要相信用户的输入 1。<br>1.使用预编译语句，绑定变量。<br>2.使用安全的存储过程对抗SQL注入。<br>3.检查数据类型。<br>4.使用安全函数。</p><h2 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h2><p>简单介绍下：如果一个网站越来越火🔥，一个数据库服务很可能会扛不住，需要多搞几台服务器缓解压力，这时候需要几个数据库<code>一致性</code>，解决方案很多，最简单的是Mysql的<code>replication</code>；</p><h3 id="主要工作原理"><a href="#主要工作原理" class="headerlink" title="主要工作原理"></a>主要工作原理</h3><p>假如有三台服务器，三个数据库，用户一个操作写到了其中一个<code>主</code>服务器，这个库叫master，其他二个库叫<code>slave</code>，主库会把数据库远程复制到另外二个库。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解HTTPS连接前几毫米发生了什么</title>
      <link href="2019/08/01/%E7%90%86%E8%A7%A3HTTPS%E8%BF%9E%E6%8E%A5%E5%89%8D%E5%87%A0%E6%AF%AB%E7%A7%92%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>2019/08/01/%E7%90%86%E8%A7%A3HTTPS%E8%BF%9E%E6%8E%A5%E5%89%8D%E5%87%A0%E6%AF%AB%E7%A7%92%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>1.为什么说HTTPS安全，安全在哪里？</p><p>2.HTTPS使用证书保证它的安全吗？</p><p>3.为什么证书需要购买？<br><a id="more"></a></p><h2 id="HTTPS解决了什么问题？"><a href="#HTTPS解决了什么问题？" class="headerlink" title="HTTPS解决了什么问题？"></a>HTTPS解决了什么问题？</h2><p>HTTPS解决了<code>中间人攻击</code></p><h3 id="什么是中间人攻击"><a href="#什么是中间人攻击" class="headerlink" title="什么是中间人攻击"></a>什么是中间人攻击</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190801224029.png"                      alt=""                ><br>你和服务器传输数据之间经过了一个中间人，数据都被中间人拦截或者纂改你根本不知道，中间人对你来说是透明的</p><h3 id="中间人攻击方法"><a href="#中间人攻击方法" class="headerlink" title="中间人攻击方法"></a>中间人攻击方法</h3><p>1.域名污染<br>2.ARP欺骗</p><h3 id="HTTPS是应对中间人攻击的唯一方法"><a href="#HTTPS是应对中间人攻击的唯一方法" class="headerlink" title="HTTPS是应对中间人攻击的唯一方法"></a>HTTPS是应对中间人攻击的唯一方法</h3><h4 id="HTTPS连接过程"><a href="#HTTPS连接过程" class="headerlink" title="HTTPS连接过程"></a>HTTPS连接过程</h4><p>简单描述：HTTPS链接，服务器发送它的证书给浏览器，浏览器确认<code>证书</code>正确，并检查证书中对应的主机名是否正确，如果正确则双方加密数据后发送给对方，对方再进行解密，保证数据是不透明的。</p><h4 id="完整连接建立过程"><a href="#完整连接建立过程" class="headerlink" title="完整连接建立过程"></a>完整连接建立过程</h4><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>1.建立TCP连接<br>2.手机端发送一个hello 给服务端，我们再抓包中观察，将hello里面手机端发给服务端的信息罗列出来：<br>A.使用了TLS版本为1.2   其他版本有1.0 1.1 1.2，HTTPS加密靠TLS安全传输层协议<br>B.手机端当前的时间和一个随机密码串，<br>C.SessionID 第一次连接为0，如果有SessionID则可以恢复会话，而不用重复握手过程。服务端会告知SessionID，再刷新页面的时候，客户端就会把这个SessionID带上<br>D.浏览器支持加密组合方式。浏览器一共支持22种加密组合方式，发送给服务器让服务器选一个<br>E.服务器根据域名发送相应的证书。HTTPS= HTTP + TLS</p><blockquote><p>TLS与SSL什么关系？ SSL是TLS的前身</p></blockquote><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p>1.时间 随机数等，注意服务器还发送一个SessionID给浏览器<br>2.服务器加密方式，服务器在客户端提供的方式里面选择了某种方式，</p><h5 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h5><p>接着服务器发送一个证书的包过去给手机端，服务器可能发三个包，三个证书是相互依赖<br>证书里面有什么内容：<br>1.签名<br>2.每个证书包含签名的算法<br>3.被签名的证书</p><blockquote><p>证书包括申请证书的国家省份城市组织名称，还有有效期，证书的公钥</p></blockquote><p>证书的公钥是一个16进制的代码；<br>公钥由<code>N</code> 和 <code>e</code>组成 ===&gt; publicKey = (N,e)；<br>其中N是一个大整数，由2个质数相乘得到：  <code>N = p * q</code></p><p>使用的技术是<code>RSA</code>又可以叫做<code>非对称加密算法</code></p><h4 id="当我访问HTTP的时候，为什么会自动跳转到HTTPS？"><a href="#当我访问HTTP的时候，为什么会自动跳转到HTTPS？" class="headerlink" title="当我访问HTTP的时候，为什么会自动跳转到HTTPS？"></a>当我访问HTTP的时候，为什么会自动跳转到HTTPS？</h4><blockquote><p>这是因为后端做的重定向，通过Nginx的<code>rewrite</code>或者<code>return</code>规则做的重定向，返回3开头的状态码让浏览器<code>重定向</code></p></blockquote><h4 id="RSA与密钥交换是什么关系？"><a href="#RSA与密钥交换是什么关系？" class="headerlink" title="RSA与密钥交换是什么关系？"></a>RSA与密钥交换是什么关系？</h4><blockquote><p>RSA是非对称加密算法，而密钥交换用的是对称加密，在抓包中我们看到它们用的是迪菲-赫尔曼密钥交换，为了让交换不受中间人攻击，双方需要进行身份验证。即RSA对密钥加密。只有拥有正确RSA密钥的一方，才能知道交互的密钥是什么？</p></blockquote><h4 id="TLS是传输层协议吗？"><a href="#TLS是传输层协议吗？" class="headerlink" title="TLS是传输层协议吗？"></a>TLS是传输层协议吗？</h4><p>一般把TLS归为安全传输层协议</p><h4 id="使用HTTPS的代价"><a href="#使用HTTPS的代价" class="headerlink" title="使用HTTPS的代价"></a>使用HTTPS的代价</h4><p>从最开始的手机端hello ， 到最后的包，总耗时从4.99s到5.299s；这个建立HTPPS的连接过程为0.3s；所以使用HTPPS的代价：<br>1.建立HTTPS的花费时间<br>2.数据需要加密和解密，占更多的CPU<br>3.数据加密后比原信息更大，占用更多的带宽</p><h4 id="怎么绕过HTTPS"><a href="#怎么绕过HTTPS" class="headerlink" title="怎么绕过HTTPS"></a>怎么绕过HTTPS</h4><p>使用<code>ssltrip</code>，这个工具的实现原理是使用ARP欺骗与用户建立链接，然后强制将用户访问的HTTPS替换成HTTP，这样中间人和用户之间使用HTTP，而和服务端还是用HTTPS</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS中间件原理</title>
      <link href="2019/07/31/Nodejs%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8E%9F%E7%90%86/"/>
      <url>2019/07/31/Nodejs%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在NodeJS中，中间件主要是指封装所有Http请求细节处理的方法。一次Http请求通常包含很多工作，如记录日志、ip过滤、查询字符串、请求体解析、Cookie处理、权限验证、参数验证、异常处理等，但对于Web应用而言，并不希望接触到这么多细节性的处理，因此引入中间件来简化和隔离这些基础设施与业务逻辑之间的细节，让开发者能够关注在业务的开发上，以达到提升开发效率的目的。<br><a id="more"></a></p><blockquote><p>中间件的行为比较类似Java中过滤器的工作原理，就是在进入具体的业务处理之前，先让过滤器处理。它的工作模型下图所示。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190801184341.png"                      alt=""                ></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="首页设计一个类"><a href="#首页设计一个类" class="headerlink" title="首页设计一个类"></a>首页设计一个类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LikeExpress</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.routes = &#123;</span><br><span class="line">      all: [],</span><br><span class="line">      get: [],</span><br><span class="line">      post: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">register</span>(<span class="params">path</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">use</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">post</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//监听</span></span><br><span class="line">  <span class="function"><span class="title">listen</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> LikeExpress();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="填充register方法"><a href="#填充register方法" class="headerlink" title="填充register方法"></a>填充register方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="title">register</span>(<span class="params">path</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> info = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> path === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    info.path = path;</span><br><span class="line">    info.stack = slice(argument, <span class="number">1</span>); <span class="comment">//数组</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    info.path = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    info.stack = slice(argument, <span class="number">0</span>); <span class="comment">//数组</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//use方法中调用封装好的register</span></span><br><span class="line"><span class="function"><span class="title">use</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> info = <span class="built_in">this</span>.register.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">   <span class="comment">//存入all数组</span></span><br><span class="line">  <span class="built_in">this</span>.routes.all.push(info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加listen"><a href="#添加listen" class="headerlink" title="添加listen"></a>添加listen</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听</span></span><br><span class="line">  <span class="function"><span class="title">listen</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">   <span class="comment">//添加个回调函数</span></span><br><span class="line">    <span class="keyword">const</span> server = http.createServer(<span class="built_in">this</span>.callback());</span><br><span class="line">    server.listen(...args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="添加callback"><a href="#添加callback" class="headerlink" title="添加callback"></a>添加callback</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">callback</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.json = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      res.setHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> url = req.url;</span><br><span class="line">    <span class="keyword">const</span> method = req.method.toLowerCase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//区分匹配的路径</span></span><br><span class="line">    <span class="keyword">const</span> resultList = <span class="built_in">this</span>.match(method, url);</span><br><span class="line">    <span class="comment">//核心</span></span><br><span class="line">    <span class="built_in">this</span>.handle(req, res, resultList);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="match匹配一个中间件列表符合哪些请求是可以继续执行"><a href="#match匹配一个中间件列表符合哪些请求是可以继续执行" class="headerlink" title="match匹配一个中间件列表符合哪些请求是可以继续执行"></a>match匹配一个中间件列表符合哪些请求是可以继续执行</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">match</span>(<span class="params">method, url</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">&quot;/favicon.ico&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> stack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取routes</span></span><br><span class="line">    <span class="keyword">let</span> curRouters = [];</span><br><span class="line"></span><br><span class="line">    curRouters = curRouters.concat(<span class="built_in">this</span>.routes.all);</span><br><span class="line">    curRouters = curRouters.concat(<span class="built_in">this</span>.routes[method]);</span><br><span class="line"></span><br><span class="line">    curRouters.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (url.indexOf(item.path) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// url === &quot;/api/user&quot; &amp;&amp; item.path === &quot;/&quot;</span></span><br><span class="line">        stack = stack.concat(item.stack);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stack;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="核心方法写next方法"><a href="#核心方法写next方法" class="headerlink" title="核心方法写next方法"></a>核心方法写next方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心</span></span><br><span class="line">  <span class="function"><span class="title">handle</span>(<span class="params">req, res, resultList</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> next = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//每次执行获取第一个中间件</span></span><br><span class="line">      <span class="keyword">const</span> middleware = resultList.shift();</span><br><span class="line">      <span class="keyword">if</span> (middleware) &#123;</span><br><span class="line">        <span class="comment">//执行中间件</span></span><br><span class="line">        middleware(req, res, next);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//立即执行</span></span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="解析图"><a href="#解析图" class="headerlink" title="解析图"></a>解析图</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190801183926.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解WebSocket与TCP/IP🔥</title>
      <link href="2019/07/30/%E7%90%86%E8%A7%A3WebSocket%E4%B8%8ETCP-IP/"/>
      <url>2019/07/30/%E7%90%86%E8%A7%A3WebSocket%E4%B8%8ETCP-IP/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p>首先介绍下Mac下抓取端口包的工具角<code>tcpdump</code><br>命令：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump  port <span class="number">8080</span> -n</span><br></pre></td></tr></table></figure><br><a id="more"></a></p><h3 id="一个完整的http链接"><a href="#一个完整的http链接" class="headerlink" title="一个完整的http链接"></a>一个完整的http链接</h3><p>我们先来看下抓到包的数据分析<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/http关系.png"                      alt=""                ></p><h4 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190731225039.png"                      alt=""                ></p><ol><li>手机端–&gt;服务器发送了一个tcp包，带上了<code>SYN</code>标志位，表示建立连接，并指名包开始序列号<code>seq</code>（单位字节）</li><li>服务器–&gt;手机端进行回复，发送了一个<code>SYN+ACK</code>的报文段，表示同意建立连接</li><li>手机端–&gt;服务端发送一个ACK，同时改变接受窗口大小，完成三次握手</li></ol><h4 id="TCP的为什么是三次握手？"><a href="#TCP的为什么是三次握手？" class="headerlink" title="TCP的为什么是三次握手？"></a>TCP的为什么是三次握手？</h4><p>为什么不是二次或者四次呢？</p><blockquote><p>如果采取两次握手，相当于第二次握手结束便建立连接，如果发送SYN的一方不想连接了，也不会有反馈，另一方却一直在等待，浪费了时间。当然可以采取4次甚至N次握手，但是有必要吗？建立连接的时间太长，效果也会大打折扣。所以3次只是折中方案，保证了可靠性，又节俭了建立连接的时间。</p></blockquote><h4 id="什么是接收窗口呢？"><a href="#什么是接收窗口呢？" class="headerlink" title="什么是接收窗口呢？"></a>什么是接收窗口呢？</h4><p>tcp报文头，窗口大小只有2个字节16位，最大只能2^16-1 = 64kb大小，当初设计tcp的人没有想到现代网速那么快，所以可选项加了一个<code>wscale</code>指数字段，最大为14，最大窗口大小为1G</p><h4 id="接受窗口用来做什么呢？"><a href="#接受窗口用来做什么呢？" class="headerlink" title="接受窗口用来做什么呢？"></a>接受窗口用来做什么呢？</h4><p>它根据自身网络情况设置不同大小的值用来控制对方发送速度，避免对方发送太快，导致网络<code>拥塞</code></p><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><p>建立好tcp之后 手机端–&gt;服务端发送一个http请求，带上<code>PUSH</code>标志位：表示一个比较紧急的报文，告诉服务器立即把数据从缓存里发送给程序，不能再继续缓存了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190731224641.png"                      alt=""                ></p><h4 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190731225127.png"                      alt=""                ><br>为什么要挥手四次？<br>前二次挥手让连接处于半关闭状态，此时手机端<code>不可</code>向服务端发送数据，而服务器<code>可以继续</code>向手机端发送数据，所以四次的原因是<code>可以有一个处于半关闭的状态</code></p><ol><li>手机端–&gt;服务端 发送一个<code>FIN</code>，要等30s才能关闭，为什么要等30秒?因为这个是由<code>keep-alive</code>字段影响，同一个域可能要请求多个资源，不能一个请求完了就马上关闭</li><li>服务端–&gt;手机端 发送<code>ACK</code> 这个时候连接处于<code>半关闭状态</code>，手机端不能再发送数据给服务端，但服务端可以向手机端发送</li><li>服务端–&gt;手机端 把连接关闭了 于是向手机端发送<code>FIN</code></li><li>手机端–&gt;服务端 发送了一个ACK，此时链接完全关闭，手机端关闭了进入<code>TIME_WAIT</code>状态</li></ol><h4 id="为什么服务端不用进入TIME-WAIT状态"><a href="#为什么服务端不用进入TIME-WAIT状态" class="headerlink" title="为什么服务端不用进入TIME_WAIT状态?"></a>为什么服务端不用进入TIME_WAIT状态?</h4><blockquote><p>因为一个完整的<code>套接字</code>包括四个元素：互联双方的IP+端口号，只要一方被破坏了就不能构成<code>相同的</code>套接字。限制手机端应该比较合理，因为服务端可能还要继续监听那个端口</p></blockquote><h4 id="发送窗口是怎么算的"><a href="#发送窗口是怎么算的" class="headerlink" title="发送窗口是怎么算的?"></a>发送窗口是怎么算的?</h4><blockquote><p>wscale是一个二进制指数，wscale=5 表示左移5位 === 2的5次幂</p></blockquote><h3 id="四层网络协议"><a href="#四层网络协议" class="headerlink" title="四层网络协议"></a>四层网络协议</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190731225646.png"                      alt=""                ></p><h2 id="假如要发送一个http文本，最后会被包装成"><a href="#假如要发送一个http文本，最后会被包装成" class="headerlink" title="假如要发送一个http文本，最后会被包装成"></a>假如要发送一个http文本，最后会被包装成</h2><h2 id="物理帧头-IP报头文-TCP报头文-HTTP报头文-文本数据"><a href="#物理帧头-IP报头文-TCP报头文-HTTP报头文-文本数据" class="headerlink" title="物理帧头 | IP报头文 | TCP报头文 | HTTP报头文 | 文本数据"></a>物理帧头 | IP报头文 | TCP报头文 | HTTP报头文 | 文本数据</h2><p>1.物理地址<br>每个网卡都有一个全球唯一的物理地址。路由器向局域网所有主机发送数据，网卡会比较物理地址是否与自己地址一致，如果一致就接受，否则丢弃。</p><p>2.网际层ARP<br>ARP是一个地址解析协议，当我访问10.2.200.140的时候我需要知道它的物理路径地址，如果是个局域网我就局域网广播一个ARP请求，然后就会告诉我，物理地址</p><p>3.网际层traceroute<br>可以追踪路由路径，原理是向目标主机发送ICMP报文，发送第一个报文时，设置TTL=0 报文生存时间为0，下一个路由器收到这个报文后，不会继续转发了，会给原主机发送出错的报文。就可知道第一个路由的ip地址，同里TTL为1 就可以知道第二个路由的IP地址</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>什么阻塞控制？</p><hr><p>比如我想上传一个文件观察报文的发送情况，在0，7s的时间内 发送1448*9 = 17kb的数据；<br>这个时候网络卡顿了，又会这样呢？在1.45s的时间内，总共发送了9个包===5kb数据</p><p>1.接受窗口<br>上传过程中，服务器不断调整它接受的窗口大小<br>2.拥塞窗口<br>我本地有自己的一个拥塞窗口cwnd</p><p>当cwmd &gt; rwnd的时候对方接收能力限制了我的发送速度，当rwnd &gt; cwnd的时候，是我的网络情况造成发送比较慢</p><p>慢启动与阻塞避免<br>当我们访问一个Linux服务器，服务在收到get请求后进行响应，第一次同时只发3个包，并且从时间间隔上看肯定它是故意的。为什么第一个会是3个呢。因为Linux初始化窗口就是3MSS，说明第一次只能发3个包</p><h3 id="HTTP请求头大小限制"><a href="#HTTP请求头大小限制" class="headerlink" title="HTTP请求头大小限制"></a>HTTP请求头大小限制</h3><p>1.请求头大小限制</p><table><thead><tr><th>Nginx</th><th>Tomact</th></tr></thead><tbody><tr><td>4k~8k</td><td>8k</td></tr></tbody></table><p>2.URL长度限制<br>一个比较安全的值应该是<code>8K</code>，同时注意get请求参数是在URL里数据不能太大。<br>3.Cookie的长度限制<br>一般一个domain的cookie不能超过4kb，50个cookie，不然浏览器可能不会支持。</p><h2 id="理解WebSocket"><a href="#理解WebSocket" class="headerlink" title="理解WebSocket"></a>理解WebSocket</h2><p>怎么实现一个HTTP的web实时聊天？怎么知道对方有没有收到发送消息给我呢？<br>1.使用轮询，每隔2s发一个请求给服务端查询，<code>缺点浪费资源</code><br>2.使用Service Worker实现浏览器的Push 这种方法要先注册Fcm账号获取一个id，用ServiceWorker监听，服务向 Android.com/send发送消息，谷歌服务器收到消息向那个id发送一个推送，实现了浏览器的push，<code>缺点兼容性不好</code><br>3.WebSocket建立长连接</p><p>代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://192.168.8.88:8080&quot;</span>)</span><br><span class="line">socket.open = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    socket.send(<span class="string">&quot;长江长江，我是黄河&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">socket.onmessage = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&quot;收到来自黄河的消息：&quot;</span>+event.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="谈谈WebSocket和WebRTC"><a href="#谈谈WebSocket和WebRTC" class="headerlink" title="谈谈WebSocket和WebRTC"></a>谈谈WebSocket和WebRTC</h2><p>WebSocket可以发数据，也可以接收数据，不保证传送的效率和质量。<br>WebRTC可用于可靠的传输音频视频，建立P2P链接，不需要服务端进行转发数据，虚拟电话，在线面试等现在很多用它实现</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs的MVC模型</title>
      <link href="2019/07/26/NodeJs%E7%9A%84MVC%E6%A8%A1%E5%9E%8B/"/>
      <url>2019/07/26/NodeJs%E7%9A%84MVC%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>MVC模型主要的思想是将业务逻辑按职能分离</p><ol><li>控制器—一组行为的集合</li><li>模型  —-数据相关的操作和封装</li><li>视图  —-视图的渲染（nodejs的后台虽然不需要视图可以视为接口的输出参数）<br>这是目前最经典的分层模式，工作模式说明</li><li>路由解析url寻找对应控制器和行为</li><li>行为调用相关的模型，进行数据操作</li><li>数据操作结束后，调用视图和相关数据进行页面渲染，输出给客户端</li></ol><a id="more"></a><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190726220049.png"                      alt=""                ></p><p><a class="link"   href="http://www.js" >www.js<i class="fas fa-external-link-alt"></i></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">//参数配置层</span></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="built_in">require</span>(<span class="string">&#x27;./app&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(serverHandle)</span><br><span class="line"></span><br><span class="line">server.listen(PORT,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;链接上了&#x27;</span>+PORT);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据不同功能分不同路由路径</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="built_in">require</span>(<span class="string">&quot;./src/router/blog&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置返回格式</span></span><br><span class="line">  res.setHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  req.path = url.split(<span class="string">&quot;?&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果get解析query</span></span><br><span class="line">  req.query = querystring.parse(url.split(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">const</span> blogData = handleBlogRouter(req, res);</span><br><span class="line">     res.end(<span class="built_in">JSON</span>.stringify(blogData));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//处理404</span></span><br><span class="line">    res.writeHead(<span class="number">404</span>, &#123; <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">    res.write(<span class="string">&quot;404 Not Found\n&quot;</span>);</span><br><span class="line">    res.end();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br></pre></td></tr></table></figure><p>/router/blog.js路由功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;getList,getDetail,createNewBlog&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../controller/blog&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;SuccessModal,ErrorModal&#125;   =  <span class="built_in">require</span>(<span class="string">&#x27;../modal/resModal&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="comment">//获取博客列表</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">&quot;GET&quot;</span> &amp;&amp; req.path === <span class="string">&quot;/api/blog/list&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> author = req.query.author || <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> keyword = req.query.keyword  || <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> listData = getList(author,keyword)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SuccessModal(listData)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取博客详情</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">&quot;GET&quot;</span> &amp;&amp; req.path === <span class="string">&quot;/api/blog/detail&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&quot;获取博客api&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//新建一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">&quot;POST&quot;</span> &amp;&amp; req.path === <span class="string">&quot;/api/blog/new&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&quot;新建博客api&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//更新一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">&quot;POST&quot;</span> &amp;&amp; req.path === <span class="string">&quot;/api/blog/update&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&quot;更新博客api&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleBlogRouter</span><br></pre></td></tr></table></figure><p>model层操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">data, message</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.message = data;</span><br><span class="line">      data = <span class="literal">null</span></span><br><span class="line">      message = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;<span class="built_in">this</span>.data = data&#125;</span><br><span class="line">    <span class="keyword">if</span> (message) &#123;<span class="built_in">this</span>.message = message&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuccessModal</span> <span class="keyword">extends</span> <span class="title">BaseModal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">data, message</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(data, message);</span><br><span class="line">    <span class="built_in">this</span>.errno = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorModal</span> <span class="keyword">extends</span> <span class="title">BaseModal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">data, message</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(data, message);</span><br><span class="line">    <span class="built_in">this</span>.errno = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; SuccessModal, ErrorModal &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>controller层操作<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDetail = <span class="function">(<span class="params">id</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//返回假数据，以后这里增加数据库操作代码</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id:<span class="number">1</span>,</span><br><span class="line">      title:<span class="string">&#x27;标题C&#x27;</span>,</span><br><span class="line">      content:<span class="string">&#x27;内容C&#x27;</span>,</span><br><span class="line">      createTime:<span class="number">1564065988099</span>,</span><br><span class="line">      author:<span class="string">&#x27;周杰伦&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    getDetail</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React中使用Mobx</title>
      <link href="2019/06/23/React%E4%B8%AD%E4%BD%BF%E7%94%A8Mobx/"/>
      <url>2019/06/23/React%E4%B8%AD%E4%BD%BF%E7%94%A8Mobx/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要使用Mobx"><a href="#为什么要使用Mobx" class="headerlink" title="为什么要使用Mobx"></a>为什么要使用Mobx</h2><blockquote><p>状态管理库的区别:网上某位大牛的 ppt, 链接有机会再补上。此处的自己为库的开发者，别人是指库的使用者，也就是我等码农。<br><a id="more"></a></p><ul><li style="list-style: none"><input type="checkbox"></input> MobX恶心自己，成全别人</li><li style="list-style: none"><input type="checkbox"></input> Redux成全自己，恶心别人</li><li style="list-style: none"><input type="checkbox"></input> Rxjs恶心自己，也恶心别人</li></ul></blockquote><h2 id="首先安装修饰器"><a href="#首先安装修饰器" class="headerlink" title="首先安装修饰器"></a>首先安装修饰器</h2><h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create-react-app mobx-todo-list <span class="comment">//创建项目</span></span><br><span class="line"></span><br><span class="line"> yarn add mobx mobx-react  <span class="comment">//安装 mobx 的相关依赖</span></span><br><span class="line"> </span><br><span class="line"> npm run eject</span><br></pre></td></tr></table></figure><h3 id="安装安装-decorators"><a href="#安装安装-decorators" class="headerlink" title="安装安装 decorators"></a>安装安装 decorators</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-proposal-decorators</span><br></pre></td></tr></table></figure><h3 id="修改package-json中的babel配置"><a href="#修改package-json中的babel配置" class="headerlink" title="修改package.json中的babel配置"></a>修改package.json中的babel配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;react-app&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>完成后, 就可以使用装饰器语法了.</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190623003438.png"                      alt=""                ></p><h2 id="在React如何使用呢"><a href="#在React如何使用呢" class="headerlink" title="在React如何使用呢"></a>在React如何使用呢</h2><ul><li>Provider<br>—-Provider的作用与react-redux提供的Provider组件是相同的</li><li>inject</li><li>—- 用于从Provider提供的state中选取数据作为props传递给目标组件。<br>常用的方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@inject(<span class="string">&quot;store1&quot;</span>,<span class="string">&quot;store2&quot;</span>) @observer MyComponent</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建AppStore"><a href="#创建AppStore" class="headerlink" title="创建AppStore"></a>创建AppStore</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, computed, action &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppStore</span> </span>&#123;</span><br><span class="line">    @observable todos = []; <span class="comment">//todos列表</span></span><br><span class="line">    @observable newtodo = <span class="string">&quot;232&quot;</span>; <span class="comment">//新添加的todo</span></span><br><span class="line">    @observable selectedRowKeys = []; <span class="comment">//选择行的key</span></span><br><span class="line">    @observable loading = <span class="literal">true</span>; <span class="comment">//Table-loading</span></span><br><span class="line">    @observable _key = <span class="number">0</span>; <span class="comment">//key</span></span><br><span class="line">    @observable total = <span class="number">0</span>; <span class="comment">//数据量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加 注意this的执行 必须用剪头函数</span></span><br><span class="line">    @action AddTodo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._key += <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算长度  接受一个函数</span></span><br><span class="line">    @computed <span class="keyword">get</span> <span class="title">TodoListCount</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AppStore;</span><br></pre></td></tr></table></figure><h3 id="载入index-js"><a href="#载入index-js" class="headerlink" title="载入index.js"></a>载入index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> serviceWorker <span class="keyword">from</span> <span class="string">&#x27;./serviceWorker&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> AppStore <span class="keyword">from</span> <span class="string">&#x27;./stores/AppStore&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./components/App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个store实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> AppStore();</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;App store=&#123;store&#125; /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">serviceWorker.unregister();</span><br></pre></td></tr></table></figure><h2 id="Mobx在react使用中的优化"><a href="#Mobx在react使用中的优化" class="headerlink" title="Mobx在react使用中的优化"></a>Mobx在react使用中的优化</h2><h3 id="尽可能使用小组件"><a href="#尽可能使用小组件" class="headerlink" title="尽可能使用小组件"></a>尽可能使用小组件</h3><p><strong>before</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@observer</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PostList</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;user,todos,homeStore&#125; = <span class="built_in">this</span>.props</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;PostList关于系列&lt;/h1&gt;</span><br><span class="line">            &lt;span&gt;&#123;homeStore.user&#125;&lt;/span&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &#123;todos.map(<span class="function"><span class="params">todo</span>=&gt;</span></span><br><span class="line">                 (<span class="xml"><span class="tag">&lt;<span class="name">TodoView</span> <span class="attr">todo</span>=<span class="string">&#123;todo&#125;</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> /&gt;</span></span>)</span><br><span class="line">              )&#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;button onClick=&#123;homeStore.setUser&#125;&gt;更新user&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">      );</span><br></pre></td></tr></table></figure></p><blockquote><p>减少新旧组件的diff对比过程也是消耗性能<br><strong>after</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@observer</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">PostList</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;user,todos,homeStore&#125; = <span class="built_in">this</span>.props</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;PostList关于系列&lt;/h1&gt;</span><br><span class="line">            &lt;span&gt;&#123;homeStore.user&#125;&lt;/span&gt;</span><br><span class="line">            &lt;TodoView todos=&#123;todos&#125;/&gt;</span><br><span class="line">            &lt;button onClick=&#123;homeStore.setUser&#125;&gt;更新user&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">      );</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="尽可能晚的引用对象属性"><a href="#尽可能晚的引用对象属性" class="headerlink" title="尽可能晚的引用对象属性"></a>尽可能晚的引用对象属性</h3><p><strong>before</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@observer </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">const</span> &#123;p&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">B</span> <span class="attr">name</span>=<span class="string">&#123;p.name&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>组件B渲染的条件必须是组件A重新渲染，然后会让B也渲染.如果p是个可观察的对象，只需重新渲染B组件，不需要渲染A组件<br><strong>after</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@observer </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;p&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;p.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">const</span> &#123;p&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">B</span> <span class="attr">p</span>=<span class="string">&#123;p&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="提前绑定函数"><a href="#提前绑定函数" class="headerlink" title="提前绑定函数"></a>提前绑定函数</h3><p><strong>before</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@observer </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;p&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;alert(</span>&#x27;<span class="attr">hi</span>&#x27;)&#125;&gt;</span>&#123;p.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>B中的render每次调用，onclick会生成一个新的函数，导致C的render方法被重新调用，无论其他属性发生变化<br><strong>after</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@observer </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  handleClick=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;p&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">C</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;p.name&#125;<span class="tag">&lt;/<span class="name">C</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『由浅入深 Webpack 系列』性能优化</title>
      <link href="2019/06/08/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>2019/06/08/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="跟上速度的迭代"><a href="#跟上速度的迭代" class="headerlink" title="跟上速度的迭代"></a>跟上速度的迭代</h2><p>当 webpack 升级优化，相关 node yarn npm 包应该也需要升级已获得更好的优化性能</p><a id="more"></a><h2 id="减少-loader"><a href="#减少-loader" class="headerlink" title="减少 loader"></a>减少 loader</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [&#123;</span><br><span class="line">test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line"><span class="comment">//include: path.reslove(__dirname,&#x27;../src&#x27;), //指定编译的文件路径</span></span><br><span class="line">loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exclude</code>：排除文件夹内文件使用<code>babel-load</code>，避免再次编译打包，加快打包速度<br>或者可以用<code>include</code>参数</p><p>上面<code>jsx?</code>表示的是如果 js 文件可以走<code>babel-load</code>，如果是 jsx 文件也可以走<code>babel-load</code>文件</p><p>css 文件压缩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">minimizer: [<span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>插件的选择尽量使用<a class="link"   href="https://www.webpackjs.com/plugins/" >官方<i class="fas fa-external-link-alt"></i></a>认可的插件</strong></p><h2 id="reslove-合理的配置"><a href="#reslove-合理的配置" class="headerlink" title="reslove 合理的配置"></a>reslove 合理的配置</h2><h3 id="文件后缀的简写配置"><a href="#文件后缀的简写配置" class="headerlink" title="文件后缀的简写配置"></a>文件后缀的简写配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">&quot;./src/app.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&quot;./src/style.css&quot;</span>;</span><br></pre></td></tr></table></figure><p>如果不写后缀会报错，如何用 webpack 配置呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    ...</span><br><span class="line">    resolve:&#123;</span><br><span class="line">        extensions:[<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.jsx&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样 webpack 就会去找 js 文件是否存在，不存在？ 则去找 jsx 文件是否存在,但是 extensions 不建议存很多后缀名,影响性能，<br>建议资源类文件还是代后缀。</p><h3 id="简写路径名一"><a href="#简写路径名一" class="headerlink" title="简写路径名一"></a>简写路径名一</h3><p>如果我们每次这样写路径是不是很繁琐？</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> list <span class="keyword">from</span> <span class="string">&#x27;../src/common/listwarpper/list/item.jsx&#x27;</span></span><br></pre></td></tr></table></figure><p>webpack 如何优化呢？增加<code>mainFiles</code>参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    ...</span><br><span class="line">    resolve:&#123;</span><br><span class="line">        extensions:[<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.jsx&#x27;</span>],</span><br><span class="line">        mainFiles:[<span class="string">&#x27;common&#x27;</span>,<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>mainFiles</code>表示 webpack 去根据数组长度去查找对应文件夹是否存在，所以我们存放的文件夹数组长度不可以太长，影响性能</p><h3 id="简写路径名二"><a href="#简写路径名二" class="headerlink" title="简写路径名二"></a>简写路径名二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    ...</span><br><span class="line">    resolve:&#123;</span><br><span class="line">        extensions:[<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.jsx&#x27;</span>],</span><br><span class="line">        alias:&#123;  <span class="comment">//别名的意思</span></span><br><span class="line">            listwarpper:path.resolve(__dirname,<span class="string">&#x27;../src/common/listwarpper&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 webpack 看到 listwarpper 的路径名就表示去查找<code>../src/common/listwarpper</code>;</p><h2 id="使用-DllPlugin-提高打包速度"><a href="#使用-DllPlugin-提高打包速度" class="headerlink" title="使用 DllPlugin 提高打包速度"></a>使用 DllPlugin 提高打包速度</h2><p>我们知道项目会引入越来越的第三方模块，打包速度会越来越慢，每一次重新打包重新分析 loader，plugin。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br></pre></td></tr></table></figure><p>打包时间会比较多<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190823131309.png"                      alt=""                ></p><p>可不可以单独打包生成一个文件，只在第一次打包的时候分析这些代码，后面打包就不需要分析了？</p><p>我们得先创建一个<code>[name].dll.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendors: [<span class="string">&quot;lodash&quot;</span>], <span class="comment">//需要使用得第三方模块分别写在这里</span></span><br><span class="line">    react: [<span class="string">&quot;react&quot;</span>, <span class="string">&quot;react-dom&quot;</span>],</span><br><span class="line">    jquery: [<span class="string">&quot;jquery&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&quot;[name].dll.js&quot;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&quot;../dll&quot;</span>),</span><br><span class="line">    library: <span class="string">&quot;[name]&quot;</span> <span class="comment">//全局变量 暴露出去</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 webpack.json 继续配置</p><p><code>AddAssetHtmlWebpackPlugin</code>是一个非常好用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;add-asset-html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> files = fs.readdirSync(path.resolve(__dirname, <span class="string">&quot;../dll&quot;</span>));</span><br><span class="line">files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/.*\.dll.js/</span>.test(file)) &#123;</span><br><span class="line">    plugins.push(</span><br><span class="line">      <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">        filepath: path.resolve(__dirname, <span class="string">&quot;../dll&quot;</span>, file)</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/.*\.manifest.json/</span>.test(file)) &#123;</span><br><span class="line">    plugins.push(</span><br><span class="line">      <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">        manifest: path.resolve(__dirname, <span class="string">&quot;../dll&quot;</span>, file)</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后配置 plugins,让第三方模块去做一个映射,把库文件去做分析中得分析模块映射关系结果放在 json 文件中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  ...new webpack.DllPlugin(&#123;</span><br><span class="line">    name: <span class="string">&quot;[name]&quot;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&quot;../dll/[name].manifest.json&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后我们<code>yarn run build-dll</code>一下会发生生成很多文件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190823112232.png"                      alt=""                ></p><h2 id="控制包得大小剔除无用插件"><a href="#控制包得大小剔除无用插件" class="headerlink" title="控制包得大小剔除无用插件"></a>控制包得大小剔除无用插件</h2><p>我们项目中经常会引用一些第三方包，可是我们版本迭代又不去用了，然后忘记删除。继续打包包得体积会把多余得包打包进去，是多余得。</p><h2 id="合理使用-sourceMap"><a href="#合理使用-sourceMap" class="headerlink" title="合理使用 sourceMap"></a>合理使用 sourceMap</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prodConfig = &#123;</span><br><span class="line">  mode: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  devtool: <span class="string">&quot;cheap-module-source-map&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『由浅入深 Webpack 系列』用 HMR 提高效率</title>
      <link href="2019/06/07/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8F%E7%94%A8%20HMR%20%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/"/>
      <url>2019/06/07/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8F%E7%94%A8%20HMR%20%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>HMR 全称是 Hot Module Replacement，即模块热替换。不用整个页面刷新，而是局部替换掉部分模块代码并且使其生效，可以看到代码变更后的效果。所以，HMR 既避免了频繁手动刷新页面，也减少了页面刷新时的等待，可以极大地提高前端页面开发效率。</p></blockquote><a id="more"></a><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>添加其他 HotModuleReplacementPlugin 插件配合执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    hot: <span class="literal">true</span> <span class="comment">// dev server 的配置要启动 hot，或者在命令行中带参数开启</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(), <span class="comment">// 用于启动 HMR 时可以显示模块的相对路径</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">// Hot Module Replacement 的插件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>webpack 如何保证 HMR 接口中的引用是最新的模块代码？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&quot;./bar&quot;</span>;</span><br><span class="line"></span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">&quot;./bar&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;Accepting the updated bar module!&#x27;)</span></span><br><span class="line">    hello();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 bar 文件发生变化，就会执行后面得回调函数重新执行 hello</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『由浅入深 Webpack 系列』JS 或 CSS 文件代码分割</title>
      <link href="2019/06/06/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8FCSS%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2/"/>
      <url>2019/06/06/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8FCSS%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要分离"><a href="#为什么要分离" class="headerlink" title="为什么要分离"></a>为什么要分离</h2><p>先简单解释一下要把 CSS 文件分离出来，而不是直接一起打包在 JS 中。最主要的原因是我们希望更好地利用缓存。</p><a id="more"></a><p>假设我们原本页面的静态资源都打包成一个 JS 文件，加载页面时虽然只需要加载一个 JS 文件，但是我们的代码一旦改变了，用户访问新的页面时就需要重新加载一个新的 JS 文件。有些情况下，我们只是单独修改了样式，这样也要重新加载整个应用的 JS 文件，相当不划算。</p><p>还有一种情况是我们有多个页面，它们都可以共用一部分样式（这是很常见的，CSS Reset、基础组件样式等基本都是跨页面通用），如果每个页面都单独打包一个 JS 文件，那么每次访问页面都会重复加载原本可以共享的那些 CSS 代码。如果分离开来，第二个页面就有了 CSS 文件的缓存，访问速度自然会加快。虽然对第一个页面来说多了一个请求，但是对随后的页面来说，缓存带来的速度提升相对更加可观。</p><h2 id="js-代码分割"><a href="#js-代码分割" class="headerlink" title="js 代码分割"></a>js 代码分割</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">&quot;all&quot;</span> <span class="comment">// 所有的 chunks 代码公共的部分分离出来成为一个单独的文件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>拆分文件得<code>目的</code>是为了更好地利用缓存,分离公共类库很大程度上是为了让多页面利用缓存，从而减少下载的代码量，同时，也有代码变更时可以利用缓存减少下载代码量的好处</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>可以使用<code>MiniCssExtractPlugin</code>,让 css 代码分割</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">&quot;[name].css&quot;</span>,</span><br><span class="line">    chunkFilename: <span class="string">&quot;[name].chunk.css&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这个插件目前还有一个问题不支持 HMR，就是热更新，所以当我们改变本地 css 无法立即查看效果，所以建议只在线上环境用这个插件</p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><p>我们在 webpack.pro.js 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules:[&#123;</span><br><span class="line">test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">use: [</span><br><span class="line">MiniCssExtractPlugin.loader,</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">importLoaders: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">use: [</span><br><span class="line">MiniCssExtractPlugin.loader,</span><br><span class="line"><span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">]</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">filename: <span class="string">&#x27;[name].css&#x27;</span>,</span><br><span class="line">chunkFilename: <span class="string">&#x27;[name].chunk.css&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>filename</code>表示如果页面需要直接应用的文件则直接生成 <code>xxx.css</code></p><p>如果是某个组件的 css 样式，不是主文件 css 那么它就会编译成<code>xxx.chunk.css</code></p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『由浅入深Webpack系列』webpackDevServer提升效率</title>
      <link href="2019/06/05/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8FwebpackDevServer%E6%8F%90%E5%8D%87%E6%95%88%E7%8E%87/"/>
      <url>2019/06/05/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8FwebpackDevServer%E6%8F%90%E5%8D%87%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>默认情况下开启了服务器后，只要入口文件有更新那整个页面就会<code>重新刷新</code>。如果页面里引入的模块非常多的情况下让整个页面刷新就会变得有些慢，这个问题可以交给热更新去解决。热更新的意思就是只更新有改动的模块（像ajax一样局部刷新），如果我们需要自动打开浏览器，并实时刷新代码我们需要<code>devserver</code><br><a id="more"></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">contentBase: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">open: <span class="literal">true</span>,</span><br><span class="line">port: <span class="number">8080</span>,  </span><br><span class="line">hot: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>contentBase</td><td>静态文件路径</td></tr><tr><td>open</td><td>是否自动打开浏览器</td></tr><tr><td>端口号</td><td>自定义，默认8080</td></tr><tr><td>hot</td><td>热更新</td></tr></tbody></table><h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">contentBase: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">open: <span class="literal">true</span>,</span><br><span class="line">port: <span class="number">8080</span>,  </span><br><span class="line">hot: <span class="literal">true</span>,</span><br><span class="line">proxy:&#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>:<span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>contentBase</td><td>静态文件容器</td></tr><tr><td>open</td><td>是否打开浏览器</td></tr><tr><td>port</td><td>端口</td></tr><tr><td>hot</td><td>是否要打开热更新</td></tr><tr><td>proxy</td><td>请求代理</td></tr></tbody></table><h2 id="重写api"><a href="#重写api" class="headerlink" title="重写api"></a>重写api</h2><p>如果服务端，处理的api不是以/api开头的方式进行处理，需要在webpack的proxy重写请求api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  proxy:&#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">      target:<span class="string">&#x27;http://localhost:9000&#x27;</span>,</span><br><span class="line">      pathRewrite:&#123;<span class="string">&#x27;/api&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>为请求域</td></tr><tr><td>pathRewrite</td><td>将开发模块中的以/api请求的接口，去掉/api进行代理请求</td></tr></tbody></table><h2 id="引入Mock数据"><a href="#引入Mock数据" class="headerlink" title="引入Mock数据"></a>引入Mock数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mock.js</span></span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">&#x27;./mock.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    host: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;X-foo&#x27;</span>: <span class="string">&#x27;112233&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    inline: <span class="literal">true</span>,</span><br><span class="line">    overlay: <span class="literal">true</span>,</span><br><span class="line">    stats: <span class="string">&#x27;errors-only&#x27;</span>,</span><br><span class="line">    before: <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(app);</span><br><span class="line">      <span class="comment">//该函数会判断当前的环境是否是mock命令</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;mock&#x27;</span>) &#123;</span><br><span class="line">        Mock(app);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">   plugins: [</span><br><span class="line">    <span class="comment">// 设置环境变量信息</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">&#x27;process.env&#x27;</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引入mock-js"><a href="#引入mock-js" class="headerlink" title="引入mock.js"></a>引入mock.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getPower = <span class="built_in">require</span>(<span class="string">&#x27;./json/parent_getPower.json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> reConfig = <span class="built_in">require</span>(<span class="string">&#x27;./json/parent_reConfig.json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> reConList = <span class="built_in">require</span>(<span class="string">&#x27;./json/parent_reconlist.json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> reGroup = <span class="built_in">require</span>(<span class="string">&#x27;./json/parent_reGroup.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mock</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.get(<span class="string">&#x27;/xxxx/yyy&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getPower111&#x27;</span>);</span><br><span class="line">    res.json(getPower);</span><br><span class="line">  &#125;);</span><br><span class="line">  app.post(<span class="string">&#x27;/reconfig&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;reConfig111&#x27;</span>);</span><br><span class="line">    res.json(reConfig);</span><br><span class="line">  &#125;);</span><br><span class="line">  app.post(<span class="string">&#x27;/conlist&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;reConList111&#x27;</span>);</span><br><span class="line">    res.json(reConList);</span><br><span class="line">  &#125;);</span><br><span class="line">  app.post(<span class="string">&#x27;/regroup&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;reGroup111&#x27;</span>);</span><br><span class="line">    res.json(reGroup);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Mock;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『由浅入深 Webpack 系列』SourceMap 的配置</title>
      <link href="2019/06/04/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8FSourceMap%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>2019/06/04/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8FSourceMap%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-SourceMap"><a href="#什么是-SourceMap" class="headerlink" title="什么是 SourceMap"></a>什么是 SourceMap</h1><p>当我们发现打包后程序出现错误时候会一般用 chromse</p><a id="more"></a><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190821151023.png"                      alt=""                ></p><p>当点击之后代码中发现是 96 行，这个 main.js 是打包的</p><p>我希望是我打包前那个文件的那一行错误了。我们如何让 webpack 做到呢？</p><p>我们要用 sourceMap 它是一个映射关系，它知道 dist 目录下 main.js96 行就是 src 中 index.js 文件中第一行</p><h2 id="加入配置"><a href="#加入配置" class="headerlink" title="加入配置"></a>加入配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prodConfig = &#123;</span><br><span class="line">mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">devtool: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果我们只想知道行 不需要告诉我第几列</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prodConfig = &#123;</span><br><span class="line">mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">devtool: <span class="string">&#x27;cheap-module-source-map&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>cheap-module-source-map</td><td>只显示行数（提高性能）</td></tr></tbody></table><h2 id="笔者推荐"><a href="#笔者推荐" class="headerlink" title="笔者推荐"></a>笔者推荐</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>dev 模式</td><td>cheap-module-eval-source-map</td></tr><tr><td>production</td><td>devtool 不需要配置默认即刻或者(cheap-module-source-map)</td></tr></tbody></table><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>解决了如果打包出错，快速定位错误提高效率</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『由浅入深Webpack系列』plugins实践</title>
      <link href="2019/06/03/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8Fplugins%E5%AE%9E%E8%B7%B5/"/>
      <url>2019/06/03/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8Fplugins%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们可以把plugin 用于处理更多其他的一些构建任务让打包更加便捷，也可以叫做webpack的插件，例如：要使用压缩 JS 代码</p></blockquote><a id="more"></a><p>之前我们没有配置前我们要手动输入html页面到dist目录然后用chrome运行</p><p>我们考虑如何让html自动生成到dist目录下呢？</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add html-webpack-plugin clean-webpack-plugin</span><br></pre></td></tr></table></figure><blockquote><p>它的作用打包结束后自动生成html文件，并把js自动引入到html文件；</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">&quot;./src/index.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&quot;../dist&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [...]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&quot;src/index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>header 1</th><th>header 2</th></tr></thead><tbody><tr><td>template</td><td>参考src目录下html模板生成</td></tr></tbody></table><p>如果我们要每次build前清除dist目录那我们还可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&quot;src/index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">&quot;dist&quot;</span>], &#123;</span><br><span class="line">      root: path.resolve(__dirname, <span class="string">&quot;../&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『由浅入深Webpack系列』loader实践</title>
      <link href="2019/06/02/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8Floader%E5%AE%9E%E8%B7%B5/"/>
      <url>2019/06/02/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8Floader%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。<br><a id="more"></a></p></blockquote><p>如果我们之前的项目中加入了jpg文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">&#x27;./avatar.jpg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = avatar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">root.append(img);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>然后使用yarn run build会发生什么呢？</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190821141553.png"                      alt=""                ></p><p>编译失败告诉我们不能识别jpg图片；</p><p>所以我们就需要使用上<code>loader</code>了，我们可以把 loader 理解为是一个解析器，负责把某种文件格式的内容(jsx vue css es6…)转换成 webpack 可以支持打包的模块。</p><p>当我们需要使用不同的 loader 来解析处理不同类型的文件时，我们可以在 <code>module.rules</code> 字段下来配置相关的规则，例如使用 Babel 来处理 .js 文件</p><h2 id="首先安装"><a href="#首先安装" class="headerlink" title="首先安装"></a>首先安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader style-loader</span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.jsx?/</span>, <span class="comment">// 匹配文件路径的正则表达式，通常我们都是匹配文件类型后缀</span></span><br><span class="line">      include: [</span><br><span class="line">        path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>) <span class="comment">// 指定哪些路径下的文件需要经过 loader 处理</span></span><br><span class="line">      ],</span><br><span class="line">      use: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="comment">// 指定使用的 loader</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    test: <span class="regexp">/\.jpg$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">    loader: <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">    &#125; </span><br><span class="line">     &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>rules</td><td>规则（数组）</td></tr><tr><td>test</td><td>表示文件后缀（正则）</td></tr><tr><td>include</td><td>包含（数组）指定哪些路径下才处理</td></tr><tr><td>use</td><td>指定用什么loader解析器（可以数组）</td></tr></tbody></table><p>现在打包就没有问题了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190821135201.png"                      alt=""                ></p><h2 id="loader进阶"><a href="#loader进阶" class="headerlink" title="loader进阶"></a>loader进阶</h2><h4 id="jpg-less处理"><a href="#jpg-less处理" class="headerlink" title="jpg less处理"></a>jpg less处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [&#123; </span><br><span class="line">test: <span class="regexp">/\.js$/</span>, </span><br><span class="line">exclude: <span class="regexp">/node_modules/</span>, <span class="comment">//排除某个文件</span></span><br><span class="line">loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">use: &#123;</span><br><span class="line">loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">name: <span class="string">&#x27;[name]_[hash].[ext]&#x27;</span>,</span><br><span class="line">outputPath: <span class="string">&#x27;images/&#x27;</span>,</span><br><span class="line">limit: <span class="number">10240</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;, &#123;</span><br><span class="line">test: <span class="regexp">/\.(eot|ttf|svg)$/</span>,</span><br><span class="line">use: &#123;</span><br><span class="line">loader: <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;, &#123;</span><br><span class="line">test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">use: [</span><br><span class="line"><span class="string">&#x27;style-loader&#x27;</span>, </span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">importLoaders: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">use: [</span><br><span class="line"><span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">]</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>exclude</td><td>排除某个文件</td></tr><tr><td>importLoaders</td><td>如果多层嵌套引入less或sass文件</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果index.js中</span></span><br><span class="line"><span class="keyword">import</span> less <span class="keyword">from</span> <span class="string">&#x27;index.less&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.less</span></span><br><span class="line"><span class="keyword">import</span> aa <span class="keyword">from</span> <span class="string">&#x27;a.less&#x27;</span></span><br><span class="line">其他样式</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在import引入的less文件，在引入之前也重新走postcss和less-loader</p><h4 id="样式冲突"><a href="#样式冲突" class="headerlink" title="样式冲突"></a>样式冲突</h4><p>当甲和乙都开发同一个项目，难免会碰到类似组件起同一个名字的情况，比如列表组件：listWarpper,这样打包后会有样式冲突的问题。那么webpack如何解决呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">      <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">importLoaders: <span class="number">2</span>,</span><br><span class="line">modules:<span class="literal">true</span>  <span class="comment">//开启css的模块化打包</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;sass-loader&quot;</span>,</span><br><span class="line">      <span class="string">&quot;postcss-loader&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190821144346.png"                      alt=""                ></p><p>当avatar用style.avatar来代替后，冲突就不会发生了</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『由浅入深Webpack系列』概念和基础使用</title>
      <link href="2019/06/01/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8F%E6%A6%82%E5%BF%B5%E5%92%8C%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>2019/06/01/%E3%80%8E%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1Webpack%E7%B3%BB%E5%88%97%E3%80%8F%E6%A6%82%E5%BF%B5%E5%92%8C%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前的对于Webpack知识都很零散希望做一个系列梳理巩固下知识框架，废话不多说，开始吧 </p></blockquote><a id="more"></a><p>webpack是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190821133645.png"                      alt=""                ></p><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -g </span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line">yarn <span class="built_in">global</span> add webpack webpack-cli</span><br><span class="line"></span><br><span class="line"># 然后就可以全局执行命令了</span><br><span class="line">webpack --help</span><br></pre></td></tr></table></figure><p>确保你的项目中有 package.json 文件，如果没有可以使用 <code>yarn init -y</code> 来创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;learncodewebpack&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^4.34.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.3.4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们写个最简单的webpack.config.js配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:<span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>entry</td><td>入口文件路径</td></tr><tr><td>output</td><td>Object(打包后的文件名，打包后的路径)</td></tr></tbody></table><p>之后执行 npm run build 或者 yarn build 命令，你就会发现新增了一个 dist 目录，里边存放的是 webpack 构建好的bundle.js 文件。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190821135955.png"                      alt=""                ></p><h4 id="我们还可以继续增加参数"><a href="#我们还可以继续增加参数" class="headerlink" title="我们还可以继续增加参数"></a>我们还可以继续增加参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode:<span class="string">&quot;development&quot;</span>,  <span class="comment">//开发者模式 不会压缩js 默认是production</span></span><br><span class="line">  entry: <span class="string">&#x27;./src/index.js&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加多个入口文件"><a href="#增加多个入口文件" class="headerlink" title="增加多个入口文件"></a>增加多个入口文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    foo: <span class="string">&#x27;./src/page-foo.js&#x27;</span>,</span><br><span class="line">    bar: <span class="string">&#x27;./src/page-bar.js&#x27;</span>, </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用数组来对多个文件进行打包"><a href="#使用数组来对多个文件进行打包" class="headerlink" title="使用数组来对多个文件进行打包"></a>使用数组来对多个文件进行打包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以理解为多个文件作为一个入口，webpack 会解析两个文件的依赖后进行打包</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: [</span><br><span class="line">      <span class="string">&#x27;./src/foo.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;./src/bar.js&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Entry与Output的进阶"><a href="#Entry与Output的进阶" class="headerlink" title="Entry与Output的进阶"></a>Entry与Output的进阶</h2><ol><li>我们有需求打包出来的文件需要自定义</li><li>我们有需求打包出来多个文件main2.js,main2.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">    main:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    sub:<span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output: &#123;</span><br><span class="line">        publicPath：<span class="string">&quot;https://cdn.xxx.com&quot;</span></span><br><span class="line">filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">chunkFilename: <span class="string">&#x27;[name].chunk.js&#x27;</span>,</span><br><span class="line">path: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190821152937.png"                      alt=""                ></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>publicPath</td><td>这个是cdn挂载的域名可以负载均衡</td></tr><tr><td>filename</td><td>[name]所对应的就是entry[key]值</td></tr><tr><td>chunkFilename</td><td>同上</td></tr></tbody></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190821153232.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在ReactHooks中请求数据</title>
      <link href="2019/05/29/ReactHooks%E4%B8%AD%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
      <url>2019/05/29/ReactHooks%E4%B8%AD%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>一起学习ReactHooks<br><a id="more"></a></p><h2 id="先说下错误使用"><a href="#先说下错误使用" class="headerlink" title="先说下错误使用"></a>先说下错误使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//初始化data 和setData方法</span></span><br><span class="line">  <span class="keyword">const</span> [data,setData] = useState(&#123;<span class="attr">hits</span>:[]&#125;);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">axiosData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> response  = <span class="keyword">await</span>  axios(<span class="string">&#x27;http://hn.algolia.com/api/v1/search?query=redux&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;执行次数&#x27;</span>+response.data)</span><br><span class="line">       <span class="comment">//改变数据</span></span><br><span class="line">      setData(response.data)  <span class="comment">// data：&#123;hits:[xxxx]&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">     axiosData()</span><br><span class="line">    </span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;data.hits.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">        &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class="line">          &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但这样会有问题，请求次数循环<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529135626.png"                      alt=""                ></p><blockquote><p>因为effect hook不仅在组件挂载是执行，在组件更新过程中也会执行。因为我们在每一次的数据获取后都会重新设置状态，这时候组件update然后effect hook就会重新运行一遍，这就造成了数据一次又一次的获取</p></blockquote><p>我们只想在组件挂载阶段时获取数据。这就是你要给effect hook的第二个参数传入一个空数组的原因，这样做可以避免组件更新阶段执行 effect hook ，但是依然会在挂载阶段执行它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//初始化data 和setData方法</span></span><br><span class="line">  <span class="keyword">const</span> [data,setData] = useState(&#123;<span class="attr">hits</span>:[]&#125;);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">axiosData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> response  = <span class="keyword">await</span>  axios(<span class="string">&#x27;http://hn.algolia.com/api/v1/search?query=redux&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;执行次数&#x27;</span>+response.data)</span><br><span class="line">      <span class="comment">//改变数据</span></span><br><span class="line">      setData(response.data)  <span class="comment">// data：&#123;hits:[xxxx]&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">     axiosData()</span><br><span class="line">  </span><br><span class="line">  &#125;,[])</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529135711.png"                      alt=""                ></p><p>但还是存在一个问题：第二个参数用来定义hooks所依赖的全部变量（存放在数组中），如果一个变量改变了，effect hook就会<code>被执行一次</code>，如果是一个空数组的话，hooks将<code>不会</code>在组件更新的时候执行，因为它没有监听到任何的变量。</p><h2 id="如何自动触发一个-hook？"><a href="#如何自动触发一个-hook？" class="headerlink" title="如何自动触发一个 hook？"></a>如何自动触发一个 hook？</h2><p>我们在组件挂载后获取了一次数据。但是如何使用输入字段告诉API我们感兴趣的主题？“Redux”做为默认查询。但是如果想要查询关于“React”的呢？让我们实现一个input元素，可以获得“Redux”之外的话题。因此，就要为input元素引入一个新的state。</p><p>二步操作：<br>1.输入框输入的值动态改变传入axios请求中<br>2.当你在input中输入一些内容时，在挂载后就不会再获取任何数据了，因为我们提供了[]作为第二个参数，但是现在的effect应该依赖query，每当query改变的时候，就应该重新获取数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//初始化data 和setData方法</span></span><br><span class="line">  <span class="keyword">const</span> [data,setData] = useState(&#123;<span class="attr">hits</span>:[]&#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">axiosData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(query)</span><br><span class="line">      <span class="keyword">const</span> response  = <span class="keyword">await</span>  axios(<span class="string">`http://hn.algolia.com/api/v1/search?query=<span class="subst">$&#123;query&#125;</span>`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;执行次数&#x27;</span>+response.data)</span><br><span class="line">      setData(response.data)  <span class="comment">// data：&#123;hits:[xxxx]&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">     axiosData()</span><br><span class="line"></span><br><span class="line">     <span class="comment">//改变数据</span></span><br><span class="line">  &#125;,[query])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//html</span></span><br><span class="line">   &lt;input</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">        value=&#123;query&#125;</span><br><span class="line">        onChange=&#123;<span class="function"><span class="params">event</span> =&gt;</span> setQuery(event.target.value)&#125;</span><br><span class="line">   /&gt;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529141249.png"                      alt=""                ></p><h3 id="如何手动触发请求？"><a href="#如何手动触发请求？" class="headerlink" title="如何手动触发请求？"></a>如何手动触发请求？</h3><p>现在input的值改变就会重新获取数据。但是又出现另外一个问题：每次输入一个新字符，就会触发 effect 进行一次新的请求。那么我们如何提供一个按钮来手动触发数据请求呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//初始化data 和setData方法</span></span><br><span class="line">  <span class="keyword">const</span> [data,setData] = useState(&#123;<span class="attr">hits</span>:[]&#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [search, setSearch] = useState(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">axiosData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> response  = <span class="keyword">await</span>  axios(<span class="string">`http://hn.algolia.com/api/v1/search?query=<span class="subst">$&#123;query&#125;</span>`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;执行次数&#x27;</span>+response.data)</span><br><span class="line">      setData(response.data)  <span class="comment">// data：&#123;hits:[xxxx]&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">     axiosData()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;search&#x27;</span>,search)</span><br><span class="line">     <span class="comment">//改变数据</span></span><br><span class="line">  &#125;,[search])</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//html</span></span><br><span class="line">   &lt;button type=<span class="string">&quot;button&quot;</span> onClick=&#123;<span class="function">() =&gt;</span> setSearch(query)&#125;&gt;</span><br><span class="line">        Search</span><br><span class="line">   &lt;/button&gt;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529141842.png"                      alt=""                ></p><h3 id="React-Hooks中的loading"><a href="#React-Hooks中的loading" class="headerlink" title="React Hooks中的loading"></a>React Hooks中的loading</h3><p>一旦调用了effect获取了数据，（在组件挂载阶段或URL状态更改时发生），则加载状态设置为true。请求完成后，加载状态再次设置为false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Fragment, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [url, setUrl] = useState(</span><br><span class="line">    <span class="string">&#x27;http://hn.algolia.com/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="comment">//loading显示</span></span><br><span class="line">      setIsLoading(<span class="literal">true</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> axios(url);</span><br><span class="line"> </span><br><span class="line">      setData(result.data);</span><br><span class="line">      <span class="comment">//loadding隐藏</span></span><br><span class="line">      setIsLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, [url]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">        value=&#123;query&#125;</span><br><span class="line">        onChange=&#123;<span class="function"><span class="params">event</span> =&gt;</span> setQuery(event.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        type=<span class="string">&quot;button&quot;</span></span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span></span><br><span class="line">          setUrl(<span class="string">`http://hn.algolia.com/api/v1/search?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &gt;</span><br><span class="line">        Search</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &#123;isLoading ? (</span><br><span class="line">        &lt;div&gt;Loading ...&lt;/div&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;data.hits.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">            &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class="line">              &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></p><h3 id="React-Hooks中的错误处理"><a href="#React-Hooks中的错误处理" class="headerlink" title="React Hooks中的错误处理"></a>React Hooks中的错误处理</h3><p>使用async/await时，通常使用try/catch块进行错误处理。你可以在effect内做到<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [url, setUrl] = useState(</span><br><span class="line">    <span class="string">&#x27;http://hn.algolia.com/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [isError, setIsError] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      setIsError(<span class="literal">false</span>);</span><br><span class="line">      setIsLoading(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> axios(url);</span><br><span class="line"></span><br><span class="line">        setData(result.data);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        setIsError(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      setIsLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    fetchData();</span><br><span class="line">  &#125;, [url]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">        value=&#123;query&#125;</span><br><span class="line">        onChange=&#123;<span class="function"><span class="params">event</span> =&gt;</span> setQuery(event.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        type=<span class="string">&quot;button&quot;</span></span><br><span class="line">        onClick=&#123;<span class="function">() =&gt;</span></span><br><span class="line">          setUrl(<span class="string">`http://hn.algolia.com/api/v2/search?query=<span class="subst">$&#123;query&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &gt;</span><br><span class="line">        Search</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &#123;isError &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Something went wrong ...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line"></span><br><span class="line">      &#123;isLoading ? (</span><br><span class="line">        &lt;div&gt;Loading ...&lt;/div&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;data.hits.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">            &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class="line">              &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529143540.png"                      alt=""                ></p><h3 id="自定义-hook-获取数据"><a href="#自定义-hook-获取数据" class="headerlink" title="自定义 hook 获取数据"></a>自定义 hook 获取数据</h3><p>我们可以定义一个自定义的hook，提取出所有与数据请求相关的东西，除了输入框的 <code>query</code> <code>state</code>，以及 <code>Loading 状态</code>、<code>错误处理</code>。还要确保返回组件中需要用到的变量。</p><p>理想代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; data, isLoading, isError, doFetch &#125; = useHackerNewsApi();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>封装useHackerNewsApi</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userHackerNewsApi = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//初始化状态</span></span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useState(&#123; <span class="attr">hits</span>: [] &#125;);</span><br><span class="line">  <span class="keyword">const</span> [url, setUrl] = useState(</span><br><span class="line">    <span class="string">&#x27;http://hn.algolia.com/api/v1/search?query=redux&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> [isLoading, setIsLoading] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [isError, setIsError] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">      setIsError(<span class="literal">false</span>);</span><br><span class="line">      setIsLoading(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> axios(url);</span><br><span class="line"></span><br><span class="line">        setData(result.data);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        setIsError(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      setIsLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用请求</span></span><br><span class="line">    fetchData()</span><br><span class="line">  &#125;,[url])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> doFetch = <span class="function">(<span class="params">url</span>)=&gt;</span>&#123;</span><br><span class="line">     setUrl(url)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;data,isLoading,isError,doFetch&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于数据获取的-Reducer-Hook"><a href="#关于数据获取的-Reducer-Hook" class="headerlink" title="关于数据获取的 Reducer Hook"></a>关于数据获取的 Reducer Hook</h3><p>让我们用reduce把一些状态调用连接起来使用</p><blockquote><p>Reducer Hook 返回一个 state 对象和一个函数（用来改变 state 对象）。这个函数被称为分发函数（dispatch function），它分发一个 action，action 具有 type 和 payload 两个属性。所有的这些信息都在 reducer 函数中被接收，根据之前的状态提取一个新的状态</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">&#x27;redux&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [&#123; data, isLoading, isError &#125;, doFetch] = useDataApi(</span><br><span class="line">    <span class="string">`http://hn.algolia.com/api/v1/search?query=redux`</span>,</span><br><span class="line">    &#123; <span class="attr">hits</span>: [] &#125;,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;form</span><br><span class="line">        onSubmit=&#123;<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">          doFetch(</span><br><span class="line">            <span class="string">`http://hn.algolia.com/api/v1/search?query=<span class="subst">$&#123;query&#125;</span>`</span>,</span><br><span class="line">          );</span><br><span class="line"></span><br><span class="line">          event.preventDefault();</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">&quot;text&quot;</span></span><br><span class="line">          value=&#123;query&#125;</span><br><span class="line">          onChange=&#123;<span class="function"><span class="params">event</span> =&gt;</span> setQuery(event.target.value)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;Search&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">      &#123;isError &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Something went wrong ...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line"></span><br><span class="line">      &#123;isLoading ? (</span><br><span class="line">        &lt;div&gt;Loading ...&lt;/div&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;data.hits.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">            &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class="line">              &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h4 id="如何设计useDataApi"><a href="#如何设计useDataApi" class="headerlink" title="如何设计useDataApi"></a>如何设计useDataApi</h4><p>现在，在获取数据时，可以使用 dispatch 函数向 reducer 函数发送信息。使用 dispatch 函数发送的对象具有一个必填的 type 属性和一个可选的 payload 属性。type 属性告诉 reducer 函数需要转换的 state 是哪个，还可以从 payload 中提取新的 state。在这里只有三个状态转换：初始化数据过程，通知数据请求成功的结果，以及通知数据请求失败的结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useDataApi = <span class="function">(<span class="params">initialUrl,initialData</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">const</span> [url,setUrl] = useState(initialUrl);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> [state,dispatch] = useReducer(dataFetchReducer,&#123;</span><br><span class="line">         isLoading:<span class="literal">false</span>,</span><br><span class="line">         isError:<span class="literal">false</span>,</span><br><span class="line">         data:initialData,</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> fetchData = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">           dispatch(&#123;<span class="attr">type</span>:<span class="string">&quot;FETCH_INIT&quot;</span>&#125;)</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">             <span class="keyword">const</span> result = <span class="keyword">await</span>  axios(url);</span><br><span class="line">             dispatch(&#123;<span class="attr">type</span>:<span class="string">&quot;FETCH_SUCCESS&quot;</span>,<span class="attr">payload</span>:result.data&#125;)</span><br><span class="line">           &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">             dispatch(&#123;<span class="attr">type</span>:<span class="string">&quot;FETCH_FAILURE&quot;</span>,<span class="attr">payload</span>:e&#125;)</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       fetchData();</span><br><span class="line"></span><br><span class="line">     &#125;,[url])</span><br><span class="line">      <span class="comment">//只返回state中包含data isloading /  setUrl</span></span><br><span class="line">     <span class="keyword">return</span> [state, setUrl];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="reducer函数的实现"><a href="#reducer函数的实现" class="headerlink" title="reducer函数的实现"></a>reducer函数的实现</h4><p>它需要处理三个不同的状态转换，称为FETCH_INIT，FETCH_SUCCESS和FETCH_FAILURE。每个状态转换都需要返回一个新的状态对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dataFetchReducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;FETCH_INIT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">isLoading</span>: <span class="literal">true</span>, <span class="attr">isError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;FETCH_SUCCESS&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        isLoading: <span class="literal">false</span>,</span><br><span class="line">        isError: <span class="literal">false</span>,</span><br><span class="line">        data: action.payload,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;FETCH_FAILURE&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        isLoading: <span class="literal">false</span>,</span><br><span class="line">        isError: <span class="literal">true</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="在-Hook-中中断数据请求"><a href="#在-Hook-中中断数据请求" class="headerlink" title="在 Hook 中中断数据请求"></a>在 Hook 中中断数据请求</h3><p>下次再更新<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br></pre></td></tr></table></figure></p><p>参考<br><a class="link"   href="https://www.robinwieruch.de/react-hooks-fetch-data/" >Robin Wieruch<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码系列Fiber</title>
      <link href="2019/05/03/React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97Fiber/"/>
      <url>2019/05/03/React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97Fiber/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是fiber"><a href="#什么是fiber" class="headerlink" title="什么是fiber"></a>什么是fiber</h3><p>所谓fiber，它其实是一个react中的架构，一个 fiber 对象代表了一个work单位，<br>每一个ReactElement都会对应一个Fiber对象<br>记录各个节点的状态 （props  state）通过fiber 让节点获取属性值<br>串联整个应用的树结构<br><a id="more"></a></p><blockquote><p>最近更新2019年6月14日</p></blockquote><h3 id="与15的变化"><a href="#与15的变化" class="headerlink" title="与15的变化"></a>与15的变化</h3><p>从15到16，源码结构发生了很大变化：<br>再也看不到mountComponent/updateComponent()了，被拆分重组成了（beginWork/completeWork/commitWork()）<br>ReactDOMComponent也被去掉了，在Fiber体系下DOM节点抽象用<code>ReactDOMFiberComponent</code>表示，组件用<code>ReactFiberClassComponent</code>表示，之前是<code>ReactCompositeComponent</code></p><p>Fiber体系的核心机制是负责任务调度的<code>ReactFiberScheduler</code>，相当于之前的ReactReconciler</p><p>vDOM tree变成fiber tree了，以前是自上而下的简单树结构，现在是基于单链表的树结构，维护的节点关系更多一些</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>优化渲染任务，让一个大组件细化，从同步变成异步，让渲染任务有了优先级。生命周期函数调用不再是同步的，让用户能感知的性能提高了。<br>fiber可以把很大的工作分成一个个小块（<code>trunk</code>），trunk之间是异步的，每个trunk之间可以执行别的操作。<br>以render函数为界，分为两个阶段，在render之前改变 workInProgress tree，执行生命周期函数比如<code>componentWillMount</code>，<code>componentWillReceiveProp</code>。在render函数之后，执行<code>componentDidMount</code>， <code>componentDidUpdate</code>。在第一个阶段，可能被中断。</p><h3 id="fiber-tree来张图感受一下"><a href="#fiber-tree来张图感受一下" class="headerlink" title="fiber tree来张图感受一下"></a>fiber tree来张图感受一下</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190614102044.png"                      alt=""                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190509010801.png"                      alt=""                ></p><p>参考：<br><a class="link"   href="http://www.ayqy.net/blog/dive-into-react-fiber/" >完全理解React Fiber<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码系列_ReactDom.render || hydrate</title>
      <link href="2019/04/27/%20React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_ReactDom.render%20%7C%7C%20hydrate/"/>
      <url>2019/04/27/%20React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_ReactDom.render%20%7C%7C%20hydrate/</url>
      
        <content type="html"><![CDATA[<p>这一章重点分析创建及更新的过程；<br><a id="more"></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190505234453.png"                      alt=""                ><br>react更新的方法<br>ReactDom.render  客户端<br>hydrate  初次渲染 服务端<br>setState 用于设置状态对象<br>forceUpdate 强制更新<br>replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。（将在下一个大版本中废除）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190506181937.png"                      alt=""                ></p><h1 id="创建redner对象"><a href="#创建redner对象" class="headerlink" title="创建redner对象"></a>创建redner对象</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM = &#123;</span><br><span class="line">  render(</span><br><span class="line">    element: React$Element&lt;<span class="built_in">any</span>&gt;,<span class="comment">//节点元素 react.createElement后返回的对象</span></span><br><span class="line">    container: DOMContainer, <span class="comment">//container就是我们需要渲染到的元素</span></span><br><span class="line">    callback: ?<span class="built_in">Function</span>,<span class="comment">//回调</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> legacyRenderSubtreeIntoContainer(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      element,</span><br><span class="line">      container,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      callback,</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用方法<br>legacyRenderSubtreeIntoContainer<br>参数 ：<br>  parentComponent: ?React$Component&lt;any, any&gt;,<br>  children: ReactNodeList,<br>  container: DOMContainer,<br>  forceHydrate: boolean,<br>  callback: ?Function,</p><p>其中第一次加载 root == null;<br><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> root: <span class="type">Root</span> = (container._reactRootContainer: <span class="built_in">any</span>);</span><br></pre></td></tr></table></figure><br>接着看<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">legacyRenderSubtreeIntoContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;any, any&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  container: DOMContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">  forceHydrate: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?<span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 创建了root对象</span></span><br><span class="line">  <span class="keyword">let</span> root: Root = (container._reactRootContainer: any)</span><br><span class="line">  <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">    <span class="comment">// 初始化挂载</span></span><br><span class="line">    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(</span><br><span class="line">      container,</span><br><span class="line">      forceHydrate,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//判断是否有callback</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> originalCallback = callback</span><br><span class="line">      callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> instance = DOMRenderer.getPublicRootInstance(root._internalRoot)</span><br><span class="line">        originalCallback.call(instance)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 批量更新操作</span></span><br><span class="line">    DOMRenderer.unbatchedUpdates(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (parentComponent != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 一般不会出现</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root.render(children, callback)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 有root的情况</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> DOMRenderer.getPublicRootInstance(root._internalRoot)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190509123221.png"                      alt=""                ></p><p>legacyCreateRootFromDOMContainer<br>render与hydrate的区别在于返回第四个参数true和false。<br>是否会调和原来存在于container里面的html节点，是否要复用这些节点，<br>hydrate基本用于服务端渲染<br>因为服务端第一次渲染和客户端第一次渲染节点结构应该是一致的如果可以复用就可以节省一定的性能<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">hydrate(</span><br><span class="line">   element: React$Node, </span><br><span class="line">   container: DOMContainer, </span><br><span class="line">   callback: ?<span class="built_in">Function</span>) &#123;</span><br><span class="line">   <span class="comment">// <span class="doctag">TODO:</span> throw or warn if we couldn&#x27;t hydrate?</span></span><br><span class="line">   <span class="keyword">return</span> legacyRenderSubtreeIntoContainer(</span><br><span class="line">     <span class="literal">null</span>,</span><br><span class="line">     element,</span><br><span class="line">     container,</span><br><span class="line">     <span class="literal">true</span>,</span><br><span class="line">     callback,</span><br><span class="line">   );</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> render(</span><br><span class="line">   element: React$Element&lt;any&gt;,</span><br><span class="line">   container: DOMContainer,</span><br><span class="line">   callback: ?<span class="built_in">Function</span>,</span><br><span class="line"> ) &#123;</span><br><span class="line">   <span class="keyword">return</span> legacyRenderSubtreeIntoContainer(</span><br><span class="line">     <span class="literal">null</span>,</span><br><span class="line">     element,</span><br><span class="line">     container,</span><br><span class="line">     <span class="literal">false</span>,</span><br><span class="line">     callback,</span><br><span class="line">   );</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><br>shouldHydrateDueToLegacyHeuristic<br>getReactRootElementInContainer 方法里判断我们的节点下有没有子节点，如果有子节点调和原来的子节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldHydrateDueToLegacyHeuristic</span>(<span class="params">container</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> rootElement = getReactRootElementInContainer(container);</span><br><span class="line">  <span class="keyword">return</span> !!(</span><br><span class="line">    rootElement &amp;&amp;</span><br><span class="line">    <span class="comment">//判断有这个节点和属性</span></span><br><span class="line">    rootElement.nodeType === ELEMENT_NODE &amp;&amp;</span><br><span class="line">    rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME) <span class="comment">//标识有服务端渲染</span></span><br><span class="line">    <span class="comment">//合并的过程</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">legacyCreateRootFromDOMContainer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">const</span> isConcurrent = <span class="literal">false</span>;</span><br><span class="line">  创建完FiberRoot后直接<span class="keyword">return</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ReactRoot(container, isConcurrent, shouldHydrate);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建FiberRoot"><a href="#创建FiberRoot" class="headerlink" title="创建FiberRoot"></a>创建FiberRoot</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReactRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  container: Container,</span></span></span><br><span class="line"><span class="function"><span class="params">  isConcurrent: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrate: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//传入dom节点 创建FiberRoot</span></span><br><span class="line">  <span class="keyword">const</span> root = DOMRenderer.createContainer(container, isConcurrent, hydrate);</span><br><span class="line">  <span class="comment">//再进行赋值给一个变量</span></span><br><span class="line">  <span class="built_in">this</span>._internalRoot = roo</span><br><span class="line">  t;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  containerInfo: Container,</span></span></span><br><span class="line"><span class="function"><span class="params">  isConcurrent: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrate: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">OpaqueRoot</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createFiberRoot(containerInfo, isConcurrent, hydrate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建ReactRoot对象"><a href="#创建ReactRoot对象" class="headerlink" title="创建ReactRoot对象"></a>创建ReactRoot对象</h1><p>看下ReactRoot中的render方法<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReactRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  container: Container,</span></span></span><br><span class="line"><span class="function"><span class="params">  isConcurrent: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrate: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//传入dom节点</span></span><br><span class="line">  <span class="keyword">const</span> root = DOMRenderer.createContainer(container, isConcurrent, hydrate);</span><br><span class="line">  <span class="built_in">this</span>._internalRoot = root;</span><br><span class="line">&#125;</span><br><span class="line">ReactRoot.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  children: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?() =&gt; mixed,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Work</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="built_in">this</span>._internalRoot;</span><br><span class="line">  <span class="keyword">const</span> work = <span class="keyword">new</span> ReactWork();</span><br><span class="line">  callback = callback === <span class="literal">undefined</span> ? <span class="literal">null</span> : callback;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    warnOnInvalidCallback(callback, <span class="string">&#x27;render&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    work.then(callback);</span><br><span class="line">  &#125;</span><br><span class="line">  DOMRenderer.updateContainer(children, root, <span class="literal">null</span>, work._onCommit);</span><br><span class="line">  <span class="keyword">return</span> work;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>调用updateContainer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  container: OpaqueRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;any, any&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?<span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> current = container.current;</span><br><span class="line">  <span class="keyword">const</span> currentTime = requestCurrentTime();</span><br><span class="line">  <span class="comment">//computeExpirationForFiber是react16之后让我们使用任务更新优先级计算方法</span></span><br><span class="line">  <span class="keyword">const</span> expirationTime = computeExpirationForFiber(currentTime, current);</span><br><span class="line">  <span class="keyword">return</span> updateContainerAtExpirationTime(</span><br><span class="line">    element,    <span class="comment">//应用实际的节点 App</span></span><br><span class="line">    container,  <span class="comment">//dom节点  对应的root</span></span><br><span class="line">    parentComponent,   <span class="comment">// null</span></span><br><span class="line">    expirationTime,</span><br><span class="line">    callback,       <span class="comment">//work._onCommit</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190509130338.png"                      alt=""                ></p><p>调用updateContainerAtExpirationTime</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateContainerAtExpirationTime</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  container: OpaqueRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;any, any&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?<span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> If this is a nested container, this won&#x27;t be the root.</span></span><br><span class="line">  <span class="keyword">const</span> current = container.current;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ReactFiberInstrumentation.debugTool) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.alternate === <span class="literal">null</span>) &#123;</span><br><span class="line">        ReactFiberInstrumentation.debugTool.onMountContainer(container);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element === <span class="literal">null</span>) &#123;</span><br><span class="line">        ReactFiberInstrumentation.debugTool.onUnmountContainer(container);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ReactFiberInstrumentation.debugTool.onUpdateContainer(container);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//=========暂时不管（context== null）========</span></span><br><span class="line"> <span class="keyword">const</span> context = getContextForSubtree(parentComponent);</span><br><span class="line">  <span class="keyword">if</span> (container.context === <span class="literal">null</span>) &#123;</span><br><span class="line">    container.context = context;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    container.pendingContext = context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//=========创建更新========</span></span><br><span class="line">  <span class="keyword">return</span> scheduleRootUpdate(current, element, expirationTime, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190509131004.png"                      alt=""                ></p><h1 id="开始调度"><a href="#开始调度" class="headerlink" title="开始调度"></a>开始调度</h1><p>首先要生成一个update，不管你是setState还是ReactDOM.render造成的 React 更新，都会生成一个叫update的对象，并且会赋值给Fiber.updateQueue<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190509131232.png"                      alt=""                ></p><h3 id="创建更新"><a href="#创建更新" class="headerlink" title="创建更新"></a>创建更新</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleRootUpdate</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  current: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?<span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//创建update</span></span><br><span class="line">  <span class="keyword">const</span> update = createUpdate(expirationTime)</span><br><span class="line"></span><br><span class="line">  update.payload = &#123; element &#125;</span><br><span class="line"></span><br><span class="line">  callback = callback === <span class="literal">undefined</span> ? <span class="literal">null</span> : callback</span><br><span class="line">  <span class="keyword">if</span> (callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    warningWithoutStack(</span><br><span class="line">      <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;render(...): Expected the last optional `callback` argument to be a &#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;function. Instead received: %s.&#x27;</span>,</span><br><span class="line">      callback,</span><br><span class="line">    )</span><br><span class="line">    update.callback = callback</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//update加入到fiber对象上面对应的updateenqueue里面</span></span><br><span class="line">  <span class="comment">//因为update可以是某一个节点上产生多次更新  </span></span><br><span class="line">  enqueueUpdate(current, update)</span><br><span class="line">  <span class="comment">//告诉react任务开始调度 更新产生了 优先级概念产生需要分配优先级任务</span></span><br><span class="line">  scheduleWork(current, expirationTime)</span><br><span class="line">  <span class="keyword">return</span> expirationTime  <span class="comment">//这次更新的 超时时间。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着会执行<code>enqueueUpdate</code>函数，这个函数其实大概的意思就是将新建的update对象和当前的FiberNode对象传入，然后为current$$1这个对象添加了<code>updateQueue</code>对象，里面保存着相关的一些任务。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190509131836.png"                      alt=""                ></p><p>然后就是调用scheduleWork。注意到这里之前setState和ReactDOM.render是不一样，但进入schedulerWork之后，就是任务调度的事情了，跟之前你是怎么调用的没有任何关系</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol><li>首先我们要通过React.createElement函数来将我们定义好的组件进行转换为React元素</li><li>将创建好的React元素通过调用ReactDom.render来进行渲染</li><li>ReactDom.render调用后先创建根对象root，然后调用root.render</li><li>然后经过若干函数调用，来到workLoop函数，它将遍历虚拟DOM树，将下一个需要处理的虚拟DOM传给performUnitOfWork，performUnitOfWork再将虚拟DOM传给beginWork后，beginWork根据虚拟DOM的类型不同进行相应处理，并对儿子进行处理为Fiber类型，为Fiber类型虚拟DOM添加父节点、兄弟节点等待细节，已方便遍历树。</li><li>beginWork处理完后返回需要处理的子元素再继续处理，直到没有子元素（即返回null），此时performUnitOfWork调用completeUnitOfWork处理这颗虚拟DOM子树，将其转换为真实DOM。</li><li>最后所有的虚拟DOM都将转为真实DOM。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190508173357.png"                      alt=""                ></li></ol><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>子组件内修改props是没有效果的?<br>_store中添加了一个新的对象validated(可写入)，element对象中添加了_self和_source属性（只读），最后冻结了element.props和element。</p><h2 id="FiberRoot示意图"><a href="#FiberRoot示意图" class="headerlink" title="FiberRoot示意图"></a>FiberRoot示意图</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190509010801.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码系列_createRef 与ref还有forwardRef</title>
      <link href="2019/04/26/%20React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_createRef%20%E4%B8%8Eref%E8%BF%98%E6%9C%89forwardRef/"/>
      <url>2019/04/26/%20React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_createRef%20%E4%B8%8Eref%E8%BF%98%E6%9C%89forwardRef/</url>
      
        <content type="html"><![CDATA[<ol><li>这是最近增加的一种方案。Refs 是使用 React.createRef() 方法创建的，并通过 ref 属性添加到 React 元素上。为了在整个组件中使用refs，只需将 ref 分配给构造函数中的实例属性。<a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.myRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>你也可以使用 ref 回调函数的方案，而不用考虑 React 版本</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchBar</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(props);</span><br><span class="line">      <span class="built_in">this</span>.txtSearch = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.state = &#123; <span class="attr">term</span>: <span class="string">&#x27;&#x27;</span> &#125;;</span><br><span class="line">      <span class="built_in">this</span>.setInputSearchRef = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.txtSearch = e;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="title">onInputChange</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123; <span class="attr">term</span>: <span class="built_in">this</span>.txtSearch.value &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">         &lt;input</span><br><span class="line">            value=&#123;<span class="built_in">this</span>.state.term&#125;</span><br><span class="line">            onChange=&#123;<span class="built_in">this</span>.onInputChange.bind(<span class="built_in">this</span>)&#125;</span><br><span class="line">            ref=&#123;<span class="built_in">this</span>.setInputSearchRef&#125; /&gt;</span><br><span class="line">      );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一种方法是再react16之前用的最多的一种方法但是再下一个大版本中将被废弃的一种方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p ref=<span class="string">&quot;strRef&quot;</span>&gt;获取ref&lt;p&gt;</span><br></pre></td></tr></table></figure><p>源码中如何实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRef</span>(<span class="params"></span>): <span class="title">RefObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> refObject = &#123;</span><br><span class="line">    current: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> refObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你没看错！react.js中代码就只有这么一点，但后期如何使用这个refObject我们在后面讲react如何渲染过程中再讲解这个步骤。</p><h1 id="什么是-forward-refs"><a href="#什么是-forward-refs" class="headerlink" title="什么是 forward refs?"></a>什么是 forward refs?</h1><blockquote><p>Ref forwarding 是一个特性，它允许一些组件获取接收到 ref 对象并将它进一步传递给子组件。</p></blockquote><p>一般情况下ref可以获取class组件的实例，获取不到function 组件的实例<br>比如这样<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Comp = （props,<span class="keyword">ref</span>)=&gt; &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span> <span class="keyword">ref</span>=&#123;<span class="keyword">ref</span>&#125;/&gt;</span><br></pre></td></tr></table></figure><br>这个也可以看做PurComponent没有实例没有this是获取不到ref的<br>但是第三方组件封装过，让其他用户使用的时候用户不确定你是否是PurComponent组件如果使用ref就获取不到。</p><p>解决这个问题我们就要使用forwardRef<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const ButtonElement = <span class="module-access"><span class="module"><span class="identifier">React</span>.</span></span>forward<span class="constructor">Ref((<span class="params">props</span>, <span class="params">ref</span>)</span> =&gt; (</span><br><span class="line">  &lt;button <span class="built_in">ref</span>=&#123;<span class="built_in">ref</span>&#125; className=<span class="string">&quot;CustomButton&quot;</span>&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create ref to the DOM button:</span></span><br><span class="line">const <span class="built_in">ref</span> = <span class="module-access"><span class="module"><span class="identifier">React</span>.</span></span>create<span class="constructor">Ref()</span>;</span><br><span class="line">&lt;ButtonElement <span class="built_in">ref</span>=&#123;<span class="built_in">ref</span>&#125;&gt;&#123;&#x27;Forward Ref&#x27;&#125;&lt;/ButtonElement&gt;</span><br></pre></td></tr></table></figure></p><p>然后我们看下forwardRef的源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">forwardRef</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  render: (props: Props, ref: React$Ref&lt;ElementType&gt;) =&gt; React$Node,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...忽略_DEV_...</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $$typeof: REACT_FORWARD_REF_TYPE,</span><br><span class="line">    render,   <span class="comment">//指的就是传进来的 function-Component</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回也是一个对象，但是对象里的$$typeof与ReactElement中返回的$$typeof不能混淆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   $$typeof:xxx,</span><br><span class="line">   props:&#123;</span><br><span class="line">       $$typeof:xxx,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码系列_Component做了什么</title>
      <link href="2019/04/25/%20React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_Component%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>2019/04/25/%20React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_Component%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>有两种可行的方法来创建一个组件：</p><ol><li>Function Components: 这是创建组件最简单的方式。这些是纯 JavaScript 函数，接受 props 对象作为第一个参数并返回 React 元素</li><li>Class Components: 你还可以使用 ES6 类来定义组件<a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Component</span>(<span class="params">props, context, updater</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.props = props;</span><br><span class="line">  <span class="built_in">this</span>.context = context;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">this</span>.refs = emptyObject;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.updater = updater || ReactNoopUpdateQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>props<br>context<br>refs   想要获取的节点的实例挂载到refs上面</li></ol><p>然后再component原型上有一个方法setState<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Component.prototype.setState = <span class="function"><span class="keyword">function</span>(<span class="params">partialState, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断类型是否object或者function或者null</span></span><br><span class="line">  invariant(</span><br><span class="line">    <span class="keyword">typeof</span> partialState === <span class="string">&#x27;object&#x27;</span> ||</span><br><span class="line">      <span class="keyword">typeof</span> partialState === <span class="string">&#x27;function&#x27;</span> ||</span><br><span class="line">      partialState == <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;setState(...): takes an object of state variables to update or a &#x27;</span> +</span><br><span class="line">      <span class="string">&#x27;function which returns an object of state variables.&#x27;</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">//当updater传入后执行enqueueSetState的方法（后面会讲）</span></span><br><span class="line">  <span class="built_in">this</span>.updater.enqueueSetState(<span class="built_in">this</span>, partialState, callback, <span class="string">&#x27;setState&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>这个API强制我们的react更新，既是state没有改变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Component.prototype.forceUpdate = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.updater.enqueueForceUpdate(<span class="built_in">this</span>, callback, <span class="string">&#x27;forceUpdate&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="另一个重点-PureComponent"><a href="#另一个重点-PureComponent" class="headerlink" title="另一个重点 PureComponent"></a>另一个重点 PureComponent</h1><p>React.PureComponent 与 React.Component 完全相同，只是它为你处理了 shouldComponentUpdate() 方法。当属性或状态发生变化时，PureComponent 将对属性和状态进行浅比较。另一方面，一般的组件不会将当前的属性和状态与新的属性和状态进行比较。因此，在默认情况下，每当调用 shouldComponentUpdate 时，默认返回 true，所以组件都将重新渲染。<br>源码中是如何做到的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComponentDummy</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">ComponentDummy.prototype = Component.prototype;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PureComponent</span>(<span class="params">props, context, updater</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.props = props;</span><br><span class="line">  <span class="built_in">this</span>.context = context;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.refs = emptyObject;</span><br><span class="line">  <span class="built_in">this</span>.updater = updater || ReactNoopUpdateQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pureComponentPrototype = (PureComponent.prototype = <span class="keyword">new</span> ComponentDummy());</span><br><span class="line">pureComponentPrototype.constructor = PureComponent;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(pureComponentPrototype, Component.prototype);</span><br><span class="line">pureComponentPrototype.isPureReactComponent = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;Component, PureComponent&#125;;</span><br></pre></td></tr></table></figure><br>我们可以认为他是继承Component</p><p>通过new 实现了一个ComponentDummy空的类<br>让Component的原型对象赋值给ComponentDummy的原型对象<br>pureComponentPrototype.constructor指向自己<br>Component.prototype上的属性拷贝到pureComponentPrototype上</p><p>唯一的区别就是<code>isPureReactComponent</code>通过一个标识让继承自这个类的组件是不是PureComponent。<br>然后判断props是否更新再判断组件是否更新。</p><p>这个方法中没有涉及到生命周期 和 render ，这是出乎意料的</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何合理布置React/Redux的目录结构</title>
      <link href="2019/04/25/React-Redux%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E5%B8%83%E7%BD%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>2019/04/25/React-Redux%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E5%B8%83%E7%BD%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>项目的结构改过很多次，每次根据需求的复杂度慢慢的修改，根据工作中的经验总结下几种结构的特点。<br><a id="more"></a></p><h2 id="按照文件类型划分"><a href="#按照文件类型划分" class="headerlink" title="按照文件类型划分"></a>按照文件类型划分</h2><p>不是很复杂的项目可以这样规划。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|—— actions</span><br><span class="line">    |—— CommandActions.jsx</span><br><span class="line">    └── newAction.jsx      &lt;- here</span><br><span class="line">|—— components</span><br><span class="line">    |—— Command.jsx</span><br><span class="line">    └── newComponent.jsx   &lt;- here</span><br><span class="line">|—— containers</span><br><span class="line">    |—— Command.jsx</span><br><span class="line">    └── newContainers.jsx  &lt;- here</span><br><span class="line">└── reducers</span><br><span class="line">    |—— command.jsx</span><br><span class="line">    └── newReducers.jsx    &lt;- here</span><br></pre></td></tr></table></figure><p>优点：项目简单结构清晰，actions，reducers，containers中放着每个模块的对应的结构文件。<br>缺点：当你添加一个组件的时候你就需要在3个目录下操作，以及跨文件的管理对应的文件，有点不方便。</p><h2 id="按照组件划分"><a href="#按照组件划分" class="headerlink" title="按照组件划分"></a>按照组件划分</h2><p>一个组件包含自身action，reducers，style等相关的文件，这样在修改某些文件的时候就非常的容易。对于项目不存在很复杂的异步逻辑等可以参考这样的结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">|—— app</span><br><span class="line">    |—— App.jsx</span><br><span class="line">    |—— reducers.jsx</span><br><span class="line">    |—— routes.jsx</span><br><span class="line">|—— home</span><br><span class="line">    |—— index.jsx</span><br><span class="line">    |—— Home.jsx</span><br><span class="line">    |—— HomeActions.jsx</span><br><span class="line">    └── HomeReducer.jsx</span><br><span class="line">|——  product</span><br><span class="line">    |—— index.jsx</span><br><span class="line">    |—— ProductList.jsx</span><br><span class="line">    |—— ProductActions.jsx</span><br><span class="line">    └── ProductReducer.jsx</span><br></pre></td></tr></table></figure><p>缺点：大型项目中如果存在大量复用模块处理起来非常麻烦</p><h2 id="大型项目的组织"><a href="#大型项目的组织" class="headerlink" title="大型项目的组织"></a>大型项目的组织</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">|——app</span><br><span class="line">   |—— component                # 这里放的都是公共部分的组件</span><br><span class="line">       |—— Header               # 使用 styled-components 来定义基础组件</span><br><span class="line">       └── Fotter</span><br><span class="line">   |—— containers               # 页面容器</span><br><span class="line">       |—— HomePage</span><br><span class="line">           |—— ...</span><br><span class="line">           |—— index.js        # 组织页面的结构, 私有模块和公共模块构成</span><br><span class="line">           |—— reducer.js      # Home下的reducer逻辑</span><br><span class="line">           |—— component     # 私有模块</span><br><span class="line">           |—— sagas.js        # Home下的异步数据</span><br><span class="line">           |—— action.js</span><br><span class="line">           |—— ...</span><br><span class="line">           └── reducers.js   # reducer</span><br></pre></td></tr></table></figure><ol><li>component下面包括了大量的通用组件，不管是项目的平台移植，模块复用都很好管理。containers下如HomePage/index.js有复用的模块以及页面场景下特殊的模块构成，</li><li>同时index.js还负责模块跟redux store数据的链接，对应的每个场景都拥有自身saga，reducer等。构建大型的项目结构参考这个也是一个非常棒的</li></ol><h2 id="最后介绍下react-starter-kit"><a href="#最后介绍下react-starter-kit" class="headerlink" title="最后介绍下react-starter-kit"></a>最后介绍下react-starter-kit</h2><p>这个项目的结构使用的是 fractal(不规则碎片形：适合大型项目)*，方法的分组主要是依照特性而不是文件类型。注意，这个目录结构只是一个指引，并不一定要按这个来。这种结构谐在让程序更容易扩展</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── src                      # 程序源文件</span><br><span class="line">│   ├── main.js              # 程序启动和渲染</span><br><span class="line">│   ├── components           # 全局可复用的表现组件(Presentational Components)</span><br><span class="line">│   ├── containers           # 全局可复用的容器组件</span><br><span class="line">│   ├── layouts              # 主页结构</span><br><span class="line">│   ├── store                # Redux指定块</span><br><span class="line">│   │   ├── createStore.js   # 创建和使用redux store</span><br><span class="line">│   │   └── reducers.js      # Reducer注册和注入</span><br><span class="line">│   └── routes               # 主路由和异步分割点</span><br><span class="line">│       ├── index.js         # 用store启动主程序路由</span><br><span class="line">│       ├── Root.js          # 为上下文providers包住组件</span><br><span class="line">│       └── Home             # 不规则路由</span><br><span class="line">│           ├── index.js     # 路由定义和代码异步分割</span><br><span class="line">│           ├── assets       # 组件引入的静态资源</span><br><span class="line">│           ├── components   # 直观React组件</span><br><span class="line">│           ├── container    # 连接actions和store</span><br><span class="line">│           ├── modules      # reducers/constants/actions的集合</span><br><span class="line">│           └── routes **    # 不规则子路由(** 可选择的)</span><br></pre></td></tr></table></figure><p>routes 作为主入口，并且把所有路由对应的组件，assets, modules全部都集中在了一起,更像mvc的命名组织。reducer、action整合为modules， components作为view，container连接actions和store。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createRoutes = <span class="function">(<span class="params">store</span>) =&gt;</span> (&#123;</span><br><span class="line">  path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  component: CoreLayout,</span><br><span class="line">  indexRoute: Home,</span><br><span class="line">  childRoutes: [</span><br><span class="line">    CounterRoute(store),</span><br><span class="line">    ZenRoute(store),</span><br><span class="line">    ElapseRoute(store),</span><br><span class="line">    RouteRoute(store),</span><br><span class="line">    PageNotFound(),</span><br><span class="line">    Redirect</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一个Counter模块包含如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Counter/</span><br><span class="line">    components/   # 页面的组件</span><br><span class="line">     containers/   # view 和 modules 数据对接</span><br><span class="line">    modules/      # 包含对应的 reducer, action</span><br><span class="line">    index.js      # 页面入口，定义path</span><br></pre></td></tr></table></figure><p>index.js 自动的注入reducer 到store，这样在顶层的store就无需要手动去整合每个模块自身的reducer。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入对应的redicer</span></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="built_in">require</span>(<span class="string">&#x27;./modules/counter&#x27;</span>).default</span><br><span class="line"> <span class="comment">/*  Add the reducer to the store on key &#x27;counter&#x27;  */</span></span><br><span class="line">injectReducer(store, &#123; <span class="attr">key</span>: <span class="string">&#x27;counter&#x27;</span>, reducer &#125;)</span><br></pre></td></tr></table></figure><p><strong>当然项目结构还是要根据个人或者项目需求而定，以上方案只做参考。谢谢！</strong></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a class="link"   href="https://juejin.im/post/58cbfcb05c497d0057b9b228" >掘金<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://redux.js.org/advanced/example-reddit-api" >Reudx官网<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码系列_ReactElement</title>
      <link href="2019/04/25/React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_ReactElement/"/>
      <url>2019/04/25/React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_ReactElement/</url>
      
        <content type="html"><![CDATA[<p>上一节我们看到了jsx转义到javascript的时候都会调用ReactElement方法<br>现在我们就来探索下ReactElement做了写什么<br><a id="more"></a></p><h2 id="首先看下它的代码引用"><a href="#首先看下它的代码引用" class="headerlink" title="首先看下它的代码引用"></a>首先看下它的代码引用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> &#123;</span><br><span class="line">  createElement,</span><br><span class="line">  createFactory,</span><br><span class="line">  cloneElement,</span><br><span class="line">  isValidElement,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./ReactElement&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="然后我们来看下createElement方法如何定义"><a href="#然后我们来看下createElement方法如何定义" class="headerlink" title="然后我们来看下createElement方法如何定义"></a>然后我们来看下createElement方法如何定义</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, config, children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> propName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> key = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> ref = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> source = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//判断是否存在config</span></span><br><span class="line">  <span class="keyword">if</span> (config != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasValidRef(config)) &#123;</span><br><span class="line">      ref = config.ref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasValidKey(config)) &#123;</span><br><span class="line">      key = <span class="string">&#x27;&#x27;</span> + config.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        hasOwnProperty.call(config, propName) &amp;&amp;</span><br><span class="line">        !RESERVED_PROPS.hasOwnProperty(propName)</span><br><span class="line">      ) &#123;</span><br><span class="line">        props[propName] = config[propName];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">  <span class="comment">//arguments参数第三个开始作为childrenLength</span></span><br><span class="line">  <span class="keyword">const</span> childrenLength = <span class="built_in">arguments</span>.length - <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">    props.children = children;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childArray = <span class="built_in">Array</span>(childrenLength);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] = <span class="built_in">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">       props.children = childArray;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断组件没有传props则可以用defaultProps作为默认参数</span></span><br><span class="line">  <span class="keyword">if</span> (type &amp;&amp; type.defaultProps) &#123;</span><br><span class="line">    <span class="keyword">const</span> defaultProps = type.defaultProps;</span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> defaultProps) &#123;</span><br><span class="line">      <span class="keyword">if</span> (props[propName] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        props[propName] = defaultProps[propName];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">  <span class="comment">//返回一个对象</span></span><br><span class="line">  <span class="keyword">return</span> ReactElement(</span><br><span class="line">    type,</span><br><span class="line">    key,</span><br><span class="line">    ref,</span><br><span class="line">    self,</span><br><span class="line">    source,</span><br><span class="line">    ReactCurrentOwner.current,</span><br><span class="line">    props,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数 ：</p><ol><li>字符串比如div，p代表原生DOM，称为HostComponent</li><li>Class类型是我们继承自Component或者PureComponent的组件，称为ClassComponent</li><li>方法就是functional Component</li><li>原生提供的Fragment、AsyncMode等是Symbol，会被特殊处理</li></ol><p>在处理config的过程中要处理不是props对应的属性值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RESERVED_PROPS = &#123;</span><br><span class="line">  key: <span class="literal">true</span>,</span><br><span class="line">  ref: <span class="literal">true</span>,</span><br><span class="line">  __self: <span class="literal">true</span>,</span><br><span class="line">  __source: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>之后处理children</p><h2 id="看下ReactElement方法"><a href="#看下ReactElement方法" class="headerlink" title="看下ReactElement方法"></a>看下ReactElement方法</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ReactElement = <span class="keyword">function</span>(<span class="keyword">type</span>, key, <span class="keyword">ref</span>, self, source, owner, props) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = &#123;</span><br><span class="line">    $$typeof: REACT_ELEMENT_TYPE,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">type</span>: <span class="keyword">type</span>,</span><br><span class="line">    key: key,</span><br><span class="line">    <span class="keyword">ref</span>: <span class="keyword">ref</span>,</span><br><span class="line">    props: props,</span><br><span class="line">    <span class="comment">//记录负责创建此元素的组件</span></span><br><span class="line">    <span class="number">_</span>owner: owner,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ReactElement只是一个用来承载信息的容器，他会告诉后续的操作这个节点的以下信息：</p><ol><li>type类型，用于判断如何创建节点</li><li>key和ref这些特殊信息</li><li>props新的属性内容</li><li><code>$$typeof</code>用于确定是否属于ReactElement</li></ol><h2 id="typeof与type的区别？"><a href="#typeof与type的区别？" class="headerlink" title="$$typeof与type的区别？"></a>$$typeof与type的区别？</h2><p><code>$$typeof</code>用于确定是否属于ReactElement，我们在用jsx写代码的时候所有的标签都是ReactElement创建的。类型$$typeof: REACT_ELEMENT_TYPE,<br>type是记录我们节点类型的是原生组件还是自定义组件，还是标签类型</p><h2 id="流程图大致内容感谢yck"><a href="#流程图大致内容感谢yck" class="headerlink" title="流程图大致内容感谢yck"></a>流程图大致内容感谢yck</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190504004316.png"                      alt=""                ></p><p>接下来我们来看看react.createElement这个函数里面会帮我们做什么事情。</p><p>defineKeyPropWarningGetter和defineRefPropWarningGetter两个函数是干什么的？<br>这两个函数仅仅只是将key和ref添加到即将传入ReactElement函数的props对象中而已。并且对get绑定了一个函数，当尝试获通过props获取key和ref的时候会出现警告。<br>什么情况下childrenLength大于1？<br>将原来的h1改成一个div，并且嵌套2个h1元素就可以发现childrenLength大于1了。<br>ReactElement是干嘛的？<br>包装在一个element对象</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol><li>首先会初始化一些列的变量，之后会判断我们传入的元素中是否带有key和ref的属性，这两个属性对于react是有特殊意义的，如果检测到有传入key,ref,<strong>self和</strong>source这4个属性值，会将其保存起来。</li><li>之后对传入的<code>config</code>做处理，循环config对象，并且剔除掉4个内置属性值（key,ref,<strong>self,</strong>source），之后重新组装新的config为props。</li><li>之后会检测传入的参数的长度，如果childrenLength等于1的情况下，那么就代表着当前createElement的元素没有子元素，只有文字或者是空，那么将内容赋值到props.children。那什么时候<code>childrenLength</code>会大于1呢？那就是当你的元素里面涉及到嵌套子元素的时候，那么children将会有多个传入到createElement函数中，这个之后再做详解，现在只针对最简单的DEMO去说明。</li><li>接着函数将会检测是否存在defaultProps这个参数，因为现在的DEMO是一个最简单的DEMO，而且传入的只是原生元素，所以没有<code>defaultProps</code>这个参数，我们先忽略。</li><li>检测key和ref是否有赋值，如果有将会执行<code>defineKeyPropWarningGetter</code>和<code>defineRefPropWarningGetter</code>两个函数。</li><li>最后将一系列组装好的数据传入<code>ReactElement</code>函数中。</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码系列_jsx转javascript</title>
      <link href="2019/04/24/React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_jsx%E8%BD%ACjavascript/"/>
      <url>2019/04/24/React%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97_jsx%E8%BD%ACjavascript/</url>
      
        <content type="html"><![CDATA[<p>这是下半年的对自己的提升。<br>感谢<a class="link"   href="https://react.jokcy.me/book/api/react.html" >jokcy<i class="fas fa-external-link-alt"></i></a><br><a id="more"></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190503154513.png"                      alt=""                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="media/15566986729739/15566987423785.jpg"                      alt="-w1029"                ></p><p>React 使用 JSX 来替代常规的 JavaScript。<br>JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。<br>我们不需要一定使用 JSX，但它有以下优点：<br>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。<br>它是类型安全的，在编译过程中就能发现错误。<br>使用 JSX 编写模板更加简单快速。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>:red&#125;&#125; key=<span class="string">&quot;1&quot;</span> ref=<span class="string">&quot;divRef&quot;</span>&gt;</span><br><span class="line">  &lt;h1&gt;content</span><br><span class="line">    &lt;a&gt;lianjie&lt;/a&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">......转义之后这样的..........</span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line">React.createElement(</span><br><span class="line">  <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    style: &#123;</span><br><span class="line">      color: red</span><br><span class="line">    &#125;,</span><br><span class="line">    key: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    ref: <span class="string">&quot;divRef&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  React.createElement(</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>,</span><br><span class="line">    React.createElement(<span class="string">&quot;a&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;lianjie&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>如果我们加个组件会如何呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>i am Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>:red&#125;&#125; key=<span class="string">&quot;1&quot;</span> ref=<span class="string">&quot;divRef&quot;</span>&gt;</span><br><span class="line">  &lt;h1&gt;content</span><br><span class="line">    &lt;a&gt;lianjie&lt;/a&gt;</span><br><span class="line">    &lt;Comp/&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">..........转义之后........</span><br><span class="line">React.createElement(</span><br><span class="line">  <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    style: &#123;</span><br><span class="line">      color: red</span><br><span class="line">    &#125;,</span><br><span class="line">    key: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    ref: <span class="string">&quot;divRef&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  React.createElement(</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>,</span><br><span class="line">    React.createElement(<span class="string">&quot;a&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;lianjie&quot;</span>),</span><br><span class="line">    React.createElement(Comp, <span class="literal">null</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>又或者这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>i am Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;Comp style=&#123;&#123;<span class="attr">color</span>:red&#125;&#125; key=<span class="string">&quot;1&quot;</span> ref=<span class="string">&quot;divRef&quot;</span>&gt;</span><br><span class="line">  &lt;h1&gt;content</span><br><span class="line">    &lt;a&gt;lianjie&lt;/a&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">&lt;/Comp&gt;</span><br><span class="line">.......转义之后..........</span><br><span class="line">React.createElement(</span><br><span class="line">  Comp,   <span class="comment">//变量为组件名</span></span><br><span class="line">  &#123;</span><br><span class="line">    style: &#123;</span><br><span class="line">      color: red</span><br><span class="line">    &#125;,</span><br><span class="line">    key: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    ref: <span class="string">&quot;divRef&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  React.createElement(</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>,</span><br><span class="line">    React.createElement(<span class="string">&quot;a&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;lianjie&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><code>组件名</code>千万不能小心不然会出现这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>i am Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;comp style=&#123;&#123;<span class="attr">color</span>:red&#125;&#125; key=<span class="string">&quot;1&quot;</span> ref=<span class="string">&quot;divRef&quot;</span>&gt;</span><br><span class="line">  &lt;h1&gt;content</span><br><span class="line">    &lt;a&gt;lianjie&lt;/a&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">&lt;/comp&gt;</span><br><span class="line">.......转义之后..........</span><br><span class="line">React.createElement(</span><br><span class="line">  <span class="string">&quot;comp&quot;</span>,   <span class="comment">//变量为字符串 不是正确的原生标签会导致报错</span></span><br><span class="line">  &#123;</span><br><span class="line">    style: &#123;</span><br><span class="line">      color: red</span><br><span class="line">    &#125;,</span><br><span class="line">    key: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    ref: <span class="string">&quot;divRef&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  React.createElement(</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>,</span><br><span class="line">    React.createElement(<span class="string">&quot;a&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;lianjie&quot;</span>)</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="下一节学习下createElement到底做了些什么"><a href="#下一节学习下createElement到底做了些什么" class="headerlink" title="下一节学习下createElement到底做了些什么"></a>下一节学习下createElement到底做了些什么</h4>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Vue实战」适合你的优化指南-动态注册组件</title>
      <link href="2019/04/23/%E3%80%8CVue%E5%AE%9E%E6%88%98%E3%80%8D%E9%80%82%E5%90%88%E4%BD%A0%E7%9A%84%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97-%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6/"/>
      <url>2019/04/23/%E3%80%8CVue%E5%AE%9E%E6%88%98%E3%80%8D%E9%80%82%E5%90%88%E4%BD%A0%E7%9A%84%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97-%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>我们在刚开始学vue的时候写一些小组件引入到大组件中都是这样的：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BaseButton <span class="keyword">from</span> <span class="string">&#x27;./baseButton&#x27;</span></span><br><span class="line"><span class="keyword">import</span> BaseIcon <span class="keyword">from</span> <span class="string">&#x27;./baseIcon&#x27;</span></span><br><span class="line"><span class="keyword">import</span> BaseInput <span class="keyword">from</span> <span class="string">&#x27;./baseInput&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    BaseButton,</span><br><span class="line">    BaseIcon,</span><br><span class="line">    BaseInput</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;BaseInput  v-model=<span class="string">&quot;searchText&quot;</span> @keydown.enter=<span class="string">&quot;search&quot;</span> /&gt;</span><br><span class="line">&lt;BaseButton @click=<span class="string">&quot;search&quot;</span>&gt;  <span class="xml"><span class="tag">&lt;<span class="name">BaseIcon</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>/&gt;</span></span>&lt;/BaseButton&gt;</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190430001219.png"                      alt=""                ><br>步骤一般有三步：</p><ul><li>第一步，引入、</li><li>第二步注册、</li><li>第三步才是正式的使用，</li></ul><p>这也是最常见和通用的写法。但是这种写法经典归经典，好多组件，要引入多次，注册多次，感觉很烦。<br>我们可以借助一下webpack，使用 require.context() 方法来创建自己的（模块）上下文，从而实现自动动态require组件。</p><blockquote><p>思路是：在src文件夹下面main.js中，借助webpack动态将需要的基础组件统统打包进来。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首字母大写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>str 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example <span class="variable">heheHaha</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> <span class="variable">HeheHaha</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalizeFirstLetter</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对符合&#x27;xx/xx.vue&#x27;组件格式的组件取组件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>str fileName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example </span>abc/bcd/def/basicTable.vue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> <span class="variable">BasicTable</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateFileName</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="regexp">/^\S+\.vue$/</span>.test(str) &amp;&amp;</span><br><span class="line">str.replace(<span class="regexp">/^\S+\/(\w+)\.vue$/</span>, <span class="function">(<span class="params">rs, $<span class="number">1</span></span>) =&gt;</span> capitalizeFirstLetter($<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(<span class="string">&#x27;./&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.vue$/</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;requireComponent&#x27;</span>,requireComponent)</span><br><span class="line"><span class="comment">// 找到组件文件夹下以.vue命名的文件，如果文件名为index，那么取组件中的name作为注册的组件名</span></span><br><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">filePath</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> componentConfig = requireComponent(filePath)</span><br><span class="line"><span class="keyword">const</span> fileName = validateFileName(filePath)</span><br><span class="line"><span class="keyword">const</span> componentName = fileName.toLowerCase() === <span class="string">&#x27;index&#x27;</span></span><br><span class="line">? capitalizeFirstLetter(componentConfig.default.name)</span><br><span class="line">: fileName</span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line">Vue.component(</span><br><span class="line">componentName,</span><br><span class="line"><span class="comment">// 如果这个组件选项是通过 `export default` 导出的，</span></span><br><span class="line"><span class="comment">// 那么就会优先使用 `.default`，</span></span><br><span class="line"><span class="comment">// 否则回退到使用模块的根。</span></span><br><span class="line">componentConfig.default || componentConfig)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在main.js中引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/icons&#x27;</span></span><br><span class="line"><span class="comment">// 全局挂载请求</span></span><br><span class="line"><span class="keyword">import</span> Global <span class="keyword">from</span> <span class="string">&#x27;./global&#x27;</span>;</span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line"><span class="keyword">import</span> componentRegister <span class="keyword">from</span> <span class="string">&#x27;./components/componentRegister&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">&#x27;./components/loadding&#x27;</span></span><br><span class="line"><span class="comment">// 全局设置节流/防抖</span></span><br><span class="line"><span class="keyword">import</span> Throttle <span class="keyword">from</span> <span class="string">&#x27;./components/Throttle&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;Throttle&#x27;</span>, Throttle)</span><br><span class="line">Vue.use(Loading)</span><br><span class="line">Vue.use(Global)</span><br><span class="line"> </span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">componentRegister,<span class="comment">//引入</span></span><br><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><br>BasicTable.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;我是BasicTable小组件&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">name:<span class="string">&quot;BasicTable&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190430001604.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>「Vue实战」适合你的优化指南-请求篇</title>
      <link href="2019/04/21/%E3%80%8CVue%E5%AE%9E%E6%88%98%E3%80%8D%E9%80%82%E5%90%88%E4%BD%A0%E7%9A%84%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97-%E8%AF%B7%E6%B1%82%E7%AF%87/"/>
      <url>2019/04/21/%E3%80%8CVue%E5%AE%9E%E6%88%98%E3%80%8D%E9%80%82%E5%90%88%E4%BD%A0%E7%9A%84%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97-%E8%AF%B7%E6%B1%82%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>先看看目录一般项目中处理搭建环境我们最常做的就是封装请求，今天就来学习一下如何封装一个好用的请求<br><a id="more"></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190421233649.png"                      alt=""                ></p><h1 id="接口模块处理"><a href="#接口模块处理" class="headerlink" title="接口模块处理"></a>接口模块处理</h1><h2 id="对axios的二次封装"><a href="#对axios的二次封装" class="headerlink" title="对axios的二次封装"></a>对<code>axios</code>的二次封装</h2><p>很基础的部分,这里的封装是依据 JWT<br>前提还需要知道<br>什么是 router.history.current.path 告诉你<br>什么是 router.currentRoute.fullPath 告诉你当前路径链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; MessageBox, Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loginUrl = <span class="string">&#x27;/login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据环境切换接口地址</span></span><br><span class="line">axios.defaults.baseURL = process.env.VUE_APP_API</span><br><span class="line">axios.defaults.headers = &#123;</span><br><span class="line"><span class="string">&#x27;Postman-Token&#x27;</span>: <span class="string">&#x27;3deda212-00f1-44e5-8d92-18463283de1d&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">axios.defaults.timeout = <span class="number">60000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">config =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (router.history.current.path !== loginUrl &amp;&amp; router.history.current.path != <span class="string">&quot;/about&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> token = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">router.replace(&#123; <span class="attr">path</span>: loginUrl, <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: router.currentRoute.fullPath &#125; &#125;)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">config.headers[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&#x27;JWT&#x27;</span> + token</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">Message.warning(error)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截  异常处理</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.message !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">          MessageBox.alert(error.response.data)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;out&#x27;</span>) === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&#x27;out&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            MessageBox.confirm(<span class="string">&#x27;会话已失效! 请重新登录&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">              confirmButtonText: <span class="string">&#x27;重新登录&#x27;</span>,</span><br><span class="line">              cancelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">              type: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">            &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              router.replace(&#123; <span class="attr">path</span>: loginUrl, <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: router.currentRoute.fullPath &#125; &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">402</span>:</span><br><span class="line">          MessageBox.confirm(<span class="string">&#x27;登陆超时 ！&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">            confirmButtonText: <span class="string">&#x27;重新登录&#x27;</span>,</span><br><span class="line">            cancelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">          &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            router.replace(&#123; <span class="attr">path</span>: loginUrl, <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: router.currentRoute.fullPath &#125; &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">          MessageBox.alert(<span class="string">&#x27;没有权限&#x27;</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          MessageBox.alert(<span class="string">`连接错误<span class="subst">$&#123;error.response.status&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出基础的请求类型封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 其中给 get请求加上时间戳参数，避免从缓存中拿数据</span></span><br><span class="line">get (url, param) &#123;</span><br><span class="line"><span class="keyword">if</span> (param !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">param = &#123; ...param, <span class="attr">_t</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">param = &#123; <span class="attr">_t</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">axios(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">param</span>: param &#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">resolve(res)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">getData (url, param) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">axios(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, url, <span class="attr">param</span>: param &#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (res.code === <span class="number">4000</span>) &#123;</span><br><span class="line">resolve(res.data)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Message.warning(res.msg)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">post (url, param, config) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;router.history.current.path:当前路径&#x27;</span>,router.history.current.path)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;router.currentRoute.fullPath:&#x27;</span>,router.currentRoute.fullPath)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">axios.post(url, param, config)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">resolve(res)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="统一请求入口"><a href="#统一请求入口" class="headerlink" title="统一请求入口"></a>统一请求入口</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 请求按模板合并</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;./request&#x27;</span></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">&#x27;./login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const api = Object.assign(&#123;&#125;,http,login,其他api模板)</span></span><br><span class="line"><span class="keyword">const</span> api = <span class="built_in">Object</span>.assign(&#123;&#125;, http, login)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="单独请求"><a href="#单独请求" class="headerlink" title="单独请求"></a>单独请求</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;./request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://easy-mock.com/mock/5cbe83dd59a6ea65f79ad4f5/api/v1/login</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&quot;https://easy-mock.com/mock/5cbe83dd59a6ea65f79ad4f5&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  login (param) &#123;</span><br><span class="line">    <span class="keyword">return</span> http.post(<span class="string">&#x27;http://rap2api.taobao.org/app/mock/6006/api/u/verify&#x27;</span>, param)</span><br><span class="line">  &#125;,</span><br><span class="line">  out (param) &#123;</span><br><span class="line">    <span class="keyword">return</span> http.get(<span class="string">&#x27;/api/v1/out&#x27;</span>, param)</span><br><span class="line">  &#125;,</span><br><span class="line">  register (param) &#123;</span><br><span class="line">    <span class="keyword">return</span> http.post(<span class="string">&#x27;/api/v1/register&#x27;</span>, param)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全局导入在main-js"><a href="#全局导入在main-js" class="headerlink" title="全局导入在main.js"></a>全局导入在main.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/icons&#x27;</span></span><br><span class="line"><span class="comment">// 全局挂载请求</span></span><br><span class="line"><span class="keyword">import</span> Global <span class="keyword">from</span> <span class="string">&#x27;./global&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vm)</span><br></pre></td></tr></table></figure><p>加载后<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190423163202.png"                      alt=""                ></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; MessageBox, Message, Button, &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">val: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">onClick ($ev, val) &#123;</span><br><span class="line"><span class="built_in">this</span>.val += val</span><br><span class="line">&#125;,</span><br><span class="line">getData: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> <span class="built_in">this</span>.$http.login(&#123; <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;哈哈&#x27;</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">res.success ? Message.success(<span class="string">&#x27;登录成功&#x27;</span>) : <span class="built_in">this</span>.$message.warning(res.msg)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190423163332.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactNative离线框架设计</title>
      <link href="2019/04/13/ReactNative%E7%A6%BB%E7%BA%BF%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/"/>
      <url>2019/04/13/ReactNative%E7%A6%BB%E7%BA%BF%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>好久没更新，最近一直赶项目，疲敝 - -！！！<br><a id="more"></a><br>最近项目升级2.0，增加了一个离线缓存的功能优化。记录一下：</p><h1 id="AsyncStorage介绍"><a href="#AsyncStorage介绍" class="headerlink" title="AsyncStorage介绍"></a>AsyncStorage介绍</h1><p>AsyncStorage 是一个简单的、异步的、持久化的 Key-Value 存储系统，它对于 App 来说是全局性的。它用来代替 LocalStorage。<br>由于它的操作是全局的，官方建议我们最好针对 AsyncStorage 进行一下抽象的封装再使用，而且不是直接拿 AsyncStorage 进行使用。<br>AsyncStorage 存储的位置根据系统的不同而有所差异。iOS 中的存储类似于 NSUserDefault，通过 plist 文件存放在设备中。Android 中会存储在 RocksDB 或者 SQLite 中，取决于你使用哪个。</p><h1 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h1><p>（1）根据键来获取值，获取的结果会放在回调函数中。</p><blockquote><p>static getItem(key: string, callback:(error, result))</p></blockquote><p>（2）根据键来设置值。</p><blockquote><p>static setItem(key: string, value: string, callback:(error))</p></blockquote><p>（3）根据键来移除项。</p><blockquote><p>static removeItem(key: string, callback:(error))</p></blockquote><p>（4）合并现有值和输入值。</p><blockquote><p>static mergeItem(key: string, value: string, callback:(error))</p></blockquote><p>（5）清除所有的项目</p><blockquote><p>static clear(callback:(error))</p></blockquote><p>（6）获取所有的键</p><blockquote><p>static getAllKeys(callback:(error, keys))</p></blockquote><p>（7）清除所有进行中的查询操作。</p><blockquote><p>static flushGetRequests()</p></blockquote><p>（8）获取多项，其中 keys 是字符串数组，比如：[‘k1’, ‘k2’]</p><blockquote><p>static multiGet(keys, callback:(errors, result))</p></blockquote><p>（9）设置多项，其中 keyValuePairs 是字符串的二维数组，比如：[[‘k1’, ‘val1’], [‘k2’, ‘val2’]]</p><blockquote><p>static multiSet(keyValuePairs, callback:(errors))</p></blockquote><p>（10）删除多项，其中 keys 是字符串数组，比如：[‘k1’, ‘k2’]</p><blockquote><p>static multiRemove(keys, callback:(errors))</p></blockquote><p>（11）多个键值合并，其中 keyValuePairs 是字符串的二维数组，比如：[[‘k1’, ‘val1’], [‘k2’, ‘val2’]]</p><blockquote><p>static multiMerge(keyValuePairs, callback:(errors))</p></blockquote><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p><strong>为什么要离线缓存？</strong></p><ol><li>提升用户体验</li><li>节省流量</li></ol><p>缺点只能针对一些对数据实时性要求不高的App开发</p><p><strong>离线缓存的策略：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/B70AB6D31BF9E9DE957B8611630B1616.jpg"                      alt=""                ></p><h2 id="首先保存数据"><a href="#首先保存数据" class="headerlink" title="首先保存数据"></a>首先保存数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 保存数据</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="variable">url</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="variable">data</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="variable">callback</span></span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="title">saveData</span>(<span class="params">url, data, callback</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (!data || !url) <span class="keyword">return</span>;</span><br><span class="line">   AsyncStorage.setItem(url, <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>._wrapData(data)), callback);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意<code>AsyncStorage</code>无法保存为<code>object</code>类型所以我们需要将其序列号成<code>json</code></p><h2 id="获取本地时间设置有效期。推荐设置为服务器时间"><a href="#获取本地时间设置有效期。推荐设置为服务器时间" class="headerlink" title="获取本地时间设置有效期。推荐设置为服务器时间"></a>获取本地时间设置有效期。推荐设置为服务器时间</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">_wrapData</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;<span class="attr">data</span>: data, <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="然后先获取本地数据"><a href="#然后先获取本地数据" class="headerlink" title="然后先获取本地数据"></a>然后先获取本地数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取本地数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">url</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">fetchLocalData</span>(<span class="params">url</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    AsyncStorage.getItem(url, <span class="function">(<span class="params">error, result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          resolve(<span class="built_in">JSON</span>.parse(result));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">          <span class="built_in">console</span>.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要url去比对本地缓存中是否有数据，保存类型为字符串string类型，方便我们调用后用转成object使用</p><h2 id="获取网络数据"><a href="#获取网络数据" class="headerlink" title="获取网络数据"></a>获取网络数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取网络数据</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="variable">url</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="variable">flag</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@returns <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="title">fetchNetData</span>(<span class="params">url, flag</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (flag !== FLAG_STORAGE.flag_trending) &#123;</span><br><span class="line">       fetch(url)</span><br><span class="line">         .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">             <span class="keyword">return</span> response.json();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Network response was not ok.&#x27;</span>);</span><br><span class="line">         &#125;)</span><br><span class="line">         .then(<span class="function">(<span class="params">responseData</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.saveData(url, responseData)</span><br><span class="line">           resolve(responseData);</span><br><span class="line">         &#125;)</span><br><span class="line">         .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">           reject(error);</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">new</span> Trending().fetchTrending(url)</span><br><span class="line">         .then(<span class="function"><span class="params">items</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (!items) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;responseData is null&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">this</span>.saveData(url, items);</span><br><span class="line">           resolve(items);</span><br><span class="line">         &#125;)</span><br><span class="line">         .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">           reject(error);</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="最后我们封装fetch请求"><a href="#最后我们封装fetch请求" class="headerlink" title="最后我们封装fetch请求"></a>最后我们封装fetch请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">DataStore</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取数据，优先获取本地数据，如果无本地数据或本地数据过期则获取网络数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="variable">url</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="variable">flag</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">fetchData</span>(<span class="params">url, flag</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.fetchLocalData(url).then(<span class="function">(<span class="params">wrapData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (wrapData &amp;&amp; DataStore.checkTimestampValid(wrapData.timestamp)) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;读取本地缓存&#x27;</span>,wrapData)</span><br><span class="line">          resolve(wrapData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//本地没有就获取网络请求</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;url&#x27;</span>,url,<span class="string">&#x27;flag&#x27;</span>,flag)</span><br><span class="line">          <span class="built_in">this</span>.fetchNetData(url, flag).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="built_in">this</span>._wrapData(data));</span><br><span class="line">          &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fetchNetData(url, flag).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="built_in">this</span>._wrapData(data));</span><br><span class="line">        &#125;).catch((<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间有效期的检测"><a href="#时间有效期的检测" class="headerlink" title="时间有效期的检测"></a>时间有效期的检测</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 检查timestamp是否在有效期内</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>timestamp 项目更新时间</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span> </span>true 不需要更新,false需要更新</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">checkTimestampValid</span>(<span class="params">timestamp</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> currentDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> targetDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    targetDate.setTime(timestamp);</span><br><span class="line">    <span class="keyword">if</span> (currentDate.getMonth() !== targetDate.getMonth()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (currentDate.getDate() !== targetDate.getDate()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (currentDate.getHours() - targetDate.getHours() &gt; <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//有效期4个小时</span></span><br><span class="line">    <span class="comment">// if (currentDate.getMinutes() - targetDate.getMinutes() &gt; 1)return false;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/109DBFA9DD749C2BBA15F11B81313CF4.gif"                      alt=""                ></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a class="link"   href="http://www.devio.org/2016/09/05/React-Native%E4%B9%8BAsyncStorage%E5%AD%98%E5%82%A8key%E7%AE%A1%E7%90%86%E5%B0%8F%E6%8A%80%E5%B7%A7/" >贾鹏辉的技术博客官网<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.csdn.net/qq_34161388/article/details/78044095" >参考一<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactNative 中使用redux和logger,thunk</title>
      <link href="2019/03/28/ReactNative_redux/"/>
      <url>2019/03/28/ReactNative_redux/</url>
      
        <content type="html"><![CDATA[<p>项目中需要用到redux，今天就用加班时间来重新复习下学习一下；之前发表过react的redux；<br><a id="more"></a></p><h2 id="先看下具体流程我们一一介绍"><a href="#先看下具体流程我们一一介绍" class="headerlink" title="先看下具体流程我们一一介绍"></a>先看下具体流程我们一一介绍</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190327192953.png"                      alt=""                ></p><h2 id="了解下redux特性"><a href="#了解下redux特性" class="headerlink" title="了解下redux特性"></a>了解下redux特性</h2><ol><li>单一数据源： 整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</li><li>State 是只读的：唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</li><li>使用纯函数来执行修改：为了描述 action 如何改变 state tree ，你需要编写 reducers。</li><li>预见性：所有的用户的行为都是你提前定义好的。</li><li>统一管理state：所有的状态都在一个store中分配管理。</li></ol><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol><li>用户（操作view）发出action，发出的方式用dispatch方法；</li><li>然后store调用redurce，并传入2个参数（一个当前state，一个收到的action），reducer会返回新的state，如果有middleware，store会将当前state和收到的action传递给middleware，middleware会调用reducer，返回新的state；</li><li>state一旦有变化，store就会监听到，来更新View；</li></ol><h2 id="Redux与Flux的区别"><a href="#Redux与Flux的区别" class="headerlink" title="Redux与Flux的区别"></a>Redux与Flux的区别</h2><p>Redux是Flux思想的一种实现，同时又在其基础上做了改进。Redux秉承了Flux单向数据流、Store是唯一的数据源的思想。</p><ol><li>Redux中没有Dispatcher: 它使用Store的Store.dispatch0方法来把action传给Store, 由于所有的action处理都会经过这个Store.dispatch0方法，所以在Redux中很容易实现Middleware机制。</li><li>Middleware可以让你在reducer执行前与执行后进行拦截并插入代码，来达到操作action和Store的目的，这样-来就很容易实现灵活的日志打印、错误收集、API请求、路由等操作。</li><li>Redux只有一个Store: Flux中允许有多个Store, 但是Redux中只允许有- 个，相较于多个Store的Flux,一个Store更加清晰，井易于管理;<h2 id="Redux有那几部分构成"><a href="#Redux有那几部分构成" class="headerlink" title="Redux有那几部分构成?"></a>Redux有那几部分构成?</h2></li><li>action: action就是一 个描述发生什么的对象;</li><li>reducer: 形式为(state, action) =&gt; state的纯函数，功能是根据action 修改state将其转变成下一个state;</li><li>store: 用于存储state, 你可以把它看成-个容器，整个应用只能有一个store<h2 id="实战部分"><a href="#实战部分" class="headerlink" title="实战部分"></a>实战部分</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190327195155.png"                      alt=""                ><h3 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建store</h3></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="comment">//异步操作</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">&#x27;redux-logger&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&#x27;../reducers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">initialState</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createStore(</span><br><span class="line">        rootReducer,</span><br><span class="line">        initialState,</span><br><span class="line">        compose(applyMiddleware(thunk, createLogger))</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = configureStore();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><h3 id="首先最外层导入store"><a href="#首先最外层导入store" class="headerlink" title="首先最外层导入store"></a>首先最外层导入store</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190327200154.png"                      alt=""                ></p><h3 id="需要辅助工具"><a href="#需要辅助工具" class="headerlink" title="需要辅助工具"></a>需要辅助工具</h3><p>redux-logger(这个会打印你的所有 state和 action变化 , 建议使用)<br>redux-thunk(中间件, 用于异步操作)<br>react-navigation(如果你要做多个页面跳转就install)</p><p> 针对不同功能点可以设置不同的reducer, 拆分 reducer 对一个不同的操作, 然后用combineReducers 合并所有的 reducer 到 rootReducer<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190327200429.png"                      alt=""                ></p><h3 id="用户触发action"><a href="#用户触发action" class="headerlink" title="用户触发action"></a>用户触发action</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text, TextInput, Image, TouchableOpacity &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> loginAction <span class="keyword">from</span> <span class="string">&quot;../actions/LoginActions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> themeAction <span class="keyword">from</span> <span class="string">&quot;../actions/ThemeActions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">&quot;react-navigation&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MainPage <span class="keyword">from</span> <span class="string">&quot;./MainPage&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    title: <span class="string">&quot;LoginPage&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextProps.status === <span class="string">&quot;登录成功&quot;</span> &amp;&amp; nextProps.isSuccess) &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.navigation.push(<span class="string">&quot;Main&quot;</span>, &#123; <span class="attr">user</span>: nextProps.user &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; LoginAction &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.props);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">backgroundColor</span>: <span class="string">&quot;#fff&quot;</span>, <span class="attr">alignItems</span>: <span class="string">&quot;center&quot;</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;TouchableOpacity</span><br><span class="line">          style=&#123;&#123; <span class="attr">backgroundColor</span>: <span class="string">&quot;#cdcdcd&quot;</span>, <span class="attr">marginTop</span>: <span class="number">200</span> &#125;&#125;</span><br><span class="line">          onPress=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.props.dispatch(loginAction.requireLogin());</span><br><span class="line">            <span class="comment">// LoginAction()</span></span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">        ......</span><br><span class="line"><span class="comment">// apStateToProps(state) 把 reducer 里改变过的 state 通过 props 传递过来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    status: state.LoginReducer.data.status,</span><br><span class="line">    isSuccess: state.LoginReducer.data.isSuccess,</span><br><span class="line">    user: state.LoginReducer.data.user,</span><br><span class="line">    color: state.themeReducer.color</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动绑定 action creators到 dispatch() 函数 这个函数一样 把你要 dispatch 的 action 当做 props 传递过来  如果这么写 上面的触发 action 的时候就不要 this.prop.dispatch(xxxAction) 了 , 可以直接写 this,props.LoginAction</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    LoginAction: bindActionCreators(loginAction.requireLogin, dispatch)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect 连接组件与 store ,任何时候只要 store 发生改变, mapStateToProps 都会被调用, 函数接收两个参数 第一个参数里有两个参数 分别是mapStateToProps  matchDispatchToProps</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(LoginPage);</span><br></pre></td></tr></table></figure><h3 id="执行action方法"><a href="#执行action方法" class="headerlink" title="执行action方法"></a>执行action方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">&#x27;../constants/LoginTypes&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loginRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;../API/loginRequest&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login_out</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: types.LOGIN_IN_OUT,</span><br><span class="line">        data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步的Action 需要返回的是一个 function 在 createStore 时由middleWare 做处理  普通的action 直接返回纯对象即可</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">requireLogin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loginRequest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="执行apiaction-js中的方法，store-》reducer"><a href="#执行apiaction-js中的方法，store-》reducer" class="headerlink" title="执行apiaction.js中的方法，store-》reducer"></a>执行apiaction.js中的方法，store-》reducer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> *<span class="keyword">as</span> loginActions <span class="keyword">from</span> <span class="string">&#x27;../actions/LoginActions&#x27;</span>;</span><br><span class="line"><span class="comment">// 异步的网络请求方法 在这里再进行 dispatch Action</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loginRequest</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(loginActions.login_doing(doingData));</span><br><span class="line">        <span class="keyword">let</span> result = fetch(url)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                dispatch(loginActions.login_done(doneData));</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                dispatch(loginActions.login_err(errData));</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过reducer返回新的state"><a href="#通过reducer返回新的state" class="headerlink" title="通过reducer返回新的state"></a>通过reducer返回新的state</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">loginIn</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(state.type,action);</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> types.LOGIN_IN_DOING:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                data: action.data</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="最后重新根据store中的state更新View"><a href="#最后重新根据store中的state更新View" class="headerlink" title="最后重新根据store中的state更新View"></a>最后重新根据store中的state更新View</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text, TextInput, Image, TouchableOpacity &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> loginAction <span class="keyword">from</span> <span class="string">&quot;../actions/LoginActions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> themeAction <span class="keyword">from</span> <span class="string">&quot;../actions/ThemeActions&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">&quot;react-navigation&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MainPage <span class="keyword">from</span> <span class="string">&quot;./MainPage&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    title: <span class="string">&quot;LoginPage&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextProps.status === <span class="string">&quot;登录成功&quot;</span> &amp;&amp; nextProps.isSuccess) &#123;</span><br><span class="line">      <span class="built_in">this</span>.props.navigation.push(<span class="string">&quot;Main&quot;</span>, &#123; <span class="attr">user</span>: nextProps.user &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 这个函数最正确的名字应该叫 mapStateToProps(state) 把 reducer 里改变过的 state 通过 props 传递过来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    status: state.LoginReducer.data.status,</span><br><span class="line">    isSuccess: state.LoginReducer.data.isSuccess,</span><br><span class="line">    user: state.LoginReducer.data.user,</span><br><span class="line">    color: state.themeReducer.color</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动绑定 action creators到 dispatch() 函数 这个函数一样 把你要 dispatch 的 action 当做 props 传递过来  如果这么写 上面的触发 action 的时候就不要 this.prop.dispatch(xxxAction) 了 , 可以直接写 this,props.LoginAction</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    LoginAction: bindActionCreators(loginAction.requireLogin, dispatch)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect 连接组件与 store ,任何时候只要 store 发生改变, mapStateToProps 都会被调用, 函数接收两个参数 第一个参数里有两个参数 分别是mapStateToProps  matchDispatchToProps</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(LoginPage);</span><br><span class="line"><span class="comment">//export default connect(select)(LoginPage)</span></span><br></pre></td></tr></table></figure><h1 id="讲完再送一张图理解下整个过程"><a href="#讲完再送一张图理解下整个过程" class="headerlink" title="讲完再送一张图理解下整个过程"></a>讲完再送一张图理解下整个过程</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/16662dccc537af99.gif"                      alt=""                ></p><p><a class="link"   href="https://github.com/MarioGogogo/ReactNative_redux_demo" >Github项目地址<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多种跨域解决方案</title>
      <link href="2019/03/08/%E5%A4%9A%E7%A7%8D%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2019/03/08/%E5%A4%9A%E7%A7%8D%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>同源策略？<br>如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。<br><a id="more"></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308092712.png"                      alt=""                ></p><h4 id="为什么会有跨域这个问题出现"><a href="#为什么会有跨域这个问题出现" class="headerlink" title="为什么会有跨域这个问题出现"></a>为什么会有跨域这个问题出现</h4><p>因为浏览器的同源策略导致了跨域，就是浏览器在搞事情<br>浏览器为什么要搞事情？就是不想给好日子我们过？对于这样的质问，浏览器甩锅道：“同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。”</p><ol><li>cookie LocalStorage只支持同源下</li><li>Dom元素也同源策略 iframe （iframe里弄一个百度账号）</li><li>ajax不支持跨域</li></ol><h4 id="实现跨域"><a href="#实现跨域" class="headerlink" title="实现跨域"></a>实现跨域</h4><p>前端放一个服务器，后台放一个服务器需要通信要实现跨域</p><ol><li>jsonp （只支持get）</li><li>cors</li><li>postMessage</li><li>document.domain</li><li>window.name</li><li>location.hash</li><li>http-proxy</li><li>nginx</li><li>websocket</li></ol><h3 id="一、-通过jsonp跨域"><a href="#一、-通过jsonp跨域" class="headerlink" title="一、 通过jsonp跨域"></a>一、 通过jsonp跨域</h3><p>jsonp<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">// 百度：https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=h&amp;cb=show</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!--show(&#123; <span class="attr">q</span>: <span class="string">&quot;h&quot;</span>, <span class="attr">p</span>: <span class="literal">false</span>, <span class="attr">s</span>: [<span class="string">&quot;haha新歌&quot;</span>, <span class="string">&quot;虎牙&quot;</span>, <span class="string">&quot;花瓣&quot;</span>, <span class="string">&quot;海贼王&quot;</span>, <span class="string">&quot;虎牙直播&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="string">&quot;虎扑&quot;</span>, <span class="string">&quot;汇率&quot;</span>, <span class="string">&quot;花瓣网&quot;</span>, <span class="string">&quot;华为商城&quot;</span>] &#125;);--&gt;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">   <span class="comment">//或者</span></span><br><span class="line">   &lt;script src=<span class="string">&quot;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=h&amp;cb=show&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308094614.png"                      alt=""                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单封装jsonp</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">     url,</span></span></span><br><span class="line"><span class="function"><span class="params">     params,</span></span></span><br><span class="line"><span class="function"><span class="params">     cb</span></span></span><br><span class="line"><span class="function"><span class="params">   &#125;</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">       <span class="built_in">window</span>[cb] = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">         resolve(data)</span><br><span class="line">        <span class="built_in">window</span>.document.head.removeChild(script);</span><br><span class="line">       &#125;</span><br><span class="line">       params = &#123;</span><br><span class="line">         ...params,</span><br><span class="line">         cb</span><br><span class="line">       &#125; <span class="comment">//wd=h&amp;cb=show</span></span><br><span class="line">       <span class="keyword">let</span> arr = []</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">         arr.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     </span><br><span class="line">       script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arr.join(<span class="string">&#x27;&amp;&#x27;</span>)&#125;</span>`</span></span><br><span class="line">       <span class="built_in">console</span>.log(script.src);</span><br><span class="line">       <span class="built_in">window</span>.document.head.appendChild(script);</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//缺点只能get，可以xss攻击</span></span><br><span class="line">   <span class="comment">//调用</span></span><br><span class="line">   jsonp(&#123;</span><br><span class="line">     url: <span class="string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su&#x27;</span>,</span><br><span class="line">     params: &#123;</span><br><span class="line">       wd: <span class="string">&#x27;h&#x27;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     cb:<span class="string">&#x27;show&#x27;</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">      </span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308113154.png"                      alt=""                ></p><h3 id="二、-跨域资源共享（CORS）"><a href="#二、-跨域资源共享（CORS）" class="headerlink" title="二、 跨域资源共享（CORS）"></a>二、 跨域资源共享（CORS）</h3><p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。</p><p>需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。</p><p>目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。</p><p>如果只是单纯的3000端口请求4000端口<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308123825.png"                      alt=""                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/getData&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  res.end(<span class="string">&#x27;you look 4000&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="string">&#x27;4000&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;启动4000&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//===============================</span></span><br><span class="line"><span class="keyword">let</span> express  = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line"></span><br><span class="line">app.listen(<span class="string">&#x27;3000&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;启动&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308123704.png"                      alt=""                ></p><p><strong>请求头的数据</strong><br>请求发过来了被浏览器屏蔽了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308124223.png"                      alt=""                ><br>解决：<br>server2.js<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>白名单</span><br><span class="line">let whitelist = [<span class="string">&#x27;http://localhost:3000&#x27;</span>]</span><br><span class="line">app.use(<span class="keyword">function</span>(req,res,<span class="keyword">next</span>)&#123;</span><br><span class="line">   let origin = req.headers.origin;</span><br><span class="line">   <span class="keyword">if</span>(whitelist.includes(origin))&#123;</span><br><span class="line">     <span class="regexp">//</span>设置哪个源可以访问我</span><br><span class="line">     res.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/7D07FD31-6B85-4C92-8094-855A63D26D3C.png"                      alt=""                ><br>其他请求方式<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308125233.png"                      alt=""                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;name&#x27;</span>);</span><br></pre></td></tr></table></figure><p>还可能出现这个问题<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308125906.png"                      alt=""                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置哪个源可以访问我</span></span><br><span class="line"> res.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class="line"> <span class="comment">//设置请求头</span></span><br><span class="line"> res.setHeader(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>);</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Access-Control-Max-Age&#x27;</span>, <span class="number">6</span>);</span><br><span class="line"> <span class="keyword">if</span> (req.method === <span class="string">&quot;OPTIONS&quot;</span>) &#123;</span><br><span class="line">    res.end(); <span class="comment">//PUT请求不做任何处理</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以携带cookie</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308131212.png"                      alt=""                ></p><p>获取某个头<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308133332.png"                      alt=""                ></p><p>完整代码<br>html<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line">    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">    xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">&quot;cook=chan&quot;</span>;</span><br><span class="line">    xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://localhost:4000/getData&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    xhr.setRequestHeader(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;chan&#x27;</span>)</span><br><span class="line">    <span class="comment">// xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;);</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line"><span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.readyState == <span class="number">304</span>) &#123;</span><br><span class="line">        onsole.log(xhr.responseText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br></pre></td></tr></table></figure><br>server2.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="comment">//白名单</span></span><br><span class="line"><span class="keyword">let</span> whitelist = [<span class="string">&#x27;http://localhost:3000&#x27;</span>]</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers);</span><br><span class="line">   <span class="keyword">let</span> origin = req.headers.origin;</span><br><span class="line">   <span class="keyword">if</span>(whitelist.includes(origin))&#123;</span><br><span class="line">     <span class="comment">//设置哪个源可以访问我</span></span><br><span class="line">    <span class="comment">//  res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &#x27;*&#x27;); //任务接口</span></span><br><span class="line">     res.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&#x27;*&#x27;</span>); <span class="comment">//任务接口</span></span><br><span class="line">     res.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class="line">     <span class="comment">//设置哪个头访问我</span></span><br><span class="line">     res.setHeader(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">      <span class="comment">//允许哪个方法访问我</span></span><br><span class="line">      res.setHeader(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;PUT&#x27;</span>);</span><br><span class="line">      <span class="comment">// 允许携带cookie (如果Allow-Origin带*号就不能设置这个)</span></span><br><span class="line">      res.setHeader(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">      <span class="comment">// 预检存活时间</span></span><br><span class="line">      res.setHeader(<span class="string">&#x27;Access-Control-Max-Age&#x27;</span>, <span class="number">6</span>);</span><br><span class="line">      <span class="comment">// 允许前端获取某个头(返回的头)</span></span><br><span class="line">      res.setHeader(<span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span>, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">     <span class="keyword">if</span> (req.method === <span class="string">&quot;OPTIONS&quot;</span>) &#123;</span><br><span class="line">        res.end(); <span class="comment">//PUT请求不做任何处理</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   next();</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/getData&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.setHeader(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;chan&#x27;</span>) <span class="comment">//返回某个头</span></span><br><span class="line">  res.end(<span class="string">&#x27;you get 4000&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.put(<span class="string">&#x27;/getData&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  res.end(<span class="string">&#x27;you look 4000&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="string">&#x27;4000&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;启动4000&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h3 id="三、-postMessage跨域"><a href="#三、-postMessage跨域" class="headerlink" title="三、 postMessage跨域"></a>三、 postMessage跨域</h3><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：<br>a.） 页面和其打开的新窗口的数据传递<br>b.） 多窗口之间消息传递<br>c.） 页面与嵌套的iframe消息传递<br>d.） 上面三个场景的跨域数据传递</p><p>用法：<code>postMessage(data,origin)</code>方法接受两个参数</p><ol><li>data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</li><li>origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。</li></ol><p>a.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;frame&quot;</span> src=<span class="string">&quot;http://localhost:4000/b.html&quot;</span> frameborder=<span class="string">&quot;0&quot;</span> onload=<span class="string">&quot;sayb()&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">&quot;frame&quot;</span>);</span><br><span class="line">      frame.contentWindow.postMessage(<span class="string">&#x27;b页面你好&#x27;</span>, <span class="string">&#x27;http://localhost:4000&#x27;</span>);</span><br><span class="line">      <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>b.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   window.onmessage &#x3D; function(e) &#123;</span><br><span class="line">     console.log(e.data);</span><br><span class="line">     console.log(e);</span><br><span class="line">     e.source.postMessage(&#39;a.html你&#39;,e.origin)</span><br><span class="line">   &#125;</span><br><span class="line">     &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>e的参数<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308140704.png"                      alt=""                ></p></blockquote><h3 id="四、-document-domain-iframe跨域"><a href="#四、-document-domain-iframe跨域" class="headerlink" title="四、 document.domain+ iframe跨域"></a>四、 document.domain+ iframe跨域</h3><p>此方案仅限主域相同，子域不同的跨域应用场景。<br>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。<br>域名一级域名  二级域名</p><ol><li><a class="link"   href="http://www.baidu.com" >www.baidu.com<i class="fas fa-external-link-alt"></i></a></li><li>video.baidu.com<br>a.html<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:3000/b.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">&#x27;domain.com&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> user = <span class="string">&#x27;admin&#x27;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>b.html<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">&#x27;domain.com&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取父窗口中变量</span></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;get js data from parent ---&gt; &#x27;</span> + <span class="built_in">window</span>.parent.user);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、-WebSocket协议跨域"><a href="#五、-WebSocket协议跨域" class="headerlink" title="五、 WebSocket协议跨域"></a>五、 WebSocket协议跨域</h3>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。<br>原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。<br>a.html<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高级api 不兼容socket.io;</span></span><br><span class="line"> <span class="comment">// (一般不使用)</span></span><br><span class="line"> <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">&#x27;ws://localhost:3000&#x27;</span>);</span><br><span class="line"> socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   socket.send(<span class="string">&#x27;我来跨域了&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> socket.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="built_in">console</span>.log(e.data);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>server.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> app       = express();</span><br><span class="line"><span class="keyword">let</span> WebSocket = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> wss       = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">3000</span>&#125;);</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">&#x27;connection&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">   ws.on(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">      <span class="comment">//发送</span></span><br><span class="line">      ws.send(<span class="string">&#x27;接受到消息了哈哈&#x27;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308162154.png"                      alt=""                ></li></ol><h3 id="六、-location-hash-iframe跨域（很low）"><a href="#六、-location-hash-iframe跨域（很low）" class="headerlink" title="六、 location.hash + iframe跨域（很low）"></a>六、 location.hash + iframe跨域（很low）</h3><p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。<br>a和b是同域 <a class="link"   href="http://localhost:3000" >http://localhost:3000<i class="fas fa-external-link-alt"></i></a><br>c是独立的域 <a class="link"   href="http://localhost:4000" >http://localhost:4000<i class="fas fa-external-link-alt"></i></a><br>具体实现：A域：a.html -&gt; c域：c.html -&gt; b域：b.html，a给c传一个hash值，c收到hash值后，c把hash值传递给b，b将结果放到a的hash值中</p><p>a.html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:4000/c.html#abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>c.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="built_in">console</span>.log(location.hash); <span class="comment">//#abc</span></span><br><span class="line">        <span class="keyword">let</span> frame = <span class="built_in">document</span>.createElement(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line">        frame.src = <span class="string">&quot;http://localhost:3000/b.html#youcanbb&quot;</span></span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(frame)</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>b.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//爸爸的爸爸</span></span><br><span class="line">  <span class="built_in">window</span>.parent.parent.location.hash = location.hash;</span><br><span class="line">  <span class="built_in">console</span>.log(location.hash);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308160308.png"                      alt=""                ></p><h3 id="七、-window-name-iframe跨域"><a href="#七、-window-name-iframe跨域" class="headerlink" title="七、 window.name + iframe跨域"></a>七、 window.name + iframe跨域</h3><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）</p><p><strong>栗子</strong><br>a和b是同域 <a class="link"   href="http://localhost:3000" >http://localhost:3000<i class="fas fa-external-link-alt"></i></a><br>c是独立的域 <a class="link"   href="http://localhost:4000" >http://localhost:4000<i class="fas fa-external-link-alt"></i></a></p><p>a获取c的数据<br>a先引用c  c把值放到<code>window.name</code>,把a引用的地址改到b<br>a.html<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;frame&quot;</span> src=<span class="string">&quot;http://localhost:4000/c.html&quot;</span> frameborder=<span class="string">&quot;0&quot;</span> onload=<span class="string">&quot;load()&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (first) &#123;</span><br><span class="line">        <span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">&quot;frame&quot;</span>);</span><br><span class="line">        frame.src = <span class="string">&quot;http://localhost:3000/b.html&quot;</span></span><br><span class="line">        first = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(frame.contentWindow.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><br>b.html空<br>c.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.name=<span class="string">&quot;我是c&quot;</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190308153003.png"                      alt=""                ></p><h3 id="八、-nginx代理跨域"><a href="#八、-nginx代理跨域" class="headerlink" title="八、 nginx代理跨域"></a>八、 nginx代理跨域</h3><p>1、 nginx配置解决iconfont跨域<br>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  add_header Access-Control-Allow-Origin *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 nginx反向代理接口跨域<br>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p><p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><p>nginx具体配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#proxy服务器</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">81</span>;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http:<span class="comment">//www.domain2.com:8080;  #反向代理</span></span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header Access-Control-Allow-Origin http:<span class="comment">//www.domain1.com;  #当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.domain1.com:81/?user=admin&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>Nodejs后台：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;Set-Cookie&#x27;</span>: <span class="string">&#x27;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#x27;</span>   <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>今天工作不是很多，用了一天时间总结了下。努力！最后祝天下女人节日快乐O(∩_∩)O哈哈~</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的简单动画</title>
      <link href="2019/03/04/Vue%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E5%8A%A8%E7%94%BB/"/>
      <url>2019/03/04/Vue%E4%B8%AD%E7%9A%84%E7%AE%80%E5%8D%95%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>一个App如果有好的动画效果可以为程序锦上添花，给用户留下非常好的印象；今天来学习下Vue的动画我们先重学<code>transition</code>；<br><a id="more"></a><br><strong>首先看下animation与transition的区别：</strong><br>其主要区别在于：transition需要触发一个事件才会随着时间改变其CSS属性；animation在不需要触发任何事件的情况下，也可以显式的随时间变化来改变元素CSS属性，达到一种动画的效果<br>1）动画不需要事件触发，过渡需要。<br>2）过渡只有一组（两个：开始-结束） 关键帧，动画可以设置多个。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/vue-transition-1.gif"                      alt=""                ></p><h4 id="先来看个举个简单栗子"><a href="#先来看个举个简单栗子" class="headerlink" title="先来看个举个简单栗子"></a>先来看个举个简单栗子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;img width=<span class="string">&quot;25%&quot;</span> src=<span class="string">&quot;./assets/logo.png&quot;</span> /&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;</span><br><span class="line">      &lt;span v-<span class="keyword">if</span>=<span class="string">&quot;isShowing&quot;</span>&gt;Hide child&lt;<span class="regexp">/span&gt; &lt;span v-else&gt;Show child&lt;/</span>span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;app-child v-<span class="keyword">if</span>=<span class="string">&quot;isShowing&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal&quot;</span>&gt;</span><br><span class="line">      &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;Close&lt;/button&gt;</span><br><span class="line">    &lt;/app-child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./components/child&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    appChild: Child</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShowing: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">toggleShow</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.isShowing = !<span class="built_in">this</span>.isShowing;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190307124523.png"                      alt=""                ><br>demo中我们可以看到可以正常工作但是效果太僵硬</p><h4 id="Vue中transition"><a href="#Vue中transition" class="headerlink" title="Vue中transition"></a>Vue中transition</h4><p>Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p><ul><li>条件渲染 (使用 v-if)</li><li>条件展示 (使用 v-show)</li><li>动态组件</li><li>组件根节点</li></ul><p>在Vue中有一个<code>&lt;transition&gt;</code>元素代表一个<code>盒子</code>，在这个盒子里我们处理元素或者组件上的动画效果。</p><p><code>&lt;transition&gt;</code>是Vue已经封装好的一个组件，可以给任何元素和组件添加进入或离开过渡效果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;transition name=<span class="string">&quot;fade&quot;</span>&gt;</span><br><span class="line">      &lt;app-child v-<span class="keyword">if</span>=<span class="string">&quot;isShowing&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;Close&lt;/button&gt;</span><br><span class="line">      &lt;/app-child&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><br>现在，我们可以使用现成的 <code>&lt;transition&gt;</code> 组件。过渡钩子会添加 v- 前缀，我们可以在 CSS 中使用。其中 </p><ol><li><code>enter/leave</code> 定义动画开始第一帧的位置，</li><li><code>enter-active/leave-active</code> 定义动画运行阶段—— 你需要把动画属性放在这里 </li><li><code>enter-to/leave-to</code> 指定元素在最后一帧上的位置。</li></ol><p>我们不建议使用默认的<code>v-</code>前缀，正如你看到的我使用的是了一个 <code>name</code> 属性: <code>name=&quot;fade&quot;</code> 。属性名必须与动画效果名相近。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190126001322.png"                      alt=""                ></p><p>让我们创建下css样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.25s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我将 <code>.fade-enter</code>和 <code>.fade-leave-to</code>属性设置为 opacity: 0 。这是动画的初始和结束位置，载入时的初始状态，卸载时的结束状态。你可能认为 <code>.fade-enter-to</code> 和 <code>.fade-leave</code> 应该设置 opacity: 1 。但是没有必要，因为它是组件的默认状态，所以这将是多余的。CSS 过渡和动画如果没有设置，总是会使用默认状态。</p><p>我们再优化下如果焦点都放在弹窗上，则背景是否需要虚化，如果把背景虚化则不能放在transition组件上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;[isShowing ? blurClass : &#x27;&#x27;, bkClass]&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;</span><br><span class="line">        &lt;span v-<span class="keyword">if</span>=<span class="string">&quot;isShowing&quot;</span>&gt;Hide child&lt;<span class="regexp">/span&gt; &lt;span v-else&gt;Show child&lt;/</span>span&gt;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;transition name=<span class="string">&quot;fade&quot;</span>&gt;</span><br><span class="line">      &lt;app-child v-<span class="keyword">if</span>=<span class="string">&quot;isShowing&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;Close&lt;/button&gt;</span><br><span class="line">      &lt;/app-child&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./components/child&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    appChild: Child</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isShowing: <span class="literal">false</span>,</span><br><span class="line">      bkClass: <span class="string">&quot;bk&quot;</span>,</span><br><span class="line">      blurClass: <span class="string">&quot;blur&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">toggleShow</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.isShowing = !<span class="built_in">this</span>.isShowing;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.fade-enter-active,</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">  transition: opacity 2s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fade-enter,</span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">  opacity: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.bk &#123;</span><br><span class="line">  transition: all 2s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blur &#123;</span><br><span class="line">  filter: blur(2px);</span><br><span class="line">  opacity: <span class="number">0.4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h4><p>这里需要注意的一点是，Vue只能对<transition>中的一个元素进行动效处理。相反，在任何给定的实例中，<code>只能将&lt;transition&gt;中的一个元素插入到DOM中</code>。比如下同这个示例，在Vue中无法正常的工作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">   &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;[isShowing ? blurClass : &#x27;&#x27;, bkClass]&quot;</span>&gt;</span><br><span class="line">     &lt;img width=<span class="string">&quot;25%&quot;</span> src=<span class="string">&quot;./assets/logo.png&quot;</span> /&gt;</span><br><span class="line">     &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;</span><br><span class="line">       &lt;span v-<span class="keyword">if</span>=<span class="string">&quot;isShowing&quot;</span>&gt;Hide child&lt;<span class="regexp">/span&gt; &lt;span v-else&gt;Show child&lt;/</span>span&gt;</span><br><span class="line">     &lt;/button&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;transition name=<span class="string">&quot;fade&quot;</span>&gt;</span><br><span class="line">     &lt;app-child v-<span class="keyword">if</span>=<span class="string">&quot;isShowing&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal&quot;</span> key=<span class="string">&quot;info&quot;</span>&gt;</span><br><span class="line">       &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;Close&lt;/button&gt;</span><br><span class="line">     &lt;/app-child&gt;</span><br><span class="line">     &lt;app-child v-<span class="keyword">if</span>=<span class="string">&quot;isShowing&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal&quot;</span> key=<span class="string">&quot;error&quot;</span>&gt;</span><br><span class="line">       &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;Close&lt;/button&gt;</span><br><span class="line">     &lt;/app-child&gt;</span><br><span class="line">   &lt;/transition&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190307134314.png"                      alt=""                ></p><p>在Vue中<transition>中有多个元素需要有动效效果时，需要使用<transition-group>来替代，不然在Vue中则会报错。</p><p>另外，在<transition>中有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，给在 <transition> 组件中的多个元素设置 key 是一个更好的实践。</p><p>在Vue中提供了两种过渡模式来解决一个离开过渡的时候另一个开始进入过渡。其实这也是<transition>的默认行为，即<code>进入和离开同时发生的问题</code></p><ol><li>in-out：新元素先进行过渡，完成之后当前元素过渡离开</li><li>out-in：当前元素先进行过渡，完成之后新元素过渡进入</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">      name=<span class="string">&quot;fade&quot;</span></span><br><span class="line">      mode=<span class="string">&quot;out-in&quot;</span></span><br><span class="line">      appear</span><br><span class="line">      appear-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;custom-appear-class&quot;</span></span><br><span class="line">      appear-to-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;custom-appear-to-class&quot;</span></span><br><span class="line">      appear-active-<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;custom-appear-active-class&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;app-child v-<span class="keyword">if</span>=<span class="string">&quot;isShowing&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal&quot;</span> key=<span class="string">&quot;info&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;显示&lt;/button&gt;</span><br><span class="line">      &lt;/app-child&gt;</span><br><span class="line">      &lt;app-child v-<span class="keyword">else</span>=<span class="string">&quot;!isShowing&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;modal&quot;</span> key=<span class="string">&quot;error&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;toggleShow&quot;</span>&gt;离开&lt;/button&gt;</span><br><span class="line">      &lt;/app-child&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br></pre></td></tr></table></figure><p>css样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.custom-appear-class</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>); //进场效果</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.custom-appear-active-class</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/ll62o3nzz7?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h4 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;list-demo&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">&quot;add&quot;</span>&gt;Add&lt;/button&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">&quot;remove&quot;</span>&gt;Remove&lt;/button&gt;</span><br><span class="line">  &lt;transition-group name=<span class="string">&quot;list&quot;</span> tag=<span class="string">&quot;p&quot;</span>&gt;</span><br><span class="line">    &lt;span v-<span class="keyword">for</span>=<span class="string">&quot;item in items&quot;</span> v-bind:key=<span class="string">&quot;item&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/transition-group&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#list-demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">    nextNum: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    randomIndex: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="built_in">this</span>.items.length)</span><br><span class="line">    &#125;,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.items.splice(<span class="built_in">this</span>.randomIndex(), <span class="number">0</span>, <span class="built_in">this</span>.nextNum++)</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.items.splice(<span class="built_in">this</span>.randomIndex(), <span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-enter-active</span>, <span class="selector-class">.list-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-enter</span>, <span class="selector-class">.list-leave-to</span></span><br><span class="line"><span class="comment">/* .list-leave-active for below version 2.1.8 */</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a class="link"   href="https://www.w3cplus.com/vue/vue-instances-and-life-cycles.html" >大漠<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的vuex</title>
      <link href="2019/03/03/Vue%E4%B8%AD%E7%9A%84vuex/"/>
      <url>2019/03/03/Vue%E4%B8%AD%E7%9A%84vuex/</url>
      
        <content type="html"><![CDATA[<p>当我们使用 Vue.js 来开发一个单页应用时，经常会遇到一些组件间共享的数据或状态，或是需要通过 props 深层传递的一些数据。在应用规模较小的时候，我们会使用 props、事件等常用的父子组件的组件间通信方法，或者是通过事件总线来进行任意两个组件的通信。但是当应用逐渐复杂后，问题就开始出现了，这样的通信方式会导致数据流异常地混乱。<br><a id="more"></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190305102407.png"                      alt=""                ><br>然后就出现了一个神器<code>vuex</code></p><h4 id="什么是vuex呢？"><a href="#什么是vuex呢？" class="headerlink" title="什么是vuex呢？"></a>什么是vuex呢？</h4><p>Vuex 类似 Redux 的状态管理器，用来管理Vue的所有组件状态。</p><blockquote><p>大白话：多个组件之间共用一份数据</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190305101357.png"                      alt=""                ></p><h4 id="vuex的核心"><a href="#vuex的核心" class="headerlink" title="vuex的核心"></a>vuex的核心</h4><p>vuex由以下几部分组成：</p><ol><li>state</li><li>mutations</li><li>getters</li><li>actions</li><li>modules</li></ol><h4 id="开始写来个最简单的demo"><a href="#开始写来个最简单的demo" class="headerlink" title="开始写来个最简单的demo"></a>开始写来个最简单的demo</h4><p>store.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    state.count++;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">decrement</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">    state.count--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  increment: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    commit(<span class="string">&quot;increment&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  decrement: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    commit(<span class="string">&quot;decrement&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123; state, mutations, actions &#125;);</span><br></pre></td></tr></table></figure><br>1.每一个Vuex应用就是一个store，在store中包含组件中的共享状态<code>state</code>和改变状态的方法<code>mutations</code>。注意：只能通过mutations改变store的state的状态；<br>2.使用<code>commit</code>方法触发mutations改变state:</p><h4 id="导入跟组件"><a href="#导入跟组件" class="headerlink" title="导入跟组件"></a>导入跟组件</h4><p>app.vue<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  store, <span class="comment">//导入全局store数据</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure></p><ol><li>Getters 可以在模板中静态的显示数据。换句话说，getters 可以读取数据，但不能改变状态。</li><li>Mutations 允许更新状态，但永远是同步的。Mutations 是 store 中改变状态数据的唯一方式。</li><li>Actions 允许异步更新状态，但是需要使用一个已经存在的 mutation 。如果你需要以特定的顺序同时执行不同的 mutations 会非常有用。</li></ol><h4 id="使用vuex"><a href="#使用vuex" class="headerlink" title="使用vuex"></a>使用vuex</h4><p>vuex.vue<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    vuex ,</span><span class="template-variable">&#123;&#123; <span class="name">$store.state.count</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">import &#123; mapActions &#125; from &quot;vuex&quot;;</span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">  name: &quot;vuex&quot;,</span></span><br><span class="line"><span class="xml">  methods: mapActions([&quot;increment&quot;, &quot;decrement&quot;])</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><iframe src="https://codesandbox.io/embed/k3k91l0mmr?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>让我们在深入一点如果我们要向action传入参数怎么办？</p><p><strong>最后在拿一个项目中的栗子来说说我对vuex的使用</strong></p><p>先来看下如何合理的构建store数据结构<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190305143236.png"                      alt=""                ><br>首先创建state.js<br>对需要管理的数据初始化一些值，对应一些比较复杂的数据还可以调用方法执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单一状态树</span></span><br><span class="line"><span class="comment"> * vuex 操作顺序：state.js -&gt; mutations-type.js -&gt; mutations.js -&gt; getters.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; getPlayHistory &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/index&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> playMode = &#123;</span><br><span class="line">  sequence: <span class="number">0</span>, <span class="comment">// 顺序播放</span></span><br><span class="line">  loop: <span class="number">1</span>, <span class="comment">// 单曲循环</span></span><br><span class="line">  random: <span class="number">2</span> <span class="comment">// 随机播放</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  mode: playMode.sequence,</span><br><span class="line">  playing: <span class="literal">false</span>,</span><br><span class="line">  playlist: [<span class="string">&quot;发如雪&quot;</span>, <span class="string">&quot;东风破&quot;</span>, <span class="string">&quot;双节棍&quot;</span>],</span><br><span class="line">  song: <span class="string">&quot;周杰伦&quot;</span>,</span><br><span class="line">  playHistory: getPlayHistory()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>然后创建mutation-type.js，用mutation 常量，注意目的是为了代码规范，易于出错排查<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//播放模式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_MODE = <span class="string">&quot;SET_MODE&quot;</span>;</span><br><span class="line"><span class="comment">//播放状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_PLAYING_STATE = <span class="string">&quot;SET_PLAYING_STATE&quot;</span>;</span><br><span class="line"><span class="comment">//播放列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_PLAYLIST = <span class="string">&quot;SET_PLAYLIST&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>接着我们创建mutation.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">&quot;./mutations-type.js&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  [types.SET_MODE](state, mode) &#123;</span><br><span class="line">    state.mode = mode;</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.SET_PLAYING_STATE](state, flag) &#123;</span><br><span class="line">    state.playing = flag;</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.SET_PLAYLIST](state, list) &#123;</span><br><span class="line">    state.playlist = list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mutations;</span><br></pre></td></tr></table></figure><br>随后在创建actions.js,用于数据的state的逻辑处理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根级别的 action</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">&quot;./mutations-type&quot;</span>;</span><br><span class="line"><span class="comment">/**\</span></span><br><span class="line"><span class="comment"> *  &#123;commit.state&#125; 内置状态</span></span><br><span class="line"><span class="comment"> *  song 传入的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> insertSong = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; commit, state &#125;, song</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> playlist = state.playlist.slice(<span class="number">0</span>);</span><br><span class="line">  playlist = [...playlist, <span class="string">&quot;爸我回来了&quot;</span>, <span class="string">&quot;牛仔很忙&quot;</span>].concat(song);</span><br><span class="line"></span><br><span class="line">  commit(types.SET_PLAYLIST, playlist);</span><br><span class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// commit(types.SET_MODE, 1);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> removeSong = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; commit, state &#125;, song</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> playlist = state.playlist.slice(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  playlist.slice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  commit(types.SET_PLAYLIST, playlist);</span><br><span class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">false</span>);</span><br><span class="line">  commit(types.SET_MODE, <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>别忘记了set有了 还需要get获取，所以我们创建getters.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 映射及计算</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> playing = <span class="function"><span class="params">state</span> =&gt;</span> state.playing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> playlist = <span class="function"><span class="params">state</span> =&gt;</span> state.playlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mode = <span class="function"><span class="params">state</span> =&gt;</span> state.mode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> song = <span class="function"><span class="params">state</span> =&gt;</span> state.song;</span><br></pre></td></tr></table></figure><br>最后设置index.js的入口文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组装模块并导出 store 的地方</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">&quot;./state.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&quot;./mutations.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">&quot;./actions.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">&quot;./getters.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">&quot;vuex/dist/logger&quot;</span>; <span class="comment">// Vuex 自带一个日志插件用于一般的调试</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">  strict: debug,</span><br><span class="line">  plugins: debug ? [createLogger()] : []</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>别忘记app中的全局导入store<br>main.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store/index&quot;</span>;</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; mapMutations, mapActions, mapGetters &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>; <span class="comment">//导入vuex模块方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;pagea&quot;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      setMode: <span class="string">&quot;SET_MODE&quot;</span>,</span><br><span class="line">      setPlayList: <span class="string">&quot;SET_PLAYLIST&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    ...mapActions([<span class="string">&quot;insertSong&quot;</span>, <span class="string">&quot;removeSong&quot;</span>]),</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setMode(<span class="number">1</span>);</span><br><span class="line">      <span class="built_in">this</span>.insertSong(<span class="string">&quot;你比从前快乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">&quot;mode&quot;</span>, <span class="string">&quot;song&quot;</span>, <span class="string">&quot;playlist&quot;</span>]),</span><br><span class="line">    <span class="function"><span class="title">playstatus</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.song;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190306112009.png"                      alt=""                ></p><iframe src="https://codesandbox.io/embed/7oj1q3l6jx?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PM2一键发布网站适合React Vue Node</title>
      <link href="2019/03/02/PM2%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83%E7%BD%91%E7%AB%99%EF%BC%8C%E9%80%82%E5%90%88React%20Vue%20Node/"/>
      <url>2019/03/02/PM2%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83%E7%BD%91%E7%AB%99%EF%BC%8C%E9%80%82%E5%90%88React%20Vue%20Node/</url>
      
        <content type="html"><![CDATA[<p><strong>为什么要研究Pm2？</strong><br><a id="more"></a><br>当你的项目每次都要改动时，本地改完，<br>push到仓库内，<br>再从服务器pull下来，重新build，<br>再采用如上的各种方法。这样无形之中就加大了时间成本，<br>因而我的解决方法时采用pm2的自动化部署方法，来实现本地一键部署到服务器。</p><p>首先你要确保你本地/服务器/Github上实现了无密登录<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529130841.png"                      alt=""                ></p><h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.看你有没有.ssh的文件。</span></span><br><span class="line">cd ~/.ssh</span><br><span class="line"><span class="comment">//2.没有则需要创建一个。</span></span><br><span class="line">mkdir ~/.ssh</span><br><span class="line"><span class="comment">//3.生成一个证明（默认会生成id_rsa和id_rsa.pub，如果你之前有生成这两个文件，现在就不需要再生成了，可以复用的，而且新生成的id_rsa和id_rsa.pub还会覆盖掉原来的，特别是连着公司的svn和git的一些，最好不要再生成了）</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment">//4.将证明复制到阿里云的虚拟机</span></span><br><span class="line">首先需要进入到.ssh目录</span><br><span class="line">cd ~/.ssh</span><br><span class="line">scp id_rsa.pub chan@IP地址:~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br><span class="line"><span class="comment">//5.将证书写入到authorized_keys（这样就能保证不输入密码登入）</span></span><br><span class="line">登入自己的虚拟机</span><br><span class="line">ssh root@IP地址</span><br><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"><span class="comment">//6.销毁之前的证书就行</span></span><br><span class="line">rm id_rsa.pub</span><br><span class="line">exit</span><br><span class="line"><span class="comment">//好了，现在你就可以不用输入密码就登入到你的阿里云虚拟机了。</span></span><br></pre></td></tr></table></figure><h3 id="配置服务器上的文件夹权限"><a href="#配置服务器上的文件夹权限" class="headerlink" title="配置服务器上的文件夹权限"></a>配置服务器上的文件夹权限</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /test</span><br><span class="line">cd /test</span><br><span class="line">sudo mkdir production</span><br><span class="line">#修改权限,先切换到test</span><br><span class="line">sudo chmod <span class="number">777</span> production</span><br></pre></td></tr></table></figure><h3 id="配置你的项目在根目录添加ecosystem-json"><a href="#配置你的项目在根目录添加ecosystem-json" class="headerlink" title="配置你的项目在根目录添加ecosystem.json"></a>配置你的项目在根目录添加ecosystem.json</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;apps&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;项目名称&quot;</span>,</span><br><span class="line">    <span class="string">&quot;script&quot;</span>:<span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;env&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;COMMON_VARIABLE&quot;</span>:<span class="string">&quot;true&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;env_production&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;NODE_ENV&quot;</span>:<span class="string">&quot;production&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;deploy&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;production&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;user&quot;</span>:<span class="string">&quot;服务器登录账号不要用root&quot;</span>, <span class="comment">//服务器名称 比如 chan</span></span><br><span class="line">        <span class="string">&quot;host&quot;</span>:[<span class="string">&quot;192.168.2.31&quot;</span>], <span class="comment">//服务器ip</span></span><br><span class="line">        <span class="string">&quot;port&quot;</span>:<span class="string">&quot;22&quot;</span>  <span class="comment">//服务器端口</span></span><br><span class="line">        <span class="string">&quot;ref&quot;</span>:<span class="string">&quot;origin/master&quot;</span>,</span><br><span class="line">        <span class="string">&quot;repo&quot;</span>:<span class="string">&quot;http://git仓库地址&quot;</span>,</span><br><span class="line">        <span class="string">&quot;path&quot;</span>:<span class="string">&quot;/test/production&quot;</span>, <span class="comment">//项目目录</span></span><br><span class="line">        <span class="string">&quot;ssh_options&quot;</span>:<span class="string">&quot;StrictHostKeyChecking=no&quot;</span>,</span><br><span class="line">        <span class="string">&quot;post-deploy&quot;</span>:<span class="string">&quot;yarn &amp;&amp; yarn build &amp;&amp; pm2 startOrRestart ecosystem.json --env production&quot;</span>, <span class="comment">//执行操作</span></span><br><span class="line">        <span class="string">&quot;env&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;NODE_ENV&quot;</span>:<span class="string">&quot;production&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意踩过的坑："><a href="#注意踩过的坑：" class="headerlink" title="注意踩过的坑："></a>注意踩过的坑：</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529112847.png"                      alt=""                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529112917.png"                      alt=""                ></p><p>然后输入 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529113109.png"                      alt=""                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529113140.png"                      alt=""                ></p><p>第一次部署在本地iterm中输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 deploy ecosystem.json production setup</span><br><span class="line"><span class="comment">//此时会在服务器 /www/test/production新建三个目录</span></span><br></pre></td></tr></table></figure><p>第二次以后可以输入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 deploy ecosystem.json production</span><br></pre></td></tr></table></figure><br>即发布成功。</p><p>按照上述步骤操作，就可以实现利用pm2本地部署项目到服务器，这样就省掉了登入服务器取更新代码的步骤了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190529113204.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的slot</title>
      <link href="2019/03/02/Vue%E4%B8%AD%E7%9A%84slot/"/>
      <url>2019/03/02/Vue%E4%B8%AD%E7%9A%84slot/</url>
      
        <content type="html"><![CDATA[<p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 这两个目前已被废弃但未被移除<br><a id="more"></a></p><p>Slot的通俗理解是“占坑”，在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中<slot>位置），当插槽也就是坑<slot name=”mySlot”>有命名时，组件标签中使用属性slot=”mySlot”的元素就会替换该对应位置内容；<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190304150640.png"                      alt=""                ></p><h3 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h3><p>看单个插槽，即没有在<slot>标签中显式的设置name值。比如SlotDemo这个组件，而且在slot标签中提供了一个默认的内容。我们在使用该组件时，可以通过v-slot:default来调用未显式设置name的slot：一个不带name的<slot>出口会带有隐含的名字default</p><p>slotdemo.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;slot-demo&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>单个插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// export default &#123;</span></span><br><span class="line"><span class="comment">//   name: &quot;slotdemo&quot;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>helloword.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;hello&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Hello Vue <span class="keyword">in</span> CodeSandbox!&lt;/p&gt;</span><br><span class="line">    &lt;h3&gt;Learn slot&lt;/h3&gt;</span><br><span class="line">    &lt;slot-demo&gt;&lt;/slot-demo&gt;</span><br><span class="line">    &lt;p&gt;=============&lt;/p&gt;</span><br><span class="line">    &lt;slot-demo&gt;</span><br><span class="line">      &lt;template v-slot:<span class="keyword">default</span>&gt;</span><br><span class="line">        &lt;p&gt;v-slot:defatult 的使用&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/slot-demo&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190304123425.png"                      alt=""                ></p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>layout.vue<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=<span class="string">&quot;header&quot;</span>&gt; <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>header<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> &lt;/slot&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;slot&gt; <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>middler<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> &lt;/slot&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name=<span class="string">&quot;footer&quot;</span>&gt; <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> &lt;/slot&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--不用写name--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// export default &#123;</span></span><br><span class="line"><span class="comment">//   name: &quot;layout&quot;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>helloword.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;hello&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Hello Vue <span class="keyword">in</span> CodeSandbox!&lt;/p&gt;</span><br><span class="line">    &lt;h3&gt;Learn slot&lt;/h3&gt;</span><br><span class="line">    &lt;slot-demo&gt;&lt;/slot-demo&gt;</span><br><span class="line">    &lt;p&gt;=============&lt;/p&gt;</span><br><span class="line">    &lt;slot-demo&gt;</span><br><span class="line">      &lt;template v-slot:<span class="keyword">default</span>&gt;</span><br><span class="line">        &lt;p&gt;v-slot:defatult 的使用&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/slot-demo&gt;</span><br><span class="line">    &lt;p&gt;=============&lt;/p&gt;</span><br><span class="line">    &lt;slot-layout&gt;</span><br><span class="line">      &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;h1&gt;这里有头部&lt;/h1&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;p&gt;A paragraph <span class="keyword">for</span> the main content.&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;And another one.&lt;/p&gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;p&gt;这里是底部&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/slot-layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190304135735.png"                      alt=""                ></p><blockquote><p>注意 v-slot 只能添加在一个<code>&lt;template&gt;</code> 上 </p></blockquote><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>slotlist.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;item&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in items&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">      &lt;slot v-bind:item=<span class="string">&quot;item&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    items: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>helloword.vue<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;hello&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;=============&lt;/p&gt;</span><br><span class="line">    &lt;List :items=<span class="string">&quot;colors&quot;</span> v-slot=<span class="string">&quot;color&quot;</span>&gt; &lt;/List&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> SlotDemo <span class="keyword">from</span> <span class="string">&quot;../slot/slotdemo.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&quot;../slot/list.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;HelloWorld&quot;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    SlotDemo,</span><br><span class="line">    List</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      colors: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Yellow&quot;</span>, <span class="attr">hex</span>: <span class="string">&quot;#F4D03F&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Green&quot;</span>, <span class="attr">hex</span>: <span class="string">&quot;#229954&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Purple&quot;</span>, <span class="attr">hex</span>: <span class="string">&quot;#9B59B6&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190304145940.png"                      alt=""                ></p><html><br><iframe src="https://codesandbox.io/embed/8246w61xr9?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><br></html>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 设计模式之备忘录模式</title>
      <link href="2019/03/01/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/03/01/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>备忘录模式:在不破坏对象的封装特性的前提下,在对象之外捕获并保存该对象内部的状态以便日后对象使用或者对象恢复到以前的某个状态</p></blockquote><a id="more"></a><p>我们在做列表页请求的时候进行会遇到上一页数据与下一页数据之间的交互.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下一页按钮点击事件</span></span><br><span class="line">$(&amp;#39;#next page&amp;#39;).click(function() &#123;</span><br><span class="line">  <span class="comment">//获取新闻内容元素</span></span><br><span class="line">  <span class="keyword">var</span> $news = $(&amp;quot;#news content&amp;quot;)，</span><br><span class="line">  <span class="comment">//获取新闻内容元素当前页数据</span></span><br><span class="line">  page = $news.data(&amp;#39;page&amp;#39;);</span><br><span class="line">  <span class="comment">//获取并显示新闻</span></span><br><span class="line">  getPageData(page, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//修正新闻内容元素当前页数据</span></span><br><span class="line">    $news.data(&amp;#39;page&amp;#39;, page + 1)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//1上一页按钮点击事件</span></span><br><span class="line">$(#pre page &amp;#39;).click (function() &#123;</span><br><span class="line"><span class="comment">//显示上一页</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>getPageData 是一个异步请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageData</span> (<span class="params">page,fn</span>)</span>&#123;</span><br><span class="line">    $.post(&amp;#39;./data/getNewsData.php&amp;#39;,&#123;</span><br><span class="line">     page:page</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res.errNo == <span class="number">0</span> )&#123;</span><br><span class="line">    showPage(page,res.data)</span><br><span class="line">    fn &amp;&amp; fn()</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示某页逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPage</span>(<span class="params">page,data</span>) </span>&#123;</span><br><span class="line"><span class="comment">// body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么处理看起来无可厚非,不过对于用户点击下一页后,又点击上一页这种浏览行为是不是感觉第二次请求是多余的?因为第一次你已经获取了数据,不需要再多发一次请求,如果用户网速不好,那对于用户来说,体验是糟糕的.手机端流量也是一种浪费</p><h2 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//page备忘录类</span></span><br><span class="line"><span class="keyword">var</span> Page = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//信息缓存</span></span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     主函数</span></span><br><span class="line"><span class="comment">     参数page页码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">page, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断该页数据是否在缓存中</span></span><br><span class="line">    <span class="keyword">if</span> (cache[page]) &#123;</span><br><span class="line">      <span class="comment">//恢复到该页状态，显示该页内容</span></span><br><span class="line">      showPage(page, cache[page]);</span><br><span class="line">      <span class="comment">//执行成功回调函数</span></span><br><span class="line">      fn &amp;&amp; fn();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//若缓存Cache中无该页数据</span></span><br><span class="line">      $.post(&amp;#39;./data/getNewsData.php&amp;#39;, &#123;</span><br><span class="line">        <span class="comment">//请求携带数据page页码</span></span><br><span class="line">        page: page</span><br><span class="line">      &#125;，<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 成功返回</span></span><br><span class="line">        <span class="keyword">if</span> (res.errNo == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">//显示该页数据</span></span><br><span class="line">          showPage(page, res.data);</span><br><span class="line">          <span class="comment">//将该页数据种入缓存中</span></span><br><span class="line">          cache[page] = res.data;</span><br><span class="line">          <span class="comment">//执行成功回调函数</span></span><br><span class="line">          fn &amp;&amp; fn();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//处理异常</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>page 缓存器与 getPageData 方法不同之处在 Page 类的内部缓存了<code>每次请求回来</code>的新闻数据,以后用户会看某页面新闻数据,就不必要重新请求了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下一页按钮点击事件</span></span><br><span class="line">$(&amp;#39;#next page&amp;#39;).click(function() &#123;</span><br><span class="line">  <span class="comment">//T获取新闻内容元素</span></span><br><span class="line">  <span class="keyword">var</span> $news = $(&amp;quot;#news content&amp;quot;)，</span><br><span class="line">  <span class="comment">//获取新闻内容元素当前页数据</span></span><br><span class="line">  page = $news.data(&amp;#39;page&amp;#39;);</span><br><span class="line">  <span class="comment">//获取并显示新闻</span></span><br><span class="line">  Page(page, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//修正新闻内容元素当前页数据</span></span><br><span class="line">    $news.data(&amp;#39;page&amp;#39;, page + 1)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>备忘录模式最主要的任务就是对<code>现有</code>的数据或者状态做<code>缓存</code>,从而降低对数据的获取成本</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的Mixins</title>
      <link href="2019/03/01/Vue%E4%B8%AD%E7%9A%84Mixins%20%20/"/>
      <url>2019/03/01/Vue%E4%B8%AD%E7%9A%84Mixins%20%20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</p></blockquote><a id="more"></a><p>学了vue几个月时间做了几个小项目，mixin真的很少用，但挺重要的希望做点笔记记录下</p><p>在项目开发的时候，常会碰到这样的一种现象：有两个组件非常相似，比如较为熟悉的Modal、Tooltip，它们都具有同样的基本函数，而且它们之前也有足够的不同。很多时候，就让人很难做出选择：是把它们拆会成多个不同的组件呢？还是只使用一个组件，创建足够的属性来改变不同的情况。<br>所有请出了今天我们的<code>猪角</code>Minxins.</p><p><code>mixins</code>为我们提供了在Vue组件中共用功能的方法。使用方式很简单，将共用的功能以对象的方式传入mixins选项中。当组件使用mixins对象时，所有mixins对象的选项都将被混入该组件本身的选项目</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190303170446.png"                      alt=""                ></p><h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMinxin= &#123;</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`我来自minxin`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    mixins:[myMixin]</span><br><span class="line">&#125;)  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190303232733.png"                      alt=""                ></p><h4 id="更规范的使用"><a href="#更规范的使用" class="headerlink" title="更规范的使用"></a>更规范的使用</h4><p>创建一个minxin的文件夹中放minxins.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; myMixin &#125; <span class="keyword">from</span> <span class="string">&quot;../mixin/mixins.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mixins: [myMixin],  </span><br><span class="line">  name: <span class="string">&quot;HelloWorld&quot;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190303233200.png"                      alt=""                ></p><h4 id="还可以引入多个minxins，一旦引入都会被使用"><a href="#还可以引入多个minxins，一旦引入都会被使用" class="headerlink" title="还可以引入多个minxins，一旦引入都会被使用"></a>还可以引入多个minxins，一旦引入都会被使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; myMixin，myMinxin2 &#125; <span class="keyword">from</span> <span class="string">&quot;../mixin/mixins.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mixins: [myMixin,myMinxin2],  </span><br><span class="line">  name: <span class="string">&quot;HelloWorld&quot;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190303233559.png"                      alt=""                ></p><h4 id="当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合。"><a href="#当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合。" class="headerlink" title="当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合。"></a>当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合。</h4><blockquote><p>默认是mixins上会首先被注册，组件上的接着注册！</p></blockquote><p>在Vue中mixins常见的合并主要有三种情形：数据data、生命周期中的钩子函数和值为对象的选项</p><h5 id="数据合并"><a href="#数据合并" class="headerlink" title="数据合并"></a>数据合并</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; mixdata, mindataAnother &#125; <span class="keyword">from</span> <span class="string">&quot;../mixin/mixins.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mixins: [mixdata, mindataAnother],</span><br><span class="line">  name: <span class="string">&quot;HelloWorld&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&quot;来自组件自身&quot;</span>,</span><br><span class="line">      name: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">      age: <span class="string">&quot;22&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190303235833.png"                      alt=""                ></p><p>结论：数据对象在内部分进行浅合并（一层属性深度），在和组件的数据发生冲突时，以<code>组件数据优先</code>。</p><h5 id="钩子函数合并"><a href="#钩子函数合并" class="headerlink" title="钩子函数合并"></a>钩子函数合并</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mixins: [myMixin, myMixin2],</span><br><span class="line">  name: <span class="string">&quot;HelloWorld&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&quot;来自组件自身&quot;</span>,</span><br><span class="line">      name: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">      age: <span class="string">&quot;22&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;来自组件的方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190304000415.png"                      alt=""                ><br>结论：当组件使用的mixins对象有相同的选项时，比如钩子函数，就会全部被合并到一个数组中，因此<code>都会被执行</code>，并且<code>mixins对象中的钩子会先被执行</code>。</p><h5 id="值为对象的选项合并"><a href="#值为对象的选项合并" class="headerlink" title="值为对象的选项合并"></a>值为对象的选项合并</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mixins: [myMixin],</span><br><span class="line">  name: <span class="string">&quot;HelloWorld&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&quot;来自组件自身&quot;</span>,</span><br><span class="line">      name: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">      age: <span class="string">&quot;22&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">message</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;来自组件的方法&quot;</span>);</span><br><span class="line">    <span class="comment">// console.log(this.$data);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190304001621.png"                      alt=""                ><br>结论：当mixins对象和组件中的选项的值为对象时，比如methods、components和directives，将被混合为同一个对象。当两个对象键名冲突时，<code>组件选项优先</code>。</p><html><br><iframe src="https://codesandbox.io/embed/n3ynlx0kmp?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><br></html><h4 id="全局Mixins"><a href="#全局Mixins" class="headerlink" title="全局Mixins"></a>全局Mixins</h4><p>使用起来要非常小心，不到万不得已不要轻易去使用它；</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.<span class="keyword">mixin</span>(&#123; mounted() &#123; </span><br><span class="line">console.log(<span class="string">&#x27;hello from mixin!&#x27;</span>) &#125; </span><br><span class="line">    </span><br><span class="line">&#125;) </span><br><span class="line">new Vue(&#123; ... &#125;)</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>混合对于封装一小段想要复用的代码来讲是有用的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT设计模式之状态模式</title>
      <link href="2019/02/28/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/02/28/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>状态模式:解决程序中一些臃肿的分支判断语句问题，每一个分支转化为一种独立的状态，方便每一种状态的管理不至于每次只需遍历所有分支，最终目的是为了简化分支判断流程<br><a id="more"></a><br>如果有一个需求：投票最美图片征集活动，如果我们将所有图片的结果展示一遍，内部免不了有多个分支判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//展示结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showResult</span> = (<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(result === <span class="number">0</span>)&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;处理结果0&#x27;</span>)&#125;，</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(result === <span class="number">1</span>)&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;处理结果1&#x27;</span>)&#125;，</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(result === <span class="number">2</span>)&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;处理结果2&#x27;</span>)&#125;，</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(result === <span class="number">3</span>)&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;处理结果3&#x27;</span>)&#125;，</span><br></pre></td></tr></table></figure><p>如果某天需求要增加或减少处理就比较麻烦</p><h4 id="状态对象的实现"><a href="#状态对象的实现" class="headerlink" title="状态对象的实现"></a>状态对象的实现</h4><p>如果我们将不同的判断结果封装在状态对象内，然后改状态返回一个可被调用的结构方法，用于调用状态对象内部某种方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//投票结果状态对象</span></span><br><span class="line"><span class="keyword">var</span> ResultState = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> States = &#123;</span><br><span class="line">    state0:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;处理结果0&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    state1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;处理结果1&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    state2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;处理结果2&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果方法存在则执行</span></span><br><span class="line">    States[<span class="string">&#x27;state&#x27;</span>+result] &amp;&amp; States[<span class="string">&#x27;state&#x27;</span>+result]()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//返回调用状态方法接口</span></span><br><span class="line">    show:show</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultState.show(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>状态模式的目的：将条件判断不同的结果转化为状态对象的内部状态。既然是内部状态一般就是<code>私有变量</code>，<code>私有方法</code>，便于我们<code>增删改查</code>。</p><h4 id="状态的优化"><a href="#状态的优化" class="headerlink" title="状态的优化"></a>状态的优化</h4><p>我们首先创建一个状态对象，内部保存状态变量，内部封装好每种动作对应的状态，最后状态对象返回一个接口对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个游戏状态类</span></span><br><span class="line"><span class="keyword">var</span> HeroState = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//内部状态私有变量</span></span><br><span class="line">   <span class="keyword">var</span> _currentState = &#123;&#125;;</span><br><span class="line">   <span class="comment">//动作与状态方法映射</span></span><br><span class="line">   <span class="keyword">var</span> states = &#123;</span><br><span class="line">      jump: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;跳跃&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      move: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;移动&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      shoot: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;射击&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      squat: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;蹲下&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//动作控制类</span></span><br><span class="line">   <span class="keyword">var</span> Action = &#123;</span><br><span class="line">      <span class="comment">//改变状态方法</span></span><br><span class="line">      changeState: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">         <span class="comment">//重置内部状态</span></span><br><span class="line">         _currentState = &#123;&#125;;</span><br><span class="line">         <span class="keyword">if</span> (arg.length) &#123;</span><br><span class="line">            <span class="comment">//遍历动作</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arg.length; i &lt; len; i++) &#123;</span><br><span class="line">               _currentState[arg[i]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//返回动作控制类</span></span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//执行动作</span></span><br><span class="line">      goes: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;触发一次动作&#x27;</span>);</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> _currentState) &#123;</span><br><span class="line">            states[key] &amp;&amp; states[key]()</span><br><span class="line">         &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        change: Action.changeState,</span><br><span class="line">        goes  : Action.goes</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190305171739.png"                      alt=""                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190305171834.png"                      alt=""                ><br>使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个超级角色</span></span><br><span class="line"><span class="keyword">var</span> hero = <span class="keyword">new</span> HeroState();</span><br><span class="line">hero.change(<span class="string">&#x27;jump&#x27;</span>,<span class="string">&#x27;shoot&#x27;</span>).goes().goes()</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190305171934.png"                      alt=""                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190305173126.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript设计模式之迭代器模式</title>
      <link href="2019/02/22/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/02/22/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>迭代器模式是 ：在不暴露内部结构的同时，可以顺利的访问聚合对象内部的元素</p></blockquote><a id="more"></a><p>首先为什么要使用迭代器？<br>我们举一个例子看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开发过程中经常碰到这样的循环数据</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> nodeList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> $p       = $(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//要对三个变量进行遍历要写写三种方法</span></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i, len = nodeList.length;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(nodeList[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$p.each(<span class="function"><span class="keyword">function</span> (<span class="params">key, p</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(key, p)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190226110321.png"                      alt=""                ></p><html><br><iframe width="100%" height="300" src="//jsrun.net/efXKp/embedded/js,html,reslut/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br></html><p><strong>写三遍烦不烦？</strong></p><p>如何优化呢？使用迭代器试试吧？<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190226105528.png"                      alt=""                ></p><h4 id="写一个迭代器方法"><a href="#写一个迭代器方法" class="headerlink" title="写一个迭代器方法"></a>写一个迭代器方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">container</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.list  = container.list</span><br><span class="line">      <span class="built_in">this</span>.index = <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.hasNext()) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.list[<span class="built_in">this</span>.index++]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//没有下一项</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">hasNext</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.index &gt;=<span class="built_in">this</span>.list.length) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容es6中所有有序数据结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">list</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.list = list</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//生成遍历器</span></span><br><span class="line">   <span class="function"><span class="title">getIterator</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Iterator(<span class="built_in">this</span>) <span class="comment">//传this指向Container</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr       = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> container = <span class="keyword">new</span> Container([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> iterator  = container.getIterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(iterator.next())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190226095455.png"                      alt=""                ></p><h4 id="在jquery中的引用场"><a href="#在jquery中的引用场" class="headerlink" title="在jquery中的引用场"></a>在jquery中的引用场</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> $data = $(data);  <span class="comment">//生成迭代器</span></span><br><span class="line">   $data.each(<span class="function"><span class="keyword">function</span> (<span class="params">key,p</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(key,p);</span><br><span class="line">       </span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test</span></span><br><span class="line">each(arr)</span><br><span class="line">each(nodeList)</span><br><span class="line">each($p)</span><br></pre></td></tr></table></figure><p><strong>for..of的写法也属于迭代器的一种</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ================在iterator中的引用场景=================</span></span><br><span class="line"><span class="comment">// data要属于[Symbol.iterator]属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eachSyiter</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> data) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(item);</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同于下面的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eachSyiter</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//生成遍历器</span></span><br><span class="line">   <span class="keyword">let</span> iterator = data[<span class="built_in">Symbol</span>.iterator];</span><br><span class="line">   <span class="keyword">let</span> item     = &#123;<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">   <span class="keyword">while</span> (!item.done) &#123;</span><br><span class="line">      item = iterator.next()</span><br><span class="line">      <span class="keyword">if</span>(!item.done)&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(item.value);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后再举个小栗子"><a href="#最后再举个小栗子" class="headerlink" title="最后再举个小栗子"></a>最后再举个小栗子</h4><p><strong>用个迭代器思想解决实际开发过程中的问题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="keyword">var</span> Iterator_mode = <span class="function"><span class="keyword">function</span> (<span class="params">item, container</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//获取父容器</span></span><br><span class="line">   <span class="keyword">var</span> container = container &amp;&amp; <span class="built_in">document</span>.getElementById(container) || <span class="built_in">document</span>;</span><br><span class="line">   <span class="comment">//获取元素</span></span><br><span class="line">   <span class="keyword">var</span> items = container.getElementsByTagName(items);</span><br><span class="line">   <span class="comment">//获取元素长度</span></span><br><span class="line">   <span class="keyword">var</span> length = items.length;</span><br><span class="line">   <span class="comment">//当前元素索引</span></span><br><span class="line">   <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//缓存原来数组的方法 === 浅复制一份副本</span></span><br><span class="line">   <span class="keyword">var</span> splice = items.splice(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">//第一个</span></span><br><span class="line">      first: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      <span class="comment">//最后个</span></span><br><span class="line">      last: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      <span class="comment">//前一个</span></span><br><span class="line">      prev: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      <span class="comment">//后一个</span></span><br><span class="line">      next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      <span class="comment">//获取某一个元素</span></span><br><span class="line">      get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      <span class="comment">//对每一个元素执行某一个方法</span></span><br><span class="line">      dealEach: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      <span class="comment">//对某一个元素执行某一个方法</span></span><br><span class="line">      dealItem: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">      <span class="comment">//排它方式处理某一个元素</span></span><br><span class="line">      exclusive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Iterator_mode(<span class="string">&quot;li&quot;</span>, <span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(demo.first());</span><br><span class="line"><span class="built_in">console</span>.log(demo.last());</span><br><span class="line"><span class="built_in">console</span>.log(demo.next());</span><br><span class="line"><span class="built_in">console</span>.log(demo.get(<span class="number">2000</span>));</span><br><span class="line"><span class="comment">//处理所有元素</span></span><br><span class="line">demo.dealEach(<span class="function"><span class="keyword">function</span>(<span class="params">text,color</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.innerHTML        = text;</span><br><span class="line">   <span class="built_in">this</span>.style.background = color;</span><br><span class="line">&#125;,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>这种思想的好处：迭代器提供的接口方法就能轻易的访问聚合对象中的每一个对象，甚至不需要知道聚合对象内部的具体结构</p></blockquote><h5 id="实现下上面迭代器的各个功能点："><a href="#实现下上面迭代器的各个功能点：" class="headerlink" title="实现下上面迭代器的各个功能点："></a>实现下上面迭代器的各个功能点：</h5><p>first</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> items[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>last</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">last:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    index = length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> items[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pre</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pre:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(--index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> items[index]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>next<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">next:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(++index &lt; length)&#123;</span><br><span class="line">        <span class="keyword">return</span> items[index]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        index = length -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>get<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">get:<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">     <span class="comment">//如果num大于等于0 再获取正向获取，否则逆向获取</span></span><br><span class="line">    index = num &gt;= <span class="number">0</span> ? num%length : num%length+length;</span><br><span class="line">    <span class="keyword">return</span> items[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>dealEach<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="数组迭代器"><a href="#数组迭代器" class="headerlink" title="数组迭代器"></a>数组迭代器</h4><p>比如低版本浏览器不能很好的支持each方法，我们就要用到数组迭代器，它把元素的<code>索引</code>和<code>索引值</code>传入<code>回调函数</code>中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eachArray = <span class="function"><span class="keyword">function</span>(<span class="params">arr,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length;</span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (;i &lt; len;i++) &#123;</span><br><span class="line">       <span class="comment">//以此执行回调函数，注意回调函数中传入参数第一个为索引,</span></span><br><span class="line">       <span class="comment">//第二个是索引值</span></span><br><span class="line">       <span class="keyword">if</span>(fn.call(arr[i],i,arr[i]) === <span class="literal">false</span>)</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对象迭代器"><a href="#对象迭代器" class="headerlink" title="对象迭代器"></a>对象迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eachObject = <span class="function"><span class="keyword">function</span>(<span class="params">obj,fn</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">      <span class="keyword">if</span>(fn.call(obj[i],i,obj[i]) === <span class="literal">false</span>)&#123;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="同步变量迭代器"><a href="#同步变量迭代器" class="headerlink" title="同步变量迭代器"></a>同步变量迭代器</h4><p>我们在页面同步变量内某些属性值时，我们不知道服务端将该属性或者该属性的上顺序打印到页面上，我们不能用点语法或者[]语法直接导致错误，因此需要一层一层的去安全校验。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = a &amp;&amp; a.b &amp;&amp; a.b.c;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用迭代器来校验代码数据</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bGetter = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//如果b不存在则直接返回未定义</span></span><br><span class="line">   <span class="keyword">if</span>(!b) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">   <span class="keyword">var</span> result = b;               <span class="comment">//获取同步b的对象</span></span><br><span class="line">       key    = key.split(<span class="string">&#x27;.&#x27;</span>);  <span class="comment">//解析属性的层次序列</span></span><br><span class="line">   <span class="comment">//迭代同步变量b对象属性</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len=key.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(result[key[i]] != <span class="literal">undefined</span>)&#123;</span><br><span class="line">         result = result[key[i]]</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//返回获取结果</span></span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取用户信息</span></span><br><span class="line"><span class="built_in">console</span>.log(bGetter(<span class="string">&quot;client.user.username&quot;</span>)); <span class="comment">//轻舞飞扬</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取本地语言数据</span></span><br><span class="line"><span class="built_in">console</span>.log(bGetter(<span class="string">&quot;server.lang.local&quot;</span>));  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><br>如果有时候用户数据在主页会添加一些或修改一些数据 也可以通过同步变量赋值器来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">bSetter = <span class="function"><span class="keyword">function</span> (<span class="params">key,val</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//如果b不存在则直接返回未定义</span></span><br><span class="line">   <span class="keyword">if</span> (!b) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">   <span class="keyword">var</span> result = b;</span><br><span class="line">       key    = key.split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">   <span class="comment">//迭代同步变量b对象属性</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = key.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="comment">//如果第i层属性对应的值不存在，则定义为对象</span></span><br><span class="line">      <span class="keyword">if</span> (result[key[i]] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">         result[key[i]] = &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果第i层属性对应的值不是对象的一个实例，则抛出错误</span></span><br><span class="line">      <span class="keyword">if</span>(!result[key[i]] <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;b&#x27;</span>+ key.splice(<span class="number">0</span>,i+<span class="number">1</span>).join(<span class="string">&quot;.&quot;</span>)+<span class="string">&quot;is not object&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//迭代改层的属性值</span></span><br><span class="line">      result = result[key[i]]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//返回获取结果</span></span><br><span class="line">   <span class="keyword">return</span> result[key[i]] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取用户信息</span></span><br><span class="line"><span class="built_in">console</span>.log(bSetter(<span class="string">&quot;client.module.news.sports&quot;</span>,<span class="string">&quot;javascript&quot;</span>)); <span class="comment">//轻舞飞扬</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript设计模式之链模式</title>
      <link href="2019/02/22/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/02/22/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>很早之前一直想读一下jquery或者zepto的源码，但读源码之前还是得先了解下上面是链模式；因为源码的框架都是基于这个链模式<br><a id="more"></a></p><blockquote><p>链模式：通过对象方法中将当前对象返回，实现同一个对象多个方法的链式调用，从而简化该对象多个方法的多次调用，对该对象的多次引用。</p></blockquote><h4 id="说白了这些都是基于原型继承"><a href="#说白了这些都是基于原型继承" class="headerlink" title="说白了这些都是基于原型继承"></a>说白了这些都是基于原型继承</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/原型.png"                      alt=""                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190301133406.png"                      alt=""                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    length:<span class="number">2</span>,</span><br><span class="line">    size:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我们想访问size方法该如何做？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(a.size()) <span class="comment">//2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但有没有想过如果这样访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(A.size())   <span class="comment">//报错</span></span><br><span class="line"><span class="built_in">console</span>.log(A().size()) <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h4 id="为什么报错？"><a href="#为什么报错？" class="headerlink" title="为什么报错？"></a>为什么报错？</h4><ol><li><p>第一种因为size绑定在<code>原型</code>上没有绑定在自己身上</p></li><li><p>第二种A函数对应执行结果没有返回值找不到size方法</p></li></ol><h4 id="找位小助手"><a href="#找位小助手" class="headerlink" title="找位小助手"></a>找位小助手</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A.fn = A.prototype = &#123;</span><br><span class="line">    length:<span class="number">2</span>,</span><br><span class="line">    size:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="built_in">console</span>.log(A.fn);</span><br><span class="line"><span class="built_in">console</span>.log(A().size());</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228090150.png"                      alt=""                ></p><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><p>但是我们希望A.fn能提供获取元素方法的init然后再A中返回<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.fn方法中提供init用来获取元素然后返回</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> A.fn.init(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.fn = A.prototype = &#123;</span><br><span class="line">   length: <span class="number">2</span>,</span><br><span class="line">   size  : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">   &#125;,</span><br><span class="line">   init: <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(selector)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="built_in">console</span>.log(A(<span class="string">&#x27;demo&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228090652.png"                      alt=""                ></p><h4 id="还遇到个大问题，我们还希望返回结果能够拥有A-fn中的很多方法如何办到呢？"><a href="#还遇到个大问题，我们还希望返回结果能够拥有A-fn中的很多方法如何办到呢？" class="headerlink" title="还遇到个大问题，我们还希望返回结果能够拥有A.fn中的很多方法如何办到呢？"></a>还遇到个大问题，我们还希望返回结果能够拥有A.fn中的很多方法如何办到呢？</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190301134338.png"                      alt=""                ></p><blockquote><p>this大法好！this指向的一个对象，对象又可以设置属性那我们把this对象设置成当前对象的一个属性不就可以了嘛~~~O(∩_∩)O</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个问题如何访问元素的同时，又能访问对象中的方法</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> A.fn.init(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.fn = A.prototype = &#123;</span><br><span class="line">   length: <span class="number">2</span>,</span><br><span class="line">   size  : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;sizefn &#x27;</span>,<span class="built_in">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">   &#125;,</span><br><span class="line">   init: <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;initfn &#x27;</span>,<span class="built_in">this</span>); <span class="comment">//fn</span></span><br><span class="line">      <span class="built_in">this</span>[<span class="number">0</span>]          = <span class="built_in">document</span>.getElementById(selector)</span><br><span class="line">           <span class="built_in">this</span>.length = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;  <span class="comment">//返回this</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">var</span> demo = A(<span class="string">&#x27;demo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(demo);</span><br><span class="line"><span class="built_in">console</span>.log(demo.size());<span class="comment">//2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228092307.png"                      alt=""                ></p><p>还是会碰到一个问题<br>如果被覆盖</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">test</span> = A(&#x27;<span class="keyword">test</span>&#x27;)</span><br><span class="line">console.<span class="built_in">log</span>(demo);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228092454.png"                      alt=""                ></p><h4 id="原因是："><a href="#原因是：" class="headerlink" title="原因是："></a>原因是：</h4><p><strong>A构造函数每次return返回A.fn.init对象都指向同一个对象；<br>所以那我们加上一个new</strong></p><p>但是还是会碰到一个问题调用size方法就会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数指向同一个对象造成的</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> A.fn.init(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = A(<span class="string">&#x27;demo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(demo);</span><br><span class="line"><span class="keyword">var</span> test = A(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(demo); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;==============&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(demo.size()); <span class="comment">//为什么报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228131038.png"                      alt=""                ></p><p>new之前</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228131333.png"                      alt=""                ></p><p>new之后</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228131220.png"                      alt=""                ></p><p>原因：<br>由于new对<code>对象</code>内的属性进行了复制，所以this指向不在是A.fn、A.prototype 而是A.fn.A.init呢？</p><blockquote><p>原型构造函数中的方法是在构造函数new关键词指向时才能被构造函数获取，所以平时构造函数是获取不到原型对象上的方法的</p></blockquote><h4 id="防止方法丢失"><a href="#防止方法丢失" class="headerlink" title="防止方法丢失"></a>防止方法丢失</h4><p><strong>new A.fn.init(selector)中的init中的this为什么指向 A.fn.A.init????</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数指向同一个对象造成的</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> A.fn.init(selector)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.fn = A.prototype = &#123;</span><br><span class="line">   <span class="title">constructor</span>: <span class="title">A</span>,</span><br><span class="line">   <span class="title">init</span>       : <span class="title">function</span> (<span class="params">selector</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.constructor);</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      ƒ(selector) &#123;</span></span><br><span class="line"><span class="comment">          return new A.fn.init(selector)</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">   &#125;,</span><br><span class="line">   length: <span class="number">2</span>,</span><br><span class="line">   size  : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">   &#125;,</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这句非常重要</span></span><br><span class="line">A.fn.init.prototype = A.fn;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">var</span> demo = A(<span class="string">&#x27;demo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(demo);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;==============&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(demo.size()); <span class="comment">//2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>只要将构造函数的对象指向一个已存在的对象即可</strong></p><h4 id="数组与对象"><a href="#数组与对象" class="headerlink" title="数组与对象"></a>数组与对象</h4><p>jquery返回的是数组<br>A框架返回的是对象<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228174706.png"                      alt=""                ></p><p><strong>原因：数组 对象  函数都被看成对象的实例，javascript没有一个纯粹的数组类型，<code>一些浏览器引擎</code>在判断对象是否数组不仅仅判断有没有length长度，还会判断是否具有数组方法来确定是否用数组形式展开</strong></p><p>增加几个数组方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">A.fn = A.prototype = &#123;</span><br><span class="line">   <span class="title">constructor</span>: <span class="title">A</span>,</span><br><span class="line">   <span class="title">init</span>       : <span class="title">function</span> (<span class="params">selector, context</span>) &#123;</span><br><span class="line">      <span class="comment">//获取元素长度</span></span><br><span class="line">      <span class="built_in">this</span>.length = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//........</span></span><br><span class="line">      <span class="comment">//返回this对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">   &#125;,</span><br><span class="line">   push  : [].push,</span><br><span class="line">   sort  : [].sort,</span><br><span class="line">   splice: [].splice,</span><br><span class="line">   length: <span class="number">2</span>,</span><br><span class="line">   size  : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.length</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228175024.png"                      alt=""                ></p><h4 id="方法与扩展"><a href="#方法与扩展" class="headerlink" title="方法与扩展"></a>方法与扩展</h4><p>通过对jquery的extend方法学习，我们知道了extend的2个作用<code>一个队外部对象扩展，二是对内部对象扩展</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">A.extend = A.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i      = <span class="number">1</span>,</span><br><span class="line">        len    = <span class="built_in">arguments</span>.length,</span><br><span class="line">        target = <span class="built_in">arguments</span>[<span class="number">0</span>],</span><br><span class="line">    j;</span><br><span class="line">    <span class="keyword">if</span>(i === len)&#123;</span><br><span class="line">       target = <span class="built_in">this</span>;</span><br><span class="line">       i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历参数中的扩展对象</span></span><br><span class="line">    <span class="keyword">for</span>(;i&lt;len;i++)&#123;</span><br><span class="line">       <span class="comment">//遍历扩展对象中的属性</span></span><br><span class="line">       <span class="keyword">for</span>(j <span class="keyword">in</span> <span class="built_in">arguments</span>[i])&#123;</span><br><span class="line">          <span class="comment">//扩展对象</span></span><br><span class="line">          target[j] = <span class="built_in">arguments</span>[i][j]</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;返回对象&#x27;</span>,target);</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = A.extend(&#123;<span class="attr">first</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">second</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">third</span>:<span class="number">3</span>&#125;,&#123;<span class="attr">four</span>:<span class="number">4</span>&#125;,&#123;<span class="attr">five</span>:<span class="number">5</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(demo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo1 = A.extend(A.fn,&#123;<span class="attr">version</span>:<span class="string">&quot;1.0&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(demo1); </span><br><span class="line"></span><br><span class="line">A.fn.extend(&#123;<span class="attr">getVersion</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.version</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A(<span class="string">&#x27;demo&#x27;</span>).getVersion());</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190228183555.png"                      alt=""                ></p><h4 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h4>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript设计模式之外观模式</title>
      <link href="2019/02/21/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/02/21/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>外观模式(门面模式)，是一种相对简单而又无处不在的模式。外观模式提供一个高层接口，这个接口使得客户端或子系统更加方便调用。</p></blockquote><a id="more"></a><p>还不明白就看图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190225151252.png"                      alt=""                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//场景</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">elem,type,selector,fn</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(fn == <span class="literal">null</span>)&#123;</span><br><span class="line">      fn       = selector;</span><br><span class="line">      selector = <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//dosomething.......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">bindEvent(elem,<span class="string">&#x27;click&#x27;</span>,<span class="string">&quot;#div1&quot;</span>,fn)</span><br><span class="line">bindEvent(elem,<span class="string">&quot;moveIn&quot;</span>,fn)</span><br></pre></td></tr></table></figure><p>首先看一个比较初级小白的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bad写法</span></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   e.preventDefault();</span><br><span class="line">   <span class="keyword">if</span>(e.target !== <span class="built_in">document</span>.getElementById(<span class="string">&quot;myinput&quot;</span>))&#123;</span><br><span class="line">      hidePageAlert();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hidePageAlert</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;隐藏弹窗&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：<br>1.onclick的点击事件在<code>dom0</code>级事件处理，如果其他开发人员也用这个绑定事件就会覆盖这个点击事件<br>2.低版本浏览器可能不支持e.preventDefault和e.target也需要处理<br>2.如果用<code>dom2</code>事件处理应该对老版本浏览器兼容处理<code>attachEvent</code>，如果不支持dom2 那只能用onclick</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外观模式实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">dom,type,fn</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//对于dom2事件的处理</span></span><br><span class="line">   <span class="keyword">if</span>(dom.addEventListener)&#123;</span><br><span class="line">      dom.addEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dom.attachEvent)&#123;</span><br><span class="line">      dom.attachEvent(<span class="string">&quot;on&quot;</span>+type,fn)</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//不支持addevnet或者 attachEvent的方法</span></span><br><span class="line">      dom[<span class="string">&#x27;on&#x27;</span>+type] = fn</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取dom元素</span></span><br><span class="line"><span class="keyword">var</span> myInput = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myinput&quot;</span>);</span><br><span class="line">addEvent(myInput,<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;绑定第一个事件中&#x27;</span>);</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line">addEvent(myInput,<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;绑定第二个事件中&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">addEvent(myInput, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;绑定第三个事件中&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="对低版本浏览器的e-preventDefault和e-target处理"><a href="#对低版本浏览器的e-preventDefault和e-target处理" class="headerlink" title="对低版本浏览器的e.preventDefault和e.target处理"></a>对低版本浏览器的e.preventDefault和e.target处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取事件对象</span></span><br><span class="line"><span class="keyword">var</span> getEvent = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> event || <span class="built_in">window</span>.event;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">var</span> getTarget = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> event = getEvent(event)</span><br><span class="line">   <span class="keyword">return</span> event.target || event.srcElement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//阻止默认事件</span></span><br><span class="line"><span class="keyword">var</span> preventDefault = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> event = getEvent(event);</span><br><span class="line">   <span class="keyword">if</span>(event.preventDefault)&#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在优化一下之前的小白代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   preventDefault(e)</span><br><span class="line">   <span class="keyword">if</span>(getTarget(e) !== <span class="built_in">document</span>.getElementById(<span class="string">&quot;myinput&quot;</span>))&#123;</span><br><span class="line">      hidePageAlert();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>许多代码块也采用外观模式来封装多个功能，来简化底层操作方法：比如我们来获取元素属性样式的简单方法库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简约版本获取元素样式方法库</span></span><br><span class="line"><span class="keyword">let</span> $ = &#123;</span><br><span class="line">   <span class="comment">//通过id获取</span></span><br><span class="line">   g:<span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">//设置元素css属性</span></span><br><span class="line">   css:<span class="function"><span class="keyword">function</span>(<span class="params">id,key,val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(id).style[key] = val</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">//设置元素属性</span></span><br><span class="line">   attr:<span class="function"><span class="keyword">function</span>(<span class="params">id,key,val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(id)[key] = val</span><br><span class="line">   &#125;,</span><br><span class="line">   html:<span class="function"><span class="keyword">function</span>(<span class="params">id,html</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(id).innerHTML = html</span><br><span class="line">   &#125;,</span><br><span class="line">   on:<span class="function"><span class="keyword">function</span>(<span class="params">id,type,fn</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(id)[<span class="string">&#x27;on&#x27;</span>+type] = fn</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.css(<span class="string">&#x27;book&#x27;</span>,<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">$.attr(<span class="string">&quot;book&quot;</span>,<span class="string">&quot;className&quot;</span>,<span class="string">&quot;box&quot;</span>)</span><br><span class="line">$.html(<span class="string">&#x27;book&#x27;</span>,<span class="string">&#x27;这是更新的消息&#x27;</span>)</span><br><span class="line">$.on(<span class="string">&quot;book&quot;</span>,<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   $.css(<span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;150px&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;p id=&quot;book&quot; class=&quot;box&quot; style=&quot;background: red; width: 150px;&quot;&gt;这是更新的消息&lt;/p&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript设计模式之代理模式</title>
      <link href="2019/02/20/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/02/20/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于一个对象不能直接引用另一个对象，所以需要通过代理对象在这2个对象之间起到中介作用</p></blockquote><a id="more"></a><p>白话文：代理模式的定义是把对一个对象的访问, 交给另一个代理对象来操作.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealImg</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">filename</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.filename = filename;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">display</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;display... &#x27;</span> + <span class="built_in">this</span>.filename)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">loadFromDisk</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;loadding ...&#x27;</span> + <span class="built_in">this</span>.filename)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImg</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.realImg = <span class="keyword">new</span> RealImg(<span class="string">&quot;filename&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.realImg.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyImg = <span class="keyword">new</span> ProxyImg(<span class="string">&quot;1.png&quot;</span>);</span><br><span class="line">proxyImg.display(); <span class="comment">//display... filename</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="再举个栗子"><a href="#再举个栗子" class="headerlink" title="再举个栗子"></a>再举个栗子</h3><p>ES6中的proxy非常好的使用的代理模式的精髓</p><blockquote><p>let p = new Proxy(target, handler);</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>用Proxy包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。</td></tr><tr><td>handler</td><td>一个对象，其属性是当执行一个操作时定义代理的行为的函数。</td></tr></tbody></table><p>明星与经纪人之间的关系</p><p>某个明星对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//某个明星</span></span><br><span class="line"><span class="keyword">let</span> star = &#123;</span><br><span class="line">    name : <span class="string">&quot;王富贵&quot;</span>,</span><br><span class="line">    age  : <span class="number">18</span>,</span><br><span class="line">    phone: <span class="string">&#x27;13084920234&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明星经纪人对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//经纪人</span></span><br><span class="line"><span class="keyword">let</span> agent = <span class="keyword">new</span> <span class="built_in">Proxy</span>(star,&#123;</span><br><span class="line">   get: <span class="function"><span class="keyword">function</span> (<span class="params">target,key</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">&quot;phone&quot;</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="string">&#x27;经纪人phone：1233423423&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">&quot;price&quot;</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;明星出场价：120000&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> target[key]</span><br><span class="line">   &#125;,</span><br><span class="line">   set: <span class="function"><span class="keyword">function</span>(<span class="params">target,key,val</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">&quot;customPrice&quot;</span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(val &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">            <span class="comment">//最低10w</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;价格不低于10w&#x27;</span>)</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            target[key] = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agent.phone);  </span><br><span class="line"><span class="built_in">console</span>.log(agent.price);</span><br><span class="line"><span class="built_in">console</span>.log(agent.age);</span><br><span class="line"><span class="built_in">console</span>.log(agent.name);</span><br><span class="line">agent.customPrice = <span class="number">9000</span>;</span><br><span class="line"><span class="built_in">console</span>.log(agent.customPrice);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190225145719.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript设计模式之观察者模式</title>
      <link href="2019/02/18/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/02/18/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>观察者模式的定义：在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。</p></blockquote><a id="more"></a><p>其实我们经常接触的的dom事件. 也是js和dom之间实现的一种观察者模式</p><p>只要订阅了div的click事件. 当点击div的时候, function click就会被触发.</p><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><p>三个工程师分别写了三个独立的模块:留言模块，用户信息模块，提交留言模块，如果其中有一个人想添加别的功能又不能影响其他功能，不想自己写的模块与别人写的模块严重耦合在一起，就需要观察者模式</p><blockquote><p>简单的理解可以是这样的：一个对象发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Observer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//消息队列防止队列暴露被修改，作为私有变量保存</span></span><br><span class="line">   <span class="keyword">var</span> _message = &#123;&#125;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">//注册信息接口</span></span><br><span class="line">      regist: <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">typeof</span> _message[type] === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">            _message[type] = [fn];</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _message[type].push(fn)</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//发布信息接口</span></span><br><span class="line">      fire: <span class="function"><span class="keyword">function</span> (<span class="params">type, args</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (!_message[type]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> events = &#123;</span><br><span class="line">            type: type,</span><br><span class="line">            args: args || &#123;&#125;</span><br><span class="line">         &#125;,</span><br><span class="line">            i   = <span class="number">0</span>,</span><br><span class="line">            len = _message[type].length;</span><br><span class="line">         <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">            _message[type][i].call(<span class="built_in">this</span>, events);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//移除信息接口</span></span><br><span class="line">      remove: <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (_message[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> i = _message[type].length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">               _message[type][i] === fn &amp;&amp; _message[type].splice(i, <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>工程师A</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**工程师a写追加评论功能 */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">addMsgItem</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> text           = e.args.text,</span><br><span class="line">          ul             = $$(<span class="string">&#x27;msg&#x27;</span>),</span><br><span class="line">          li             = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">          span           = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">          span.innerHTML = text;</span><br><span class="line">          span.onclick   = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         ul.removeChild(li)</span><br><span class="line">         <span class="comment">//发布者删除留言</span></span><br><span class="line">         Observer.fire(<span class="string">&#x27;removeCommentMessage&#x27;</span>, &#123;</span><br><span class="line">            num: -<span class="number">1</span></span><br><span class="line">         &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      li.appendChild(span)</span><br><span class="line">      ul.appendChild(li)</span><br><span class="line">   &#125;</span><br><span class="line">   Observer.regist(<span class="string">&quot;addCommentMessage&quot;</span>, addMsgItem);</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>工程师B<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**B工程师复制递增用户信息功能模块 */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">changeMsgNum</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> num     = e.args.num;</span><br><span class="line">      <span class="keyword">var</span> numtext = $$(<span class="string">&#x27;msg_num&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(numtext, num);</span><br><span class="line">      numtext.innerHTML = <span class="built_in">parseInt</span>(numtext.innerHTML) + num;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   Observer.regist(<span class="string">&quot;addCommentMessage&quot;</span>, changeMsgNum);</span><br><span class="line">   Observer.regist(<span class="string">&quot;removeCommentMessage&quot;</span>, changeMsgNum);</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><br>工程师C<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** c工程师负责 提交信息模块开发 */</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $$(<span class="string">&#x27;user_submit&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> text = $$(<span class="string">&#x27;user_input&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span>(text.value === <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">         alert(<span class="string">&#x27;不能空&#x27;</span>)</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//发布消息</span></span><br><span class="line">      Observer.fire(<span class="string">&#x27;addCommentMessage&#x27;</span>,&#123;</span><br><span class="line">          text: text.value,</span><br><span class="line">          num : <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">      text.value = <span class="string">&quot;&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h3 id="还可以对象间的解耦"><a href="#还可以对象间的解耦" class="headerlink" title="还可以对象间的解耦"></a>还可以对象间的解耦</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> that        = <span class="built_in">this</span>;</span><br><span class="line">       that.result = result;</span><br><span class="line">       that.say    = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that.result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//回答</span></span><br><span class="line">Student.prototype.answer = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//注册参数问题</span></span><br><span class="line">    Observer.regist(question,<span class="built_in">this</span>.say)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//睡觉</span></span><br><span class="line">Student.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//取消监听</span></span><br><span class="line">    Observer.remove(question,<span class="built_in">this</span>.say)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Teacher = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Teacher.prototype.ask = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;老师的问题是： &#x27;</span>+ question);</span><br><span class="line">    Observer.fire(question)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student(<span class="string">&#x27;学生1回答问题&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> student2 = <span class="keyword">new</span> Student(<span class="string">&#x27;学生2回答问题&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> student3 = <span class="keyword">new</span> Student(<span class="string">&#x27;学生3回答问题&#x27;</span>)</span><br><span class="line"></span><br><span class="line">student1.answer(<span class="string">&#x27;什么是设计模式&#x27;</span>);</span><br><span class="line">student1.answer(<span class="string">&#x27;解释观察者模式&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student2.answer(<span class="string">&#x27;什么是设计模式&#x27;</span>)</span><br><span class="line">student3.answer(<span class="string">&#x27;什么是设计模式&#x27;</span>)</span><br><span class="line">student3.answer(<span class="string">&#x27;解释观察者模式&#x27;</span>);</span><br><span class="line">student3.sleep(<span class="string">&#x27;解释观察者模式&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line">teacher.ask(<span class="string">&quot;什么是设计模式&quot;</span>);</span><br><span class="line">teacher.ask(<span class="string">&#x27;解释观察者模式&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190222004926.png"                      alt=""                ></p><p>在实际开发中一个工程师很难做到项目中每一个模块熟悉，模块间信息的传递不必要相互引用其他模块，只需要通过观察者注册或发布消息；</p><h3 id="其他使用场景"><a href="#其他使用场景" class="headerlink" title="其他使用场景"></a>其他使用场景</h3><p>在react中也用到的这个机制进行跨组件通信<br>举个场景例子：页面顶部的搜索框（Search）根据下面加载的内容（Content）页面不同，显示不同的默认内容。也就是 Content 组件需要发送数据给 Search 组件。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析之模板解析-一般指令</title>
      <link href="2019/02/18/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90-%E4%B8%80%E8%88%AC%E6%8C%87%E4%BB%A4/"/>
      <url>2019/02/18/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90-%E4%B8%80%E8%88%AC%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>带着问题去探索？vue中的v-text/v-html指令是如何实现的？<br>一般指令解析<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-class</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="判断是否是普通指令"><a href="#判断是否是普通指令" class="headerlink" title="判断是否是普通指令"></a>判断是否是普通指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件指令 exp表达式 也就是 方法名</span></span><br><span class="line"><span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class="line">compileUtil.eventHandler(node, me.$vm, exp, dir);</span><br><span class="line"><span class="comment">// 普通指令</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190403234756.png"                      alt=""                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compileUtil = &#123;</span><br><span class="line"><span class="comment">// 解析text</span></span><br><span class="line">text: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.bind(node, vm, exp, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">html: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.bind(node, vm, exp, <span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">class: function(node, vm, exp) &#123;</span><br><span class="line"><span class="built_in">this</span>.bind(node, vm, exp, <span class="string">&#x27;class&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最后使用更新器把节点赋值进去"><a href="#最后使用更新器把节点赋值进去" class="headerlink" title="最后使用更新器把节点赋值进去"></a>最后使用更新器把节点赋值进去</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新器  更新节点 给节点赋值</span></span><br><span class="line"><span class="keyword">var</span> updater = &#123;</span><br><span class="line">textUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line"><span class="comment">// textContent就是 &#123;&#123;word&#125;&#125;</span></span><br><span class="line">node.textContent = <span class="keyword">typeof</span> value == <span class="string">&#x27;undefined&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : value;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">htmlUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">node.innerHTML = <span class="keyword">typeof</span> value == <span class="string">&#x27;undefined&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : value;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">classUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value, oldValue</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> className = node.className;</span><br><span class="line">className = className.replace(oldValue, <span class="string">&#x27;&#x27;</span>).replace(<span class="regexp">/\s$/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">     <span class="comment">//判断 class=&quot;a b&quot; 还是 class=“b” 是否需要空格？</span></span><br><span class="line"><span class="keyword">var</span> space = className &amp;&amp; <span class="built_in">String</span>(value) ? <span class="string">&#x27; &#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">node.className = className + space + value;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">modelUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value, oldValue</span>) </span>&#123;</span><br><span class="line">node.value = <span class="keyword">typeof</span> value == <span class="string">&#x27;undefined&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1) 得到指令名和指令值(表达式) text/html/class msg/myClass<br>2) 从 data 中根据表达式得到对应的值<br>3) 根据指令名确定需要操作元素节点的什么属性</p><ul><li>v-text—textContent 属性 <em> v-html—innerHTML 属性 </em> v-class–className 属性<br>4) 将得到的表达式的值设置到对应的属性上<br>5) 移除元素的指令属性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析之模板解析-事件指令</title>
      <link href="2019/02/17/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90-%E4%BA%8B%E4%BB%B6%E6%8C%87%E4%BB%A4/"/>
      <url>2019/02/17/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90-%E4%BA%8B%E4%BB%B6%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>带着问题去探索？vue中的@click指令是如何实现的？<br><a id="more"></a><br>事件指令解析<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;button&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="首先还是判断元素节点"><a href="#首先还是判断元素节点" class="headerlink" title="首先还是判断元素节点"></a>首先还是判断元素节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否元素节点</span></span><br><span class="line"><span class="keyword">if</span> (me.isElementNode(node)) &#123;</span><br><span class="line"><span class="comment">// 编译指令</span></span><br><span class="line">me.compile(node);</span><br><span class="line"><span class="comment">// 判断是否是大括号的文本节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="然后进入compile编译"><a href="#然后进入compile编译" class="headerlink" title="然后进入compile编译"></a>然后进入compile编译</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodeAttrs = node.attributes,</span><br><span class="line">me = <span class="built_in">this</span>;</span><br><span class="line"><span class="comment">//[].slice.call(nodeAttrs) ---&gt;伪数组 转成数组</span></span><br><span class="line">[].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line"><span class="comment">//attrname = “v-on = &quot;click&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> attrName = attr.name;</span><br><span class="line"><span class="keyword">if</span> (me.isDirective(attrName)) &#123;</span><br><span class="line"><span class="keyword">var</span> exp = attr.value;</span><br><span class="line"><span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>); <span class="comment">// &quot;on:click&quot;</span></span><br><span class="line"><span class="comment">// 事件指令</span></span><br><span class="line"><span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class="line">compileUtil.eventHandler(node, me.$vm, exp, dir);</span><br><span class="line"><span class="comment">// 普通指令</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.removeAttribute(attrName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190403232043.png"                      alt=""                ></p><h3 id="如何绑定事件"><a href="#如何绑定事件" class="headerlink" title="如何绑定事件"></a>如何绑定事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件处理   事件button绑定事件监听  事件名和回调函数</span></span><br><span class="line">eventHandler: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 得到事件类型名 :click</span></span><br><span class="line"><span class="keyword">var</span> eventType = dir.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>],</span><br><span class="line"><span class="comment">//从methods中得到表达式所对应的函数（事件回调函数）</span></span><br><span class="line">fn = vm.$options.methods &amp;&amp; vm.$options.methods[exp]; <span class="comment">//取到事件的函数</span></span><br><span class="line">    <span class="comment">//如果都存在</span></span><br><span class="line"><span class="keyword">if</span> (eventType &amp;&amp; fn) &#123;</span><br><span class="line"><span class="comment">//绑定事件监听 fn.bind(vm) //让事件中 this.name --&gt;指向vm</span></span><br><span class="line"><span class="comment">// 给节点绑定事件名和回调函数dom事件监听</span></span><br><span class="line">node.addEventListener(eventType, fn.bind(vm), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190403232541.png"                      alt=""                ></p><h3 id="但我们在页面中看不到如何指令，因为"><a href="#但我们在页面中看不到如何指令，因为" class="headerlink" title="但我们在页面中看不到如何指令，因为"></a>但我们在页面中看不到如何指令，因为</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移除指令属性</span></span><br><span class="line">node.removeAttribute(attrName);</span><br></pre></td></tr></table></figure><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>模板解析(2): 事件指令解析<br>1) 从指令名中取出事件名<br>2) 根据指令的值(表达式)从 methods 中得到对应的事件处理函数对象<br>3) 给当前元素节点绑定指定事件名和回调函数的 dom 事件监听<br>4) 指令解析完后, 移除此指令属性</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析之模板解析-表达式</title>
      <link href="2019/02/16/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90/"/>
      <url>2019/02/16/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>带着问题去探索？vue中的指令是如何实现的？<br><a id="more"></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190218173717.png"                      alt=""                ></p><p>模板解析主要分：<br>大括号解析</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 el 的所有子节点取出, 添加到一个新建的文档 fragment 对象中<br>对 fragment 中的所有层次子节点递归进行编译解析处理</p><ul><li>对大括号表达式文本节点进行解析 </li><li>对元素节点的指令属性进行解析</li><li>事件指令解析 </li><li>一般指令解析</li><li>将解析后的 fragment 添加到 el 中显示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个编译的对象 编译解析我们的模板</span></span><br><span class="line"><span class="built_in">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="built_in">this</span>)</span><br></pre></td></tr></table></figure><p>简单分析编译过程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el, vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 保存vm对象到compile中</span></span><br><span class="line">    <span class="built_in">this</span>.$vm = vm;</span><br><span class="line">    <span class="built_in">this</span>.$el = <span class="built_in">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">    <span class="comment">// 如果有el元素才执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$el) &#123;</span><br><span class="line">        <span class="comment">// 取出el元素中所有子节点保存到fragment中</span></span><br><span class="line">        <span class="built_in">this</span>.$fragment = <span class="built_in">this</span>.node2Fragment(<span class="built_in">this</span>.$el);</span><br><span class="line">        <span class="comment">// 编译所有层次的子节点</span></span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">        <span class="comment">//编译好的el元素添加到页面el元素中</span></span><br><span class="line">        <span class="built_in">this</span>.$el.appendChild(<span class="built_in">this</span>.$fragment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190401233727.png"                      alt=""                ><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Compile.prototype = &#123;</span><br><span class="line">...</span><br><span class="line">compileElement: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 取出最外层的子节点</span></span><br><span class="line">        <span class="keyword">var</span> childNodes = el.childNodes,</span><br><span class="line">            me         = <span class="built_in">this</span>;           <span class="comment">//this-&gt; compile实例</span></span><br><span class="line"></span><br><span class="line">        [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> text = node.textContent;</span><br><span class="line">            <span class="keyword">var</span> reg  = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>; <span class="comment">// 匹配&#123;&#123;name&#125;&#125; 加小括号是为了$1 ==name</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (me.isElementNode(node)) &#123;</span><br><span class="line">                <span class="comment">// 编译事件指令</span></span><br><span class="line">                me.compile(node); <span class="comment">//是否有指令属性</span></span><br><span class="line">                <span class="comment">// 是文本节点吗 有&#123;&#123;&#125;&#125; 吗</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">                me.compileText(node, <span class="built_in">RegExp</span>.$1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//  是否有子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">                me.compileElement(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"> <span class="comment">// 指令处理集合</span></span><br><span class="line"><span class="keyword">var</span> compileUtil = &#123;</span><br><span class="line">    text: <span class="function"><span class="keyword">function</span> (<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.bind(node, vm, exp, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">     bind: <span class="function"><span class="keyword">function</span> (<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 得到更新节点函数</span></span><br><span class="line">        <span class="keyword">var</span> updaterFn = updater[dir + <span class="string">&#x27;Updater&#x27;</span>];</span><br><span class="line">        <span class="comment">// 调用更新节点</span></span><br><span class="line">        updaterFn &amp;&amp; updaterFn(node, <span class="built_in">this</span>._getVMVal(vm, exp));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span> (<span class="params">value, oldValue</span>) </span>&#123;</span><br><span class="line">            updaterFn &amp;&amp; updaterFn(node, value, oldValue);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 包含多个更新节点方法的工具对象</span></span><br><span class="line"><span class="keyword">var</span> updater = &#123;</span><br><span class="line">    textUpdater: <span class="function"><span class="keyword">function</span> (<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">        node.textContent = <span class="keyword">typeof</span> value == <span class="string">&#x27;undefined&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : value;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190401233239.png"                      alt=""                ></p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>1) 根据正则对象得到匹配出的表达式字符串: 子匹配/RegExp.$1 name<br>2) 从 data 中取出表达式对应的属性值<br>3) 将属性值设置为文本节点的 textContent</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析数据代理</title>
      <link href="2019/02/15/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
      <url>2019/02/15/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>怎么实现 this._test 改变而不是 this._data.test 改变触发更新？<br><a id="more"></a></p><blockquote><p>数据代理: 通过一个对象代理对另一个对象(在前一个对象内部)中属性的操作(读/写)</p></blockquote><p>vue 数据代理: 通过 vm 对象来代理 data 对象中所有属性的操作</p><blockquote><p>好处: 更方便的操作 data 中的数据</p></blockquote><h2 id="基本实现流程"><a href="#基本实现流程" class="headerlink" title="基本实现流程"></a>基本实现流程</h2><ol><li>a. 通过 Object.defineProperty()给 vm 添加与 data 对象的属性对应的属性描述符</li><li>b. 所有添加的属性都包含 getter/setter</li><li>c. getter/setter 内部去操作 data 中对应的属性数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">this</span>._data = <span class="built_in">this</span>.$options.data;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据代理</span></span><br><span class="line">    <span class="comment">// 实现 vm.xxx -&gt; vm._data.xxx</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        me._proxy(key);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    observe(data, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*代理*/</span></span><br><span class="line">_proxy(options.data);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_proxy</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(that, key, &#123;</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> that._data[key];</span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">                that._data[key] = val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码分析前期知识点</title>
      <link href="2019/02/14/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%89%8D%E6%9C%9F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2019/02/14/Vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%89%8D%E6%9C%9F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>归类了一些比较常用的方法<br><a id="more"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>react<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>angle<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190214234320.png"                      alt=""                ></p><h3 id="slice-call-lis-将伪数组转换为真数组"><a href="#slice-call-lis-将伪数组转换为真数组" class="headerlink" title="[].slice.call(lis): 将伪数组转换为真数组"></a>[].slice.call(lis): 将伪数组转换为真数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(lis <span class="keyword">instanceof</span> <span class="built_in">Array</span>, lis[<span class="number">1</span>].innerHTML, lis.forEach);</span><br><span class="line">    <span class="keyword">const</span> lis2 = <span class="built_in">Array</span>.prototype.slice.call(lis);</span><br><span class="line">    <span class="built_in">console</span>.log(lis2 <span class="keyword">instanceof</span> <span class="built_in">Array</span>, lis2[<span class="number">1</span>].innerHTML, lis2.forEach);</span><br></pre></td></tr></table></figure><h3 id="node-nodeType-得到节点类型"><a href="#node-nodeType-得到节点类型" class="headerlink" title="node.nodeType: 得到节点类型"></a>node.nodeType: 得到节点类型</h3><blockquote><p>doucment element attr text节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> attrNode = ele.getAttributeNode(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> textNode = ele.firstChild;</span><br><span class="line">    <span class="built_in">console</span>.log(ele.nodeType, attrNode.nodeType, textNode.nodeType);</span><br></pre></td></tr></table></figure><h3 id="Object-defineProperty-obj-propertyName-给对象添加-修改属性-指定描述符"><a href="#Object-defineProperty-obj-propertyName-给对象添加-修改属性-指定描述符" class="headerlink" title="Object.defineProperty(obj, propertyName, {}): 给对象添加/修改属性(指定描述符)"></a>Object.defineProperty(obj, propertyName, {}): 给对象添加/修改属性(指定描述符)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">     firstName: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">     lastName: <span class="string">&quot;B&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;fullname&quot;</span>, &#123;</span><br><span class="line">     <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&quot;-&quot;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> name = value.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">       <span class="built_in">this</span>.firstName = name[<span class="number">0</span>];</span><br><span class="line">       <span class="built_in">this</span>.lastName = name[<span class="number">1</span>];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="built_in">console</span>.log(obj.fullname);</span><br><span class="line">   obj.firstName = <span class="string">&quot;C&quot;</span></span><br><span class="line">   obj.lastName = <span class="string">&quot;D&quot;</span></span><br><span class="line">   <span class="built_in">console</span>.log(obj.fullname);</span><br><span class="line">   obj.fullname = <span class="string">&quot;E-F&quot;</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(obj.firstName, obj.lastName);</span><br></pre></td></tr></table></figure><h3 id="Object-keys-obj-得到对象自身可枚举的属性名的数组"><a href="#Object-keys-obj-得到对象自身可枚举的属性名的数组" class="headerlink" title="Object.keys(obj): 得到对象自身可枚举的属性名的数组"></a>Object.keys(obj): 得到对象自身可枚举的属性名的数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> objNames = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="built_in">console</span>.log(objNames);</span><br></pre></td></tr></table></figure><h3 id="obj-hasOwnProperty-prop-判断prop是否是obj自身的属性"><a href="#obj-hasOwnProperty-prop-判断prop是否是obj自身的属性" class="headerlink" title="obj.hasOwnProperty(prop): 判断prop是否是obj自身的属性"></a>obj.hasOwnProperty(prop): 判断prop是否是obj自身的属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">&quot;fullname&quot;</span>), obj.hasOwnProperty(<span class="string">&quot;toString&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="DocumentFragment-文档碎片-高效批量更新多个节点"><a href="#DocumentFragment-文档碎片-高效批量更新多个节点" class="headerlink" title="DocumentFragment: 文档碎片(高效批量更新多个节点)"></a>DocumentFragment: 文档碎片(高效批量更新多个节点)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建fragment</span></span><br><span class="line">    <span class="keyword">const</span> ul = ele.getElementsByTagName(<span class="string">&quot;ul&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">    <span class="comment">// 取出ul中所有子节点包括空格 换行符</span></span><br><span class="line">    <span class="keyword">let</span> child;</span><br><span class="line">    <span class="built_in">console</span>.log(ul.firstChild);</span><br><span class="line">    <span class="keyword">while</span> (child = ul.firstChild) &#123;</span><br><span class="line">      fragment.appendChild(child) <span class="comment">//先移除ul中删除 添加到fragment</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新fragment中的li文本</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.call(fragment.childNodes));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.prototype.slice.call(fragment.childNodes).forEach(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>) <span class="comment">//元素节点</span></span><br><span class="line">      &#123;</span><br><span class="line">        node.textContent = <span class="string">&quot;改变之后&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 插入ul中更新</span></span><br><span class="line">    ul.appendChild(fragment);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactNative之屏幕适配</title>
      <link href="2019/02/13/ReactNative%E4%B9%8B%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
      <url>2019/02/13/ReactNative%E4%B9%8B%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>RN中单位是dp，这个跟Android中的单位是一致的<br><a id="more"></a><br>说到这里，不妨把涉及到的一些概念梳理一下：</p><ol><li>dp（dip）（Density-independent pixels）一种基于屏幕密度的抽象单位，像素无关密度。在每英寸160点的显示器上，1dp = 1px。特别需要注意dp是相对长度单位，简单的说1dp在不同的屏幕或者不同的ppi下展示出来的“物理长度”可能不一致。</li><li>px 像素点。也是相对长度</li><li>pt 中文叫磅，等于1/72英寸。物理长度</li><li>sp（与刻度无关的像素）：与dp类似，但是可以根据用户的字体大小首选项进行缩放，Android设置字体的时候使用。</li><li>density 密度。这个可以参考上边说的，跟pixelRatio相近，约等于DPI/160。</li><li>pixelRatio 设备像素比。通过PixelRatio.get()获得</li><li>PPI (pixels per inch) 图像分辨率 （每英寸所包含的像素数，指对角线）</li><li>DPI（dots per inch）打印精度 （每英寸所能打印的点数，指宽高）</li><li>分辨率 ： 横纵2个方向的像素点的数量，常见取值 480X800 ，750X1334</li><li>屏幕尺寸： 屏幕对角线的长度（英寸）。电脑电视同理。<br>所以我们可以知道： </li></ol><blockquote><p>1dp=（1 * density） px，相反1px=（1/density）dp</p></blockquote><p>那么，我们如何在RN中设置宽度为1px的分割线呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width: <span class="number">1</span> / PixelRatio.get()</span><br></pre></td></tr></table></figure><p>这样就可以了！</p><p>另外，一个设备的宽高，我们可以这样获得：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">width: Dimensions.get(<span class="string">&#x27;window&#x27;</span>).width,</span><br><span class="line">height: Dimensions.get(<span class="string">&#x27;window&#x27;</span>).height,</span><br></pre></td></tr></table></figure><p>那么这个得到的宽高是什么呢？<br>我们可以打印出来，比如iPhone6s，这个值打印出来是width：375，height：667，因为6s的density是2，所以我们知道这个得到的宽高是dp。</p><h1 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 屏幕工具类 以及一些常用的工具类封装</span></span><br><span class="line"><span class="comment"> * ui设计基准,iphone 6 2倍图</span></span><br><span class="line"><span class="comment"> * width:750px</span></span><br><span class="line"><span class="comment"> * height:1334px</span></span><br><span class="line"><span class="comment"> * @2x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 设备的像素密度，例如：</span></span><br><span class="line"><span class="comment"> PixelRatio.get() === 1          mdpi Android 设备 (160 dpi)</span></span><br><span class="line"><span class="comment"> PixelRatio.get() === 1.5        hdpi Android 设备 (240 dpi)</span></span><br><span class="line"><span class="comment"> PixelRatio.get() === 2          iPhone 4, 4S,iPhone 5, 5c, 5s,iPhone 6,xhdpi Android 设备 (320 dpi)</span></span><br><span class="line"><span class="comment"> PixelRatio.get() === 3          iPhone 6 plus , xxhdpi Android 设备 (480 dpi)</span></span><br><span class="line"><span class="comment"> PixelRatio.get() === 3.5        Nexus 6       */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  PixelRatio,</span><br><span class="line">  Dimensions,</span><br><span class="line">  Platform,</span><br><span class="line">  AsyncStorage</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> sW = Dimensions.get(<span class="string">&#x27;window&#x27;</span>).width;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> sH = Dimensions.get(<span class="string">&#x27;window&#x27;</span>).height;</span><br><span class="line"><span class="comment">// 返回字体大小的缩放因子</span></span><br><span class="line"><span class="keyword">const</span> fontScale= PixelRatio.getFontScale();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> pixelRatio = PixelRatio.get();</span><br><span class="line"><span class="comment">//默认像素密度</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DEFAULT_DENSITY = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//px转换成dp</span></span><br><span class="line"><span class="comment">//以iphone6为基准,如果以其他尺寸为基准的话,请修改下面的defaultWidth和defaultHeight为对应尺寸即可. 以下为1倍图时</span></span><br><span class="line"><span class="keyword">const</span> defaultWidth = <span class="number">375</span>; <span class="comment">//pt</span></span><br><span class="line"><span class="keyword">const</span> defaultHeight = <span class="number">667</span>; <span class="comment">//pt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//缩放比例</span></span><br><span class="line"><span class="keyword">const</span> _scaleWidth = sW / defaultWidth;</span><br><span class="line"><span class="keyword">const</span> _scaleHeight = sH / defaultHeight;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;缩放比例&#x27;</span>,sW,sH,fontScale,_scaleWidth,_scaleHeight)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置宽度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>size   输入px单位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">px2dpw</span>(<span class="params">size:<span class="built_in">Number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> size * _scaleWidth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置高度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>size   输入px单位</span></span><br><span class="line"><span class="comment"> * height ,paddingVertical ,paddingTop ,paddingBottom ,marginVertical ,marginTop ,marginBottom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">px2dph</span>(<span class="params">size: <span class="built_in">Number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> size * _scaleHeight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置字体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>size   输入px单位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">px2dpf</span>(<span class="params">size: <span class="built_in">Number</span>, allowFontScaling = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> scale = <span class="built_in">Math</span>.min(_scaleWidth, _scaleHeight);</span><br><span class="line">  <span class="keyword">const</span> fontSize = allowFontScaling ? <span class="number">1</span> : fontScale;</span><br><span class="line">  <span class="keyword">return</span> size * scale / fontSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// iPhoneX</span></span><br><span class="line"><span class="keyword">const</span> X_WIDTH = <span class="number">375</span>;</span><br><span class="line"><span class="keyword">const</span> X_HEIGHT = <span class="number">812</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否为iphoneX</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isIphoneX</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    Platform.OS === <span class="string">&#x27;ios&#x27;</span> &amp;&amp;</span><br><span class="line">    ((screenH === X_HEIGHT &amp;&amp; screenW === X_WIDTH) ||</span><br><span class="line">      (screenH === X_WIDTH &amp;&amp; screenW === X_HEIGHT))</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Text style=&#123;&#123;<span class="attr">fontSize</span>: ScreenUtil.px2dpf(<span class="number">30</span>)&#125;&#125;&gt;已适配&lt;/Text&gt;</span><br><span class="line">&lt;View style=&#123;&#123;</span><br><span class="line">            height: ScreenUtil.px2dph(<span class="number">60</span>),</span><br><span class="line">            width: ScreenUtil.px2dpw(<span class="number">300</span>),</span><br><span class="line">            backgroundColor: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">          &#125;&#125;&gt;&lt;/View&gt;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190514004535.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoose联表查询方式</title>
      <link href="2019/02/08/mongoose%E8%81%94%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>2019/02/08/mongoose%E8%81%94%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>mongoose的一些高级用法：<br><a id="more"></a><br>解决如下图片问题<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190209001433.png"                      alt=""                ><br>在关系型数据库如mysql中我们可以很容易解决</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.name,student.age,class.name <span class="keyword">FROM</span> student,class <span class="keyword">WHERE</span> student.classId <span class="operator">=</span> class.id</span><br></pre></td></tr></table></figure><h1 id="models中的配置"><a href="#models中的配置" class="headerlink" title="models中的配置"></a>models中的配置</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="comment">/*定义数据模式*/</span></span><br><span class="line"><span class="keyword">var</span> OrderSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  uid: &#123;</span><br><span class="line">    type: mongoose.Schema.ObjectId, <span class="comment">//关键点  主键类型</span></span><br><span class="line">    ref : <span class="string">&#x27;user&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  amount: &#123;</span><br><span class="line">    type    : <span class="built_in">Number</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  oType: &#123;</span><br><span class="line">    type    : <span class="built_in">Number</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;, <span class="comment">// 订单类型</span></span><br><span class="line">  status: &#123;</span><br><span class="line">    type    : <span class="built_in">Number</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;, <span class="comment">// 订单的状态:1完成  2未完成 3失效</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;order&#x27;</span>, OrderSchema, <span class="string">&quot;order&quot;</span>)</span><br><span class="line"><span class="comment">//解决mongose中数据库表名+s的问题，第三个参数与第一个参数名必须相同</span></span><br></pre></td></tr></table></figure><h1 id="第一种方式populate"><a href="#第一种方式populate" class="headerlink" title="第一种方式populate"></a>第一种方式populate</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/getOrder&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> Order.find().populate(&#123;</span><br><span class="line">    path  : <span class="string">&#x27;uid&#x27;</span>,</span><br><span class="line">    model : User,</span><br><span class="line">    select: <span class="string">&#x27;_id phone status&#x27;</span></span><br><span class="line">  &#125;).exec()</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">    data: res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    &quot;code&quot;: 0,</span></span><br><span class="line"><span class="comment">    &quot;data&quot;: [</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            &quot;_id&quot;: &quot;5c5da7407852d511cc3a82fd&quot;,</span></span><br><span class="line"><span class="comment">            &quot;uid&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;_id&quot;: &quot;5c5da6347852d511cc3a82f6&quot;,</span></span><br><span class="line"><span class="comment">                &quot;phone&quot;: &quot;001&quot;,</span></span><br><span class="line"><span class="comment">                &quot;status&quot;: &quot;0&quot;</span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">            &quot;amount&quot;: 0,</span></span><br><span class="line"><span class="comment">            &quot;oType&quot;: 1,</span></span><br><span class="line"><span class="comment">            &quot;status&quot;: 0,</span></span><br><span class="line"><span class="comment">            &quot;__v&quot;: 0</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    ]    </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种方式$lookup</p><p>下面我简单介绍一些$lookup中的参数：</p><ol><li>from： 需要关联的表【 orders】</li><li>localField: 【product】 表需要关联的键。</li><li>foreignField：【 orders】 的matching key。</li><li>as： 对应的外键集合的数据，【 因为可能是一对多的， 对吧】</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/getOrder&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> Order.aggregate([&#123;</span><br><span class="line">    $lookup: &#123;</span><br><span class="line">      <span class="keyword">from</span>        : <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      localField  : <span class="string">&#x27;uid&#x27;</span>,</span><br><span class="line">      foreignField: <span class="string">&#x27;_id&#x27;</span>,</span><br><span class="line">      <span class="keyword">as</span>          : <span class="string">&quot;user_docs&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;])</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">    data: res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    &quot;code&quot;: 0,</span></span><br><span class="line"><span class="comment">    &quot;data&quot;: [</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            &quot;_id&quot;: &quot;5c5da7407852d511cc3a82fd&quot;,</span></span><br><span class="line"><span class="comment">            &quot;uid&quot;: &quot;5c5da6347852d511cc3a82f6&quot;,</span></span><br><span class="line"><span class="comment">            &quot;amount&quot;: 0,</span></span><br><span class="line"><span class="comment">            &quot;oType&quot;: 1,</span></span><br><span class="line"><span class="comment">            &quot;status&quot;: 0,</span></span><br><span class="line"><span class="comment">            &quot;__v&quot;: 0,</span></span><br><span class="line"><span class="comment">            &quot;user_docs&quot;: [</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                    &quot;_id&quot;: &quot;5c5da6347852d511cc3a82f6&quot;,</span></span><br><span class="line"><span class="comment">                    &quot;meta&quot;: &#123;</span></span><br><span class="line"><span class="comment">                        &quot;createAt&quot;: &quot;2019-02-08T15:50:51.864Z&quot;,</span></span><br><span class="line"><span class="comment">                        &quot;updateAt&quot;: &quot;2019-02-08T15:50:51.864Z&quot;</span></span><br><span class="line"><span class="comment">                    &#125;,</span></span><br><span class="line"><span class="comment">                    &quot;phone&quot;: &quot;001&quot;,</span></span><br><span class="line"><span class="comment">                    &quot;status&quot;: &quot;0&quot;,</span></span><br><span class="line"><span class="comment">                    &quot;__v&quot;: 0</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            ]</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>附加一个模糊查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从URL中传来的 keyword参数</span></span><br><span class="line"><span class="keyword">const</span> keyword = <span class="built_in">this</span>.params.keyword </span><br><span class="line"><span class="comment">//不区分大小写</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">&#x27;i&#x27;</span>) </span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> User.find(</span><br><span class="line">    &#123;</span><br><span class="line">        $or : [ <span class="comment">//多条件，数组</span></span><br><span class="line">            &#123;<span class="attr">nick</span> : &#123;<span class="attr">$regex</span> : reg&#125;&#125;,</span><br><span class="line">            &#123;<span class="attr">email</span> : &#123;<span class="attr">$regex</span> : reg&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        password : <span class="number">0</span> <span class="comment">// 返回结果不包含密码字段</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        sort : &#123; <span class="attr">_id</span> : -<span class="number">1</span> &#125;,<span class="comment">// 按照 _id倒序排列</span></span><br><span class="line">        limit : <span class="number">100</span> <span class="comment">// 查询100条</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的生命周期</title>
      <link href="2019/01/22/Vue%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2019/01/22/Vue%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>Vue实例有一个完整的生命周期，从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。<br><a id="more"></a></p><blockquote><p>通俗说就是Vue实例从创建到销毁的过程，就是生命周期。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/vue-instances-6.png"                      alt=""                ></p><h4 id="文字说明"><a href="#文字说明" class="headerlink" title="文字说明"></a>文字说明</h4><table><thead><tr><th>生命周期</th><th>说明</th></tr></thead><tbody><tr><td>beforeCreate</td><td>在实例初始化之后，数据观测（Data Observer）和event/watcher事件配置之前被调用</td></tr><tr><td>create</td><td>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据(Data Observer)、属性和方法的运算，watch/event事件回调。然而，挂载阶段还没开始，$el属性目前不可见</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用：相关的render函数首次被调用</td></tr><tr><td>mounted</td><td>el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。如果root实例挂载了一个文档内元素，当mounted被调用时vm.$el也在文档内</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟DOM重新渲染和打补丁之前.你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程</td></tr><tr><td>updated</td><td>由于数据更改导致虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件DOM已经更新，所以你现在可以执行依赖于DOM的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。<code>该钩子在服务器端渲染期间不被调用</code></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用</td></tr><tr><td>destroyed</td><td>Vue实例销毁后调用。调用后，Vue实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用</td></tr></tbody></table><h5 id="小结一下："><a href="#小结一下：" class="headerlink" title="小结一下："></a>小结一下：</h5><ol><li>beforeCreate和created：创建Vue实例</li><li>beforeMount和mounted：挂载目标元素</li><li>beforeUpdate和updated：改变后重新渲染</li><li>beforeDestroy和destroyed：销毁Vue实例</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><p>不要在选项属性或回调上使用箭头函数，比如 created: () =&gt; console.log(this.a) 或 vm.$watch(‘a’, newValue =&gt; this.myMethod())。<code>因为箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例</code>，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190306142344.png"                      alt=""                ></p><h4 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">&quot;马里奥&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 创建前 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);<span class="comment">// undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);<span class="comment">// undefined</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在实例创建之后同步调用</span></span><br><span class="line">    <span class="comment">// 此时实例已结束解析选项</span></span><br><span class="line">    <span class="comment">// 这意味着已建立：数据绑定，计算属性,方法，watcher/事件回调</span></span><br><span class="line">    <span class="comment">// 但是还没有开始DOM编译，$el还不存在，但是实例存在，即this.name存在，可以打印出来</span></span><br><span class="line">    <span class="comment">//在这里可以在渲染前倒数第二次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 已创建 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name); <span class="comment">// &quot;马里奥&quot;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el); <span class="comment">// undefined</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCompile: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 未开始编译 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  compiled: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在编译结束之后调用</span></span><br><span class="line">    <span class="comment">// 此时所有的指令已生效，因而数据的变化将触发DOM更新</span></span><br><span class="line">    <span class="comment">// 但是不担保$el已插入文档</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 编译完成 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//注意dom还没有生成html页面上去</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== Mount之前 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">//挂在完成 也就是模板中的html渲染到了页面中</span></span><br><span class="line">   <span class="comment">//一般这里做一些ajax操作 </span></span><br><span class="line">   <span class="comment">//只执行一次</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== Mount完成 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 更新前 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//这里不能更改数据，否则会陷入死循环</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 更新完成 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  ready: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在编译结束和$el 第一次插入文档之后调用，如果在第一次attached钩子之后调用</span></span><br><span class="line">    <span class="comment">// 注意，必须是由Vue插入，比如 vm.$appendTo()等方法或指令更新，才会触发ready 钩子</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 一切都准备好了 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  attached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// app.$appendTo(&#x27;#app2&#x27;)暂时触发不了，不知道怎么解决</span></span><br><span class="line">    <span class="comment">// 在 vm.$el插入DOM时调用。必须是由指令或实例方法，比如$appendTo()插入，直接操作vm.$el不会触发这个钩子</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 插入DOM成功 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  detached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 触发事件 app.$destroy(true)，其中参数true控制是否删除DOM节点或者app.$remove()</span></span><br><span class="line">    <span class="comment">// 在vm.$el 从DOM中删除时调用。必须是由指令或实例方法删除，直接操作vm.$el不会触发这个钩子</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 删除DOM成功 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 触发方式，在console里面打印app.$destroy()</span></span><br><span class="line">    <span class="comment">// 在开始销毁实例时调用。此时实例仍然有功能</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 销毁前 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 触发方式，在console里面打app.$destroy()</span></span><br><span class="line">    <span class="comment">// 其中app.$destroy(true)是删除DOM节点，会触发detached函数，但是实例仍然存在</span></span><br><span class="line">    <span class="comment">// 在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑</span></span><br><span class="line">    <span class="comment">// 注意是解绑不是销毁，所有的子实例也已经被销毁</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;===== 已销毁 =====&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>页面初始化只执行这些函数<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190306144953.png"                      alt=""                ><br>点击输入框更改<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190306145048.png"                      alt=""                ><br>执行销毁操作<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190306145136.png"                      alt=""                ></p><p>结合官方文档简单总结了一下如图显示</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/vue-instances-and-life-cycles-12.png"                      alt=""                ></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a class="link"   href="https://www.w3cplus.com/vue/vue-instances-and-life-cycles.html" >大漠<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>饿了么webApp项目回顾-技巧篇</title>
      <link href="2019/01/20/%E9%A5%BF%E4%BA%86%E4%B9%88webApp%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE-%E6%8A%80%E5%B7%A7%E7%AF%87/"/>
      <url>2019/01/20/%E9%A5%BF%E4%BA%86%E4%B9%88webApp%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE-%E6%8A%80%E5%B7%A7%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<ol><li>侧边栏吸顶效果的实现</li><li>侧边栏点菜数量的实现</li><li>购物车抛物线的实现(⭐️⭐️⭐️)<a id="more"></a></li></ol><h2 id="侧边栏吸顶效果的实现"><a href="#侧边栏吸顶效果的实现" class="headerlink" title="侧边栏吸顶效果的实现"></a>侧边栏吸顶效果的实现</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/吸顶效果.gif"                      alt=""                ></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods&quot;</span>&gt;</span></span><br><span class="line"> &lt;div</span><br><span class="line">   class = &quot;headtitle&quot;</span><br><span class="line">   v-if  = &quot;fixedTitle&quot;</span><br><span class="line">   ref   = &quot;fixed&quot;</span><br><span class="line"> &gt;&#123;&#123;fixedTitle&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> &lt;div</span><br><span class="line">   class = &quot;menu-wrapper&quot;</span><br><span class="line">   ref   = &quot;menuWrapper&quot;</span><br><span class="line"> &gt;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>逻辑处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fixedTitle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">//当scrolly大于  -标题高度的时候不显示</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;现在的y&quot;</span> + <span class="built_in">this</span>.scrollY);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.scrollY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.goods[<span class="built_in">this</span>.itemIndex] ? <span class="built_in">this</span>.goods[<span class="built_in">this</span>.itemIndex].name: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="侧边栏点菜数量的实现"><a href="#侧边栏点菜数量的实现" class="headerlink" title="侧边栏点菜数量的实现"></a>侧边栏点菜数量的实现</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/侧边栏点菜数量.gif"                      alt=""                ></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">class = &quot;menu-wrapper&quot;</span><br><span class="line">ref   = &quot;menuWrapper&quot;</span><br><span class="line">&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &lt;li</span><br><span class="line">      v-for  = &quot;(item, index) in goods&quot;</span><br><span class="line">    :key     = &quot;index&quot;</span><br><span class="line">      class  = &quot;menu-item&quot;</span><br><span class="line">    :class   = &quot;&#123;&#x27;current&#x27;:currentIndex===index&#125;&quot;</span><br><span class="line">      @click = &quot;selectMenu(index,$event)&quot;</span><br><span class="line">      ref    = &quot;menuList&quot;</span><br><span class="line">  &gt;</span><br><span class="line"></span><br><span class="line">    &lt;span</span><br><span class="line">      class  = &quot;num&quot;</span><br><span class="line">      v-show = &quot;barTxts &amp;&amp; barTxts[index].count &gt;0&quot;</span><br><span class="line">    &gt;&#123;&#123;barTxts[index].count&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text border-1px&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190128092519.png"                      alt=""                ><br>在添加按钮组件中set一个事件改变增加了food中一个属性<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190128092939.png"                      alt=""                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="title">barTxts</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = [];  <span class="comment">//初始化数组</span></span><br><span class="line">  <span class="built_in">this</span>.goods.forEach(<span class="function"><span class="params">good</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; type, name, foods &#125; = good;</span><br><span class="line">    <span class="keyword">let</span>   count                 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//判断food中每一个对象是否有新增的count属性并获取数量</span></span><br><span class="line">    foods.forEach(<span class="function"><span class="params">food</span> =&gt;</span> &#123;</span><br><span class="line">      count += food.count || <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    ret.push(&#123;</span><br><span class="line">      type,</span><br><span class="line">      name,</span><br><span class="line">      count</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(ret);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="购物车抛物线的实现"><a href="#购物车抛物线的实现" class="headerlink" title="购物车抛物线的实现"></a>购物车抛物线的实现</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/购物车抛物线.gif"                      alt=""                ></p><p>主要实现过程看图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/组件间的传值.jpg"                      alt=""                ></p><p>1.cartcontrol.vue，添加商品时，派发一个事件给goods.vue，获取当前DOM，方便计算小球下落位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="title">addCart</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!event._constructed) &#123;<span class="comment">//非自定义点击事件的情况下return掉，这样pc端就不会检测到两次点击事件。</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(this.food.count);</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.food.count)&#123;</span><br><span class="line">    Vue.set(<span class="built_in">this</span>.food,<span class="string">&#x27;count&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//给对象添加他不存在的属性时，这样的方式是不行的。需要用Vue的Vue.set()</span></span><br><span class="line">    <span class="comment">// this.food.count=1;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.food.count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.$emit(<span class="string">&#x27;cart-add&#x27;</span>,event.target);<span class="comment">//添加商品时，派发一个事件，将当前DOM传递给goods.vue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.goods.vue接收</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cartcontrol-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cartcontrol</span> <span class="attr">:food</span>=<span class="string">&#x27;food&#x27;</span> @<span class="attr">cart-add</span>=<span class="string">&quot;cartAdd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cartcontrol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逻辑处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">cartAdd</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//体验优化，异步执行下落动画，画面不容易卡顿。</span></span><br><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.$refs.shopcart.drop(el);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>3.goods.vue中调用子组件shopcart.vue的drop()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">drop</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(el);</span></span><br><span class="line">    <span class="comment">//遍历小球，找到show为false的小球</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.balls.length;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> ball = <span class="built_in">this</span>.balls[i];</span><br><span class="line">    <span class="keyword">if</span>(!ball.show) &#123;</span><br><span class="line">    ball.show = <span class="literal">true</span>;</span><br><span class="line">    ball.el = el;<span class="comment">//用小球的el对象保留这个element</span></span><br><span class="line">    <span class="built_in">this</span>.dropBalls.push(ball);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>shopcart.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ball-container&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;drop&quot;</span> <span class="attr">v-on:before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span> <span class="attr">v-on:enter</span>=<span class="string">&quot;enter&quot;</span> <span class="attr">v-on:after-enter</span>=<span class="string">&quot;afterEnter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(ball,index) in balls&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;ball.show&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner inner-hook&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>逻辑处理调用vue的javascript钩子函数</p><blockquote><p>基础了解：向右表示X轴的正方向，向下表示Y轴的正方向</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*el是小球;</span></span><br><span class="line"><span class="comment">遍历所有show为true的小球*/</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="built_in">this</span>.balls.length;</span><br><span class="line"><span class="keyword">while</span>(count--) &#123;</span><br><span class="line"><span class="keyword">let</span> ball = <span class="built_in">this</span>.balls[count];</span><br><span class="line"><span class="keyword">if</span>(ball.show) &#123;</span><br><span class="line"><span class="keyword">let</span> rect = ball.el.getBoundingClientRect();<span class="comment">//获得该元素（加号）相对于视口的位置的偏移（left,top）</span></span><br><span class="line"><span class="keyword">let</span> x = rect.left-<span class="number">32</span>;</span><br><span class="line"><span class="comment">//为什么y是负值，因为起始位置在购物车图标位置要挪到+号位置进入动画</span></span><br><span class="line"><span class="keyword">let</span> y = -(<span class="built_in">window</span>.innerHeight-rect.top-<span class="number">22</span>); </span><br><span class="line">el.style.display = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">el.style.webkitTransform = <span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span>;<span class="comment">//外层做纵向运动</span></span><br><span class="line">el.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;y&#125;</span>px,0)`</span>;</span><br><span class="line"><span class="keyword">let</span> inner = el.getElementsByClassName(<span class="string">&#x27;inner-hook&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">inner.style.webkitTransform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span>;</span><br><span class="line">inner.style.transform = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,0,0)`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">enter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> rf = el.offsetHeight;<span class="comment">//必须重绘，再进行transform才有用</span></span><br><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    el.style.webkitTransform = <span class="string">&#x27;translate3d(0,0,0)&#x27;</span>;<span class="comment">//外层做纵向运动</span></span><br><span class="line">el.style.transform = <span class="string">&#x27;translate3d(0,0,0)&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> inner = el.getElementsByClassName(<span class="string">&#x27;inner-hook&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">inner.style.webkitTransform = <span class="string">&#x27;translate3d(0,0,0)&#x27;</span>;</span><br><span class="line">inner.style.transform = <span class="string">&#x27;translate3d(0,0,0)&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//状态重置</span></span><br><span class="line"><span class="keyword">let</span> ball = <span class="built_in">this</span>.dropBalls.shift();</span><br><span class="line"><span class="keyword">if</span>(ball) &#123;</span><br><span class="line">ball.show = <span class="literal">false</span>;</span><br><span class="line">    el.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>动画样式采用cubic曲线<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ball-container</span> &#123;</span><br><span class="line">    <span class="selector-class">.ball</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">32px</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">22px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">heigth: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">200</span>;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">160</span>,<span class="number">220</span>);</span><br><span class="line">&#125;</span><br><span class="line">&amp;<span class="selector-class">.drop-enter-active</span>,&amp;<span class="selector-class">.drop-leave-active</span> &#123;</span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">0.4s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.49</span>,-<span class="number">0.29</span>,<span class="number">0.75</span>,<span class="number">0.41</span>);</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">0.4s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>饿了么webApp项目回顾-动画篇</title>
      <link href="2019/01/19/%E9%A5%BF%E4%BA%86%E4%B9%88webApp%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE%E5%8A%A8%E7%94%BB%E7%AF%87/"/>
      <url>2019/01/19/%E9%A5%BF%E4%BA%86%E4%B9%88webApp%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE%E5%8A%A8%E7%94%BB%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>动画效果内容的一些整理记录<br><a id="more"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;detailShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先了解下过度动画<br>在进入/离开的过渡中，会有 6 个 class 切换。</p><ol><li><p><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</p></li><li><p><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</p></li><li><p><code>v-enter-to</code>: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。</p></li><li>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li><li><code>v-leave-to</code>: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190126001322.png"                      alt=""                ></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.detail</span></span><br><span class="line">      <span class="attribute">position</span>: fixed</span><br><span class="line">      z-index: <span class="number">100</span></span><br><span class="line">      top: <span class="number">0</span></span><br><span class="line">      left: <span class="number">0</span></span><br><span class="line">      width: <span class="number">100%</span></span><br><span class="line">      height: <span class="number">100%</span></span><br><span class="line">      overflow: auto</span><br><span class="line">      backdrop-filter: <span class="built_in">blur</span>(<span class="number">10px</span>)</span><br><span class="line">      opacity: <span class="number">1</span></span><br><span class="line">      background: <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">0.8</span>)</span><br><span class="line">      &amp;.fade-enter-active, &amp;.fade-leave-active</span><br><span class="line">        transition: all <span class="number">0.5s</span></span><br><span class="line">      &amp;.fade-enter, &amp;.fade-leave-active</span><br><span class="line">        opacity: <span class="number">0</span></span><br><span class="line">        background: <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/zankai.gif"                      alt=""                ></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 购物车弹窗布局开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fold&quot;</span>&gt;</span></span><br><span class="line">      &lt;div</span><br><span class="line">        class  = &quot;shopcart-list&quot;</span><br><span class="line">        v-show = &quot;listShow&quot;</span><br><span class="line">       &gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 购物车弹窗布局结束 --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.shopcart-list</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">z-index</span> -<span class="number">1</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">transform</span> translate3d(<span class="number">0</span>, -<span class="number">100%</span>, <span class="number">0</span>)</span><br><span class="line">    &amp;<span class="selector-class">.fold-enter-active</span>, &amp;<span class="selector-class">.fold-leave-active</span></span><br><span class="line">      <span class="attribute">transition</span> all <span class="number">0.5s</span></span><br><span class="line">    &amp;<span class="selector-class">.fold-enter</span>, &amp;<span class="selector-class">.fold-leave-active</span></span><br><span class="line">      <span class="attribute">transform</span> translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>遮罩层的处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 遮罩层布局开始 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">     &lt;div</span><br><span class="line">       class  = &quot;list-mask&quot;</span><br><span class="line">       @click = &quot;hideList&quot;</span><br><span class="line">       v-show = &quot;listShow&quot;</span><br><span class="line">     &gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 遮罩层布局结束 --&gt;</span></span><br></pre></td></tr></table></figure><p>css样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-mask</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">100%</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">40</span></span><br><span class="line">  backdrop-<span class="attribute">filter</span> blur(<span class="number">10px</span>)</span><br><span class="line">  <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line">  <span class="attribute">background</span> rgba(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">0.6</span>)</span><br><span class="line">  &amp;<span class="selector-class">.fade-enter-active</span>, &amp;<span class="selector-class">.fade-leave-active</span></span><br><span class="line">    <span class="attribute">transition</span> all <span class="number">0.5s</span></span><br><span class="line">  &amp;<span class="selector-class">.fade-enter</span>, &amp;<span class="selector-class">.fade-leave-active</span></span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">background</span> rgba(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>侧滑</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/sild侧滑.gif"                      alt=""                ></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;move&quot;</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>css样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.food</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">bottom</span> <span class="number">48px</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">30</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">  <span class="attribute">background</span> <span class="selector-id">#fff</span></span><br><span class="line">  <span class="attribute">transform</span> translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  &amp;<span class="selector-class">.move-enter-active</span>, &amp;<span class="selector-class">.move-leave-active</span></span><br><span class="line">    <span class="attribute">transition</span> all <span class="number">0.2s</span> linear</span><br><span class="line">  &amp;<span class="selector-class">.move-enter</span>, &amp;<span class="selector-class">.move-leave-active</span></span><br><span class="line">    <span class="attribute">transform</span> translate3d(<span class="number">100%</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>小球滚动动画</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/add滚动.gif"                      alt=""                ></p><p>代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;move&quot;</span>&gt;</span></span><br><span class="line">     &lt;div</span><br><span class="line">       class       = &quot;cart-decrease&quot;</span><br><span class="line">       v-show      = &quot;food.count&gt;0&quot;</span><br><span class="line">       @click.stop = &quot;decrease&quot;</span><br><span class="line">     &gt;</span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inner icon-remove_circle_outline&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">   &lt;div</span><br><span class="line">     class  = &quot;cart-count&quot;</span><br><span class="line">     v-show = &quot;food.count&gt;0&quot;</span><br><span class="line">   &gt;&#123;&#123;food.count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   &lt;div</span><br><span class="line">     class       = &quot;cart-add icon-add_circle&quot;</span><br><span class="line">     @click.stop = &quot;add&quot;</span><br><span class="line">   &gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cartcontrol</span></span><br><span class="line">  <span class="attribute">font-size</span> <span class="number">0</span></span><br><span class="line">  <span class="selector-class">.cart-decrease</span></span><br><span class="line">    <span class="attribute">display</span> inline-block</span><br><span class="line">    <span class="attribute">padding</span> <span class="number">6px</span></span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line">    <span class="attribute">transform</span> translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="selector-class">.inner</span></span><br><span class="line">      <span class="attribute">display</span> inline-block</span><br><span class="line">      <span class="attribute">line-height</span> <span class="number">24px</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">24px</span></span><br><span class="line">      <span class="attribute">color</span> rgb(<span class="number">0</span>, <span class="number">160</span>, <span class="number">220</span>)</span><br><span class="line">      <span class="attribute">transition</span> all <span class="number">0.4s</span> linear</span><br><span class="line">      <span class="attribute">transform</span> rotate(<span class="number">0</span>)</span><br><span class="line">    &amp;<span class="selector-class">.move-enter-active</span>, &amp;<span class="selector-class">.move-leave-active</span></span><br><span class="line">      <span class="attribute">transition</span> all <span class="number">0.4s</span> linear</span><br><span class="line">    &amp;<span class="selector-class">.move-enter</span>, &amp;<span class="selector-class">.move-leave-active</span></span><br><span class="line">      <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">transform</span> translate3d(<span class="number">24px</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="selector-class">.inner</span></span><br><span class="line">        <span class="attribute">transform</span> rotate(<span class="number">180deg</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>饿了么webApp项目回顾-样式篇</title>
      <link href="2019/01/18/%E9%A5%BF%E4%BA%86%E4%B9%88webApp%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE%E6%A0%B7%E5%BC%8F%E7%AF%87/"/>
      <url>2019/01/18/%E9%A5%BF%E4%BA%86%E4%B9%88webApp%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE%E6%A0%B7%E5%BC%8F%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>样式内容的一些整理记录<br><a id="more"></a></p><h2 id="解决移动端1px边框问题"><a href="#解决移动端1px边框问题" class="headerlink" title="解决移动端1px边框问题"></a>解决移动端1px边框问题</h2><p>其实这个原因很简单，因为css中的1px并不等于移动设备的1px，这些由于不同的手机有不同的像素密度。在window对象中有一个devicePixelRatio属性，他可以反应css中的像素与设备的像素比。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190125223600.png"                      alt=""                ><br>解决的方式<br>伪元素+transform</p><p>构建1个伪元素, border为1px, 再以transform缩放到50%。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">border-1px($color)</span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line">  &amp;:after</span><br><span class="line">    display: block</span><br><span class="line">    position: absolute</span><br><span class="line">    left: <span class="number">0</span></span><br><span class="line">    bottom: <span class="number">0</span></span><br><span class="line">    width: <span class="number">100%</span></span><br><span class="line">    border-top: <span class="number">1px</span> solid $color</span><br><span class="line">    content: <span class="string">&#x27; &#x27;</span></span><br><span class="line">    </span><br><span class="line">/*根据手机不同分辨率下的dpi*/</span><br><span class="line">@media (-webkit-min-device-pixel-ratio: <span class="number">1.5</span>),(min-device-pixel-ratio: <span class="number">1.5</span>)</span><br><span class="line">  .border-<span class="number">1px</span></span><br><span class="line">    &amp;::after</span><br><span class="line">      -webkit-transform: <span class="built_in">scaleY</span>(<span class="number">0.7</span>)</span><br><span class="line">      transform: <span class="built_in">scaleY</span>(<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line">@media (-webkit-min-device-pixel-ratio: <span class="number">2</span>),(min-device-pixel-ratio: <span class="number">2</span>)</span><br><span class="line">  .border-<span class="number">1px</span></span><br><span class="line">    &amp;::after</span><br><span class="line">      -webkit-transform: <span class="built_in">scaleY</span>(<span class="number">0.5</span>)</span><br><span class="line">      transform: <span class="built_in">scaleY</span>(<span class="number">0.5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190125224331.png"                      alt=""                ><br>需要了解</p><blockquote><p>flex: flex-grow flex-shrink flex-basis|auto|initial|inherit;<br>flex-basis    项目的长度。合法值：”auto”、”inherit” 或一个后跟 “%”、”px”、”em” 或任何其他长度单位的数字。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.goods</span></span><br><span class="line">   <span class="attribute">display</span>: flex</span><br><span class="line">   position: absolute</span><br><span class="line">   top: <span class="number">174px</span></span><br><span class="line">   bottom: <span class="number">46px</span></span><br><span class="line">   width: <span class="number">100%</span></span><br><span class="line">   overflow: hidden</span><br><span class="line">   .menu-wrapper</span><br><span class="line">     flex: <span class="number">0</span> <span class="number">0</span> <span class="number">80px</span></span><br><span class="line">     width: <span class="number">80px</span></span><br><span class="line">     background: <span class="number">#f3f5f7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="侧边菜单栏多行居中显示效果"><a href="#侧边菜单栏多行居中显示效果" class="headerlink" title="侧边菜单栏多行居中显示效果"></a>侧边菜单栏多行居中显示效果</h2><p>用到display：table-cell 与 va-middle<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/displaytable.gif"                      alt=""                ></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu-item</span></span><br><span class="line">    <span class="attribute">display</span>: table</span><br><span class="line">    height: <span class="number">54px</span></span><br><span class="line">    width: <span class="number">56px</span></span><br><span class="line">    padding: <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">    line-height: <span class="number">14px</span></span><br><span class="line">    &amp;.current</span><br><span class="line">      position: relative</span><br><span class="line">      z-index: <span class="number">10</span></span><br><span class="line">      margin-top: -<span class="number">1px</span></span><br><span class="line">      background: <span class="number">#fff</span></span><br><span class="line">      font-weight: <span class="number">700</span></span><br><span class="line">    .text</span><br><span class="line">      display: table-cell</span><br><span class="line">      width: <span class="number">56px</span></span><br><span class="line">      vertical-align: middle</span><br><span class="line">      <span class="built_in">border-1px</span>(<span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">0.1</span>))</span><br><span class="line">      font-size: <span class="number">12px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Sticky-footer布局"><a href="#Sticky-footer布局" class="headerlink" title="Sticky+footer布局"></a>Sticky+footer布局</h2><p>问题：怎么样让一个区块始终在页面底部，无论它前面的内容只有几行或者多到页面出现滚动条，该区块始终出现在页面底部<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190125230217.png"                      alt=""                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190125230753.png"                      alt=""                ><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;detailShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail-wrapper clearfix&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail-main&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123;seller.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail-close&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;closeDetail&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br></pre></td></tr></table></figure><br>css布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.detail-wrapper</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">    min-height: <span class="number">100%</span></span><br><span class="line">    .detail-main</span><br><span class="line">      margin-top: <span class="number">64px</span></span><br><span class="line">      padding-bottom: <span class="number">64px</span></span><br><span class="line">    .clearfix</span><br><span class="line">       display: inline-block</span><br><span class="line">       &amp;:after</span><br><span class="line">         display: block</span><br><span class="line">         content: <span class="string">&#x27;&#x27;</span></span><br><span class="line">         height: <span class="number">0</span></span><br><span class="line">         line-height: <span class="number">0</span></span><br><span class="line">         clear: both</span><br><span class="line">         visibility: hidden</span><br><span class="line"></span><br><span class="line">.detail-close</span><br><span class="line">         position: relative</span><br><span class="line">         width: <span class="number">32px</span></span><br><span class="line">         height: <span class="number">32px</span></span><br><span class="line">         margin: -<span class="number">64px</span> auto <span class="number">0</span> auto</span><br><span class="line">         clear: both</span><br><span class="line">         font-size: <span class="number">32px</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如何实现：</p><h2 id="它这个布局实现的原理就是给它的伪类after添加一个内容，设置display必须为block或者inline-block，让它伪类的内容占一行，然后设置height跟line-height都为0，将它的visibility设置为hidden-这里还是会占据空间-，让伪类一直占据一行然后将下面的区块，也就是我们要求一直在底部的区块挤下去，这样就实现了sticky-footer布局。"><a href="#它这个布局实现的原理就是给它的伪类after添加一个内容，设置display必须为block或者inline-block，让它伪类的内容占一行，然后设置height跟line-height都为0，将它的visibility设置为hidden-这里还是会占据空间-，让伪类一直占据一行然后将下面的区块，也就是我们要求一直在底部的区块挤下去，这样就实现了sticky-footer布局。" class="headerlink" title="它这个布局实现的原理就是给它的伪类after添加一个内容，设置display必须为block或者inline-block，让它伪类的内容占一行，然后设置height跟line-height都为0，将它的visibility设置为hidden(这里还是会占据空间)，让伪类一直占据一行然后将下面的区块，也就是我们要求一直在底部的区块挤下去，这样就实现了sticky footer布局。"></a>它这个布局实现的原理就是给它的伪类after添加一个内容，设置display必须为block或者inline-block，让它伪类的内容占一行，然后设置height跟line-height都为0，将它的visibility设置为hidden(这里还是会占据空间)，让伪类一直占据一行然后将下面的区块，也就是我们要求一直在底部的区块挤下去，这样就实现了sticky footer布局。</h2><p><code>margin: -64px auto 0</code> auto在这里就是这个<code>margin-top:-64px</code>决定你的这个元素要往上面增加多少</p><h2 id="横线条穿过字符串的优化"><a href="#横线条穿过字符串的优化" class="headerlink" title="横线条穿过字符串的优化"></a>横线条穿过字符串的优化</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190125231549.png"                      alt=""                ></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>优惠信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span></span><br><span class="line"><span class="attribute">display</span>: flex</span><br><span class="line">width: <span class="number">80%</span></span><br><span class="line">margin: <span class="number">28px</span> auto <span class="number">24px</span> auto</span><br><span class="line">.line</span><br><span class="line">flex: <span class="number">1</span></span><br><span class="line">position: relative</span><br><span class="line">top: -<span class="number">6px</span></span><br><span class="line">border-bottom: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>)</span><br><span class="line">.text</span><br><span class="line">padding: <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">font-weight: <span class="number">700</span></span><br><span class="line">font-size: <span class="number">14px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="填充图片占位"><a href="#填充图片占位" class="headerlink" title="填充图片占位"></a>填充图片占位</h2><p>由于图片异步加载如果不设置图片高度会出现闪动的bug<br>所以需要css做些处理</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190126002718.png"                      alt=""                ></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-header&quot;</span>&gt;</span></span><br><span class="line">  &lt;img</span><br><span class="line">    :src  = &quot;food.icon&quot;</span><br><span class="line">      alt = &quot;meitu&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class  = &quot;back&quot;</span><br><span class="line">    @click = &quot;hide&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-arrow_lift&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>padding-bottom</code>设置多少根据实际需要宽高比来算<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image-header</span></span><br><span class="line">    <span class="attribute">position</span> relative</span><br><span class="line">    <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">padding-bottom</span> <span class="number">100%</span></span><br><span class="line">    <span class="selector-tag">img</span></span><br><span class="line">      <span class="attribute">position</span> absolute</span><br><span class="line">      <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">      <span class="attribute">height</span> <span class="number">100%</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识下position:sticky</title>
      <link href="2019/01/15/%E8%AE%A4%E8%AF%86%E4%B8%8Bpositionsticky/"/>
      <url>2019/01/15/%E8%AE%A4%E8%AF%86%E4%B8%8Bpositionsticky/</url>
      
        <content type="html"><![CDATA[<p>什么是position:sticky？<br><a id="more"></a><br>sticky的中文意思是“粘性的”，<code>position:sticky</code>表现也符合这个粘性的表现。基本上，可以看出是position:relative和position:fixed的结合体——当元素在屏幕内，表现为relative，就要滚出显示器屏幕的时候，表现为fixed。</p><h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><p><code>position:sticky</code>有个非常重要的特性，那就是sticky元素效果完全受制于父级元素们。</p><p>这和position:fixed定位有着根本性的不同，fixed元素直抵页面根元素，其他父元素对其left/top定位无法限制。</p><p>根据我简单的测试，发现了sticky元素以下一些特性表现：</p><p>父级元素不能有任何<code>overflow:visible</code>以为的overflow设置，否则没有粘滞效果。因为改变了滚动容器（即使没有出现滚动条）。因此，如果你的<code>position:sticky</code>无效，看看是不是某一个祖先元素设置了overflow:hidden，移除之即可。<br>同一个父容器中的sticky元素，如果定位值相等，则会重叠；如果属于不同父元素，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。<br>sticky定位，不仅可以设置top，基于滚动容器上边缘定位；还可以设置bottom，也就是相对底部粘滞。如果是水平滚动，也可以设置left和right值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: -webkit-sticky;</span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo如下：</p><html><br><iframe width="100%" height="300" src="//jsrun.net/fZXKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br></html>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试试使用CSS实现抛物线运动效果</title>
      <link href="2019/01/13/%E8%AF%95%E8%AF%95%E4%BD%BF%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E6%8A%9B%E7%89%A9%E7%BA%BF%E8%BF%90%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
      <url>2019/01/13/%E8%AF%95%E8%AF%95%E4%BD%BF%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E6%8A%9B%E7%89%A9%E7%BA%BF%E8%BF%90%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>今天参考<code>张鑫旭</code>空间的另一篇文件<br><a id="more"></a><br><strong>—&gt;</strong> <a class="link"   href="https://www.zhangxinxu.com/wordpress/2018/08/css-css3-%E6%8A%9B%E7%89%A9%E7%BA%BF%E5%8A%A8%E7%94%BB/" >点击链接<i class="fas fa-external-link-alt"></i></a></p><p>效果图<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/QQ20190117-104424-HD.gif"                      alt=""                ></p><h2 id="实现的原理分析"><a href="#实现的原理分析" class="headerlink" title="实现的原理分析"></a>实现的原理分析</h2><ol><li><code>抛物线运动元素使用至少内外两层标签</code>,抛物线元素内外两次标签一个负责水平方向的translate移动，</li><li>一个负责垂直方向的translate移动，</li><li>然后使用不同的缓动函数，也就是使用不同的timing-function，</li><li>在CSS3 animation动画效果中是animation-timing-function属性</li></ol><h4 id="CSS3-transition-timing-function-属性"><a href="#CSS3-transition-timing-function-属性" class="headerlink" title="CSS3 transition-timing-function 属性"></a>CSS3 transition-timing-function 属性</h4><p>transition-timing-function:属性规定过渡效果的速度曲线。该属性允许过渡效果随着时间来改变其速度。</p><blockquote><p>transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-<br>bezier(n,n,n,n);</p></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td></tr><tr><td>ease</td><td>规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</td></tr><tr><td>ease-in</td><td>规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td></tr><tr><td>ease-out</td><td>规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td></tr><tr><td>ease-in-out</td><td>规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td></tr><tr><td>cubic-bezier(n,n,n,n)</td><td>在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fly-item</span> &#123;</span><br><span class="line">    <span class="comment">/* 水平移动，线性匀速 */</span></span><br><span class="line">    <span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fly-item</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* 垂直移动，先慢后快 */</span></span><br><span class="line">    <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">96</span>,.<span class="number">16</span>,.<span class="number">99</span>,.<span class="number">97</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中<code>cubic-bezier(.96,.16,.99,.97);</code><a class="link"   href="http://cubic-bezier.com/#.17,.67,.83,.67" >我们可以借助cubic-bezier.com工具<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/Snipaste_2019-01-17_10-53-43.png"                      alt=""                ></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ball-x</span> &#123; <span class="attribute">animation-timing-function</span>: linear; &#125;</span><br><span class="line"><span class="selector-class">.ball-y</span> &#123; <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">55</span>, <span class="number">0</span>, .<span class="number">85</span>, .<span class="number">36</span>); &#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/Snipaste_2019-01-17_10-59-21.png"                      alt=""                ></p><h2 id="贴上代码"><a href="#贴上代码" class="headerlink" title="贴上代码"></a>贴上代码</h2><p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.image-x</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">100px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-cart</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">15.84%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">84.8392%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0088CC</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fly-item</span>,</span><br><span class="line"><span class="selector-class">.fly-item</span>&gt;<span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">transition</span>: transform .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fly-item</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="comment">/* margin: -25px 0 0 -25px; */</span></span><br><span class="line"><span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line"><span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fly-item</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">transition-timing-function</span>:<span class="built_in">cubic-bezier</span>(.<span class="number">96</span>,.<span class="number">16</span>,.<span class="number">99</span>,.<span class="number">97</span>);</span><br><span class="line"><span class="attribute">outline</span>: <span class="number">1px</span> solid <span class="built_in">rgb</span>(<span class="number">221</span>, <span class="number">46</span>, <span class="number">59</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shop-cart</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">283px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">8px</span>;</span><br><span class="line"><span class="attribute">background</span>:red;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;microsoft yahei&#x27;</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">text-indent</span>: <span class="number">34px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-x&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnCart&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-cart&quot;</span>&gt;</span>添加到购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;shopCart&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shop-cart&quot;</span>&gt;</span>购物车 <span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;flyItem&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fly-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/book.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>javascript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eleBtn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btnCart&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> eleFlyItem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;flyItem&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> eleFlyImg = eleFlyItem.querySelector(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> eleCart = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#shopCart&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isRuning = <span class="literal">false</span>;</span><br><span class="line">eleBtn.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 现在按钮距离购物车的距离</span></span><br><span class="line"><span class="keyword">var</span> boundBtn = eleBtn.getBoundingClientRect();</span><br><span class="line"><span class="keyword">var</span> boundCart = eleCart.getBoundingClientRect();</span><br><span class="line"><span class="built_in">console</span>.log(boundBtn, boundCart);</span><br><span class="line"><span class="comment">//中心点的水平距离</span></span><br><span class="line"><span class="keyword">var</span> offsetX = boundCart.left + boundCart.width / <span class="number">2</span> - (boundBtn.left + boundBtn.width / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> offsetY = boundCart.top + boundCart.height / <span class="number">2</span> - (boundBtn.top + boundBtn.height / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面滚动距离</span></span><br><span class="line"><span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(scrollTop, scrollLeft);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isRuning) &#123;</span><br><span class="line">eleFlyItem.style.display = <span class="string">&quot;block&quot;</span>; <span class="comment">//显示抛物体</span></span><br><span class="line">eleFlyItem.style.left = (boundBtn.left + scrollLeft + <span class="built_in">this</span>.clientWidth / <span class="number">2</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">eleFlyItem.style.top = (boundBtn.top + scrollTop + <span class="built_in">this</span>.clientHeight / <span class="number">2</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"><span class="comment">//开始动画</span></span><br><span class="line">eleFlyItem.style.transform = <span class="string">&#x27;translateX(&#x27;</span>+ offsetX +<span class="string">&#x27;px)&#x27;</span>;</span><br><span class="line">eleFlyImg.style.transform = <span class="string">&#x27;translateY(&#x27;</span>+ offsetY +<span class="string">&#x27;px)&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(offsetX, offsetY);</span><br><span class="line">isRuning = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">eleFlyItem.style.display = <span class="string">&quot;&quot;</span>;</span><br><span class="line">eleFlyItem.style.transform = <span class="string">&quot;translateX(0)&quot;</span>;</span><br><span class="line">eleFlyImg.style.transform = <span class="string">&quot;translateY(0)&quot;</span>;</span><br><span class="line">isRuning = <span class="literal">false</span>;</span><br><span class="line">eleCart.querySelector(<span class="string">&quot;span&quot;</span>).innerHTML = eleCart.querySelector(<span class="string">&quot;span&quot;</span>).innerHTML * <span class="number">1</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/QQ20190117-110437-HD.gif"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>购物物品抛物线到购物车</title>
      <link href="2019/01/12/%E8%B4%AD%E7%89%A9%E7%89%A9%E5%93%81%E6%8A%9B%E7%89%A9%E7%BA%BF%E5%88%B0%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
      <url>2019/01/12/%E8%B4%AD%E7%89%A9%E7%89%A9%E5%93%81%E6%8A%9B%E7%89%A9%E7%BA%BF%E5%88%B0%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<p>今天写点外卖看到elm这个效果非常好，突发奇想实现下试试，于是写了几个非常不理想，然后各种谷歌，最后有一些小的收获分享<br><a id="more"></a><br>效果1<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/QQ20190116-112139-HD.gif"                      alt=""                ></p><p>效果2<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/QQ20190116-112232-HD.gif"                      alt=""                ></p><h1 id="1、原理及分析"><a href="#1、原理及分析" class="headerlink" title="1、原理及分析"></a>1、原理及分析</h1><p>一开始的时候，我还在图上花了一些实现购物车的原理，但是很快发现不行，所以补了一下购物车的知识，在网上找到了公式</p><blockquote><p>y=a<em>x</em>x + b*x+c</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/3903542472-57b47707b54bf_articlex.jpeg"                      alt=""                ></p><p>下面的实现就很简单了：</p><p>找到三个点（x1,y1）,（x2,y2）,（x3,y3）</p><p>第一个点取：抛物线开始的点，也就是点击购物的按钮的地方（x1,y1）</p><p>第二个点取：抛物线结束的点，也就是购物车的位置（x3,y3）</p><p>第三个点取：其实结束的点往左一点取就可以了，可以是结束的点（x3-10,y3-8）,这里可以通过减的值调整抛物线的弧度</p><p>思路我再捋一捋，抛物线函数<code>y = a*x*x + b*x + c</code> ,其中<code>a</code>不等于0，<code>a、b、c</code>为常数。<code>x、y</code>为抛物线经过的坐标；a决定抛物线的开口方向，<code>a&gt;0</code>开口向上，a&lt;0开口向下。很明显天猫的抛物线开口向下，a还决定开口的大小，值越小开口越大，抛物线越平顺，反之抛物线越陡。所以a的值可以自定义，等于是已知两个坐标（起点和终点坐，即元素left、top值），求两个未知数，初中的数学就学过，二元二次方程。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y1 ＝ a*x1*x1 + b*x1 + c</span><br><span class="line">y2 = a*x2*x2 + b*x2 + c </span><br></pre></td></tr></table></figure><p>a已知，代入两个已知坐标<code>［x1, y1］[x2, y2]</code>可以得出<code>b、c</code>的值，x和y的对应关系有了。</p><p>不管抛物线开口向上还是向下，元素在水平方向上移动的速度不变，即left值匀速改变，可以设定抛物线运动时间t，元素在水平方向上的速度为speedx =（x2 - x1）/t，设置一个定时器，每30ms执行一次，left值在每次定时器执行后的值为当前的x ＝ speedx <em> 定时器已执行时长，再代入函数y ＝ a</em>x<em>x + b</em>x + c得到top值，由于这一切的计算都建立在起点坐标平移到原点（终点也随之平移）的基础上，所以最终设置运动元素的left／top值的时候必须将起点元素的初始left／top值加上。</p><h1 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h1>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.defineProperty了解下</title>
      <link href="2019/01/08/Object.defineProperty%E4%BA%86%E8%A7%A3%E4%B8%8B/"/>
      <url>2019/01/08/Object.defineProperty%E4%BA%86%E8%A7%A3%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。<br><a id="more"></a></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数名</th><th>说明 </th></tr></thead><tbody><tr><td>obj</td><td>目标对象</td></tr><tr><td>prop</td><td>需要定义的属性或方法的名字。</td></tr><tr><td>descriptor</td><td>目标属性所拥有的特性。</td></tr></tbody></table><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><table><thead><tr><th>特性名</th><th>说明 </th></tr></thead><tbody><tr><td>value</td><td>属性的值</td></tr><tr><td>writable</td><td>如果为false，属性的值就不能被重写。</td></tr><tr><td>get</td><td>一旦目标属性被访问就会调回此方法，并将此方法的运算结果返回用户。</td></tr><tr><td>set</td><td>一旦目标属性被赋值，就会调回此方法。</td></tr><tr><td>configurable</td><td>如果为false，则任何尝试删除目标属性或修改属性以下特性（writable, configurable, enumerable）的行为将被无效化。</td></tr><tr><td>enumerable</td><td>是否能在for…in循环中遍历出来或在Object.keys中列举出来。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, <span class="string">&quot;p&quot;</span>, &#123;</span><br><span class="line"> value:<span class="string">&quot;这是一个不可变的默认值&quot;</span>,</span><br><span class="line">writable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a.p);</span><br><span class="line">a.p=<span class="string">&quot;改写&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.p);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;你的浏览器不支持&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">foo: <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">&quot;foo&quot;</span>)));</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;你的游览器不支持Object.defineProperty或 Object.getOwnPropertyDescriptor&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">   &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty( o, <span class="string">&quot;attr&quot;</span>, &#123;</span><br><span class="line">        value: <span class="string">&quot;这是利用defindProperty添加的新属性&quot;</span>,</span><br><span class="line">        writable: <span class="literal">false</span>,  <span class="comment">//不可重写</span></span><br><span class="line">        enumerable: <span class="literal">true</span>,  <span class="comment">//可枚举</span></span><br><span class="line">        configurable: <span class="literal">true</span> <span class="comment">//可删除该属性</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">&quot;帅哥你好&quot;</span>;</span><br><span class="line">        <span class="comment">//读写器</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty( o, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">          get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> name; &#125;,</span><br><span class="line">          set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; name = value+<span class="string">&quot;!!!&quot;</span>; &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)();</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log( o.attr )</span><br><span class="line">      <span class="comment">// 这是利用defindProperty添加的新属性</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log( o.name );  <span class="comment">// 帅哥你好</span></span><br><span class="line"></span><br><span class="line">      o.name = <span class="string">&quot;javascript&quot;</span>;</span><br><span class="line">      <span class="built_in">console</span>.log( o.name );  <span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log( <span class="built_in">Object</span>.keys(o))<span class="comment">//attr</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        o.attr = <span class="string">&quot;试图重写该属性&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(ee)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;与writable: false冲突&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty( o, <span class="string">&quot;attr&quot;</span>, &#123;</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      o.attr = <span class="string">&quot;再试尝试重写该属性&quot;</span>;</span><br><span class="line">      <span class="built_in">console</span>.log( o.attr );</span><br><span class="line"> </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">delete</span> o.attr); <span class="comment">//false 与writable: false冲突</span></span><br><span class="line">     </span><br><span class="line">   </span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;你的游览器不支持Object.defineProperty &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift4基本运算符</title>
      <link href="2019/01/02/swift4%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2019/01/02/swift4%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>大多数方法与javascript类型不做过多描述一个例子带过<br><a id="more"></a></p><h1 id="3-1赋值运算符"><a href="#3-1赋值运算符" class="headerlink" title="3.1赋值运算符"></a>3.1赋值运算符</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">a <span class="operator">=</span> b;</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> (x,y) <span class="operator">=</span> (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">print</span>(y) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h1 id="3-2算数运算符"><a href="#3-2算数运算符" class="headerlink" title="3.2算数运算符"></a>3.2算数运算符</h1><p>加减乘除<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">9</span> ,b <span class="operator">=</span><span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;取余<span class="subst">\(a<span class="operator">%</span>b)</span>&quot;</span>)  <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><h1 id="3-3组合赋值运算符"><a href="#3-3组合赋值运算符" class="headerlink" title="3.3组合赋值运算符"></a>3.3组合赋值运算符</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">a <span class="operator">+=</span><span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h1 id="3-4比较运算符"><a href="#3-4比较运算符" class="headerlink" title="3.4比较运算符"></a>3.4比较运算符</h1><p> == = &gt; &lt;</p><h1 id="3-5三目运算符"><a href="#3-5三目运算符" class="headerlink" title="3.5三目运算符"></a>3.5三目运算符</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实发奖金 <span class="operator">=</span> 奖金 ？ 基本工资<span class="operator">+</span><span class="number">5000</span> ：基本工资<span class="operator">+</span> <span class="number">300</span></span><br></pre></td></tr></table></figure><h1 id="3-6空合运算符"><a href="#3-6空合运算符" class="headerlink" title="3.6空合运算符"></a>3.6空合运算符</h1><p>空合运算 <code>a??b</code>  类似 a != nil ? a! :  b</p><ul><li>表达式a必须是个可选类型</li><li>默认值b的类型与a的储存值保持一致</li></ul><p>如果a是非空 则b就不会被估值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">default</span> <span class="operator">=</span> <span class="string">&quot;red&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userName : <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name <span class="operator">=</span> userName <span class="operator">??</span> <span class="keyword">default</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-7区间运算符"><a href="#3-7区间运算符" class="headerlink" title="3.7区间运算符"></a>3.7区间运算符</h1><p>闭区间 a…b</p><p>半开间 a..&lt;b</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> index  <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">5</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count <span class="operator">=</span> names.count</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>count&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-8逻辑运算符"><a href="#3-8逻辑运算符" class="headerlink" title="3.8逻辑运算符"></a>3.8逻辑运算符</h1><p>!a   a&amp;&amp;b a||b</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift4语法基础</title>
      <link href="2019/01/01/swift4%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>2019/01/01/swift4%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>介绍下变量和常量<br><a id="more"></a></p><h1 id="2-1变量与常量"><a href="#2-1变量与常量" class="headerlink" title="2.1变量与常量"></a>2.1变量与常量</h1><p>let代表常量</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">MAX_VALUE</span> <span class="operator">=</span> <span class="number">25</span></span><br></pre></td></tr></table></figure><p>var代表变量</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentCount <span class="operator">=</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：一旦常量或变量确定类型，就不能使用相同名称再次声明或改变它的类型，同时常量与变量不能相互转换</p></blockquote><h1 id="2-2注释"><a href="#2-2注释" class="headerlink" title="2.2注释"></a>2.2注释</h1><p>//代表单行注释<br>/<em>+</em>代表多行注释*+**/</p><h1 id="2-3分号"><a href="#2-3分号" class="headerlink" title="2.3分号"></a>2.3分号</h1><p>基本上不需要分号除非：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sun <span class="operator">=</span> <span class="string">&quot;☀️&quot;</span>；<span class="built_in">print</span>(sun)</span><br></pre></td></tr></table></figure></p><h1 id="2-4整数"><a href="#2-4整数" class="headerlink" title="2.4整数"></a>2.4整数</h1><p>整数表示：正数，负数，零</p><h1 id="2-5浮点数"><a href="#2-5浮点数" class="headerlink" title="2.5浮点数"></a>2.5浮点数</h1><p>浮动数Double，Float</p><h1 id="2-6类型安全和类型推断"><a href="#2-6类型安全和类型推断" class="headerlink" title="2.6类型安全和类型推断"></a>2.6类型安全和类型推断</h1><p>如果我们的代码需要一个string类型的值，就绝对不会传过去一个Int类型的值，有了类型推断，编译器根据我们给的相关变量，常量，或类测属性复制，在编译器自动推断表达式的类型，只要我们声明常量或变量赋予它一个”字面量“就会触发类型推断</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age<span class="operator">=</span> <span class="number">23</span></span><br><span class="line"><span class="keyword">let</span> name <span class="operator">=</span> <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="keyword">let</span> pi <span class="operator">=</span> <span class="number">3.1415926</span></span><br><span class="line"><span class="keyword">let</span> 面积 <span class="operator">=</span> pi <span class="operator">*</span> pow(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-7数值型字面量"><a href="#2-7数值型字面量" class="headerlink" title="2.7数值型字面量"></a>2.7数值型字面量</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">Interger</span> <span class="operator">=</span> <span class="number">17</span></span><br><span class="line"><span class="keyword">let</span> twojinzhi <span class="operator">=</span> <span class="number">0b0001</span></span><br><span class="line"><span class="keyword">let</span> bajinzhi <span class="operator">=</span> <span class="number">0o21</span></span><br><span class="line"><span class="keyword">let</span> shiliujinzhi <span class="operator">=</span> <span class="number">0x11</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-8数值类型转换"><a href="#2-8数值类型转换" class="headerlink" title="2.8数值类型转换"></a>2.8数值类型转换</h1><p>整数与浮动数相互转化</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int -&gt; d</span></span><br><span class="line"><span class="keyword">let</span>  three <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> point <span class="operator">=</span> <span class="number">0.14159</span>;</span><br><span class="line"><span class="keyword">let</span> pis <span class="operator">=</span> <span class="type">Double</span>(three) <span class="operator">+</span> point;</span><br><span class="line"></span><br><span class="line"><span class="comment">//d -&gt; int</span></span><br><span class="line"><span class="keyword">let</span> intPi <span class="operator">=</span> <span class="type">Int</span>(pis)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类型别名：就是给现有的类型定义另一个名字，可以使<code>typealias</code>关键词定义类型别名</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">AudioSample</span> <span class="operator">=</span> <span class="type">UInt16</span></span><br></pre></td></tr></table></figure><h1 id="2-9布尔值"><a href="#2-9布尔值" class="headerlink" title="2.9布尔值"></a>2.9布尔值</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hasKey <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span>(hasKey)&#123;</span><br><span class="line">    <span class="built_in">print</span>(&#x27;kaimen&#x27;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(&#x27;guanmen&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-10元组"><a href="#2-10元组" class="headerlink" title="2.10元组"></a>2.10元组</h1><p>元组的定义：临时把任意数据的多个值组合起来的一个复合类型，适用手机客户端webapi请求返回的数据集合</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http404Error <span class="operator">=</span> (<span class="number">404</span>,<span class="string">&quot;没找到页面&quot;</span>)</span><br><span class="line"><span class="comment">//通过下标来找</span></span><br><span class="line"><span class="keyword">var</span> code <span class="operator">=</span> http404Error.<span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> msg <span class="operator">=</span> http404Error.<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-11可选类型"><a href="#2-11可选类型" class="headerlink" title="2.11可选类型"></a>2.11可选类型</h1><p>可选类型定义：用来处理可能缺失值得类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number <span class="operator">=</span> &#x27;<span class="number">1234</span>&#x27;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isNumber <span class="operator">=</span> <span class="type">Int</span>(number)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isNumber <span class="operator">!=</span> <span class="literal">nil</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;is number:<span class="subst">\(isNumber)</span>&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;not number:<span class="subst">\(isNumber)</span>&quot;</span>)  <span class="comment">// Optional(1234)</span></span><br><span class="line">     </span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;not number:<span class="subst">\(isNumber<span class="operator">!</span>)</span>&quot;</span>)  <span class="comment">// 1234</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增加<code>isNumber!</code>拆包</p><p>我们只能给<code>可选类型</code>的变量赋予nil值，它表示没有值。</p><p>建议声明变量时候设置为可选变量，他们会自动设置默认值nil</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyString :<span class="type">String</span>?</span><br><span class="line"><span class="built_in">print</span>(emptyString)   <span class="comment">// nil</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果确定有默认值则</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reward：<span class="type">Int</span>! <span class="operator">=</span> <span class="number">8_000</span></span><br><span class="line"><span class="built_in">print</span>(reward)   <span class="comment">// 8000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-12错误处理"><a href="#2-12错误处理" class="headerlink" title="2.12错误处理"></a>2.12错误处理</h1><p>当函数遇到一个错误情况时，它就会出现<code>throw</code>一个错误</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasError</span>()</span> <span class="keyword">throws</span>&#123;</span><br><span class="line">    print (&#x27;处理抛出错误&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> hasError()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> <span class="operator">&lt;</span># throwing expression #<span class="operator">&gt;</span></span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="operator">&lt;</span>#pattenrn#<span class="operator">&gt;</span>&#123;</span><br><span class="line">    <span class="operator">&lt;</span>#statements#<span class="operator">&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-13断言"><a href="#2-13断言" class="headerlink" title="2.13断言"></a>2.13断言</h1><p>断言：主要用于运行时调试</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> andAge <span class="operator">=</span> <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(andAge <span class="operator">&gt;</span> <span class="number">16</span>,<span class="string">&quot;andyde 年龄没有到16岁&quot;</span>) <span class="comment">//执行这句</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018 年总结</title>
      <link href="2018/12/30/2018%E6%80%BB%E7%BB%93/"/>
      <url>2018/12/30/2018%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>2018 年成长的还是太慢，写了 NET 写了 RN 写了 ANDROID</p><a id="more"></a><p>2019 年想扩展自己的技能学一门别的语言-Swift，给自己 4 个月的下班时间，加油 ⛽️，<br>2019 年最重要的还有涨工资啊</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_redux-Immutable</title>
      <link href="2018/12/16/React%E7%B3%BB%E5%88%97_redux-Immutable%20/"/>
      <url>2018/12/16/React%E7%B3%BB%E5%88%97_redux-Immutable%20/</url>
      
        <content type="html"><![CDATA[<p>Immutable 是什么？</p><blockquote><p>简而言之，Immutable数据就是一旦创建，就不能更改的数据。每当对Immutable对象进行修改的时候，就会返回一个新的Immutable对象，以此来保证数据的不可变</p></blockquote> <a id="more"></a><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20181219113510.gif"                      alt=""                ><br>首先熟悉一些常用api的用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> immutable = <span class="built_in">require</span>(<span class="string">&#x27;immutable&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="built_in">Map</span>, List, is &#125; = immutable;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Map</span>(&#123;</span><br><span class="line">select: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">filter: <span class="built_in">Map</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Cam&#x27;</span> &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> b = a.set(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;people&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a === b);</span><br><span class="line"><span class="built_in">console</span>.log(a.get(<span class="string">&#x27;filter&#x27;</span>) === b.get(<span class="string">&#x27;filter&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> list = List([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(list.get(<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">immutable.fromJS(&#123; <span class="attr">a</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;234&#x27;</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">key, value, path</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key, value, path);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================</span></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(map1 === map2); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(map1, map2)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(is(map1, map2)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">//=================================</span></span><br><span class="line">List.isList([]); <span class="comment">// false</span></span><br><span class="line">islist1 = List.isList(List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(islist1);</span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).push(<span class="number">2222222222</span>));</span><br><span class="line">List([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).insert(<span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//List [ 0, 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).push(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line">List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).pop();</span><br><span class="line"><span class="comment">// List[ 1, 2, 3 ]</span></span><br><span class="line">List([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).unshift(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br><span class="line">List([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).shift();</span><br><span class="line"><span class="comment">// List [ 1, 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(List([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]).size);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.isMap(&#123;&#125;); <span class="comment">// false</span></span><br><span class="line">ismap1 = <span class="built_in">Map</span>.isMap(<span class="built_in">Map</span>()); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(ismap1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=================set==============</span></span><br><span class="line"><span class="keyword">const</span> setlist = List([<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set &#x27;</span> + setlist);</span><br><span class="line"><span class="keyword">const</span> setlist2 = setlist.set(<span class="number">2</span>, <span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set &#x27;</span> + setlist2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setmap = <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> setmap2 = setmap.set(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(setmap2);</span><br><span class="line"><span class="keyword">const</span> setmap3 = setmap2.set(<span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;hello value&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ima&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(setmap3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deepmap = <span class="built_in">Map</span>(&#123;</span><br><span class="line">subObject: <span class="built_in">Map</span>(&#123;</span><br><span class="line">key: <span class="string">&#x27;hello react&#x27;</span>,</span><br><span class="line">object: <span class="built_in">Map</span>(&#123;</span><br><span class="line">key: <span class="string">&#x27;hello word&#x27;</span>,</span><br><span class="line">&#125;),</span><br><span class="line">&#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> newMap = deepmap.setIn([<span class="string">&#x27;subObject&#x27;</span>, <span class="string">&#x27;key&#x27;</span>], <span class="string">&#x27;update helo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newMap);</span><br><span class="line"><span class="keyword">const</span> secondMap = deepmap.setIn([<span class="string">&#x27;subObject&#x27;</span>, <span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;key&#x27;</span>], <span class="string">&#x27;😁update word!&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(secondMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=================delete==============</span></span><br><span class="line"><span class="keyword">const</span> del = List([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).delete(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;删除后的数组： &#x27;</span> + del);</span><br><span class="line"><span class="keyword">const</span> originalMap = <span class="built_in">Map</span>(&#123;</span><br><span class="line">key: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">otherKey: <span class="string">&#x27;other value&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> del2 = originalMap.delete(<span class="string">&#x27;otherKey&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;删除后的对象&#x27;</span> + del2);</span><br><span class="line"><span class="comment">//==============merge============</span></span><br><span class="line"><span class="keyword">const</span> Map1 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">d</span>:<span class="number">333</span>,<span class="attr">e</span>:<span class="number">444</span>&#125;&#125;);</span><br><span class="line"> <span class="keyword">const</span> Map2 = Immutable.fromJS(&#123;<span class="attr">a</span>:<span class="number">111</span>,<span class="attr">b</span>:<span class="number">222</span>,<span class="attr">c</span>:&#123;<span class="attr">e</span>:<span class="number">444</span>,<span class="attr">f</span>:<span class="number">555</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> Map3 = Map1.merge(Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:111,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br><span class="line"> <span class="keyword">const</span> Map4 = Map1.mergeDeep(Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:111,b:222,c:&#123;d:333,e:444,f:555&#125;&#125;</span></span><br><span class="line"> <span class="keyword">const</span> Map5 = Map1.mergeWith(<span class="function">(<span class="params">oldData,newData,key</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(key === <span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newData</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,Map2);</span><br><span class="line">  <span class="comment">//Map &#123;a:666,b:222,c:&#123;e:444,f:555&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="项目中如何用呢？"><a href="#项目中如何用呢？" class="headerlink" title="项目中如何用呢？"></a>项目中如何用呢？</h3><p>首先修改redurce.js<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromJS &#125; from <span class="string">&#x27;immutable&#x27;</span>;</span><br><span class="line"><span class="comment">//普通对象转换成 immutable类型对象</span></span><br><span class="line"><span class="keyword">const</span> defaultState = fromJS(&#123;</span><br><span class="line"><span class="built_in">focused</span>: <span class="keyword">false</span>,</span><br><span class="line">mouseIn: <span class="keyword">false</span>,</span><br><span class="line">list: [],</span><br><span class="line">page: <span class="number">1</span>, <span class="comment">//当前页</span></span><br><span class="line">totalPage: <span class="number">1</span>, <span class="comment">//总页数</span></span><br><span class="line">&#125;);</span><br><span class="line">....</span><br><span class="line"><span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> constants.SEARCH_FOCUS:</span><br><span class="line">    <span class="comment">//逻辑 im根据之前的数据，返回新的数据</span></span><br><span class="line">    <span class="keyword">return</span> state.<span class="built_in">set</span>(<span class="string">&#x27;focused&#x27;</span>, <span class="keyword">true</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> constants.CHANGE_LIST:</span><br><span class="line">    <span class="comment">// merge多组对象中使用</span></span><br><span class="line">    <span class="keyword">return</span> state.merge(&#123;</span><br><span class="line">    list: action.data,</span><br><span class="line">    totalPage: action.totalPage,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><br>index.js<br>获取数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="comment">//getin[哪个分支reducer，分支上的数据字段]</span></span><br><span class="line">focused: state.getIn([<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;focused&#x27;</span>]),</span><br><span class="line">list: state.getIn([<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;list&#x27;</span>]),</span><br><span class="line">page: state.getIn([<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;page&#x27;</span>]),</span><br><span class="line">totalPage: state.getIn([<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;totalPage&#x27;</span>]),</span><br><span class="line">mouseIn: state.getIn([<span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;mouseIn&#x27;</span>]),</span><br><span class="line">login: state.getIn([<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;isLogin&#x27;</span>]),</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_combineReducers</title>
      <link href="2018/12/15/React%E7%B3%BB%E5%88%97_combineReducers/"/>
      <url>2018/12/15/React%E7%B3%BB%E5%88%97_combineReducers/</url>
      
        <content type="html"><![CDATA[<p>随着应用变得复杂，需要对 reducer 函数 进行拆分，拆分后的每一块独立负责管理 state 的一部分。<br><a id="more"></a><br>combineReducers 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore。<br>合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。state 对象的结构由传入的多个 reducer 的 key 决定。</p><p>先看下demo结构<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20181219104938.png"                      alt=""                ></p><p>创建store<br>src/store/index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, compose, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, composeEnhancers(</span><br><span class="line">applyMiddleware(thunk)</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><br>src/store/redurcer.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-immutable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> headerReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;../common/header/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> homeReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;../pages/home/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> detailReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;../pages/detail/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> loginReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;../pages/login/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = combineReducers(&#123;</span><br><span class="line">header: headerReducer, <span class="comment">//key值 ： value值</span></span><br><span class="line">home: homeReducer,</span><br><span class="line">detail: detailReducer,</span><br><span class="line">login: loginReducer,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer;</span><br></pre></td></tr></table></figure><p>/src/page/header/index.js</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">&#x27;./actionCreators&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">&#x27;./constants&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; reducer, actionCreators, constants &#125;;</span><br></pre></td></tr></table></figure><p>这样写的好处是src/store/redurcer.js下的引用分支redurce目录结构少写2层。易读</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; <span class="keyword">from</span>JS &#125; <span class="keyword">from</span> &#x27;immutable&#x27;;</span><br><span class="line">import * as constants <span class="keyword">from</span> &#x27;./constants&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">default</span>State = <span class="keyword">from</span>JS(&#123;</span><br><span class="line">title: &#x27;&#x27;,</span><br><span class="line">content: &#x27;&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> (<span class="keyword">state</span> = <span class="keyword">default</span>State, action) =&gt; &#123;</span><br><span class="line">switch(action.type) &#123;</span><br><span class="line">case constants.CHANGE_DETAIL:</span><br><span class="line">// 逻辑处理返回纯函数</span><br><span class="line">return<span class="keyword">state</span>.merge(&#123;</span><br><span class="line">title: action.title,</span><br><span class="line">content: action.content</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">return <span class="keyword">state</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时代码中引用reducer中也发生了变化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DetailWrapper, Header, Content &#125; <span class="keyword">from</span> <span class="string">&#x27;./style&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; actionCreators &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;DetailWrapper&gt;</span><br><span class="line">&lt;Header&gt;&#123;<span class="built_in">this</span>.props.title&#125;&lt;/Header&gt;</span><br><span class="line">&lt;Content </span><br><span class="line"><span class="comment">//  html标签的转义用dangerouslySetInnerHTML</span></span><br><span class="line">dangerouslySetInnerHTML=&#123;&#123;<span class="attr">__html</span>: <span class="built_in">this</span>.props.content&#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/DetailWrapper&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.props.getDetail(<span class="built_in">this</span>.props.match.params.id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapState = <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">title: state.getIn([<span class="string">&#x27;detail&#x27;</span>, <span class="string">&#x27;title&#x27;</span>]),</span><br><span class="line">content: state.getIn([<span class="string">&#x27;detail&#x27;</span>, <span class="string">&#x27;content&#x27;</span>])</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatch = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (&#123;</span><br><span class="line"><span class="function"><span class="title">getDetail</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">dispatch(actionCreators.getDetail(id));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapState, mapDispatch)(withRouter(Detail));</span><br><span class="line"><span class="comment">// 他的意思是我让detail有能力获取router中的一些参数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_react-redux</title>
      <link href="2018/12/15/React%E7%B3%BB%E5%88%97_react-redux/"/>
      <url>2018/12/15/React%E7%B3%BB%E5%88%97_react-redux/</url>
      
        <content type="html"><![CDATA[<p>首先下载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add  react-redux</span><br></pre></td></tr></table></figure><a id="more"></a><p>创建一个store<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><br>入口文件.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">&lt;TodoList /&gt;</span><br><span class="line">&lt;/Provider&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><br>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getInputChange, addItem, deleteItem, GetItem &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/actionCreators&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">todoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> value=&#123;<span class="built_in">this</span>.props.inputValue&#125; onChange=&#123;<span class="built_in">this</span>.props.changeInputValue&#125; /&gt;</span><br><span class="line">&lt;button onClick=&#123;<span class="built_in">this</span>.props.handleBtnClcik&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;Dall&lt;/li&gt;</span><br><span class="line">&#123;<span class="built_in">this</span>.props.list.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">&lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">))&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">inputValue: state.inputValue,</span><br><span class="line">list: state.list,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispathchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="function"><span class="title">changeInputValue</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(e.target.value);</span><br><span class="line"><span class="keyword">const</span> action = getInputChange(e.target.value);</span><br><span class="line">dispatch(action);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">handleBtnClcik</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;提交&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> action = addItem();</span><br><span class="line">dispatch(action);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">mapStateToProps,</span><br><span class="line">mapDispathchToProps</span><br><span class="line">)(todoList);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建reducer.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CHANGE_INPUT_VALUE, ADD_TODO_ITEM, DELETE_TODO_ITEM, INIT_TODO_ITEM &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">inputValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">list: [],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(state, action);</span><br><span class="line"><span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state)); <span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">if</span> (action.type === CHANGE_INPUT_VALUE) &#123;</span><br><span class="line">newState.inputValue = action.value;</span><br><span class="line"><span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (action.type === ADD_TODO_ITEM) &#123;</span><br><span class="line">newState.list = [...newState.list, newState.inputValue];</span><br><span class="line">newState.inputValue = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_redux-saga</title>
      <link href="2018/12/14/React%E7%B3%BB%E5%88%97_redux-thunk/"/>
      <url>2018/12/14/React%E7%B3%BB%E5%88%97_redux-thunk/</url>
      
        <content type="html"><![CDATA[<p>redux如何使用异步请求<br><a id="more"></a><br>首先看下简单的使用请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">&#x27;http://rap2api.taobao.org/app/mock/8651/api/tuangou&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">const</span> data = res.data;</span><br><span class="line">    <span class="keyword">const</span> action = initData(data);</span><br><span class="line">    store.dispatch(action);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>actionCreator.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initData = <span class="function"><span class="params">data</span> =&gt;</span> (&#123;</span><br><span class="line">type: INIT_TODO_ITEM,</span><br><span class="line">data: data,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>redurce.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (action.type === INIT_TODO_ITEM) &#123;</span><br><span class="line">newState.list = action.data.data;</span><br><span class="line"><span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果异步请求方法过多，代码看起来就比较臃肿<br>所有必须提取出来统一管理</p><p>首先安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux-saga</span><br></pre></td></tr></table></figure><p>重新配置stroe</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line">+ <span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">&#x27;redux-saga&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span>;</span><br><span class="line">+ <span class="keyword">import</span> mySaga <span class="keyword">from</span> <span class="string">&#x27;./sagas&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  引入reduce后 store就存在了 inputvalue和list的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create the saga middleware</span></span><br><span class="line">+ <span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"><span class="comment">// mount it on the Store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware));</span><br><span class="line"><span class="comment">// then run the saga</span></span><br><span class="line">sagaMiddleware.run(mySaga);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store; <span class="comment">//暴露</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先主文件index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getInputChange, addItem, deleteItem, GetItem &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/actionCreators&#x27;</span>;</span><br><span class="line"><span class="comment">//发送action</span></span><br><span class="line">componentDidMount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> action = GetItem();</span><br><span class="line">store.dispatch(action);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>actionCreator.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;异步请求的action ----&gt;saga去接收</span><br><span class="line">export const GetItem &#x3D; () &#x3D;&gt; (&#123;</span><br><span class="line">type: ANSYNC_INIT_ITEM,</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;请求之后获取action ---&gt;redurcer去接收</span><br><span class="line">export const initData &#x3D; data &#x3D;&gt; (&#123;</span><br><span class="line">type: INIT_TODO_ITEM,</span><br><span class="line">data: data,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>saga.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;call,fork, put, takeEvery &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ANSYNC_INIT_ITEM &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initData &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionCreators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getInitList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">yield</span> axios.get(<span class="string">&#x27;http://rap2api.taobao.org/app/mock/8651/api/tuangou&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">// yield put(&#123; type: INIT_TODO_ITEM, data: res.data &#125;);</span></span><br><span class="line"><span class="comment">//发送action--&gt;</span></span><br><span class="line"><span class="keyword">yield</span> put(initData(res.data));</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;网络请求返回错误&#x27;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">mySaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">yield</span> takeEvery(ANSYNC_INIT_ITEM, getInitList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure><p>redurcer.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (action.type === INIT_TODO_ITEM) &#123;</span><br><span class="line">newState.list = action.data.data;</span><br><span class="line"><span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="sagaAPI简单介绍："><a href="#sagaAPI简单介绍：" class="headerlink" title="sagaAPI简单介绍："></a>sagaAPI简单介绍：</h2><p>Effect函数有很多个，在redux-saga/effects提供，主要包括call，fork，put，take，select等，它们都与middleware中的操作一一对应。</p><h5 id="call-和-fork"><a href="#call-和-fork" class="headerlink" title="call 和 fork"></a>call 和 fork</h5><p>call和fork表示异步调用，其中call表示的是阻塞调用，fork表示的是非阻塞调用。</p><h5 id="put和select"><a href="#put和select" class="headerlink" title="put和select"></a>put和select</h5><p>put对应的是middleware中的dispatch方法，参数是一个plain object，一般在异步调用返回结果后，接着执行put。select相当于getState，用于获取store中的相应部分的state。</p><h5 id="take、takeEvery、takeLatest"><a href="#take、takeEvery、takeLatest" class="headerlink" title="take、takeEvery、takeLatest"></a>take、takeEvery、takeLatest</h5><p>redux-saga中如果在非阻塞调用下（fork）,那么遵循的是worker/watcher模式，通过take可以监听某个action是否被发起，此外通过take结合fork，可以实现takeEvery和takeLatest的效果。</p><p>如果一个异步操作的action被发起多次，takeEvery会执行多次action，而takeLatest只会执行最近的一次。</p><h2 id="redux-saga的优缺点"><a href="#redux-saga的优缺点" class="headerlink" title="redux-saga的优缺点"></a>redux-saga的优缺点</h2><p>优点：</p><p>（1）集中处理了所有的异步操作，异步接口部分一目了然</p><p>（2）action是普通对象，这跟redux同步的action一模一样</p><p>（3）通过Effect，方便异步接口的测试</p><p>（4）通过worker 和watcher可以实现非阻塞异步调用，并且同时可以实</p><p>现非阻塞调用下的事件监听</p><p>（5） 异步操作的流程是可以控制的，可以随时取消相应的异步操作。</p><h1 id="缺点：太复杂，学习成本较高"><a href="#缺点：太复杂，学习成本较高" class="headerlink" title="缺点：太复杂，学习成本较高"></a>缺点：太复杂，学习成本较高</h1>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_redux</title>
      <link href="2018/12/13/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8redux/"/>
      <url>2018/12/13/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8redux/</url>
      
        <content type="html"><![CDATA[<p>为什么要使用 redux？<br><a id="more"></a></p><blockquote><p>当你去开发复杂的单页应用的时候你需要管理各种复杂的应用状态，这鞋状态可能是服务器返回的状，态，本地的数据 url redux 可预测的状态管理 只维护数据</p></blockquote><p>看图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/imageredux的使用.png"                      alt=""                ></p><h2 id="redux-流程"><a href="#redux-流程" class="headerlink" title="redux 流程"></a>redux 流程</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/imageredux.png"                      alt=""                ></p><p>首先创建 Store /src/store/index</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  引入reduce后 store就存在了 inputvalue和list的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> store = createStore();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store; <span class="comment">//暴露</span></span><br></pre></td></tr></table></figure><p>index.js 中引入 store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>; <span class="comment">//引入store中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todolist</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(props);</span><br><span class="line"><span class="built_in">console</span>.log(store.getState());</span><br><span class="line"><span class="built_in">this</span>.state = store.getState();</span><br><span class="line">....</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但此时 store 并无数据<br>我们再创建一个 redurce /src/store/reducer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * state 相当于整个项目存的数据</span></span><br><span class="line"><span class="comment"> * action  相当于</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">inputValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">list: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * state 是前一次的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(state, action); <span class="comment">//reducer 接受到 store传过来的action</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后再回到 store 中把 reducer 导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line">+ <span class="keyword">import</span> reduce <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  引入reduce后 store就存在了 inputvalue和list的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ <span class="keyword">const</span> store = createStore(reduce);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store; <span class="comment">//暴露</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>派发 action</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;输入&quot;</span> value=&#123;<span class="built_in">this</span>.state.inputValue&#125; onChange=&#123;<span class="built_in">this</span>.handleInputChange&#125; /&gt;</span><br><span class="line">    &lt;button onClick=&#123;<span class="built_in">this</span>.onSumbit&#125;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &#123;<span class="built_in">this</span>.state.list.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">    &lt;li onClick=&#123;<span class="built_in">this</span>.handleItemDelete.bind(<span class="built_in">this</span>, index)&#125; key=&#123;index&#125;&gt;</span><br><span class="line">    &#123;item&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">handleInputChange</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">type: <span class="string">&#x27;changeText&#x27;</span>,</span><br><span class="line">value: e.target.value,</span><br><span class="line">&#125;;</span><br><span class="line">store.dispatch(action); <span class="comment">//传给store</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">onSumbit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">type: <span class="string">&#x27;addList&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">store.dispatch(action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>action –&gt; store –&gt; reducer 中找到更新 state 的方法</p></blockquote><p>redurce.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * state 是前一次的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(state, action); <span class="comment">//reducer 接受到 store传过来的action</span></span><br><span class="line"><span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state)); <span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">if</span> (action.type === <span class="string">&#x27;changeText&#x27;</span>) &#123;</span><br><span class="line">newState.inputValue = action.value;</span><br><span class="line"><span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br><span class="line">   ........</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>redurce –&gt; 返回新 state 到 Store 中,只有 stroe 改变自己的内容—&gt;返回给组件触发组件更新</p><p>监听 redurce 返回的新 state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(props);</span><br><span class="line"><span class="built_in">this</span>.state = store.getState();</span><br><span class="line"><span class="built_in">this</span>.handleStoreChange = <span class="built_in">this</span>.handleStoreChange.bind(<span class="built_in">this</span>);</span><br><span class="line">store.subscribe(<span class="built_in">this</span>.handleStoreChange); <span class="comment">//监听store的变化</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">handleStoreChange</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;storechange&#x27;</span>);</span><br><span class="line"><span class="built_in">this</span>.setState(store.getState());</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>整一个流程大致是这样的</p><p>我们还可以做些什么呢？</p><h2 id="规范化-redux：ActionTypes-的拆分"><a href="#规范化-redux：ActionTypes-的拆分" class="headerlink" title="规范化 redux：ActionTypes 的拆分"></a>规范化 redux：ActionTypes 的拆分</h2><p>当我们有很多个 action 的时候，如果一个 action 方法名拼写字符串错误导致，是很难被发现的，如果是变量发现异常就很容易定位到错误，所有我们要引入 ActionTypes.js</p><p>src/store/actionTypes.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const CHANGE_INPUT_VALUE &#x3D;change_input_value &#39; ;</span><br><span class="line">export const ADD_TODO_ITEM &#x3D;add_todo_item&#39; ;</span><br><span class="line">export const DELETE_TODO_ITEM &#x3D;&#39;delete_todo_item&#39; ;</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;DELETE_TODO_ITEM&#125; = <span class="keyword">from</span> <span class="string">&#x27;./store/actionTypes&#x27;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">handleItemDelete</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">type: DELETE_TODO_ITEM, <span class="comment">//引入</span></span><br><span class="line">index: index,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> bool = <span class="built_in">window</span>.confirm(<span class="string">`你确定删除第<span class="subst">$&#123;index&#125;</span>个数吗?`</span>);</span><br><span class="line"><span class="keyword">if</span> (bool) &#123;</span><br><span class="line">store.dispatch(action);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时还要改变 reducer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;DELETE_TODO_ITEM&#125; = <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (action.type === DELETE_TODO_ITEM) &#123;</span><br><span class="line">newState.list.splice(action.index, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20181218124023.png"                      alt=""                ></p><h2 id="使用-actionCreator-统一管理-action"><a href="#使用-actionCreator-统一管理-action" class="headerlink" title="使用 actionCreator 统一管理 action"></a>使用 actionCreator 统一管理 action</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CHANGE_INPUT_VALUE, ADD_TODO_ITEM, DELETE_TODO_ITEM &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getInputChange = <span class="function"><span class="params">value</span> =&gt;</span> (&#123;</span><br><span class="line">type: CHANGE_INPUT_VALUE,</span><br><span class="line">value,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addItem = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">type: ADD_TODO_ITEM,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteItem = <span class="function"><span class="params">index</span> =&gt;</span> (&#123;</span><br><span class="line">type: DELETE_TODO_ITEM,</span><br><span class="line">index: index,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>引入 index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getInputChange, addItem, deleteItem &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/actionCreators&#x27;</span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="title">handleInputChange</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> action = getInputChange(e.target.value);</span><br><span class="line">store.dispatch(action); <span class="comment">//传给store</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_ref</title>
      <link href="2018/12/12/React%E7%B3%BB%E5%88%97_ref/"/>
      <url>2018/12/12/React%E7%B3%BB%E5%88%97_ref/</url>
      
        <content type="html"><![CDATA[<p>在React中提供了一个特殊的属性ref，用来引用React组件或Dom元素的实例；<br>因此我们在使用表单元素定义ref属性获取元素的值；<br><a id="more"></a></p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Ref</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(props);</span><br><span class="line"><span class="built_in">this</span>.handleSubmit = <span class="built_in">this</span>.handleSubmit.bind(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">handleSubmit</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line"><span class="comment">// 通过this.input获取value值;</span></span><br><span class="line">alert(<span class="string">&#x27;this title you submitted was&#x27;</span> + <span class="built_in">this</span>.input.value);</span><br><span class="line">event.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;form onSubmit=&#123;<span class="built_in">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">title:</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="function"><span class="params">input</span> =&gt;</span> (<span class="built_in">this</span>.input = input)&#125; /&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ref的值是一个函数，这个函数会接受当前元素作为参数<br>上面的例子中如果是非受控组件我们还可以通过defaultValue属性设置默认值；<br>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> defaultValue=<span class="string">&quot;请输入有效字符😁&quot;</span> ref=&#123;<span class="function"><span class="params">input</span> =&gt;</span> (<span class="built_in">this</span>.input = input)&#125; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>但是</strong> 我们基本上很少那么做这种方式破坏了React组件状态管理的一致性，不建议大家使用；</p></blockquote><h2 id="接下来我们归纳几个使用ref的场景"><a href="#接下来我们归纳几个使用ref的场景" class="headerlink" title="接下来我们归纳几个使用ref的场景"></a>接下来我们归纳几个使用ref的场景</h2><h4 id="在Dom中使用ref"><a href="#在Dom中使用ref" class="headerlink" title="在Dom中使用ref"></a>在Dom中使用ref</h4><p>跟之前例子相似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Ref</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(props);</span><br><span class="line"><span class="built_in">this</span>.handleSubmit = <span class="built_in">this</span>.handleSubmit.bind(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">componentDidMount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.input.focus(); <span class="comment">//自动获取焦点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="function"><span class="params">input</span> =&gt;</span> (<span class="built_in">this</span>.input = input)&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在组件上使用ref"><a href="#在组件上使用ref" class="headerlink" title="在组件上使用ref"></a>在组件上使用ref</h4><p>此时ref的回调函数接收的参数是当前组件的实例；这提供了一种在组件外部操作组件的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(props);</span><br><span class="line"><span class="built_in">this</span>.blur = <span class="built_in">this</span>.blur.bind(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">componentDidMount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.input.focus(); <span class="comment">//自动获取焦点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//失去焦点</span></span><br><span class="line"><span class="function"><span class="title">blur</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.input.blur();</span><br><span class="line">alert(<span class="string">&#x27;我失去焦点前的值：&#x27;</span> + <span class="built_in">this</span>.input.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="function"><span class="params">input</span> =&gt;</span> (<span class="built_in">this</span>.input = input)&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(props);</span><br><span class="line"><span class="built_in">this</span>.handleClick = <span class="built_in">this</span>.handleClick.bind(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.inputInstance);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.inputInstance.input.value);</span><br><span class="line"><span class="built_in">this</span>.inputInstance.blur();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;A ref=&#123;<span class="function"><span class="params">input</span> =&gt;</span> (<span class="built_in">this</span>.inputInstance = input)&#125; /&gt;</span><br><span class="line">&lt;button onClick=&#123;<span class="built_in">this</span>.handleClick&#125;&gt;失去焦点&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20181213234027.png"                      alt=""                ><br>通过上述例子中可以看出ref获取了A组件的实例，并把它复制给B组件的inputInstance属性，直接调用A组件中的方法</p><blockquote><p>注意：只能使用类组件定义ref属性，而不能使用函数组件定义ref</p></blockquote><h4 id="父组件访问子组件Dom节点（暂时有点难理解慢慢消化）"><a href="#父组件访问子组件Dom节点（暂时有点难理解慢慢消化）" class="headerlink" title="父组件访问子组件Dom节点（暂时有点难理解慢慢消化）"></a>父组件访问子组件Dom节点（暂时有点难理解慢慢消化）</h4><p>在一些场景中我们可能在父组件调用子组件的某个元素，例子父组件想知道这个dom的尺寸或者信息，直接用ref是无法实现的，因为ref只能获取子组件的实例对象，而不能获取子组件中的某个Dom元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"><span class="comment">//子组件使用父组件传递的inputRef，为input的ref赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(props.inputRef);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">这里输入文字：</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;props.inputRef&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">inputElement</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Children</span> <span class="attr">inputRef</span>=<span class="string">&#123;el</span> =&gt;</span> (this.inputElement = el)&#125; /&gt;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ref的值是父组件传给子组件的一个回调函数</li><li>回调函数通过自定义属性传递 例子中的inputRef</li><li>父组件的回调函数中获取这个Dom元素 </li><li>父组件的inputElement指向的子组件的input 元素</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20181213235601.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_高阶组件</title>
      <link href="2018/12/12/React%E7%B3%BB%E5%88%97_%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
      <url>2018/12/12/React%E7%B3%BB%E5%88%97_%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>高阶组件就是一个组件作为参数并返回一个新组件的函数<br>高阶组件是一个函数，并不是一个组件<br><a id="more"></a><br>看一张图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20181213001205.png"                      alt=""                ></p><h2 id="为什么需要高阶组件？"><a href="#为什么需要高阶组件？" class="headerlink" title="为什么需要高阶组件？"></a>为什么需要高阶组件？</h2><p>多个组件都需要某个相同的功能，使用高阶组件可以减少重复的实现</p><h2 id="高阶组件的应用"><a href="#高阶组件的应用" class="headerlink" title="高阶组件的应用"></a>高阶组件的应用</h2><h3 id="代理方式的高阶组件"><a href="#代理方式的高阶组件" class="headerlink" title="代理方式的高阶组件"></a>代理方式的高阶组件</h3><blockquote><p>返回的新组件类直接继承自React.Component类,新组件扮演的角色传入参，数组件的一个代理,在新组件的render函数中,将被包裹组件渲染出来,除了高阶组件自己要做得工作,其余功能全都转手给了被包裹的组件</p></blockquote><p>分为：</p><ol><li>操纵Props</li><li>抽取状态</li><li>访问ref</li><li>包装组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../app.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">WrapperComponent</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="comment">// 通过props高阶组件删除属性</span></span><br><span class="line"><span class="keyword">const</span> &#123; age, ...otherProps &#125; = <span class="built_in">this</span>.props;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div className=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">&lt;div className=<span class="string">&quot;header&quot;</span>&gt;</span><br><span class="line">&lt;span&gt;提示&lt;/span&gt;</span><br><span class="line">&lt;span&gt;X&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;<span class="comment">/* 高阶组件的传入参数 */</span>&#125;</span><br><span class="line">&lt;WrapperComponent sex=&#123;<span class="string">&#x27;男&#x27;</span>&#125; &#123;...otherProps&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> A;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="继承方式的高阶组件"><a href="#继承方式的高阶组件" class="headerlink" title="继承方式的高阶组件"></a>继承方式的高阶组件</h3><blockquote><p>采用继承关联作为参数的组件和返回的组件,假如传入的组件参数是WrappedComponent ,那么返回的组件就直接继承自WrappedComponent</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modifyPropsHOC = <span class="function"><span class="params">WrappedComponent</span> =&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">newComponent</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> element = <span class="built_in">super</span>.render();</span><br><span class="line"><span class="keyword">const</span> newStyle = &#123;</span><br><span class="line">color: element.type === <span class="string">&#x27;div&#x27;</span> ? <span class="string">&#x27;red&#x27;</span> : <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(element.type);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newProps = &#123; ...this.props, <span class="attr">style</span>: newStyle &#125;;</span><br><span class="line"><span class="keyword">return</span> React.cloneElement(element, newProps, element.props.children);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> modifyPropsHOC;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a class="link"   href="https://github.com/JasonWilltrue/High-order-components" >GitHub例子<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊「上传」这件事情</title>
      <link href="2018/12/10/%E8%81%8A%E8%81%8A%E3%80%8C%E4%B8%8A%E4%BC%A0%E3%80%8D%E8%BF%99%E4%BB%B6%E4%BA%8B%E6%83%85/"/>
      <url>2018/12/10/%E8%81%8A%E8%81%8A%E3%80%8C%E4%B8%8A%E4%BC%A0%E3%80%8D%E8%BF%99%E4%BB%B6%E4%BA%8B%E6%83%85/</url>
      
        <content type="html"><![CDATA[<p>前端要实现上传可以通过三种方法触发：</p><ol><li>通过input type=“file”选择本地文件；</li><li>通过拖拽方式把文件拖过来；</li><li>在编辑框里面复制黏贴<a id="more"></a></li></ol><h2 id="先来讲讲第一种实现"><a href="#先来讲讲第一种实现" class="headerlink" title="先来讲讲第一种实现"></a>先来讲讲第一种实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;h1&gt;点击选择&lt;/h1&gt;</span><br><span class="line">&lt;form&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file-input&quot;</span> <span class="attr">name</span>=<span class="string">&quot;filecontent&quot;</span> /&gt;</span></span>&lt;/form&gt;</span><br><span class="line">&lt;h1&gt;拖拽&lt;/h1&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;img-container&quot;</span>&gt;drop you image here&lt;/div&gt;</span><br><span class="line">&lt;h1&gt;黏贴&lt;/h1&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;img-paste&quot;</span> contenteditable=<span class="string">&quot;true&quot;</span>&gt;hello,paste you image here&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/form1.png"                      alt="image"                ></p><h2 id="用FormData来获取整个表单的内容；"><a href="#用FormData来获取整个表单的内容；" class="headerlink" title="用FormData来获取整个表单的内容；"></a>用FormData来获取整个表单的内容；</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#file-input&#x27;</span>).on(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`file name is + <span class="subst">$&#123;<span class="built_in">this</span>.value&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.form);</span><br><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData(<span class="built_in">this</span>.form);</span><br><span class="line">formData.append(<span class="string">&#x27;filename&#x27;</span>, <span class="built_in">this</span>.value);</span><br><span class="line"><span class="built_in">console</span>.log(formData);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用formData 获取的this.value是一个假的路径，也就是说浏览器无法获取文件的真实存在地址，formData也是一个空对象，但内容不是空的只是对我们来说看不见而已，只能通过append去添加字段</p><h2 id="使用FileReader"><a href="#使用FileReader" class="headerlink" title="使用FileReader"></a>使用FileReader</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#file-input&#x27;</span>).on(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line"><span class="keyword">let</span> fileType = <span class="built_in">this</span>.files[<span class="number">0</span>].type;</span><br><span class="line"><span class="built_in">console</span>.log(fileType);</span><br><span class="line"></span><br><span class="line">fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/^image/</span>.test(fileType)) &#123;</span><br><span class="line">$(<span class="string">`&lt;img src=&quot;<span class="subst">$&#123;<span class="built_in">this</span>.result&#125;</span>&quot; /&gt;`</span>).appendTo(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.files[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//按base64方式读取</span></span><br><span class="line">fileReader.readAsDataURL(<span class="built_in">this</span>.files[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//二进制方式读取 读取结果直接转成数组</span></span><br><span class="line">fileReader.readAsArrayBuffer(<span class="built_in">this</span>.files[<span class="number">0</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/filereader.png"                      alt="image"                ><br>通过实例化fileReader可以看见一个文件的修改时间，文件名，文件的大小，文件的类型</p><h2 id="拖拽图片获取图片路径"><a href="#拖拽图片获取图片路径" class="headerlink" title="拖拽图片获取图片路径"></a>拖拽图片获取图片路径</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.img-container&#x27;</span>)</span><br><span class="line">.on(<span class="string">&#x27;dragover&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line">&#125;)</span><br><span class="line">.on(<span class="string">&#x27;drop&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">event.stopPropagation();</span><br><span class="line">event.preventDefault();</span><br><span class="line"><span class="keyword">let</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line"><span class="keyword">let</span> file = event.originalEvent.dataTransfer.files[<span class="number">0</span>];</span><br><span class="line">fileReader.readAsDataURL(file);</span><br><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="built_in">console</span>.log(file);</span><br><span class="line">formData.append(<span class="string">&#x27;filecontent&#x27;</span>, file);</span><br><span class="line"><span class="built_in">console</span>.log(formData); <span class="comment">//读不出的</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="通过复制来获取图片路径"><a href="#通过复制来获取图片路径" class="headerlink" title="通过复制来获取图片路径"></a>通过复制来获取图片路径</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.img-paste&#x27;</span>).on(<span class="string">&#x27;paste&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">event.stopPropagation();</span><br><span class="line">event.preventDefault();</span><br><span class="line"><span class="comment">//黏贴的数据在event.clipboardData.files中</span></span><br><span class="line"><span class="keyword">let</span> file = event.originalEvent.clipboardData.files[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(file);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="继续写上传"><a href="#继续写上传" class="headerlink" title="继续写上传"></a>继续写上传</h2><p>什么是blob？如何读取blob?</p><h2 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h2><p>input 属性中增加 mulitple</p><h2 id="如何实现断点续传？"><a href="#如何实现断点续传？" class="headerlink" title="如何实现断点续传？"></a>如何实现断点续传？</h2><p>有一种方法就是使用blob分割大文件上传<br>比如</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端的那些事</title>
      <link href="2018/12/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>2018/12/01/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>在现如今的前端开发中移动端开发的份额已大大超过了PC端开发，掌握移动端开发技巧对前端工程师来说真的非常有必要<br><a id="more"></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190104140855.png"                      alt=""                ></p><ol><li>viewport 视口(可视区窗口)</li><li>默认不设置viewport一般可视区宽度在移动端是980</li><li>width 可视区的宽度 (number||device-width)</li><li>user-scalable 是否允许用户缩放 (yes||no) iOS10无效 (我们放在事件章节解决)</li><li>initial-scale 初始缩放比例</li><li>minimum-scale 最小缩放比例</li><li>maximum-scale 最大缩放比例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pixRatio = <span class="number">1</span> / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;像素比：&#x27;</span> + pixRatio, <span class="built_in">window</span>.devicePixelRatio);</span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="built_in">document</span>.write(</span><br><span class="line"><span class="string">&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,user-scalable=no,initial-scale=&#x27;</span> +</span><br><span class="line">pixRatio +</span><br><span class="line"><span class="string">&#x27;,minimum-scale=&#x27;</span> +</span><br><span class="line">pixRatio +</span><br><span class="line"><span class="string">&#x27;,maximum-scale=&#x27;</span> +</span><br><span class="line">pixRatio +</span><br><span class="line"><span class="string">&#x27;&quot;&gt;&#x27;</span></span><br><span class="line">);</span><br><span class="line">html.style.fontSize = html.clientWidth / <span class="number">25</span> + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>像素比把一个像素 放大至 N个像素去显示 </p></blockquote><p>设计图最少750 </p><h2 id="其他另外的设置"><a href="#其他另外的设置" class="headerlink" title="其他另外的设置"></a>其他另外的设置</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190104132638.png"                      alt=""                ></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:18888888888&quot;</span>&gt;</span>请拨打电话18888888888<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:motao@motao.com&quot;</span>&gt;</span>请发送邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190104133357.png"                      alt=""                ></p><h2 id="按钮圆角的清除"><a href="#按钮圆角的清除" class="headerlink" title="按钮圆角的清除"></a>按钮圆角的清除</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, </span><br><span class="line"><span class="selector-tag">input</span>, </span><br><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>, </span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">-webkit-appearance: none;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_生命周期</title>
      <link href="2018/11/16/React%E7%B3%BB%E5%88%97_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2018/11/16/React%E7%B3%BB%E5%88%97_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>React 生命周期会经历三个过程？</p><ol><li>挂载过程</li><li>运行时过程</li><li>卸载过程</li><li>错误处理 errorHanding（只发生在 render 阶段）<a id="more"></a></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20181214134520.png"                      alt="生命周期图"                ></p><h3 id="先来看下装载过程"><a href="#先来看下装载过程" class="headerlink" title="先来看下装载过程"></a>先来看下装载过程</h3><ol><li>constructor</li><li>componentWillMont</li><li>render</li><li>componentDidMont</li></ol><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190331172732.png"                      alt=""                ></p><p>render 调用后，componentDidMont 函数不会马上被调用，render 函数返回的东西(jsx 表示的对象)已经在渲染，组件已经被装载到了 Dom 树上</p><p>如果有三个组件 A,B,C 要三个组件全部 render 以后才能调用 componentDidMont 方法，因为 react 肯定要把所有组件全部返回结果综合起来才知道如何渲染</p><p>cwm 与 cdm 还有一个区别：cwm 可以在服务端或浏览器端调用，componentDidMont 只能在浏览器端调用；</p><h3 id="更新过期"><a href="#更新过期" class="headerlink" title="更新过期"></a>更新过期</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190331172907.png"                      alt=""                ></p><ol><li>componentWillReceiveProps</li><li>shouldComponentUpdate</li><li>componentWillUpdate</li><li>render</li><li>componentDidUpdate</li></ol><p>如果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate () &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;List+shouldComponentUpdate&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190331173419.png"                      alt=""                ></p><h4 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h4><p>表示这个只在 props 引起的组件更新过程中，才会被调用，state 的更新不会被触发，参数 nextProps 是父组件传递到当前组件的新 props，需要比较 nextprops 与当前 props 是否相等，才决定是否执行 props 变化后的逻辑，比如更新新的 props 调用 this.setState 触发组件重新渲染</p><blockquote><p>注意：在此方法中调用 render，只有在组件 render 及其后的方法中，this.state 才指向更新后的 state，在 render 之前的方法 shouldComponentUpdate，componentWillUpdate 中，this.state 依然指向的更新前的 state</p></blockquote><p>大部分情况下 componentWillReceiveProps 生命周期函数是没用的，即可以略去不写，</p><p>但是在 constructor 函数中初始化了某个 state，必须用 componentWillReceiveProps 来更新 state，不可省去，否则 render 中的 state 将得不到更新。<br>同时如果您想在子组件监听 watch 值变化做处理，也可以用到 componentWillReceiveProps</p><p>使用 componentWillReceiveProps 的时候，不要去向上分发，调用父组件的相关 setState 方法，否则会成为死循环</p><h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h4><p>表示是否继续执行更新的过程，当返回 true（默认返回值）组件会继续更新，当返回 false 则组件更新停止，后续的 cwillupdate 和 render 和 cdidupdate 都不会被调用，参数 nextProps。<br>nextState 与组件当前的 props 和 state 比较，减少组件的渲染，优化组件的性能,<br>但一般不建议这么做：原因是 组件在 render 中还是会 diff 比较组件之间的不同</p><h4 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h4><p>表示在 render 调用前执行，可以作为组件更新发生前执行某些工作的地方，（很少用到）</p><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h4><p>表示组件更新后被调用，有 2 个参数 prevProps preState 表示更新前的状态值，可以用来操作更新后的 Dom 地方，</p><h3 id="卸载过期"><a href="#卸载过期" class="headerlink" title="卸载过期"></a>卸载过期</h3><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h4><p>在 cwu 中用非 react 方法创造的 dom 元素，如果撒手不管的话，很可能造成内存泄露，必须在 cwu 中把这些 dom 元素清理掉；<br>比如清除一些不必要的定时器，清除 componentWillMont 手动创建的 Dom 元素避免内存泄露</p><blockquote><p>注意：只有类组件才有生命周期函数</p></blockquote><table><thead><tr><th>生命周期</th><th>调用次数</th></tr></thead><tbody><tr><td>getDefaultProps</td><td>调用 1 次</td></tr><tr><td>getInitialState</td><td>调用 1 次</td></tr><tr><td>componentWillMount</td><td>调用 1 次</td></tr><tr><td>render</td><td>调用&gt;=1 次</td></tr><tr><td>componentDidMount</td><td>仅客户端，调用 1 次</td></tr><tr><td>componentWillReceiveProps</td><td>调用&gt;=0 次</td></tr><tr><td>ShouldComponentUpdate</td><td>调用&gt;=0 次</td></tr><tr><td>componentWillUpdate</td><td>调用&gt;=0 次</td></tr><tr><td>render</td><td>调用&gt;=1 次</td></tr><tr><td>componentDidUpdate</td><td>调用&gt;=0 次</td></tr><tr><td>componentWillUnmount</td><td>调用 1 次</td></tr></tbody></table><h1 id="更新-react16-3-之后的生命周期"><a href="#更新-react16-3-之后的生命周期" class="headerlink" title="更新 react16.3 之后的生命周期"></a>更新 react16.3 之后的生命周期</h1><p>react16.3 新增了一些生命周期函数：</p><ol><li>getDerivedStateFromProps</li><li>getSnapshotBeforeUpdate</li></ol><p>同时 FB 声明在 react17 将删除：</p><ol><li>componentWillMount、</li><li>componentWillReceiveProps、</li><li>componentWillUpdate</li></ol><p>在 16.3 的版本中将保留这三个函数，并添加了别名：</p><ol><li>UNSAFE_componentWillMount</li><li>UNSAFE_componentWillReceiveProps</li><li>UNSAFE_componentWillUpdate</li></ol><p>在此我们主要介绍</p><ol><li>getDerivedStateFromProps</li><li>getSnapshotBeforeUpdate</li></ol><p>getDerivedStateFromProps(nextProps, prevState)：从 props 派生出 state</p><ul><li>执行次数：多次</li><li>触发条件：组件实例化及接收新 props 后调用</li><li>替代：替代原来的 componentWillReceiveProps，并且加载第一次时也调用<br>初始化的时候<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190331233644.png"                      alt=""                ></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">todoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;constructor&#x27;</span>);</span><br><span class="line"> <span class="built_in">super</span>(props)</span><br><span class="line"> <span class="built_in">this</span>.state=&#123;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromProps (props, state)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getDerivedStateFromProps&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(props);</span><br><span class="line"><span class="built_in">console</span>.log(state);</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190331233453.png"                      alt="更新可能带来的性能问题"                ><br>为什么要用<code>static</code>？<br><code>static</code> 是 ES6 的写法，当我们定义一个函数为 static 时，就意味着无法通过 this 调用我们在类中定义的方法（原理和 js 中原型链继承相关，具体我就不说了，可自行搜索）。</p><p>不足之处：<br>在<code>getDerivedStateFromProps</code>中，在条件限制下(if/else)调用 setState。如果不设任何条件 setState，这个函数超高的调用频率，不停的 setState，会导致频繁的重绘，既有可能产生性能问题，同时也容易产生 bug。</p><p>getSnapshotBeforeUpdate(nextProps, prevState)：从 props 派生出 state</p><ul><li>执行次数：多次</li><li>触发条件：组件 render 时调用</li><li>返回值：返回值传递给 componentDidUpdate(prevProps, prevState, snapshot)</li><li>替代：替代原来的 componentWillupdate</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getSnapshotBeforeUpdate (prevProps, prevState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getSnapshotBeforeUpdate&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(prevProps);</span><br><span class="line">    <span class="built_in">console</span>.log(prevState);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>getSnapshotBeforeUpdate</code> 是在 render 之后触发，它的要点在于触发时，Dom 还没有更新，开发者可以做一些事情，返回值会作为第三个参数传递给接下来将要触发的 componentDidUpdate。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190331234539.png"                      alt=""                ></p><p>作为一个不常用的生命周期，getSnapshotBeforeUpdate React 16 给的建议当然还是：<code>能不用就尽量不要用</code>。 - - ！！！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20181214134457.png"                      alt=""                ></p><h2 id="最后小结："><a href="#最后小结：" class="headerlink" title="最后小结："></a>最后小结：</h2><p>到目前为止(React 16.4)，React 的渲染机制遵循同步渲染:</p><ol><li>首次渲染: willMount &gt; render &gt; didMount，</li><li>props 更新时: receiveProps &gt; shouldUpdate &gt; willUpdate &gt; render &gt; didUpdate</li><li>state 更新时: shouldUpdate &gt; willUpdate &gt; render &gt; didUpdate</li><li>卸载时: willUnmount</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://blog.csdn.net/Napoleonxxx/article/details/81120854" >React v15 到 v16.3, v16.4 新生命周期总结以及使用场景<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.cnblogs.com/soyxiaobi/p/9559117.html" >React 生命周期执行顺序详解<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_prop与state</title>
      <link href="2018/11/15/React%E7%B3%BB%E5%88%97_prop%E4%B8%8Estate/"/>
      <url>2018/11/15/React%E7%B3%BB%E5%88%97_prop%E4%B8%8Estate/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Prop？"><a href="#什么是Prop？" class="headerlink" title="什么是Prop？"></a>什么是Prop？</h3><p>在React中，从外部传递给组件的数据，一个react组件通过定义自己能接受的prop就定义了自己的对外公共接口；<br><a id="more"></a></p><p>prop很像HTML中的属性；当prop类型不是字符串类型，必须用花括号<code>&#123;&#125;</code>把prop包住，style的值要2层花括号，外层花括号代表jsx语法，内层花括号代表一个对象常量</p><h3 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">           &lt;Counter caption=<span class="string">&quot;First&quot;</span> initValue=&#123;<span class="number">0</span>&#125; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.state=&#123;</span><br><span class="line">        count:props.initValue || <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> &#123;caption&#125; = <span class="built_in">this</span>.props; <span class="comment">//ES6解构赋值</span></span><br><span class="line">        renturn(</span><br><span class="line">           ......</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：如果没有<code>super(props)</code>是不能使用this.props赋值的，因为类实例无法访问父组件传过来的props</p><h3 id="什么是state？"><a href="#什么是state？" class="headerlink" title="什么是state？"></a>什么是state？</h3><p>state是组件内部状态<br>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.state=&#123;</span><br><span class="line">        count:props.initValue || <span class="number">0</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以使用defaultProps来初始化内部状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Counter.defaultProps=&#123;</span><br><span class="line">    initValue:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读取和更新内部状态"><a href="#读取和更新内部状态" class="headerlink" title="读取和更新内部状态"></a>读取和更新内部状态</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newCount = <span class="built_in">this</span>.state.count;</span><br><span class="line"><span class="built_in">this</span>.setstate(&#123;</span><br><span class="line">    </span><br><span class="line">    count:newCount,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意setstate是个异步函数，后面可以跟一个回调函数<br>比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newCount = <span class="built_in">this</span>.state.count;</span><br><span class="line"><span class="built_in">this</span>.setstate(&#123;</span><br><span class="line">    </span><br><span class="line">    count:newCount,</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//请求改变数据</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="props与react的简单对比"><a href="#props与react的简单对比" class="headerlink" title="props与react的简单对比"></a>props与react的简单对比</h3><ol><li>prop定义外部接口，state是记录内部状态；</li><li>prop的赋值在外部世界使用组件时，state的赋值在组件内部；</li><li>组件不应该改变prop的值，而state存在的目的是让组件来改变；</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React系列_JSX</title>
      <link href="2018/11/14/React%E7%B3%BB%E5%88%97_JSX/"/>
      <url>2018/11/14/React%E7%B3%BB%E5%88%97_JSX/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是JSX"><a href="#什么是JSX" class="headerlink" title="什么是JSX?"></a>什么是JSX?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><ol><li>jsx代码看起来和HTML代码一模一样,但2者有不同之处</li><li>jsx元素不局限html元素 可以任何一个react组件</li><li>React判断一个元素是html还是react组件看第一个字母是否大写</li><li>JSX语句是一个对象，是一个运用HTML标签结构却实现了javascript语法的对象，一句话，简直飞起</li></ol><h3 id="jsx用法："><a href="#jsx用法：" class="headerlink" title="jsx用法："></a>jsx用法：</h3><p>在JSX中可以加入表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> use = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  firstName: <span class="string">&#x27;tm7&#x27;</span>,</span><br><span class="line">  lastName: <span class="string">&#x27;jxy&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> user.firstName + <span class="string">&#x27; &#x27;</span> + user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t1 = <span class="number">1</span>, t2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#x27;abc&#x27;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> a = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;use&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;user.firstName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;formatName(user)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> d = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;1+1+1&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> e = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;t1 &amp;&amp; t2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> f = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;t1 &gt; t2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> g = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;t1 &lt; t2 ? &#x27;abc&#x27;:&#x27;ccc&#x27;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> h = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;function()&#123;return &#x27;abc&#x27;;&#125;()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> i = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;<span class="tag">&lt;<span class="name">div</span>&gt;</span>iii<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h3 id="可以加入自定义属性"><a href="#可以加入自定义属性" class="headerlink" title="可以加入自定义属性"></a>可以加入自定义属性</h3><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-fff</span>=<span class="string">&quot;abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;  <span class="comment">//必须加data-</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"><span class="keyword">const</span> el = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">abc</span>&#x27;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h3 id="最后看一下JSX-是一种语法糖，经过-babel-转换结果如下，可以发现实际上转化成-React-createElement-的形式："><a href="#最后看一下JSX-是一种语法糖，经过-babel-转换结果如下，可以发现实际上转化成-React-createElement-的形式：" class="headerlink" title="最后看一下JSX 是一种语法糖，经过 babel 转换结果如下，可以发现实际上转化成 React.createElement() 的形式："></a>最后看一下JSX 是一种语法糖，经过 babel 转换结果如下，可以发现实际上转化成 React.createElement() 的形式：</h3><p>每一个参数分别对应[标签名，属性，孩子节点]<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = (</span><br><span class="line">  &lt;h1 className=<span class="string">&quot;greeting&quot;</span>&gt;</span><br><span class="line">    Hello,</span><br><span class="line">    &lt;span className=<span class="string">&quot;text&quot;</span>&gt; world!&lt;/span&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//==========babel编译后==============</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> el = React.createElement(</span><br><span class="line">  <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">&quot;greeting&quot;</span> &#125;,</span><br><span class="line">  <span class="string">&quot;Hello,&quot;</span>,</span><br><span class="line">  React.createElement(</span><br><span class="line">    <span class="string">&quot;span&quot;</span>,</span><br><span class="line">    &#123; <span class="attr">className</span>: <span class="string">&quot;text&quot;</span> &#125;,</span><br><span class="line">    <span class="string">&quot; world!&quot;</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>因此，我们得出结论：JSX 语法糖经过 Babel 编译后转换成一种对象，该对象即所谓的虚拟 DOM，使用虚拟 DOM 能让页面进行更为高效的渲染。</p><h3 id="虚拟-DOM-转化为真实-DOM"><a href="#虚拟-DOM-转化为真实-DOM" class="headerlink" title="虚拟 DOM 转化为真实 DOM"></a>虚拟 DOM 转化为真实 DOM</h3><p>将虚拟 DOM 转化为真实 DOM 是使用 ReactDOM.render 实现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  element, <span class="comment">// 上文的 element，即虚拟 dom</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>总结<br>JSX 经过 babel 编译为 React.createElement() 的形式，其返回结果就是 Virtual DOM，最后通过 ReactDOM.render() 将 Virtual DOM 转化为真实的 DOM 展现在界面上。流程图如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/blog/20181121/100718809.png"                      alt="mark"                ></p><p>…..暂时想到这几点不全面,还会不断补充</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单实现下Promise的原理</title>
      <link href="2018/11/13/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%8BPromise%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>2018/11/13/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%8BPromise%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p></blockquote><a id="more"></a><h3 id="promise的简单使用"><a href="#promise的简单使用" class="headerlink" title="promise的简单使用"></a>promise的简单使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//做一些异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;执行完成&#x27;</span>);</span><br><span class="line">        resolve(<span class="string">&#x27;随便什么数据&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一步一步实现效果"><a href="#一步一步实现效果" class="headerlink" title="一步一步实现效果"></a>一步一步实现效果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> status = &#123;</span><br><span class="line">      pending:<span class="number">0</span>,</span><br><span class="line">      fulfilled:<span class="number">1</span>,</span><br><span class="line">      rejected:<span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CustomePromise</span></span>&#123;</span><br><span class="line">    <span class="comment">//接受一个函数进来</span></span><br><span class="line">      <span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">this</span>._status = status.pending;</span><br><span class="line">         <span class="built_in">this</span>._handler(func);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//接受外部传入的函数 调用外部的函数</span></span><br><span class="line">      <span class="function"><span class="title">_handler</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">         func(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(value);</span><br><span class="line">         &#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error);</span><br><span class="line">         &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">//执行成功</span></span><br><span class="line">      <span class="function"><span class="title">_resolve</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//执行失败</span></span><br><span class="line">      <span class="function"><span class="title">_reject</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//挂载到windows</span></span><br><span class="line">   <span class="built_in">window</span>.CustomePromise = CustomePromise;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对执行次数的限制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> status = &#123;</span><br><span class="line">pending: <span class="number">0</span>,</span><br><span class="line">fulfilled: <span class="number">1</span>,</span><br><span class="line">rejected: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomePromise</span> </span>&#123;</span><br><span class="line"><span class="comment">//接受一个函数进来</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._status = status.pending;</span><br><span class="line"><span class="built_in">this</span>._handler(func);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接受外部传入的函数 调用外部的函数</span></span><br><span class="line"><span class="function"><span class="title">_handler</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> done = <span class="literal">false</span>;</span><br><span class="line">func(</span><br><span class="line">value =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (done) <span class="literal">true</span>; <span class="comment">// 只执行一次</span></span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="built_in">this</span>._resolve(value);</span><br><span class="line">&#125;,</span><br><span class="line">() =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (done) <span class="literal">true</span>;</span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">this</span>._reject(value);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成功</span></span><br><span class="line"><span class="function"><span class="title">_resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._status = status.fulfilled;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//失败</span></span><br><span class="line"><span class="function"><span class="title">_reject</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._status = status.rejected;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//挂载到windows</span></span><br><span class="line"><span class="built_in">window</span>.CustomePromise = CustomePromise;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="收集失败或成功的执行函数并执行"><a href="#收集失败或成功的执行函数并执行" class="headerlink" title="收集失败或成功的执行函数并执行"></a>收集失败或成功的执行函数并执行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    .......</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomePromise</span> </span>&#123;</span><br><span class="line"><span class="comment">//接受一个函数进来</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line"><span class="comment">//初始状态</span></span><br><span class="line"><span class="built_in">this</span>._status = status.pending;</span><br><span class="line"><span class="built_in">this</span>._handler(func);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集成功状态或失败状态要执行的函数</span></span><br><span class="line"><span class="built_in">this</span>.resolvedArr = [];</span><br><span class="line"><span class="built_in">this</span>.rejectArr = [];</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>._value = <span class="literal">null</span>; <span class="comment">//记录参数</span></span><br><span class="line"><span class="built_in">this</span>._error = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接受外部传入的函数 调用外部的函数</span></span><br><span class="line"><span class="function"><span class="title">_handler</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> done = <span class="literal">false</span>;</span><br><span class="line">func(</span><br><span class="line">value =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (done) <span class="literal">true</span>;</span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="built_in">this</span>._resolve(value);</span><br><span class="line">&#125;,</span><br><span class="line">error =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (done) <span class="literal">true</span>;</span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">this</span>._reject(error);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成功</span></span><br><span class="line"><span class="function"><span class="title">_resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line"><span class="comment">// 只执行一次</span></span><br><span class="line"> <span class="built_in">this</span>._status = status.fulfilled;</span><br><span class="line">         <span class="built_in">this</span>._value = value;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//收集完执行任务后 执行</span></span><br><span class="line">         <span class="built_in">this</span>.resolvedArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(<span class="built_in">this</span>._value))</span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//失败</span></span><br><span class="line"><span class="function"><span class="title">_reject</span>(<span class="params">error</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._status = status.rejected;</span><br><span class="line">         <span class="built_in">this</span>._error = error;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//收集完执行任务后 执行</span></span><br><span class="line">         <span class="built_in">this</span>.rejectArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(<span class="built_in">this</span>._error))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  收集的时机:pending状态收集</span></span><br><span class="line"><span class="function"><span class="title">_done</span>(<span class="params">resolvedFunc, rejectedFunc</span>)</span> &#123;</span><br><span class="line">resolvedFunc = <span class="keyword">typeof</span> resolvedFunc === <span class="string">&#x27;function&#x27;</span> ? resolvedFunc : <span class="literal">null</span>;</span><br><span class="line">rejectedFunc = <span class="keyword">typeof</span> rejectedFunc === <span class="string">&#x27;function&#x27;</span> ? rejectedFunc : <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>._status === <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (rejectedFunc) &#123;</span><br><span class="line"><span class="built_in">this</span>.resolvedArr.push(resolvedFunc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (rejectedFunc) &#123;</span><br><span class="line"><span class="built_in">this</span>.rejectArr.push(rejectedFunc);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (his._status === <span class="number">1</span> &amp;&amp; rejectedFunc) &#123;</span><br><span class="line">resolvedFunc(<span class="built_in">this</span>._value);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (his._status === <span class="number">2</span> &amp;&amp; rejectedFunc) &#123;</span><br><span class="line">rejectedFunc(<span class="built_in">this</span>._error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//收集注册成功状态或者失败状态</span></span><br><span class="line"><span class="function"><span class="title">then</span>(<span class="params">resolvedFunc, rejectedFunc</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._done(resolvedFunc, rejectedFunc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     .......</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模拟实现异步效果"><a href="#模拟实现异步效果" class="headerlink" title="模拟实现异步效果"></a>模拟实现异步效果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//成功</span></span><br><span class="line"> <span class="function"><span class="title">_resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line"> <span class="comment">//模拟异步操作</span></span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 只执行一次</span></span><br><span class="line"> <span class="built_in">this</span>._status = status.fulfilled;</span><br><span class="line"> <span class="built_in">this</span>._value = value;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//收集完执行任务后 执行</span></span><br><span class="line"> <span class="built_in">this</span>.resolvedArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(<span class="built_in">this</span>._value));</span><br><span class="line"> &#125;, <span class="number">2000</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//失败</span></span><br><span class="line"> <span class="function"><span class="title">_reject</span>(<span class="params">error</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>._status = status.rejected;</span><br><span class="line"> <span class="built_in">this</span>._error = error;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//收集完执行任务后 执行</span></span><br><span class="line"> <span class="built_in">this</span>.rejectArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(<span class="built_in">this</span>._error));</span><br><span class="line"> &#125;, <span class="number">2000</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="期待下次更新继续…………"><a href="#期待下次更新继续…………" class="headerlink" title="期待下次更新继续………….."></a>期待下次更新继续…………..</h1>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时器</title>
      <link href="2018/11/12/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>2018/11/12/%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>怎么实现一个js版本sleep函数?<br><a id="more"></a></p><p>在其他语言中都可能有sleep函数</p><h3 id="从最简单的开始讲"><a href="#从最简单的开始讲" class="headerlink" title="从最简单的开始讲:"></a>从最简单的开始讲:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time,callback</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(callback,time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2000</span>,<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;sleep recover&#x27;</span>)&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>但是这样写很不优雅,都什么年代了,还不快用<code>Promise</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>  <span class="built_in">setTimeout</span>(resolve,time))</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2000</span>).then(<span class="function">()=&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;sleep recover&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>ES7提供了更加方便的async/await方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>  <span class="built_in">setTimeout</span>(resolve,time))</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">await</span> sleep(<span class="number">2000</span>); </span><br><span class="line">   <span class="comment">//只有sleep执行完成才能继续下面的语句</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;sleep recover&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">init().then(<span class="function">()=&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;init finish&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="定时器还有一个重要的话题-setTimeout与setInterval的区别"><a href="#定时器还有一个重要的话题-setTimeout与setInterval的区别" class="headerlink" title="定时器还有一个重要的话题:setTimeout与setInterval的区别"></a>定时器还有一个重要的话题:<code>setTimeout</code>与<code>setInterval</code>的区别</h3><ol><li><code>setTimeout</code> 当前执行单元都执行完成后才开始执行,</li><li><code>setInterval</code> 在设定完计时器后立马计时</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> scriptBegin = <span class="built_in">Date</span>.now();</span><br><span class="line"> fun1();</span><br><span class="line"> fun2();</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">act</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(params,<span class="built_in">Date</span>.now() - scriptBegin);</span><br><span class="line">   <span class="keyword">let</span> begin = <span class="built_in">Date</span>.now();</span><br><span class="line">   <span class="keyword">while</span> (<span class="built_in">Date</span>.now()-begin&lt;<span class="number">20</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> fun3 = <span class="function">()=&gt;</span> act(<span class="string">&#x27;fun3&#x27;</span>); </span><br><span class="line">   <span class="built_in">setTimeout</span>(fun3, <span class="number">0</span>);  <span class="comment">//再回到异步完成后开始执行</span></span><br><span class="line">   act(<span class="string">&#x27;fun1&#x27;</span>)  <span class="comment">//跳过上面的异步 先执行这句</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   act(<span class="string">&#x27;fun2-1&#x27;</span>);  <span class="comment">//再执行这句</span></span><br><span class="line">   <span class="keyword">let</span> fun4 = <span class="function">()=&gt;</span> act(<span class="string">&#x27;fun4&#x27;</span>);</span><br><span class="line">   <span class="built_in">setInterval</span>(fun4, <span class="number">20</span>); <span class="comment">//最后回开始执行</span></span><br><span class="line">   act(<span class="string">&#x27;fun2-2&#x27;</span>) <span class="comment">//跳过上面的异步 先执行这句</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//结果</span></span><br><span class="line"> fun1 <span class="number">0</span></span><br><span class="line"> fun2-<span class="number">1</span> <span class="number">22</span></span><br><span class="line"> fun2-<span class="number">2</span> <span class="number">42</span></span><br><span class="line"> fun3 <span class="number">64</span></span><br><span class="line"> fun4 <span class="number">84</span></span><br><span class="line">fun4 <span class="number">104</span></span><br><span class="line">fun4 <span class="number">124</span></span><br><span class="line">fun4 <span class="number">144</span></span><br><span class="line">fun4 <span class="number">164</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数节流 throttling</title>
      <link href="2018/11/11/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%20throttling/"/>
      <url>2018/11/11/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%20throttling/</url>
      
        <content type="html"><![CDATA[<h3 id="节流是什么"><a href="#节流是什么" class="headerlink" title="节流是什么?"></a>节流是什么?</h3><blockquote><p>浏览器的DOM操作比起非DOM交互需要更多的内存和cpu时间，连续过多的DOM操作可能会导致浏览器挂起甚至崩溃。比如使用onresize，onscroll这些可能会被连续触发的事件的时候，如果事件处理程序中进行了过多地DOM操作，可能就会使得浏览器崩溃。而为了绕开这个问题，可能就需要使用到函数节流。</p></blockquote><a id="more"></a><h4 id="防止一个事件触发执行的太快-比如"><a href="#防止一个事件触发执行的太快-比如" class="headerlink" title="防止一个事件触发执行的太快,比如:"></a>防止一个事件触发执行的太快,比如:</h4><ul><li style="list-style: none"><input type="checkbox" checked></input> 监听input触发搜索</li><li style="list-style: none"><input type="checkbox" checked></input> 监听resize做响应调整</li><li style="list-style: none"><input type="checkbox" checked></input> 监听mousemove调整位置</li></ul><h3 id="怎么样实现一个节流"><a href="#怎么样实现一个节流" class="headerlink" title="怎么样实现一个节流?"></a>怎么样实现一个节流?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;onresize&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method,context</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">clearTimeout</span>(method.timer);</span><br><span class="line">  method.timer=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      method.call(context);</span><br><span class="line">  &#125;,<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function">()=&gt;</span>throttle(fun,<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><p>但上述代码有一个问题,就是这个函数可能永远不会执行,<br>因为他一直在触发,一直在清除id.在窗口拖拽过程中不会执行,只有最后一次停下之后才执行<br>这种实现应该叫<code>防抖</code>;</p><h3 id="我们继续改进下代码"><a href="#我们继续改进下代码" class="headerlink" title="我们继续改进下代码"></a>我们继续改进下代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;onresize&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method,context</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(method.timer)&#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">clearTimeout</span>(method.timer);</span><br><span class="line">   method.timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       method.call(context)</span><br><span class="line">       method.id=<span class="number">0</span>;</span><br><span class="line">   &#125;,<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function">()=&gt;</span>throttle(fun,<span class="built_in">window</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们把setTimeout里的id设置成了0;那么下次执行的时候就会触发<br>也有一个小问题:就是每次执行要延迟100ms 有时候用户可能就是最大化窗口,只触发了一次<br>,但还是延迟100ms才能执行,假设你设置500ms那么延迟就是半秒;</p><h3 id="还可以继续优化"><a href="#还可以继续优化" class="headerlink" title="还可以继续优化"></a>还可以继续优化</h3><p>先判断是否为第一次触发,如果是的话立即执行 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method,context</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">typeof</span> method.timer === <span class="string">&quot;undefined&quot;</span>)&#123;</span><br><span class="line">       method.call(context)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(method.timer)&#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">clearTimeout</span>(method.timer);</span><br><span class="line">   method.timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       method.call(context)</span><br><span class="line">       method.id=<span class="number">0</span>;</span><br><span class="line">   &#125;,<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但还是有问题 如果用户最大化之后,隔了一会又取消最大化了就又有延迟了,并且第一次触发执行2次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;onresize&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method,context</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!method.timer)&#123;</span><br><span class="line">       method.call(context)</span><br><span class="line">       method.timer = <span class="number">1</span></span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> method.timer=<span class="number">0</span>,<span class="number">500</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function">()=&gt;</span>throttle(fun,<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><p>节流会失去灵敏度,如果做一个拖拽一样的应用,会变成一卡一卡,是不可取的.</p><h3 id="防抖和节流的区别"><a href="#防抖和节流的区别" class="headerlink" title="防抖和节流的区别"></a>防抖和节流的区别</h3><blockquote><p>防抖是执行重复操作的<code>最后一次</code>;<br>而节流是每多少单位时间内<code>执行一次</code>;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解 javascript 中的柯里化</title>
      <link href="2018/11/10/%E7%90%86%E8%A7%A3javascript%E4%B8%AD%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>2018/11/10/%E7%90%86%E8%A7%A3javascript%E4%B8%AD%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>什么是柯里化?</p><blockquote><p>就是函数与参数值的结合产生一个新的函数</p></blockquote><a id="more"></a><h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add1 = add.curry(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add1(<span class="number">5</span>)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">console</span>.log(add1(<span class="number">2</span>)); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="如何实现-不完整实现"><a href="#如何实现-不完整实现" class="headerlink" title="如何实现(不完整实现)"></a>如何实现(不完整实现)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.curry = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> defautlArgs = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> that.apply(<span class="built_in">this</span>, defaultArgs.concat(<span class="built_in">arguments</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于参数不一定是一个数组,没有 concat 函数,所以要把伪数组转成一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.prototype.slice;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.curry = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">  <span class="keyword">let</span> defautlArgs = arr.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> that.apply(<span class="built_in">this</span>, defaultArgs.concat(slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="柯里化有用吗"><a href="#柯里化有用吗" class="headerlink" title="柯里化有用吗?"></a>柯里化有用吗?</h3><p><strong>① 案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// fn 指官员消化老婆的手段</span></span><br><span class="line">  <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// args 指的是那个合法老婆</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 已经有的老婆和新搞定的老婆们合成一体，方便控制</span></span><br><span class="line">    <span class="keyword">var</span> newArgs = args.concat([].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="comment">// 这些老婆们用 fn 这个手段消化利用，完成韦小宝前辈的壮举并返回</span></span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, newArgs);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下为官员如何搞定7个老婆的测试</span></span><br><span class="line"><span class="comment">// 获得合法老婆</span></span><br><span class="line"><span class="keyword">var</span> getWife = currying(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> allWife = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// allwife 就是所有的老婆的，包括暗渡陈仓进来的老婆</span></span><br><span class="line">  <span class="built_in">console</span>.log(allWife.join(<span class="string">&quot;;&quot;</span>));</span><br><span class="line">&#125;, <span class="string">&quot;合法老婆&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得其他6个老婆</span></span><br><span class="line">getWife(<span class="string">&quot;大老婆&quot;</span>, <span class="string">&quot;小老婆&quot;</span>, <span class="string">&quot;俏老婆&quot;</span>, <span class="string">&quot;刁蛮老婆&quot;</span>, <span class="string">&quot;乖老婆&quot;</span>, <span class="string">&quot;送上门老婆&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 换一批老婆</span></span><br><span class="line">getWife(<span class="string">&quot;超越韦小宝的老婆&quot;</span>);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20191203160605.png"                      alt=""                ></p><p><strong>② 案例</strong><br>举个例子，你有一个商店 🏠，你想给你的顾客 10% 的折扣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">discount</span>(<span class="params">price, discount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> price * discount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个有价值的客户买了一件\$500 的商品，你会给他：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> price = discount(<span class="number">500</span>, <span class="number">0.1</span>); <span class="comment">// $50</span></span><br><span class="line"><span class="comment">// $500 - $50 = $450</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你会发现从长远来看，我们每天都自己计算10%的折扣。</span></span><br><span class="line"><span class="keyword">const</span> price = discount(<span class="number">1500</span>, <span class="number">0.1</span>); <span class="comment">// $150</span></span><br><span class="line"><span class="comment">// $1,500 - $150 = $1,350</span></span><br><span class="line"><span class="keyword">const</span> price = discount(<span class="number">2000</span>, <span class="number">0.1</span>); <span class="comment">// $200</span></span><br><span class="line"><span class="comment">// $2,000 - $200 = $1,800</span></span><br><span class="line"><span class="keyword">const</span> price = discount(<span class="number">50</span>, <span class="number">0.1</span>); <span class="comment">// $5</span></span><br><span class="line"><span class="comment">// $50 - $5 = $45</span></span><br><span class="line"><span class="keyword">const</span> price = discount(<span class="number">5000</span>, <span class="number">0.1</span>); <span class="comment">// $500</span></span><br><span class="line"><span class="comment">// $5,000 - $500 = $4,500</span></span><br><span class="line"><span class="keyword">const</span> price = discount(<span class="number">300</span>, <span class="number">0.1</span>); <span class="comment">// $30</span></span><br><span class="line"><span class="comment">// $300 - $30 = $270</span></span><br></pre></td></tr></table></figure><p>我们可以柯里化这个折扣函数，这样就不需要每天都添加 0.10 这个折扣值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">discount</span>(<span class="params">discount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">price</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> price * discount;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tenPercentDiscount = discount(<span class="number">0.1</span>);</span><br><span class="line"><span class="comment">//现在，我们可以只用你有价值的客户购买的商品价格来进行计算了：</span></span><br><span class="line">tenPercentDiscount(<span class="number">500</span>); <span class="comment">// $50</span></span><br><span class="line"><span class="comment">// $500 - $50 = $450</span></span><br></pre></td></tr></table></figure><p>再一次，发生了这样的情况，有一些有价值的客户比另一些有价值的客户更重要 – 我们叫他们超级价值客户。并且我们想给超级价值客户 20%的折扣。</p><p>返回的函数<code>twentyPercentDiscount</code>将被用于计算超级价值客户的折扣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">twentyPercentDiscount(<span class="number">500</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="comment">// $500 - $100 = $400</span></span><br><span class="line">twentyPercentDiscount(<span class="number">5000</span>); <span class="comment">// 1000</span></span><br><span class="line"><span class="comment">// $5,000 - $1,000 = $4,000</span></span><br><span class="line">twentyPercentDiscount(<span class="number">1000000</span>); <span class="comment">// 200000</span></span><br><span class="line"><span class="comment">// $1,000,000 - $200,000 = $600,000</span></span><br></pre></td></tr></table></figure><p><strong>避免频繁调用具有相同参数的函数</strong></p><p>举个例子，我们有一个函数来计算圆柱体的体积：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params">l, w, h</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> l * w * h;</span><br><span class="line">&#125;</span><br><span class="line">volume(<span class="number">200</span>, <span class="number">30</span>, <span class="number">100</span>); <span class="comment">// 2003000l</span></span><br><span class="line">volume(<span class="number">32</span>, <span class="number">45</span>, <span class="number">100</span>); <span class="comment">//144000l</span></span><br><span class="line">volume(<span class="number">2322</span>, <span class="number">232</span>, <span class="number">100</span>); <span class="comment">// 53870400l</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，需要柯里化这个计算体积的函数（像我们之前做的一样）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">w</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">l</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> l * w * h;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以定义一个特定的函数，这个函数用于计算特定的圆柱体高度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hCylinderHeight = volume(<span class="number">100</span>);</span><br><span class="line">hCylinderHeight(<span class="number">200</span>)(<span class="number">30</span>); <span class="comment">// 600,000l</span></span><br><span class="line">hCylinderHeight(<span class="number">2322</span>)(<span class="number">232</span>); <span class="comment">// 53,870,400l</span></span><br></pre></td></tr></table></figure><p><strong>③ 案例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">0</span>];</span><br><span class="line">data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a); <span class="comment">//[10,8,5,2,1,0];</span></span><br></pre></td></tr></table></figure><p>如果操作的数量比较多,每一次都需要写一个函数参数.因此可以使用柯里化把参数固定起来;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sortDescending = <span class="built_in">Array</span>.prototype.sort.curry(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">0</span>];</span><br><span class="line">data.sortDescending(); <span class="comment">//[10,8,5,2,1,0];</span></span><br></pre></td></tr></table></figure><h2 id="最后引用大佬的话"><a href="#最后引用大佬的话" class="headerlink" title="最后引用大佬的话"></a>最后引用大佬的话</h2><p>其实这些模式在实际使用的时候，或多或少都使用过，当看到“<strong>模式”概念的时候，我们就会猛然惊起：“哦，原来这个就叫做‘观察者模式’等”。现在要讨论的问题是，我们有没有必要把这些“</strong>模式”都记住呢，都理解其对应的核心呢？这个问题类似于，我可以看懂 NBA 的篮球比赛，那我有没有必要把各个球队以及球队的队员都记住呢？</p><p>如果想成为 JS 大神，从这个目标来看，这是需要的；好比优秀的篮球解说员必须要知道每个球队的名字、球员甚至周边八卦。但是，现实很重要。如果连 JS 函数相关的基本东西都驾驭不好，显然，硬是啃这些似懂非懂的概念只会造成混乱。如果你觉得可以更近一步，先通透几个自己习惯的熟悉的使用模式，足够应付实际项目；其他一些概念什么的，更多的只是噱头，实用性其实并不大。正如本文的柯里化，看上去很高级，似乎也有点用处，然而 JS 的灵活性使得很多实现完全摆脱“柯里化”这个概念的束缚，以更通俗易懂的方式实现。</p><p>然而，即使实用性不高，我们还是要有所了解，因为，你不知道什么时候会用到它。比方说 CSS 中的<code>display:table</code>;某些情况下可以解决一些棘手问题(secret!).</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="http://www.zhangxinxu.com/wordpress/2013/02/js-currying/" >JS 中的柯里化(currying)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://juejin.im/post/5bf18715e51d45244939acc5#heading-5" >「译」理解 JavaScript 的柯里化<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu14.04安装MySQL5.5图解安装流程！</title>
      <link href="2018/11/08/Ubuntu14.04%E5%AE%89%E8%A3%85MySQL5.5%E5%9B%BE%E8%A7%A3%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B%EF%BC%81/"/>
      <url>2018/11/08/Ubuntu14.04%E5%AE%89%E8%A3%85MySQL5.5%E5%9B%BE%E8%A7%A3%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>删除mysql的数据文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /<span class="keyword">var</span>/lib/mysql/ -R</span><br></pre></td></tr></table></figure></p><p>删除mysql的配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/mysql/ -R</span><br></pre></td></tr></table></figure></p><p>自动卸载mysql（包括server和client）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove mysql* --purge </span><br><span class="line">sudo apt-get remove apparmor</span><br></pre></td></tr></table></figure></p><p>检查是否卸载干净<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep mysql # 若没有返回，说明已完成卸载</span><br></pre></td></tr></table></figure></p><p>接下来安装就是件简单的事情默认安装5.5版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><br>查看mysql版本：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysqladmin -u root -p version</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190805151037.png"                      alt=""                ></p><p>记录下安装步骤<br><a id="more"></a></p><h1 id="安装msyql"><a href="#安装msyql" class="headerlink" title="安装msyql"></a>安装msyql</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">//说明没有你不是root用户，则需要用sudo命令</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install MySQL-client-core-<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line">apt-get install mysql-client-<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line">apt-get install mysql-server-<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="检查mysql是否启动"><a href="#检查mysql是否启动" class="headerlink" title="检查mysql是否启动"></a>检查mysql是否启动</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检查mysql是否启动</span><br><span class="line">ps -ef | grep mysql</span><br></pre></td></tr></table></figure><h1 id="查看msyql-监听端口"><a href="#查看msyql-监听端口" class="headerlink" title="查看msyql 监听端口"></a>查看msyql 监听端口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检查mysql是否启动</span><br><span class="line">netstat -tap | grep mysql</span><br></pre></td></tr></table></figure><h1 id="Mysql-服务远程访问"><a href="#Mysql-服务远程访问" class="headerlink" title="Mysql 服务远程访问"></a>Mysql 服务远程访问</h1><p>修改配置文件：sudo gedit /etc/mysql/conf.cnf<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/blog/20181109/095124771.png"                      alt="mark"                ></p><h1 id="重启msyql"><a href="#重启msyql" class="headerlink" title="重启msyql"></a>重启msyql</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p>分配所有访问权限,如果已分配过，该步骤可跳过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">//输入密码</span></span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root密码&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><br>强制刷新权限<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush privileges<span class="comment">;</span></span><br></pre></td></tr></table></figure><br>再次查看用户表,root用户的host变成%，即允许所有的ip远程访问，如果需要指定具体的ip，就写上具体的ip即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/blog/20181109/095048368.png"                      alt="mark"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># netstat -an|grep 3306</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span>          <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               LISTEN </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="配置阿里云安全组规则"><a href="#配置阿里云安全组规则" class="headerlink" title="配置阿里云安全组规则"></a>配置阿里云安全组规则</h1><p>登录阿里云进入控制台，依次访问网络和安全-&gt;安全组-&gt;配置规则，在入方向上开放MySQL监听端口3306即可，如下所示<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/blog/20181109/095151772.png"                      alt="mark"                ></p><h1 id="阿里云服务器的MYSQL数据库远程访问开启成功，使用客户端测试连接成功。"><a href="#阿里云服务器的MYSQL数据库远程访问开启成功，使用客户端测试连接成功。" class="headerlink" title="阿里云服务器的MYSQL数据库远程访问开启成功，使用客户端测试连接成功。"></a>阿里云服务器的MYSQL数据库远程访问开启成功，使用客户端测试连接成功。</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/blog/20181109/095214628.png"                      alt="mark"                ></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React+阿里云部署静态网页</title>
      <link href="2018/10/31/React+%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/"/>
      <url>2018/10/31/React+%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>部署在服务器上的静态页面其实很简单只是做个简单的记录,安全及性能相关问题暂不考虑太多;</p><a id="more"></a><h1 id="一、远程登录服务器"><a href="#一、远程登录服务器" class="headerlink" title="一、远程登录服务器"></a>一、远程登录服务器</h1><h2 id="1-1-ssh-远程登录服务器"><a href="#1-1-ssh-远程登录服务器" class="headerlink" title="1.1 ssh 远程登录服务器"></a>1.1 ssh 远程登录服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ssh 登录</span><br><span class="line">ssh root@<span class="number">47.</span>xx.xx.xx</span><br><span class="line"></span><br><span class="line"># 接着，输入密码（购买服务器时的密码）</span><br><span class="line">******</span><br><span class="line"></span><br><span class="line"># 然后，可以做你想做的事情，简单点：</span><br><span class="line"># 查看硬盘</span><br><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line"># 查看硬盘使用情况</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h2 id="1-2-配置-root-及应用账号权限"><a href="#1-2-配置-root-及应用账号权限" class="headerlink" title="1.2 配置 root 及应用账号权限"></a>1.2 配置 root 及应用账号权限</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 增加用户</span><br><span class="line">adduser chan # chan 为用户名，然后输入密码，创建完成</span><br><span class="line"></span><br><span class="line"># 用户授权</span><br><span class="line">gpasswd -a chan sudo # 添加用户到 sudo 组中</span><br><span class="line"></span><br><span class="line">sudo visudo # 接着，为用户授权</span><br><span class="line"></span><br><span class="line">chan ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"># 重新开启一个终端，就可以以 tanya 的身份登录啦</span><br><span class="line">ssh chan@47.xx.xx.xx # 然后输入密码，即可登录成功</span><br></pre></td></tr></table></figure><h2 id="1-3-修改服务器默认登录端口"><a href="#1-3-修改服务器默认登录端口" class="headerlink" title="1.3 修改服务器默认登录端口"></a>1.3 修改服务器默认登录端口</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 编辑文件</span><br><span class="line">sudo vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># 修改 Port 项，端口范围 0 ~ 65536</span><br><span class="line">Port xx</span><br><span class="line"></span><br><span class="line"># 在末尾添加</span><br><span class="line">AllowUsers tanya</span><br><span class="line"></span><br><span class="line"># 重启服务</span><br><span class="line">sudo service ssh restart</span><br><span class="line"></span><br><span class="line"># 重新开启一个终端：ssh -p 端口 tanya@47.xx.xx.xx</span><br><span class="line">ssh -p xx tanya@<span class="number">47.</span>xx.xx.xx</span><br></pre></td></tr></table></figure><h1 id="三、搭建-Nodejs-生产环境"><a href="#三、搭建-Nodejs-生产环境" class="headerlink" title="三、搭建 Nodejs 生产环境"></a>三、搭建 Nodejs 生产环境</h1><p>3.1 搭建服务器的 Nodejs 环境</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 更新服务器</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装工具</span><br><span class="line">sudo apt-get install vim openssl build-essential libssl-dev wget curl git</span><br><span class="line"></span><br><span class="line"># 安装 nvm (node 版本管理工具) https://github.com/creationix/nvm</span><br><span class="line">wget -qO- https:<span class="comment">//raw.githubusercontent.com/creationix/nvm/v0.33.7/install.sh | bash</span></span><br><span class="line"></span><br><span class="line"># 安装 Node.js (最新稳定版) https://nodejs.org/en/</span><br><span class="line">nvm install v9<span class="number">.6</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line"># 指定 Node.js 版本</span><br><span class="line">nvm use v9<span class="number">.6</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line"># 安装 npm</span><br><span class="line">npm --registry=https:<span class="comment">//registry.npm.taobao.org install -g npm</span></span><br><span class="line"></span><br><span class="line"># 如果有多个 Node.js 版本，通过这种方式指定默认版本</span><br><span class="line">nvm alias <span class="keyword">default</span> v9<span class="number">.6</span><span class="number">.3</span></span><br><span class="line"></span><br><span class="line"># 增加系统文件监控数目</span><br><span class="line">echo fs.inotify.max_user_watches=<span class="number">524288</span> | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</span><br><span class="line"></span><br><span class="line"># 安装一些常用模块</span><br><span class="line">npm install yarn pm2 webpack -g</span><br></pre></td></tr></table></figure><p>3.2 借助 pm2 让 Node.js 服务常驻</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务</span><br><span class="line">pm2 start app.js</span><br><span class="line"></span><br><span class="line"># 查看所有服务</span><br><span class="line">pm2 list</span><br><span class="line"></span><br><span class="line"># 查看应用</span><br><span class="line">pm2 show app</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line">pm2 logs</span><br></pre></td></tr></table></figure><h1 id="四、配置-Nginx-实现反向代理"><a href="#四、配置-Nginx-实现反向代理" class="headerlink" title="四、配置 Nginx 实现反向代理"></a>四、配置 Nginx 实现反向代理</h1><h2 id="配置-Nginx-反向代理-Nodejs-端口"><a href="#配置-Nginx-反向代理-Nodejs-端口" class="headerlink" title="配置 Nginx 反向代理 Nodejs 端口"></a>配置 Nginx 反向代理 Nodejs 端口</h2><p>安装 nginx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><blockquote><p>nginx 配置规则：可以通过 <a class="link"   href="http://47.xx.xx.xx" >http://47.xx.xx.xx<i class="fas fa-external-link-alt"></i></a> 访问服务器 <a class="link"   href="http://127.0.0.1:8081" >http://127.0.0.1:8081<i class="fas fa-external-link-alt"></i></a> 端口的服务</p></blockquote><p>配置 Nginx，Linux 服务器是进入到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd / etc / nginx / sites - enabled;</span><br></pre></td></tr></table></figure><p>然后以管理员身份，新建一个你的 react 项目的配置文件，比如：react-demo.conf，然后，编辑文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">upstream gusaifei &#123;</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name <span class="number">47.</span>xx.xx.xx;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-Nginx-<span class="built_in">Proxy</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        proxy_pass http:<span class="comment">//gusaifei;</span></span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><blockquote><p>路径地址 cd /etc/nginx/conf.d</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name mall.52react.cn;</span><br><span class="line">        root /root/www/firstweb/dist2;</span><br><span class="line">        index index.html;</span><br><span class="line"></span><br><span class="line">        #location / &#123;</span><br><span class="line">            #  proxy_pass http://admintest.happymmall.com;</span><br><span class="line">      # &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;   #配置监听端口</span><br><span class="line">    server_name  first.52react.cn;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /root/www/firstweb/dist;     #服务默认启动目录</span><br><span class="line">        index  index.html index.htm;    #默认访问文件</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;   # 配置404页面</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;   #错误状态码的显示页面，配置后需要重启</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">    # concurs with nginx&#x27;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="部署一个静态资料文件"><a href="#部署一个静态资料文件" class="headerlink" title="部署一个静态资料文件"></a>部署一个静态资料文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name mall.52react.cn;</span><br><span class="line">        root &#x2F;root&#x2F;product&#x2F;mall_shop&#x2F;dist&#x2F;view&#x2F;;  #多入口文件路径View  单入口文件路径 dist&#x2F;</span><br><span class="line">        index index.html;</span><br><span class="line"></span><br><span class="line">        #如果css和js无法加载出来可能需要配置以下信息</span><br><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|css|js|eot|svg|ttf|woff|woff2|properties|json)$ &#123;</span><br><span class="line">           root &#x2F;root&#x2F;product&#x2F;mall_shop;   #路径到项目根目录</span><br><span class="line">          if (-f $request_filename) &#123;</span><br><span class="line">            expires 1d;</span><br><span class="line">            break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        #默认加载首页</span><br><span class="line">        location &#x3D; &#x2F; &#123;</span><br><span class="line">        root &#x2F;root&#x2F;product&#x2F;mall_shop&#x2F;dist&#x2F;view&#x2F;;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.html$ &#123;</span><br><span class="line">       root &#x2F;root&#x2F;product&#x2F;mall_shop&#x2F;dist&#x2F;view&#x2F;;</span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    #请求反向代理用别的借口</span><br><span class="line">    location ~ .*\.do$ &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;test.happymmall.com;</span><br><span class="line">    &#125;</span><br><span class="line">    #错误页面跳转回首页</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意-webpakc-输出路径配置"><a href="#注意-webpakc-输出路径配置" class="headerlink" title="注意 webpakc 输出路径配置"></a>注意 webpakc 输出路径配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">publicPath: <span class="string">&#x27;/dist/&#x27;</span>,</span><br><span class="line">filename: <span class="string">&#x27;js/[name].js&#x27;</span>, <span class="comment">//必须[name] 不然冲突文件名一样</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重启之前，可以先检测一下配置规则"><a href="#重启之前，可以先检测一下配置规则" class="headerlink" title="重启之前，可以先检测一下配置规则"></a>重启之前，可以先检测一下配置规则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo nginx -t</span><br><span class="line"><span class="comment">//重启</span></span><br><span class="line">sudo nginx -s reload</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Nginx 安装过程比较简单，再次不在赘述。文章从出来 Nginx 的默认页面之后，部署自己的网站开始。<br>最新版本 nginx 配置是由 4 个文件构成，在 Ubuntu 中，这几个文件的路径在：/etc/nginx 下：</p><ol><li>conf.d：用户自己定义的 conf 配置文件</li><li>sites-available：系统默认设置的配置文件 sites-available：系统默认设置的配置文件</li><li>sites-enabled：由 sites-available 中的配置文件转换生成 sites-enabled：由 sites-available 中的配置文件转换生成</li><li>nginx.conf：汇总以上三个配置文件的内容，同时配置我们所需要的参数 nginx.conf：汇总以上三个配置文件的内容，同时配置我们所需要的参数<br>在部署需要的 web 服务时，我们可以拷贝 sites-enabled 中的 default 文件到 conf.d 并且修改名字为 **.conf ,然后进行配置：</li></ol><p>如果 nginx 还是无法访问还需要该一个地方(之前坑了我一天)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181101/d1mAhgAEJJ.png"                      alt="mark"                ></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解下css3自适应布局单位vw,vh</title>
      <link href="2018/10/30/%E4%BA%86%E8%A7%A3%E4%B8%8Bcss3%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E5%8D%95%E4%BD%8Dvw,vh/"/>
      <url>2018/10/30/%E4%BA%86%E8%A7%A3%E4%B8%8Bcss3%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80%E5%8D%95%E4%BD%8Dvw,vh/</url>
      
        <content type="html"><![CDATA[<p>视口单位(Viewport units)</p><p>什么是视口？ </p><p>在桌面端，视口指的是在桌面端，指的是浏览器的可视区域；而在移动端，它涉及3个视口：Layout Viewport（布局视口），Visual Viewport（视觉视口），Ideal Viewport（理想视口）。<br><a id="more"></a><br>视口单位中的“视口”，桌面端指的是浏览器的可视区域；移动端指的就是Viewport中的Layout Viewport。</p><p> 根据CSS3规范，视口单位主要包括以下4个：</p><pre><code>1.vw：1vw等于视口宽度的1%。2.vh：1vh等于视口高度的1%。3.vmin：选取vw和vh中最小的那个。4.vmax：选取vw和vh中最大的那个。</code></pre><p> vh and vw：相对于视口的高度和宽度，而不是父元素的（CSS百分比是相对于包含它的最近的父元素的高度和宽度）。1vh 等于1/100的视口高度，1vw 等于1/100的视口宽度。</p><p>比如：浏览器高度950px，宽度为1920px, 1 vh = 950px/100 = 9.5 px，1vw = 1920px/100 =19.2 px。</p><p>vmax相对于视口的宽度或高度中较大的那个。其中最大的那个被均分为100单位的vmax。</p><p>vmin相对于视口的宽度或高度中较小的那个。其中最小的那个被均分为100单位的vmin。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181101/dIaIiJF3la.png"                      alt="mark"                ></p><h2 id="vh-vw与-区别"><a href="#vh-vw与-区别" class="headerlink" title="vh/vw与%区别"></a>vh/vw与%区别</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181101/640m41j9Fg.png"                      alt="mark"                ></p><blockquote><p>兼容性问题(在移动端 iOS 8 以上以及 Android 4.4 以上获得支持，并且在微信 x5 内核中也得到完美的全面支持)</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181101/6E5EE5bm8g.png"                      alt="mark"                ></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🚀建造小飞机场🚁🚁🚁</title>
      <link href="2018/10/30/%F0%9F%9A%80%E5%BB%BA%E9%80%A0%E5%B0%8F%E9%A3%9E%E6%9C%BA%E5%9C%BA%F0%9F%9A%81%F0%9F%9A%81%F0%9F%9A%81/"/>
      <url>2018/10/30/%F0%9F%9A%80%E5%BB%BA%E9%80%A0%E5%B0%8F%E9%A3%9E%E6%9C%BA%E5%9C%BA%F0%9F%9A%81%F0%9F%9A%81%F0%9F%9A%81/</url>
      
        <content type="html"><![CDATA[<p>每天看看墙外,神清气爽,不会被某些组织蒙蔽双眼<br><a id="more"></a></p><h1 id="Debian-Ubuntu-CentOS6-系统-ShadowsocksR-一键安装脚本-集成锐速"><a href="#Debian-Ubuntu-CentOS6-系统-ShadowsocksR-一键安装脚本-集成锐速" class="headerlink" title="Debian/Ubuntu/CentOS6 系统 ShadowsocksR 一键安装脚本 (集成锐速)"></a>Debian/Ubuntu/CentOS6 系统 ShadowsocksR 一键安装脚本 (集成锐速)</h1><blockquote><p>使用此教程，可以完全不过脑子的搭建好 SSR，且速度进行了优化</p></blockquote><ol><li>注意 1： KVM/VMWARE/XEN 才有用，锐速不支持 openVZ ！</li><li>注意 2：脚本会不断更新（目前时间 2016.11.27），请关注逗比根据地原文</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https:<span class="comment">//raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>运行脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ssr.sh</span><br></pre></td></tr></table></figure><p>输入对应的数字来执行相应的命令。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.安装ShadowsocksR服务端</span><br><span class="line">2.安装libsodium(chacha20加密方式)</span><br><span class="line">3.查看账号信息</span><br><span class="line">4.修改账号信息</span><br><span class="line">5.手动修改账号信息</span><br><span class="line">6.卸载ShadowsocksR服务端</span><br><span class="line">7.更新ShadowsocksR服务端</span><br><span class="line">————————————</span><br><span class="line">8.启动ShadowsocksR</span><br><span class="line">9.停止ShadowsocksR</span><br><span class="line">10.重启ShadowsocksR</span><br><span class="line">————————————</span><br><span class="line">11.安装锐速（ServerSpeeder）</span><br><span class="line">12.查看锐速状态</span><br><span class="line">13.停止锐速</span><br><span class="line">14.重启锐速</span><br><span class="line">15.卸载锐速</span><br></pre></td></tr></table></figure><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><blockquote><p>输入 1 ，就会开始安装 ShadowsocksR 服务端，并且会提示你输入 Shadowsocks 的 端口/密码/加密方式/协议/混淆 等参数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Please input port <span class="keyword">for</span> shadowsocksR [<span class="number">1</span>-<span class="number">65535</span>]:</span><br><span class="line">(Default port: <span class="number">2333</span>):</span><br><span class="line"></span><br><span class="line">Please input password <span class="keyword">for</span> ShadowsocksR:</span><br><span class="line">(Default password: dou-bi.co):</span><br><span class="line"></span><br><span class="line">Please input method <span class="keyword">for</span> ShadowsocksR:</span><br><span class="line">(Default method: aes-<span class="number">256</span>-cfb):</span><br><span class="line"></span><br><span class="line">Please input protocol <span class="keyword">for</span> ShadowsocksR:</span><br><span class="line">(Default protocol: auth_sha1_v4):</span><br><span class="line"></span><br><span class="line">Please input obfs <span class="keyword">for</span> ShadowsocksR:</span><br><span class="line">(Default obfs: tls1.2_ticket_auth):</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>同时最后也会提示是否设置 协议和混淆 兼容原版（也就是使用原版 SS 也能链接），不懂 直接回车 或 输入 y 。</p></blockquote><h2 id="如果安装过程没有出错，那么最后就会提示："><a href="#如果安装过程没有出错，那么最后就会提示：" class="headerlink" title="如果安装过程没有出错，那么最后就会提示："></a>如果安装过程没有出错，那么最后就会提示：</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line"></span><br><span class="line"> Your ShadowsocksR info : </span><br><span class="line"></span><br><span class="line"> Server IP: VPS_IP</span><br><span class="line"> Server Port: <span class="number">2333</span></span><br><span class="line"> Password: dou-bi.co</span><br><span class="line"> Method: aes<span class="number">-256</span>-cfb</span><br><span class="line"> Protocol: auth_sha1_v4_compatible</span><br><span class="line"> Obfs: tls1<span class="number">.2</span>_ticket_auth_compatible</span><br><span class="line"></span><br><span class="line"> SS url: ss:<span class="comment">//XXXXXXXXXXXXXXXXXXXXX </span></span><br><span class="line"> QR <span class="keyword">code</span>: http:<span class="comment">//pan.baidu.com/share/qrcode?w=300&amp;h=300&amp;url=ss://XXXXXXXXXXXXXXXXXXXXX </span></span><br><span class="line">Tip: Open the link above will be able to see two-dimensional <span class="keyword">code</span> picture.</span><br><span class="line">Tip: The protocol and obfs last [ _compatible ] refer to the compatible original.</span><br><span class="line"></span><br><span class="line">############################################################</span><br><span class="line"></span><br><span class="line">ShadowsocksR install completed!</span><br><span class="line">https:<span class="comment">//www.dou-bi.co</span></span><br><span class="line"></span><br><span class="line">############################################################</span><br></pre></td></tr></table></figure><p>SS url 是 SS 链接（格式： ss://XXXXXXX ，很长），可以从剪辑版导入 Shadowsocks 客户端，不懂的话看下面二维码。</p><p>QR code 是二维码，复制后面的链接在浏览器打开，就会显示一个二维码的图片，可以用 Shadowsocks 客户端扫描二维码来添加。</p><h3 id="之后回到菜单界面-按14"><a href="#之后回到菜单界面-按14" class="headerlink" title="之后回到菜单界面 按14"></a>之后回到菜单界面 按14</h3><p>一键安装速锐</p><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><p>默认已经添加开机启动。</p><p>ShadowsocksR 默认支持 UDP 转发。</p><p>本脚本已经集成了 安装 / 卸载 锐速 (ServerSpeeder) 开心版，但是是否支持请查看 Linux 支持内核列表 。（锐速不支持 OpenVZ）</p><p>多端口配置的话，脚本实现很麻烦，所以不会加入这个功能，需要的人还是手动更改为多端口吧：ShadowsocksR 多端口配置</p><p>ShadowsocksR 目前支持的协议和混淆：</p><blockquote><p>协议（Protocol）：origin，verify_sha1，auth_sha1_v2，auth_sha1_v4，auth_aes128_md5，auth_aes128_sha1<br>混淆（Obfs）：plain，http_simple，http_post，random_head，tls1.2_ticket_auth<br>origin 和 plain 是原版，加粗的是推荐使用的，均支持 兼容原版（也就是加后缀 _compatible）。</p></blockquote><h1 id="如何修改CentOS6内核支持安装锐速的内核"><a href="#如何修改CentOS6内核支持安装锐速的内核" class="headerlink" title="如何修改CentOS6内核支持安装锐速的内核"></a>如何修改CentOS6内核支持安装锐速的内核</h1><blockquote><p>在锐速ServerSpeeder无限带宽版Linux一键自动安装包文章中介绍了如何使用一键包安装锐速，优化服务器网络速度。其实要想在自己的VPS安装锐速，首先内核必须要匹配锐速版本。如果内核不支持安装锐速，我们需要手动修改内核为支持安装锐速版本，不过OpenVZ虚拟技术架设的VPS是无法是无法更换内核，另外并不是所有的XEN和KVM虚拟技术架设的VPS都支持更换内核，像Linode VPS就不支持以下方法修改，需在VPS管理页面修改（Linode VPS如何在管理页面更换内核）。</p></blockquote><p>CentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64</p><h3 id="1、首先运行下面命令为自己的VPS下载安装内核。"><a href="#1、首先运行下面命令为自己的VPS下载安装内核。" class="headerlink" title="1、首先运行下面命令为自己的VPS下载安装内核。"></a>1、首先运行下面命令为自己的VPS下载安装内核。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uname -r #查看当前内核版本</span><br><span class="line">rpm -ivh http:<span class="comment">//xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm</span></span><br><span class="line">rpm -ivh http:<span class="comment">//xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181030/Jhjmg4Eg31.png"                      alt="mark"                ></p><h3 id="2、执行命令“rpm-qa-grep-kernel”，查看内核是否安装成功。如果显示你安装的内核版本，表示安装成功。"><a href="#2、执行命令“rpm-qa-grep-kernel”，查看内核是否安装成功。如果显示你安装的内核版本，表示安装成功。" class="headerlink" title="2、执行命令“rpm -qa | grep kernel”，查看内核是否安装成功。如果显示你安装的内核版本，表示安装成功。"></a>2、执行命令“rpm -qa | grep kernel”，查看内核是否安装成功。如果显示你安装的内核版本，表示安装成功。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep kernel</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181030/kAkdCBc20H.png"                      alt="mark"                ></p><h3 id="3、重启VPS，查看内核是否修改成功。"><a href="#3、重启VPS，查看内核是否修改成功。" class="headerlink" title="3、重启VPS，查看内核是否修改成功。"></a>3、重启VPS，查看内核是否修改成功。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reboot #重启VPS</span><br><span class="line">uname -r #当前使用内核版本</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181030/J0i3Bk5iDC.png"                      alt="mark"                ></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181030/FDCGf3FfBD.png"                      alt="mark"                ></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小飞机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack4.0 升级</title>
      <link href="2018/10/26/webpack4.0%20%E5%8D%87%E7%BA%A7/"/>
      <url>2018/10/26/webpack4.0%20%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>webpack3.0—–&gt;4.0的升级<br><a id="more"></a><br>packjson.js</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181026/IA5ejGJimD.png"                      alt="mark"                ></p><p>webpack.js</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181026/1Aie4LbgEG.png"                      alt="mark"                ></p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React如何渲染大数据量的列表</title>
      <link href="2018/10/25/React%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E7%9A%84%E5%88%97%E8%A1%A8/"/>
      <url>2018/10/25/React%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E7%9A%84%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>我们经常会遇到这种需求，根据数据展示列表。这种代码估计你已经撸过成百上千次了。</p><p>但如果你需要同时展示成千上万条数据呢，必然会造成浏览器卡顿，丢帧，甚至卡死的问题。<br>现在介绍利用react-virtualized来高效渲染大数据量列表。<br><a id="more"></a></p><h3 id="首先创建一个React-应用"><a href="#首先创建一个React-应用" class="headerlink" title="首先创建一个React 应用"></a>首先创建一个React 应用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create-react-app virtualization</span><br><span class="line"></span><br><span class="line">cd virtualization</span><br><span class="line"></span><br><span class="line">npm install --save lorem-ipsum <span class="comment">//引入第三方库lorem-ipsum来生成模拟数据：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> loremIpsum <span class="keyword">from</span> <span class="string">&#x27;lorem-ipsum&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接下来创造一个1000条数据的数组："><a href="#接下来创造一个1000条数据的数组：" class="headerlink" title="接下来创造一个1000条数据的数组："></a>接下来创造一个1000条数据的数组：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rowCount = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.list = <span class="built_in">Array</span>(rowCount).fill().map(<span class="function">(<span class="params">val, idx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        id: idx,</span><br><span class="line">        name: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">        image: <span class="string">&#x27;http://via.placeholder.com/40&#x27;</span>,</span><br><span class="line">        text: loremIpsum(&#123;</span><br><span class="line">          count: <span class="number">1</span>,</span><br><span class="line">          units: <span class="string">&#x27;sentences&#x27;</span>,</span><br><span class="line">          sentenceLowerBound: <span class="number">4</span>,</span><br><span class="line">          sentenceUpperBound: <span class="number">8</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">        &lt;img src=&#123;logo&#125; className=<span class="string">&quot;App-logo&quot;</span> alt=<span class="string">&quot;logo&quot;</span> /&gt;</span><br><span class="line">        &lt;h1 className=<span class="string">&quot;App-title&quot;</span>&gt;Welcome to React&lt;/h1&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">        &#123;<span class="built_in">this</span>.list.map(<span class="built_in">this</span>.renderRow.bind(<span class="built_in">this</span>))&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">renderRow</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div key=&#123;item.id&#125; className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;image&quot;</span>&gt;</span><br><span class="line">        &lt;img src=&#123;item.image&#125; alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">        &lt;div&gt;&#123;item.name&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;item.text&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在-src-App-css-中加点样式："><a href="#在-src-App-css-中加点样式：" class="headerlink" title="在 src/App.css 中加点样式："></a>在 src/App.css 中加点样式：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ebeced</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181025/Ggf2f2A6e9.png"                      alt="mark"                ></p><p>下面我们用Chrome，只需几步，快速测试性能：</p><ol><li>打开开发者工具</li><li>按Command+Shift+P (Mac) or Control+Shift+P (Windows, Linux) 来打开命令菜单</li><li>输入 render，下拉框中选择 Show Rendering。</li><li>点击 render 页签，FPS Meter 前打钩。</li><li>滚动列表</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181025/1jaF57C5gF.gif"                      alt="mark"                ></p><p>我们可以看到，当滚动条滚动的时候，帧率从60掉到了38左右。这还是只有1000条数据情况，如果再增大数据，浏览器会出现卡顿，甚至卡死。</p><p>接着我们来看看react-virtualized是如何提高性能的？</p><h3 id="react-virtualized原理"><a href="#react-virtualized原理" class="headerlink" title="react-virtualized原理"></a>react-virtualized原理</h3><p>核心原理：只渲染你所见的。<br>上面的应用渲染了1000条评论，但屏幕只为你展示了10来条数据，那另外990条的渲染就是浪费的。<br>如果我们只渲染可见的评论，当鼠标滚动查看更多的时候，将新的节点替换旧的节点。这样就完美解决了性能瓶颈的问题。</p><h4 id="修改app-js"><a href="#修改app-js" class="headerlink" title="修改app.js"></a>修改app.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> loremIpsum <span class="keyword">from</span> <span class="string">&quot;lorem-ipsum&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; List &#125; <span class="keyword">from</span> <span class="string">&quot;react-virtualized&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rowCount = <span class="number">1000</span>;  <span class="comment">//总条数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listHeight = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rowHeight = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rowWidth = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.list = <span class="built_in">Array</span>(rowCount)</span><br><span class="line">      .fill()</span><br><span class="line">      .map(<span class="function">(<span class="params">val, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          id: idx,</span><br><span class="line">          name: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">          image: <span class="string">&quot;http://via.placeholder.com/40&quot;</span>,</span><br><span class="line">          text: loremIpsum(&#123;</span><br><span class="line">            count: <span class="number">1</span>,</span><br><span class="line">            units: <span class="string">&quot;sentences&quot;</span>,</span><br><span class="line">            sentenceLowerBound: <span class="number">4</span>,</span><br><span class="line">            sentenceUpperBound: <span class="number">8</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">          &lt;List</span><br><span class="line">            width=&#123;rowWidth&#125;</span><br><span class="line">            height=&#123;listHeight&#125;</span><br><span class="line">            rowHeight=&#123;rowHeight&#125;</span><br><span class="line">            rowRenderer=&#123;<span class="built_in">this</span>.renderRow.bind(<span class="built_in">this</span>)&#125;</span><br><span class="line">            rowCount=&#123;<span class="built_in">this</span>.list.length&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">renderRow</span>(<span class="params">&#123; index, key, style &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div key=&#123;key&#125; style=&#123;style&#125; className=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;image&quot;</span>&gt;</span><br><span class="line">          &lt;img src=&#123;<span class="built_in">this</span>.list[index].image&#125; alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">          &lt;div&gt;&#123;<span class="built_in">this</span>.list[index].name&#125;&lt;/div&gt;</span><br><span class="line">          &lt;div&gt;&#123;<span class="built_in">this</span>.list[index].text&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181025/ac15iKaabB.png"                      alt="mark"                ></p><blockquote><p> 性能明显提升💪👍👍👍👍👍👍👍👍</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来玩，Koa2!（四）</title>
      <link href="2018/10/24/%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%8E%A9%EF%BC%8CKoa2!%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>2018/10/24/%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%8E%A9%EF%BC%8CKoa2!%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="写个最简单的API吧"><a href="#写个最简单的API吧" class="headerlink" title="写个最简单的API吧"></a>写个最简单的API吧</h1><a id="more"></a><h3 id="先写个app-js"><a href="#先写个app-js" class="headerlink" title="先写个app.js"></a>先写个app.js</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181025/369j27hALi.png"                      alt="mark"                ></p><h3 id="再写routes-js"><a href="#再写routes-js" class="headerlink" title="再写routes.js"></a>再写routes.js</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181025/gJiHHBI9eH.png"                      alt="mark"                ></p><h3 id="最后再调用user-js"><a href="#最后再调用user-js" class="headerlink" title="最后再调用user.js"></a>最后再调用user.js</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181025/feAJleB60h.png"                      alt="mark"                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android状态栏与背景图片的融合</title>
      <link href="2018/10/20/Android%E7%8A%B6%E6%80%81%E6%A0%8F%E4%B8%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E8%9E%8D%E5%90%88/"/>
      <url>2018/10/20/Android%E7%8A%B6%E6%80%81%E6%A0%8F%E4%B8%8E%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E8%9E%8D%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>状态栏融合<br><a id="more"></a></p><h4 id="优化前效果"><a href="#优化前效果" class="headerlink" title="优化前效果"></a>优化前效果</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181019/8EgJmE2La1.jpg"                      alt="mark"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现背景与状态栏融合在一起 android大于5.0支持</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">    View decorView = getWindow().getDecorView();</span><br><span class="line">    <span class="keyword">int</span> option = View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION ;</span><br><span class="line">    decorView.setSystemUiVisibility(option);</span><br><span class="line">    getWindow().setStatusBarColor(Color.TRANSPARENT);<span class="comment">//设置状态栏透明</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化后效果"><a href="#优化后效果" class="headerlink" title="优化后效果"></a>优化后效果</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181019/7bfeCf6J9F.jpg"                      alt="mark"                ></p><p>增加状态栏高度</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181019/HEidLc8D0c.png"                      alt="mark"                ></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView✌️进阶</title>
      <link href="2018/10/12/RecyclerView%E2%9C%8C%EF%B8%8F%E8%BF%9B%E9%98%B6/"/>
      <url>2018/10/12/RecyclerView%E2%9C%8C%EF%B8%8F%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>现在做项目90%要用到recyclerView<br><a id="more"></a></p><h3 id="1-引入recyclerView"><a href="#1-引入recyclerView" class="headerlink" title="1 引入recyclerView"></a>1 引入recyclerView</h3><p>在moudle中的build.gradle文件里，找到dependencies，添加关于recyclerView的引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &#x27;com.android.support:recyclerview-v7:24.2.0&#x27;</span><br></pre></td></tr></table></figure><p>其实design包中含有Material Design相关的很多控件，其中也包括了recyclerView的代码，所以你也可以通过引用design包来使用recyclerView：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &#x27;com.android.support:design:23.2.0&#x27;</span><br></pre></td></tr></table></figure><h3 id="2-在xml中写一个recyclerView"><a href="#2-在xml中写一个recyclerView" class="headerlink" title="2 在xml中写一个recyclerView"></a>2 在xml中写一个recyclerView</h3><p>在MainActivity中添加一个RecyclerView进行展示，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:id=&quot;@+id/recyclerView&quot;/&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-在java中给recyclerView设置数据"><a href="#3-在java中给recyclerView设置数据" class="headerlink" title="3 在java中给recyclerView设置数据"></a>3 在java中给recyclerView设置数据</h3><p>在MainActivity中的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">    setSupportActionBar(toolbar);</span><br><span class="line">    initView();</span><br><span class="line">    initData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> i =<span class="string">&#x27;A&#x27;</span>;i&lt;=<span class="string">&#x27;Z&#x27;</span>;i++)&#123;</span><br><span class="line">        datas.add(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mRecyclerView.setAdapter(<span class="keyword">new</span> MyAdapter(getApplicationContext(),datas));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);</span><br><span class="line">    <span class="comment">//必须要指定展示的效果，设置一个LayoutManager，不然还是会一片空白</span></span><br><span class="line">    LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(getApplicationContext());</span><br><span class="line">    mRecyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在MyAdapter中的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; datas;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context applicationContext, ArrayList&lt;String&gt; datas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.datas = datas;</span><br><span class="line">        <span class="keyword">this</span>.mContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RecyclerView的Adapter已经集成了ViewHolder</span></span><br><span class="line">    <span class="comment">//getView中的两段逻辑 1 创建view对象（将xml转为view）   2 找到view对象里面的一些控件，对其进行一些展示的设置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//onCreateViewHolder 中执行第一段逻辑，创建出view，设置到一个ViewHolder中，再将holder返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第三个参数为false，如果为true的话，生成的这个view其实就是第二个参数指向的parent，会造成报错的</span></span><br><span class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.item_recyclerview, parent,<span class="keyword">false</span>);</span><br><span class="line">        MyViewHolder holder = <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给holder里的控件设置数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        ((MyViewHolder)holder) .mTextView.setText(datas.get(position));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Count 控制控件有多少个item</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> datas.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TextView mTextView;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        mTextView = (TextView) itemView.findViewById(R.id.tv_item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-给recyclerView设置不同的展示效果"><a href="#4-给recyclerView设置不同的展示效果" class="headerlink" title="4 给recyclerView设置不同的展示效果"></a>4 给recyclerView设置不同的展示效果</h3><p>设置菜单来提供多个点击事件。首先给res/menu/menu_main.xml修改为以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">tools:context</span>=<span class="string">&quot;com.a520it.recyclerview.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/action_listview&quot;</span><br><span class="line">        android:orderInCategory=&quot;100&quot;</span><br><span class="line">        android:title=&quot;listView&quot;</span><br><span class="line">        app:showAsAction=&quot;never&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/action_gridview&quot;</span><br><span class="line">        android:orderInCategory=&quot;100&quot;</span><br><span class="line">        android:title=&quot;gridView&quot;</span><br><span class="line">        app:showAsAction=&quot;never&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/action_hor_gridview&quot;</span><br><span class="line">        android:orderInCategory=&quot;100&quot;</span><br><span class="line">        android:title=&quot;横向的gridView&quot;</span><br><span class="line">        app:showAsAction=&quot;never&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/action_stagger&quot;</span><br><span class="line">        android:orderInCategory=&quot;100&quot;</span><br><span class="line">        android:title=&quot;交错的瀑布流&quot;</span><br><span class="line">        app:showAsAction=&quot;never&quot;/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在MainActivity中，修改菜单代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (id == R.id.action_listview) &#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;listview&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(id == R.id.action_gridview) &#123;</span><br><span class="line">        GridLayoutManager gridLayoutManager = <span class="keyword">new</span> GridLayoutManager(getApplicationContext(), <span class="number">3</span>);</span><br><span class="line">        mRecyclerView.setLayoutManager(gridLayoutManager);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;gridview&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(id == R.id.action_hor_gridview) &#123;</span><br><span class="line">        GridLayoutManager gridLayoutManager = <span class="keyword">new</span> GridLayoutManager(getApplicationContext(),</span><br><span class="line">                <span class="number">3</span>,GridLayoutManager.HORIZONTAL,<span class="keyword">true</span>);</span><br><span class="line">        mRecyclerView.setLayoutManager(gridLayoutManager);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;横向的gridview&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(id == R.id.action_stagger) &#123;</span><br><span class="line">        StaggeredGridLayoutManager staggeredGridLayoutManager =</span><br><span class="line">                <span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">3</span>, StaggeredGridLayoutManager.HORIZONTAL);</span><br><span class="line">        mRecyclerView.setLayoutManager(staggeredGridLayoutManager);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;交错的瀑布流&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是设置了不同的LayoutManager给RecyclerView而已。</p><h3 id="5-给RecyclerView添加点击效果"><a href="#5-给RecyclerView添加点击效果" class="headerlink" title="5 给RecyclerView添加点击效果"></a>5 给RecyclerView添加点击效果</h3><p>RecyclerView没有提供OnItemClick相关的item点击方法，需要自己去实现。这里是通过在Adapter中去实现的。在Adapter中先自定义一个OnItemClickListener，然后在Adapter中的onBindViewHolder方法中，给holder.itemView设置OnClickListener，并在OnClickListener的点击方法中，调用自定义的OnItemClickListener。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//给holder里的控件设置数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> RecyclerView.ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        ((MyViewHolder)holder) .mTextView.setText(datas.get(position));</span><br><span class="line">        <span class="comment">//给item添加一个点击</span></span><br><span class="line">        holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                Toast.makeText(mContext, &quot;点击了item&quot;+position, Toast.LENGTH_SHORT).show();</span></span><br><span class="line">                mOnItemClickListener.onItemClick(position,holder.itemView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener onItemClickListener)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mOnItemClickListener = onItemClickListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnItemClickListener mOnItemClickListener = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> position,View itemView)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后在MainActivity中设置自定义的OnItemClickListener即可。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    myAdapter.setOnItemClickListener(<span class="keyword">new</span> MyAdapter.OnItemClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> position, View itemView)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;position: &quot;</span>+position, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-给RecyclerView设置动画效果"><a href="#6-给RecyclerView设置动画效果" class="headerlink" title="6 给RecyclerView设置动画效果"></a>6 给RecyclerView设置动画效果</h3><p>给菜单再添加两个按钮，点击时就插入、删除数据。修改menu_main.xml代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">tools:context</span>=<span class="string">&quot;com.a520it.recyclerview.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/action_add&quot;</span><br><span class="line">        android:orderInCategory=&quot;100&quot;</span><br><span class="line">        android:title=&quot;add&quot;</span><br><span class="line">        android:icon=&quot;@drawable/ic_menu_add&quot;</span><br><span class="line">        app:showAsAction=&quot;always&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/action_delete&quot;</span><br><span class="line">        android:orderInCategory=&quot;100&quot;</span><br><span class="line">        android:title=&quot;delete&quot;</span><br><span class="line">        android:icon=&quot;@drawable/ic_menu_delete&quot;</span><br><span class="line">        app:showAsAction=&quot;always&quot;/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在MainActivity中设置onOptionsItemSelected方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line">    ....<span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(id == R.id.action_add)</span> </span>&#123;</span><br><span class="line">        mMyAdapter.addItem(<span class="number">1</span>,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;add&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(id == R.id.action_delete) &#123;</span><br><span class="line">        mMyAdapter.deleteItem(<span class="number">3</span>);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;delete&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入、删除数据的代码写在MyAdapter里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(<span class="keyword">int</span> position,String str)</span></span>&#123;</span><br><span class="line">        datas.add(position,str);</span><br><span class="line"><span class="comment">//        notifyDataSetChanged();</span></span><br><span class="line">        notifyItemInserted(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteItem</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        datas.remove(position);</span><br><span class="line"><span class="comment">//        notifyDataSetChanged();</span></span><br><span class="line">        notifyItemRemoved(position);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7-给RecyclerView设置分割线"><a href="#7-给RecyclerView设置分割线" class="headerlink" title="7 给RecyclerView设置分割线"></a>7 给RecyclerView设置分割线</h3><p>RecyclerView不像ListView，它没有已设置好的分割线，需要自己处理。给RecyclerView设置分割线需要执行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mRecyclerView.addItemDecoration(<span class="keyword">new</span> RecyclerView.ItemDecoration() &#123;</span><br><span class="line"></span><br><span class="line">            String str = <span class="string">&quot;我是分割线&quot;</span>;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">               ....</span><br><span class="line">                    c.drawText(str,left,top,paint);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//通过outRect设置各个item之间的位移间距</span></span><br><span class="line">                outRect.set(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,getStringHeight(paint));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView简单使用😲</title>
      <link href="2018/10/11/RecyclerView%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%F0%9F%98%B2/"/>
      <url>2018/10/11/RecyclerView%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%F0%9F%98%B2/</url>
      
        <content type="html"><![CDATA[<p>RecyclerView简单使用😲<br><a id="more"></a></p><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p>1.使用前需要在在gradle中添加依赖<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.android.support:recyclerview-v7:27.0.2&#x27;</span></span><br></pre></td></tr></table></figure><br>2.编写代码，首先我们需要在Xml中写RecyclerView的布局，<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=&quot;@+id/recyclerView&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>3.然后在activity中获取RecyclerView，并设置LayoutManager以及adapter<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过findViewById拿到RecyclerView实例</span></span><br><span class="line">mRecyclerView =   findViewById(R.id.recyclerView);</span><br><span class="line"><span class="comment">//设置RecyclerView管理器</span></span><br><span class="line">mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>, LinearLayoutManager.VERTICAL, <span class="keyword">false</span>));</span><br><span class="line"><span class="comment">//初始化适配器</span></span><br><span class="line">mAdapter = <span class="keyword">new</span> MyRecyclerViewAdapter(list); </span><br><span class="line"><span class="comment">//设置添加或删除item时的动画，这里使用默认动画</span></span><br><span class="line">mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</span><br><span class="line"><span class="comment">//设置适配器</span></span><br><span class="line">mRecyclerView.setAdapter(mAdapter);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>下面是MyRecyclerViewAdapter的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sharejoys.recyclerviewdemo.actvity;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sharejoys.recyclerviewdemo.R;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRecyclerViewAdapterextends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MyAdapter.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_base_use, parent, <span class="keyword">false</span>);</span><br><span class="line">        MyAdapter.ViewHolder viewHolder = <span class="keyword">new</span> MyAdapter.ViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> viewHolder;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyAdapter.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        holder.mText.setText(list.get(position));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView mText;</span><br><span class="line">        ViewHolder(View itemView) &#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            mText = itemView.findViewById(R.id.item_tx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="设置横向布局："><a href="#设置横向布局：" class="headerlink" title="设置横向布局："></a>设置横向布局：</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="type">LinearLayoutManager</span>(<span class="built_in">this</span>, LinearLayoutManager.HORIZONTAL, <span class="literal">false</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20180123164219639?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHVpa2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"                      alt="image"                ></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决ScrollView底部有布局不能滑动的问题</title>
      <link href="2018/10/10/%E8%A7%A3%E5%86%B3ScrollView%E5%BA%95%E9%83%A8%E6%9C%89%E5%B8%83%E5%B1%80%E4%B8%8D%E8%83%BD%E6%BB%91%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2018/10/10/%E8%A7%A3%E5%86%B3ScrollView%E5%BA%95%E9%83%A8%E6%9C%89%E5%B8%83%E5%B1%80%E4%B8%8D%E8%83%BD%E6%BB%91%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天在做项目时用到ScrollView,我发现如果在ScrollView控件之后没有别的布局时它能正常滑动.但是如果底部有功能按钮,比如下图这样就不能显示完全.<br><a id="more"></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181019/c8i4LiF1fg.png"                      alt="mark"                ></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>必须知道底部菜单的高度</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181019/bcAmAHi98I.png"                      alt="mark"                ></p><p>然后就</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181019/1g28e0cjIL.png"                      alt="mark"                ></p><p>代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--头部--&gt;</span></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id=&quot;@+id/layout_me_header&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:background=&quot;#008cc9&quot;&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/login_btn&quot;</span><br><span class="line">            android:layout_width=&quot;66dp&quot;</span><br><span class="line">            android:layout_height=&quot;66dp&quot;</span><br><span class="line">            android:background=&quot;@mipmap/login_btn&quot;</span><br><span class="line">            android:layout_centerHorizontal=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:orientation=&quot;horizontal&quot;</span><br><span class="line">            android:layout_below=&quot;@+id/login_btn&quot;</span><br><span class="line">            android:layout_marginBottom=&quot;10dp&quot;</span><br><span class="line">           &gt;</span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=&quot;0dp&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:orientation=&quot;vertical&quot;</span><br><span class="line">                android:layout_weight=&quot;1&quot;</span><br><span class="line">                android:gravity=&quot;center&quot;&gt;</span><br><span class="line">                &lt;ImageView</span><br><span class="line">                    android:layout_width=&quot;30dp&quot;</span><br><span class="line">                    android:layout_height=&quot;30dp&quot;</span><br><span class="line">                    android:src=&quot;@mipmap/me_menu_yh&quot;/&gt;</span><br><span class="line">                &lt;TextView</span><br><span class="line">                    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line"></span><br><span class="line">                    android:text=&quot;收藏&quot;/&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=&quot;0dp&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_weight=&quot;1&quot;</span><br><span class="line">                android:gravity=&quot;center&quot;</span><br><span class="line">                android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line">                &lt;ImageView</span><br><span class="line">                    android:layout_width=&quot;30dp&quot;</span><br><span class="line">                    android:layout_height=&quot;30dp&quot;</span><br><span class="line">                    android:src=&quot;@mipmap/me_menu_go&quot;/&gt;</span><br><span class="line">                &lt;TextView</span><br><span class="line">                    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                    android:text=&quot;购物券&quot;/&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=&quot;0dp&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:orientation=&quot;vertical&quot;</span><br><span class="line">                android:layout_weight=&quot;1&quot;</span><br><span class="line">                android:gravity=&quot;center&quot;&gt;</span><br><span class="line">                &lt;ImageView</span><br><span class="line">                    android:layout_width=&quot;30dp&quot;</span><br><span class="line">                    android:layout_height=&quot;30dp&quot;</span><br><span class="line">                    android:src=&quot;@mipmap/me_menu_sail&quot;/&gt;</span><br><span class="line">                &lt;TextView</span><br><span class="line">                    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                    android:text=&quot;优惠券&quot;/&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--空白占位符--&gt;</span></span><br><span class="line">   &lt;RelativeLayout</span><br><span class="line">       android:id=&quot;@+id/layout_me_bottom&quot;</span><br><span class="line">       android:layout_width=&quot;match_parent&quot;</span><br><span class="line">       android:layout_alignParentBottom=&quot;true&quot;</span><br><span class="line">       android:layout_height=&quot;70dp&quot;&gt;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--滚动列表   功能区--&gt;</span></span><br><span class="line">    &lt;ScrollView</span><br><span class="line">        android:layout_below=&quot;@+id/layout_me_header&quot;</span><br><span class="line">        android:layout_above=&quot;@+id/layout_me_bottom&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        &gt;</span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:background=&quot;#fff&quot;</span><br><span class="line">                android:paddingTop=&quot;6dp&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                &lt;ImageView</span><br><span class="line">                    android:layout_width=&quot;40dp&quot;</span><br><span class="line">                    android:layout_height=&quot;40dp&quot;</span><br><span class="line">                    android:src=&quot;@mipmap/list_save&quot;</span><br><span class="line">                    android:layout_gravity=&quot;center_vertical&quot;</span><br><span class="line">                    android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                    android:layout_marginRight=&quot;10dp&quot;/&gt;</span><br><span class="line">                &lt;RelativeLayout</span><br><span class="line">                    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">                    &lt;TextView</span><br><span class="line">                        android:id=&quot;@+id/text_my_save&quot;</span><br><span class="line">                        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                        android:text=&quot;我的收藏&quot;</span><br><span class="line">                        android:textSize=&quot;28sp&quot;</span><br><span class="line">                        /&gt;</span><br><span class="line">                    &lt;View</span><br><span class="line">                        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                        android:layout_height=&quot;1dp&quot;</span><br><span class="line">                        android:background=&quot;#ccc&quot;</span><br><span class="line">                        android:layout_below=&quot;@+id/text_my_save&quot;</span><br><span class="line">                        android:paddingTop=&quot;8dp&quot;</span><br><span class="line">                        android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">                        /&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:background=&quot;#fff&quot;</span><br><span class="line">                android:paddingTop=&quot;6dp&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                &lt;ImageView</span><br><span class="line">                    android:layout_width=&quot;40dp&quot;</span><br><span class="line">                    android:layout_height=&quot;40dp&quot;</span><br><span class="line">                    android:src=&quot;@mipmap/list_pwd&quot;</span><br><span class="line">                    android:layout_gravity=&quot;center_vertical&quot;</span><br><span class="line">                    android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                    android:layout_marginRight=&quot;10dp&quot;/&gt;</span><br><span class="line">                &lt;RelativeLayout</span><br><span class="line">                    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">                    &lt;TextView</span><br><span class="line">                        android:id=&quot;@+id/text_my_pwd&quot;</span><br><span class="line">                        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                        android:text=&quot;我的口令&quot;</span><br><span class="line">                        android:textSize=&quot;28sp&quot;</span><br><span class="line">                        /&gt;</span><br><span class="line">                    &lt;View</span><br><span class="line">                        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                        android:layout_height=&quot;1dp&quot;</span><br><span class="line">                        android:background=&quot;#ccc&quot;</span><br><span class="line">                        android:layout_below=&quot;@+id/text_my_pwd&quot;</span><br><span class="line">                        android:paddingTop=&quot;10dp&quot;</span><br><span class="line">                        android:layout_marginRight=&quot;10dp&quot;</span><br><span class="line">                        /&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:background=&quot;#fff&quot;</span><br><span class="line">                android:paddingTop=&quot;6dp&quot;</span><br><span class="line">                android:paddingBottom=&quot;6dp&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                &lt;ImageView</span><br><span class="line">                    android:layout_width=&quot;40dp&quot;</span><br><span class="line">                    android:layout_height=&quot;40dp&quot;</span><br><span class="line">                    android:src=&quot;@mipmap/list_safe_center&quot;</span><br><span class="line">                    android:layout_gravity=&quot;center_vertical&quot;</span><br><span class="line">                    android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                    android:layout_marginRight=&quot;10dp&quot;/&gt;</span><br><span class="line">                &lt;RelativeLayout</span><br><span class="line">                    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">                    &lt;TextView</span><br><span class="line">                        android:id=&quot;@+id/text_my_safecenter&quot;</span><br><span class="line">                        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                        android:text=&quot;我的锦囊&quot;</span><br><span class="line">                        android:textSize=&quot;28sp&quot;</span><br><span class="line">                        /&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ListView的使用</title>
      <link href="2018/10/04/Android%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>2018/10/04/Android%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>class中设置 今天主要记录这个<br><a id="more"></a><br>利用系统自带的颜色类<br>tx.setTextColor(android.graphics.Color.RED);<br>利用数字设置<br>tx.setTextColor(0xffff00f);<br>利用xml中已经定义好的颜色代码<br>tx.setTextColor(getResources().getColor(R.color.red));<br>利用16进制 字符串<br>tx.setTextColor(Color.parseColor(“#FFFFFF”));</p><h1 id="附上一段颜色代码。以供参考"><a href="#附上一段颜色代码。以供参考" class="headerlink" title="附上一段颜色代码。以供参考"></a>附上一段颜色代码。以供参考</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;white&quot;</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--白色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;ivory&quot;</span>&gt;</span>#FFFFF0<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--象牙色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightyellow&quot;</span>&gt;</span>#FFFFE0<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮黄色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span>#FFFF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--黄色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;snow&quot;</span>&gt;</span>#FFFAFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--雪白色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;floralwhite&quot;</span>&gt;</span>#FFFAF0<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--花白色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lemonchiffon&quot;</span>&gt;</span>#FFFACD<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--柠檬绸色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;cornsilk&quot;</span>&gt;</span>#FFF8DC<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--米绸色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;seashell&quot;</span>&gt;</span>#FFF5EE<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--海贝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lavenderblush&quot;</span>&gt;</span>#FFF0F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--淡紫红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;papayawhip&quot;</span>&gt;</span>#FFEFD5<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--番木色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;blanchedalmond&quot;</span>&gt;</span>#FFEBCD<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--白杏色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mistyrose&quot;</span>&gt;</span>#FFE4E1<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--浅玫瑰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;bisque&quot;</span>&gt;</span>#FFE4C4<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--桔黄色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;moccasin&quot;</span>&gt;</span>#FFE4B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--鹿皮色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;navajowhite&quot;</span>&gt;</span>#FFDEAD<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--纳瓦白 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;peachpuff&quot;</span>&gt;</span>#FFDAB9<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--桃色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;gold&quot;</span>&gt;</span>#FFD700<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--金色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;pink&quot;</span>&gt;</span>#FFC0CB<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--粉红色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightpink&quot;</span>&gt;</span>#FFB6C1<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮粉红色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;orange&quot;</span>&gt;</span>#FFA500<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--橙色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightsalmon&quot;</span>&gt;</span>#FFA07A<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮肉色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkorange&quot;</span>&gt;</span>#FF8C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗桔黄色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;coral&quot;</span>&gt;</span>#FF7F50<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--珊瑚色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;hotpink&quot;</span>&gt;</span>#FF69B4<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--热粉红色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;tomato&quot;</span>&gt;</span>#FF6347<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--西红柿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;orangered&quot;</span>&gt;</span>#FF4500<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--红橙色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;deeppink&quot;</span>&gt;</span>#FF1493<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--深粉红色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;fuchsia&quot;</span>&gt;</span>#FF00FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--紫红色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;magenta&quot;</span>&gt;</span>#FF00FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--红紫色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span>#FF0000<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--红色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;oldlace&quot;</span>&gt;</span>#FDF5E6<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--老花色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightgoldenrodyellow&quot;</span>&gt;</span>#FAFAD2<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮金黄色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;linen&quot;</span>&gt;</span>#FAF0E6<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亚麻色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;antiquewhite&quot;</span>&gt;</span>#FAEBD7<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--古董白 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;salmon&quot;</span>&gt;</span>#FA8072<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--鲜肉色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;ghostwhite&quot;</span>&gt;</span>#F8F8FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--幽灵白 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mintcream&quot;</span>&gt;</span>#F5FFFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--薄荷色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;whitesmoke&quot;</span>&gt;</span>#F5F5F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--烟白色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;beige&quot;</span>&gt;</span>#F5F5DC<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--米色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;wheat&quot;</span>&gt;</span>#F5DEB3<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--浅黄色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;sandybrown&quot;</span>&gt;</span>#F4A460<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--沙褐色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;azure&quot;</span>&gt;</span>#F0FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--天蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;honeydew&quot;</span>&gt;</span>#F0FFF0<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--蜜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;aliceblue&quot;</span>&gt;</span>#F0F8FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--艾利斯兰 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;khaki&quot;</span>&gt;</span>#F0E68C<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--黄褐色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightcoral&quot;</span>&gt;</span>#F08080<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮珊瑚色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;palegoldenrod&quot;</span>&gt;</span>#EEE8AA<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--苍麒麟色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;violet&quot;</span>&gt;</span>#EE82EE<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--紫罗兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darksalmon&quot;</span>&gt;</span>#E9967A<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗肉色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lavender&quot;</span>&gt;</span>#E6E6FA<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--淡紫色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightcyan&quot;</span>&gt;</span>#E0FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮青色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;burlywood&quot;</span>&gt;</span>#DEB887<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--实木色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;plum&quot;</span>&gt;</span>#DDA0DD<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--洋李色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;gainsboro&quot;</span>&gt;</span>#DCDCDC<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--淡灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;crimson&quot;</span>&gt;</span>#DC143C<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗深红色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;palevioletred&quot;</span>&gt;</span>#DB7093<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--苍紫罗兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;goldenrod&quot;</span>&gt;</span>#DAA520<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--金麒麟色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;orchid&quot;</span>&gt;</span>#DA70D6<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--淡紫色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;thistle&quot;</span>&gt;</span>#D8BFD8<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--蓟色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightgray&quot;</span>&gt;</span>#D3D3D3<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightgrey&quot;</span>&gt;</span>#D3D3D3<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;tan&quot;</span>&gt;</span>#D2B48C<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--茶色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;chocolate&quot;</span>&gt;</span>#D2691E<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--巧可力色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;peru&quot;</span>&gt;</span>#CD853F<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--秘鲁色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;indianred&quot;</span>&gt;</span>#CD5C5C<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--印第安红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mediumvioletred&quot;</span>&gt;</span>#C71585<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中紫罗兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;silver&quot;</span>&gt;</span>#C0C0C0<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--银色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkkhaki&quot;</span>&gt;</span>#BDB76B<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗黄褐色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;rosybrown&quot;</span>&gt;</span>#BC8F8F<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--褐玫瑰红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mediumorchid&quot;</span>&gt;</span>#BA55D3<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中粉紫色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkgoldenrod&quot;</span>&gt;</span>#B8860B<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗金黄色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;firebrick&quot;</span>&gt;</span>#B22222<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--火砖色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;powderblue&quot;</span>&gt;</span>#B0E0E6<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--粉蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightsteelblue&quot;</span>&gt;</span>#B0C4DE<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮钢兰色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;paleturquoise&quot;</span>&gt;</span>#AFEEEE<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--苍宝石绿 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;greenyellow&quot;</span>&gt;</span>#ADFF2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--黄绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightblue&quot;</span>&gt;</span>#ADD8E6<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkgray&quot;</span>&gt;</span>#A9A9A9<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkgrey&quot;</span>&gt;</span>#A9A9A9<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;brown&quot;</span>&gt;</span>#A52A2A<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--褐色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;sienna&quot;</span>&gt;</span>#A0522D<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--赭色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkorchid&quot;</span>&gt;</span>#9932CC<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗紫色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;palegreen&quot;</span>&gt;</span>#98FB98<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--苍绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkviolet&quot;</span>&gt;</span>#9400D3<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗紫罗兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mediumpurple&quot;</span>&gt;</span>#9370DB<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中紫色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightgreen&quot;</span>&gt;</span>#90EE90<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkseagreen&quot;</span>&gt;</span>#8FBC8F<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗海兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;saddlebrown&quot;</span>&gt;</span>#8B4513<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--重褐色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkmagenta&quot;</span>&gt;</span>#8B008B<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkred&quot;</span>&gt;</span>#8B0000<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗红色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;blueviolet&quot;</span>&gt;</span>#8A2BE2<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--紫罗兰蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightskyblue&quot;</span>&gt;</span>#87CEFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮天蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;skyblue&quot;</span>&gt;</span>#87CEEB<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--天蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;gray&quot;</span>&gt;</span>#808080<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;grey&quot;</span>&gt;</span>#808080<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;olive&quot;</span>&gt;</span>#808000<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--橄榄色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;purple&quot;</span>&gt;</span>#800080<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--紫色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;maroon&quot;</span>&gt;</span>#800000<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--粟色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;aquamarine&quot;</span>&gt;</span>#7FFFD4<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--碧绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;chartreuse&quot;</span>&gt;</span>#7FFF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--黄绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lawngreen&quot;</span>&gt;</span>#7CFC00<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--草绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mediumslateblue&quot;</span>&gt;</span>#7B68EE<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中暗蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightslategray&quot;</span>&gt;</span>#778899<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮蓝灰 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightslategrey&quot;</span>&gt;</span>#778899<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮蓝灰 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;slategray&quot;</span>&gt;</span>#708090<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--灰石色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;slategrey&quot;</span>&gt;</span>#708090<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--灰石色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;olivedrab&quot;</span>&gt;</span>#6B8E23<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--深绿褐色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;slateblue&quot;</span>&gt;</span>#6A5ACD<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--石蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;dimgray&quot;</span>&gt;</span>#696969<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;dimgrey&quot;</span>&gt;</span>#696969<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mediumaquamarine&quot;</span>&gt;</span>#66CDAA<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;cornflowerblue&quot;</span>&gt;</span>#6495ED<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--菊兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;cadetblue&quot;</span>&gt;</span>#5F9EA0<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--军兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkolivegreen&quot;</span>&gt;</span>#556B2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗橄榄绿--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;indigo&quot;</span>&gt;</span>#4B0082<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--靛青色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mediumturquoise&quot;</span>&gt;</span>#48D1CC<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中绿宝石 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkslateblue&quot;</span>&gt;</span>#483D8B<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗灰蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;steelblue&quot;</span>&gt;</span>#4682B4<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--钢兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;royalblue&quot;</span>&gt;</span>#4169E1<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--皇家蓝 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;turquoise&quot;</span>&gt;</span>#40E0D0<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--青绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mediumseagreen&quot;</span>&gt;</span>#3CB371<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中海蓝 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;limegreen&quot;</span>&gt;</span>#32CD32<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--橙绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkslategray&quot;</span>&gt;</span>#2F4F4F<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗瓦灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkslategrey&quot;</span>&gt;</span>#2F4F4F<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗瓦灰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;seagreen&quot;</span>&gt;</span>#2E8B57<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--海绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;forestgreen&quot;</span>&gt;</span>#228B22<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--森林绿 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lightseagreen&quot;</span>&gt;</span>#20B2AA<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--亮海蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;dodgerblue&quot;</span>&gt;</span>#1E90FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--闪兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;midnightblue&quot;</span>&gt;</span>#191970<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中灰兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;aqua&quot;</span>&gt;</span>#00FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--浅绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;cyan&quot;</span>&gt;</span>#00FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--青色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;springgreen&quot;</span>&gt;</span>#00FF7F<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--春绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;lime&quot;</span>&gt;</span>#00FF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--酸橙色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mediumspringgreen&quot;</span>&gt;</span>#00FA9A<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中春绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkturquoise&quot;</span>&gt;</span>#00CED1<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗宝石绿 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;deepskyblue&quot;</span>&gt;</span>#00BFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--深天蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkcyan&quot;</span>&gt;</span>#008B8B<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗青色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;teal&quot;</span>&gt;</span>#008080<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--水鸭色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;green&quot;</span>&gt;</span>#008000<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkgreen&quot;</span>&gt;</span>#006400<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>#0000FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;mediumblue&quot;</span>&gt;</span>#0000CD<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--中兰色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;darkblue&quot;</span>&gt;</span>#00008B<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--暗蓝色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;navy&quot;</span>&gt;</span>#000080<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--海军色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span> <span class="comment">&lt;!--黑色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log封装</title>
      <link href="2018/10/03/Log%E5%B0%81%E8%A3%85/"/>
      <url>2018/10/03/Log%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>在调试代码的时候我们需要查看调试信息，那我们就需要用Android Log类。<br><a id="more"></a><br>android.util.Log常用的方法有以下5个：Log.v() Log.d() Log.i() Log.w() 以及 Log.e() 。根据首字母对应VERBOSE，DEBUG,INFO, WARN，ERROR。</p><ol><li>Log.v 的调试颜色为黑色的，任何消息都会输出，这里的v代表verbose啰嗦的意思，平时使用就是Log.v(“”,””);</li><li>Log.d的输出颜色是蓝色的，仅输出debug调试的意思，但他会输出上层的信息，过滤起来可以通过DDMS的Logcat标签来选择.</li><li>Log.i的输出为绿色，一般提示性的消息information，它不会输出Log.v和Log.d的信息，但会显示i、w和e的信息</li><li>Log.w的意思为橙色，可以看作为warning警告，一般需要我们注意优化Android代码，同时选择它后还会输出Log.e的信息。</li><li>Log.e为红色，可以想到error错误，这里仅显示红色的错误信息，这些错误就需要我们认真的分析，查看栈的信息了。</li></ol><blockquote><p>注意：不同的打印方法在使用时都是某个方法带上(String tag, String msg)参数，tag表示的是打印信息的标签，msg表示的是需要打印的信息。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> VERBOSE =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> DEBUG =<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> INFO =<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> WARN =<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> ERROR =<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> NOTHING =<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> level =VERBOSE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">v</span><span class="params">(String tag,String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= VERBOSE)&#123;</span><br><span class="line">            Log.v(tag,msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(String tag,String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= VERBOSE)&#123;</span><br><span class="line">            Log.d(tag,msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">i</span><span class="params">(String tag,String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= VERBOSE)&#123;</span><br><span class="line">            Log.i(tag,msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">w</span><span class="params">(String tag,String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= VERBOSE)&#123;</span><br><span class="line">            Log.w(tag,msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">e</span><span class="params">(String tag,String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level &lt;= VERBOSE)&#123;</span><br><span class="line">            Log.e(tag,msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写个Splash闪屏页</title>
      <link href="2018/10/02/%E5%86%99%E4%B8%AASplash%E9%97%AA%E5%B1%8F%E9%A1%B5/"/>
      <url>2018/10/02/%E5%86%99%E4%B8%AASplash%E9%97%AA%E5%B1%8F%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>倒计时如何写？</li><li>点击跳转</li><li>更新UI</li><li>跳转之后的handle处理</li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.loopj.android.http.AsyncHttpClient;</span><br><span class="line"><span class="keyword">import</span> com.loopj.android.http.AsyncHttpResponseHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cz.msebera.android.httpclient.Header;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpashActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CODE = <span class="number">1001</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOTAL_TIME = <span class="number">3000</span>;    <span class="comment">//总共三秒</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERVAL_TIME = <span class="number">1000</span>;  <span class="comment">//间隔时间</span></span><br><span class="line">    <span class="keyword">private</span> TextView mTextView;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_spash);</span><br><span class="line"></span><br><span class="line">        mTextView = (TextView) findViewById(R.id.time_text_view);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> MyHandler handler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        而Handler中obtainMessage与new Message的差别：</span></span><br><span class="line"><span class="comment">//        obtainmessage（）是从消息池中拿来一个msg 不须要另开辟空间new</span></span><br><span class="line"><span class="comment">//        new须要又一次申请，效率低，obtianmessage能够循环利用。</span></span><br><span class="line"><span class="comment">//        Message message = new Message();</span></span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        message.what = CODE;</span><br><span class="line">        message.arg1 = TOTAL_TIME;</span><br><span class="line">        handler.sendMessage(message);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        mTextView.setOnClickListener(this);</span></span><br><span class="line">        mTextView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//点击跳过</span></span><br><span class="line">               BookListActivity.start(SpashActivity.<span class="keyword">this</span>);</span><br><span class="line">                SpashActivity.<span class="keyword">this</span>.finish();</span><br><span class="line">                <span class="comment">//必须关闭handler中的服务</span></span><br><span class="line">                handler.removeMessages(CODE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AsyncHttpClient client = <span class="keyword">new</span> AsyncHttpClient();</span><br><span class="line">        client.get(<span class="string">&quot;https://www.google.com&quot;</span>, <span class="keyword">new</span> AsyncHttpResponseHandler() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// called before request is started</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">int</span> statusCode, Header[] headers, <span class="keyword">byte</span>[] response)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// called when response HTTP status is &quot;200 OK&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="keyword">int</span> statusCode, Header[] headers, <span class="keyword">byte</span>[] errorResponse, Throwable e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// called when response HTTP status is &quot;4XX&quot; (eg. 401, 403, 404)</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRetry</span><span class="params">(<span class="keyword">int</span> retryNo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// called when request is retried</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void onClick(View v) &#123;</span></span><br><span class="line"><span class="comment">//       switch (v.getId())&#123;</span></span><br><span class="line"><span class="comment">//           case R.id.time_text_view:</span></span><br><span class="line"><span class="comment">//               //点击跳过</span></span><br><span class="line"><span class="comment">//               BookListActivity.start(SpashActivity.this);</span></span><br><span class="line"><span class="comment">//               SpashActivity.this.finish();</span></span><br><span class="line"><span class="comment">//               break;</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> WeakReference&lt;SpashActivity&gt; mWwakReference;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(SpashActivity activity)</span></span>&#123;</span><br><span class="line">            mWwakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            SpashActivity activity = mWwakReference.get();</span><br><span class="line">            <span class="keyword">if</span>(msg.what == CODE)&#123;</span><br><span class="line">                <span class="keyword">if</span>(activity != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//设置textview 更新UI</span></span><br><span class="line">                    <span class="keyword">int</span> time = msg.arg1; <span class="comment">//第一次就是三秒</span></span><br><span class="line">                    activity.mTextView.setText(time/INTERVAL_TIME + <span class="string">&quot;秒，点击跳过&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//再发送倒计时</span></span><br><span class="line">                    Message message = Message.obtain();</span><br><span class="line">                    message.what = CODE;</span><br><span class="line">                    message.arg1 = time-INTERVAL_TIME;</span><br><span class="line">                    <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="comment">//倒计时继续</span></span><br><span class="line">                        sendMessageDelayed(message,INTERVAL_TIME);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                         <span class="comment">//<span class="doctag">TODO:</span>跳转页面</span></span><br><span class="line">                        Toast.makeText(activity,<span class="string">&quot;跳转到列表&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                        BookListActivity.start(activity);</span><br><span class="line">                        activity.finish();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型知识点</title>
      <link href="2018/10/01/%E6%B3%9B%E5%9E%8B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2018/10/01/%E6%B3%9B%E5%9E%8B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><a class="link"   href="https://note.youdao.com/share/?id=439f4f3cbac9333e6b6f8407ecc10542&amp;type=note#/" >点击我传送过去看看吧<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ListView的使用</title>
      <link href="2018/09/13/ListView%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2018/09/13/ListView%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="ListView-简介"><a href="#ListView-简介" class="headerlink" title="ListView 简介"></a>ListView 简介</h3><p>一、ListView 是 android 中常用的一个控件,通常是以列表的形式展示数据,<br>并且当加载的数据过多的时候可以分页加载,动态显示数据,通常是横向显示数据。<br><a id="more"></a></p><ul><li>Adapter一般有以下的几种实现类:ArrayAdapter，SimpleAdapter，SimpleCursorAdapter,BaseAdapter</li><li>ArrayAdapter的每一个列表只能是一个TextView，ArrayAdapter的使用方法如下:</li><li>ArrayAdapter adapter=new ArrayAdapter(Context,一个TextView布局,String 数组);</li></ul><p>二、ListView 实现数据加载的步骤:<br>ListView 适合“自底向上”的开发模式<br>即从每个条目的显示组件<br>到对其进行 控制的数据结构<br>最后通过 Activity 等进行使用。<br>a）首先是 item 组件,即用于每项布局输出的 xml 文件。</p><blockquote><p>Android SDK 中有 simple_list_item_1、simple_list_item_2 可用</p></blockquote><p>当需要比较丰富的显示效果时, 一般通过自定义 xml 实现。<br>b）其次是父对象 layout 文件,即用于 Activity 或者 Fragment 的布局输出文件,一 般在此输出文件中包含 ListView。</p><p>当然,如果采用 ListFragment 或 ListActivity, 并不需要再显示的定义 ListView 组件</p><p>c）定义数据结构(容器),即用于持有单个 Item 的数据,可以是简单的 String,也 可以通过抽象 Items 所需字段组成一个类,抽象的原则是与 Item 中的组件对应。</p><p>本文中上图涉及多个字段,因此通过抽象组件形成 BBSTopicItem 类。</p><p>d）列表适配器。决定每行 Item 中具体显示什么内容,以怎样的样式显示等,通常通 过继承 ArrayAdapter、SimpleAdapter 等实现。本文定义 BBSTopicAdapter, 继承于 ArrayAdapter<BBSTopicItem>。</p><p>e）最后,需要定义一个 Activity 或 Fragment 来使用上述模块。</p><h3 id="ListView的简单用法"><a href="#ListView的简单用法" class="headerlink" title="ListView的简单用法"></a>ListView的简单用法</h3><h6 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h6><p>首先新建一个项目， 并让ADT 自动帮我们创建好活动。然后修改activity_main.xml 中的代码，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    &lt;ListView</span><br><span class="line">        android:id=&quot;@+id/list_view&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;&gt;<span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在MainActivity 中首页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个列表</span></span><br><span class="line">ListView listView = (ListView)findViewById(R.id.list_view);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.创建一些数据</span></span><br><span class="line"> initFruits();</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">            Fruit apple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Apple&quot;</span>, R.drawable.apple_pic);</span><br><span class="line">            fruitList.add(apple);</span><br><span class="line">            Fruit banana = <span class="keyword">new</span> Fruit(<span class="string">&quot;Banana&quot;</span>, R.drawable.banana_pic);</span><br><span class="line">            fruitList.add(banana);</span><br><span class="line">            Fruit orange = <span class="keyword">new</span> Fruit(<span class="string">&quot;Orange&quot;</span>, R.drawable.orange_pic);</span><br><span class="line">            fruitList.add(orange);</span><br><span class="line">            Fruit watermelon = <span class="keyword">new</span> Fruit(<span class="string">&quot;Watermelon&quot;</span>, R.drawable.watermelon_pic);</span><br><span class="line">            fruitList.add(watermelon);</span><br><span class="line">            Fruit pear = <span class="keyword">new</span> Fruit(<span class="string">&quot;Pear&quot;</span>, R.drawable.pear_pic);</span><br><span class="line">            fruitList.add(pear);</span><br><span class="line">            Fruit grape = <span class="keyword">new</span> Fruit(<span class="string">&quot;Grape&quot;</span>, R.drawable.grape_pic);</span><br><span class="line">            fruitList.add(grape);</span><br><span class="line">            Fruit pineapple = <span class="keyword">new</span> Fruit(<span class="string">&quot;Pineapple&quot;</span>, R.drawable.pineapple_pic);</span><br><span class="line">            fruitList.add(pineapple);</span><br><span class="line">            Fruit strawberry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Strawberry&quot;</span>, R.drawable.strawberry_pic);</span><br><span class="line">            fruitList.add(strawberry);</span><br><span class="line">            Fruit cherry = <span class="keyword">new</span> Fruit(<span class="string">&quot;Cherry&quot;</span>, R.drawable.cherry_pic);</span><br><span class="line">            fruitList.add(cherry);</span><br><span class="line">            Fruit mango = <span class="keyword">new</span> Fruit(<span class="string">&quot;Mango&quot;</span>, R.drawable.mango_pic);</span><br><span class="line">            fruitList.add(mango);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>然后<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3 将数据导入ListView</span></span><br><span class="line"><span class="comment">// 创建实例化一个adapter 将数据传入其中</span></span><br><span class="line">NewFuritAdapter adapter = <span class="keyword">new</span> NewFuritAdapter(fruitList);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>最后<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listView.setAdapter(adapter);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>创建Adapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FuritAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">Fruit</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>  resourceId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写父类的构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context   上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textViewResourceId   子项布局的ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects   数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FuritAdapter</span><span class="params">(Context context, <span class="keyword">int</span> textViewResourceId, List&lt;Fruit&gt; objects)</span></span>&#123;</span><br><span class="line">         <span class="keyword">super</span>(context,textViewResourceId,objects);</span><br><span class="line">         resourceId = textViewResourceId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *这个方法再子项目滚动到屏幕内的时候会被调用，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> position</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> convertView  缓存数据的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取当前fruit的实例</span></span><br><span class="line">        Fruit fruit = getItem(position);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认初始化viewHolder类</span></span><br><span class="line">        ViewHolder viewHolder;</span><br><span class="line">        <span class="keyword">if</span>(convertView == <span class="keyword">null</span>)&#123;</span><br><span class="line">            convertView = LayoutInflater.from(getContext()).inflate(resourceId,parent,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当convertView刚创建的时候 存储viewholder子控件</span></span><br><span class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">            viewHolder.fruitImage = (ImageView)view.findViewById(R.id.fruit_image);</span><br><span class="line">            viewHolder.fruitName = (TextView)view.findViewById(R.id.fruit_name) ;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//view与setTag绑定 当往下滑动会调用getView的方法</span></span><br><span class="line">            convertView.setTag(viewHolder);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            viewHolder = (ViewHolder)convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        viewHolder.fruitImage.setImageResource(fruit.getImageId());</span><br><span class="line">        viewHolder.fruitName.setText(fruit.getName());</span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView  fruitName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181012/IIdDhI1bGB.png"                      alt="mark"                ></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android studio断点调试</title>
      <link href="2018/09/12/Android%20studio%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"/>
      <url>2018/09/12/Android%20studio%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>工具如何使用<br><a id="more"></a></p><blockquote><p>设置断点（点击红点位置添加或取消断点）<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/dDif34E3hB.png"                      alt="mark"                ></p></blockquote><p>点击debug模式运行<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/3hKj47J1Hk.png"                      alt="mark"                ></p><h1 id="一、简单调试"><a href="#一、简单调试" class="headerlink" title="一、简单调试"></a>一、简单调试</h1><h2 id="1-step-over：一步步往下走"><a href="#1-step-over：一步步往下走" class="headerlink" title="1. step over：一步步往下走"></a>1. step over：一步步往下走</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/8AFbiBb4F0.png"                      alt="mark"                ></p><blockquote><p>当前程序运行的位置，我们看到i的值已经在程序代码中展示出来了，黄色的代码处，这个是AS的功能，对于我们调试来讲，这简直是非常大的福利了。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/IdiiD0Jl7a.png"                      alt="mark"                ></p><p>这时我们继续F8，我们切换到logcat查看日志，我打印出的i的值是0<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/b6Hm3I6Fd5.png"                      alt="mark"                ></p><h2 id="2-step-into：看到方法往里走"><a href="#2-step-into：看到方法往里走" class="headerlink" title="2. step into：看到方法往里走"></a>2. step into：看到方法往里走</h2><blockquote><p>比如我们的for循环当中调用了一个stepNext(int i)方法，当我们走到这里想看看这个方法里面的运行过程的时候我们可以这样，当走到这个方法的时候我们可以按下F7,或者如下图的图标。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/90gJIhlGIf.png"                      alt="mark"                ></p><blockquote><p>这时就走到了stepNext方法当中。<br>在这里打印了一个log，我们再按一下F8我们来看看Logcat, 这里我打印的log都是为了做教程用，调试我们就不用打log了直接看显示面板就OK了</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/21mlEAE37F.png"                      alt="mark"                ></p><h2 id="4-step-out-：有断点下一个，走完断点继续走"><a href="#4-step-out-：有断点下一个，走完断点继续走" class="headerlink" title="4. step out ：有断点下一个，走完断点继续走"></a>4. step out ：有断点下一个，走完断点继续走</h2><blockquote><p>这里如果我们的一个流程当中，包括调用的方法，如果有断点走到下一个断点，如果没有断点，而是在一个调用的方法当中，会跳出这个方法，继续走。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/5HjlkbgJac.png"                      alt="mark"                ></p><blockquote><p>我现在程序位置在第一个断点位置（24行），我调用的stepNext方法中也有一个断点，此时我按下step out按钮会走到stepNext中的断点处（39行）我此时如果再按一下step out 会走到stepNext方法的调用出的下一个可执行代码（30行）</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/e64993jDj0.png"                      alt="mark"                ></p><h2 id="5-run-to-Cursor-：下个断点我们见"><a href="#5-run-to-Cursor-：下个断点我们见" class="headerlink" title="5. run to Cursor ：下个断点我们见"></a>5. run to Cursor ：下个断点我们见</h2><blockquote><p>这里的意思就是说，会很快执行到下一个断点的位置，而且可以静如任何调用的方法</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/ibdi2mHfIK.png"                      alt="mark"                ></p><h1 id="二、高级调试"><a href="#二、高级调试" class="headerlink" title="二、高级调试"></a>二、高级调试</h1><h2 id="1-跨断点调试"><a href="#1-跨断点调试" class="headerlink" title="1. 跨断点调试"></a>1. 跨断点调试</h2><blockquote><p>如果我们设置了多个断点，现在我们需要直接跳转到下一个断点，那么直接点击下图就可以了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/50BLK889h5.png"                      alt="mark"                ></p></blockquote><h2 id="2-观察变量"><a href="#2-观察变量" class="headerlink" title="2.观察变量"></a>2.观察变量</h2><blockquote><p>如果我们想观察1个或者几个变量的值的变化，如果我们在Variables显示面版中观察如果我这里有太多太多的自定义变量和系统变量了，那么就难观察了，我们可以做如下操作:点击Watches,点击＋号，然后输入变量的名称回车就OK了，而且会有历史记录哦</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181018/93ED7LaHLA.png"                      alt="mark"                ></p><blockquote><p>如果变量名比较长我们可以这样：<br>选择［Variables］中的变量名然后点击［右键］，选择［Add to Watches],然后Watches面板中就有了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈fetch与axios与ajax</title>
      <link href="2018/06/01/%E6%B5%85%E8%B0%88fetch%E4%B8%8Eaxios%E4%B8%8Eajax/"/>
      <url>2018/06/01/%E6%B5%85%E8%B0%88fetch%E4%B8%8Eaxios%E4%B8%8Eajax/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JQuery-ajax"><a href="#1-JQuery-ajax" class="headerlink" title="1 JQuery ajax"></a>1 JQuery ajax</h2><p>这个我就不用多言了把，是对原生XHR的封装，除此以外还增添了对JSONP的支持。有一说一的说一句，JQuery ajax经过多年的更新维护，真的已经是非常的方便了，优点无需多言；如果是硬要举出几个缺点，那可能只有<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">   type: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">   url: url,</span><br><span class="line">   data: data,</span><br><span class="line">   dataType: dataType,</span><br><span class="line">   success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">   error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><ul><li>本身是针对MVC的编程,不符合现在前端MVVM的浪潮</li><li>基于原生的XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案</li><li>JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理（采取个性化打包的方案又不能享受CDN服务）</li><li>尽管JQuery对我们前端的开发工作曾有着（现在也仍然有着）深远的影响，但是我们可以看到随着VUE，REACT新一代框架的兴起，以及ES规范的完善，更多API的更新，JQuery这种大而全的JS库，未来的路会越走越窄。</li></ul><h2 id="2-Axios"><a href="#2-Axios" class="headerlink" title="2 Axios"></a>2 Axios</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">        lastName: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Vue2.0之后，尤雨溪推荐大家用axios替换JQuery ajax，想必让Axios进入了很多人的目光中。Axios本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，从它的官网上可以看到它有以下几条特性：</p><ol><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>客户端支持防止CSRF</li><li>提供了一些并发请求的接口（重要，方便了很多的操作）</li></ol><ul><li>这个支持防止CSRF其实挺好玩的，是怎么做到的呢，就是让你的每个请求都带一个从cookie中拿到的key, 根据浏览器同源策略，假冒的网站是拿不到你cookie中得key的，这样，后台就可以轻松辨别出这个请求是否是用户在假冒网站上的误导输入，从而采取正确的策略。</li><li>Axios既提供了并发的封装，也没有下文会提到的fetch的各种问题，而且体积也较小，当之无愧现在最应该选用的请求的方式。<br>-</li></ul><h2 id="3-Fetch"><a href="#3-Fetch" class="headerlink" title="3 Fetch"></a>3 Fetch</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">  <span class="keyword">let</span> data = response.json();</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Oops, error&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我认为fetch的优势主要优势就是：</p><ol><li>更加底层，提供的API丰富（request, response）</li><li>脱离了XHR，是ES规范里新的实现方式<br>大家都喜欢新的东西，坦白说，作为一个前端工程师，我在使用原生XHR的时候，尽管偶尔觉得写的丑陋，但是在使用了JQuery和axios之后，已经对这一块完全无所谓了。当然，如果新的fetch能做的同样好，我为了不掉队也会选择使用fetch。这个道理其实很好理解：你有一架歼8，魔改了N次，性能达到了歼10的水准，但是要是有个人给你拿来一架新的歼10，你也会毫不犹豫的选择新的歼10——不仅仅是新，也代表了还有新的魔改潜力。</li></ol><p>但是我最近在使用fetch的时候，也遇到了不少的问题：</p><p>fetch是一个低层次的API，你可以把它考虑成原生的XHR，所以使用起来并不是那么舒服，需要进行封装<br><code>必须重视以下几点</code></p><ol><li>fetch只对网络请求报错，对400，500都当做成功的请求，需要封装去处理</li><li>fetch默认不会带cookie，需要添加配置项</li><li>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li><li>fetch没有办法原生监测请求的进度，而XHR可以</li></ol><p>看到这里，你心里一定有个疑问，这鬼东西就是个半拉子工程嘛，我还是回去用Jquery或者Axios算了——其实我就是这么打算的。但是，必须要提出的是，我发现fetch在前端的应用上有一项xhr怎么也比不上的能力：跨域的处理。</p><p>我们都知道因为同源策略的问题，浏览器的请求是可能随便跨域的——一定要有跨域头或者借助JSONP，但是，fetch中可以设置mode为”no-cors”（不跨域），如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/users.json&#x27;</span>, &#123;</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    mode: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* handle response */</span> &#125;);</span><br></pre></td></tr></table></figure><p>这样之后我们会得到一个type为“opaque”的返回。需要指出的是，这个请求是真正抵达过后台的，所以我们可以使用这种方法来进行信息上报，在我们之前的image.src方法中多出了一种选择，另外，我们在network中可以看到这个请求后台设置跨域头之后的实际返回，有助于我们提前调试接口（当然，通过chrome插件我们也可以做的到）。总之，fetch现在还不是很好用，我尝试过几个fetch封装的包，都还不尽如人意。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来玩，Koa2!（三）</title>
      <link href="2018/05/20/%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%8E%A9%EF%BC%8CKoa2!(%E4%B8%89)/"/>
      <url>2018/05/20/%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%8E%A9%EF%BC%8CKoa2!(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="常用服务"><a href="#常用服务" class="headerlink" title="常用服务"></a>常用服务</h1><h4 id="1-静态文件服务"><a href="#1-静态文件服务" class="headerlink" title="1. 静态文件服务"></a>1. 静态文件服务</h4><p>使用koa-static<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">&quot;koa-static&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.use(server(_dirname+<span class="string">&quot;/static/html&quot;</span>,&#123;<span class="attr">extensions</span>:[<span class="string">&#x27;html&#x27;</span>]&#125;));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><h4 id="2-路由服务"><a href="#2-路由服务" class="headerlink" title="2. 路由服务"></a>2. 路由服务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bodyParser= <span class="built_in">require</span>(<span class="string">&#x27;Koa-bodyparser&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(router.routes());</span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    ctx.response.body=<span class="string">&#x27;hello,word&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>,<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> name = ctx.request.body.name || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> pwd = ctx.request.body.password || <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(name === <span class="string">&#x27;koa&#x27;</span> &amp;&amp; pwd === <span class="string">&#x27;123&#x27;</span>)&#123;</span><br><span class="line">        ctx.body = <span class="string">&#x27;sucdess&#x27;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ctx.body = <span class="string">&#x27;false&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由也可以这样</span></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/del/blog/:blogId&#x27;</span>,<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="keyword">await</span> dbAPI.deletetblogID(ctx.params.blogId)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-数据存储"><a href="#3-数据存储" class="headerlink" title="3. 数据存储"></a>3. 数据存储</h4><p>安装mongoose<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose --save</span><br></pre></td></tr></table></figure><br>新建db.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db = mongoose.connection;</span><br><span class="line">db.on(<span class="string">&#x27;error&#x27;</span>,<span class="built_in">console</span>.error.bind(<span class="built_in">console</span>,<span class="string">&#x27;connection,error&#x27;</span>));</span><br><span class="line">db.once(<span class="string">&#x27;open&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//connected!!!!</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下去创建2类文件</p><h5 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h5><p>一种文件形式存储的数据库模型骨架，不具备数据库的操作能力</p><h5 id="model"><a href="#model" class="headerlink" title="model"></a>model</h5><p>又schema发布生成的模型，具备抽象属性和行为的数据库操作对</p><p>下面看栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> loginSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    username:<span class="built_in">String</span>,</span><br><span class="line">    pwd:<span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> login = db.model(<span class="string">&#x27;login&#x27;</span>,loginSchema,<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> user1 = <span class="keyword">new</span> login(&#123;</span><br><span class="line">    username:<span class="string">&#x27;len&#x27;</span>,</span><br><span class="line">    pwd:<span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">user1.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> handleError(err)</span><br><span class="line">    <span class="comment">//savee</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="keyword">var</span> query = login.find(&#123;<span class="attr">username</span>:<span class="string">&#x27;len&#x27;</span>&#125;);</span><br><span class="line">query.then(<span class="function"><span class="keyword">function</span>(<span class="params">doc</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(doc)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-页面渲染"><a href="#4-页面渲染" class="headerlink" title="4. 页面渲染"></a>4. 页面渲染</h4><p>使用ejs</p><p>前端渲染和后端渲染</p><blockquote><p>服务器渲染优点：首屏加载快，<br>对seo有利</p><p>缺点：前后端耦合，代码难易维护且不美观</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Koa2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来玩，Koa2!（二）</title>
      <link href="2018/05/19/%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%8E%A9%EF%BC%8CKoa2!(%E4%BA%8C)/"/>
      <url>2018/05/19/%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%8E%A9%EF%BC%8CKoa2!(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h3><p>中间件的本质是接受请求并且做出相应动作的<code>函数</code>，该函数接受<code>req</code>和<code>res</code>,在web应用中，客户端发起的每一个请求，首先要经过中间件处理才能继续向下。<br><a id="more"></a><br>中间件的第三个参数是<code>next</code>,它代表一个方法，即下一个中间件。</p><h6 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;i am a middleware&#x27;</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="中间件的功能"><a href="#中间件的功能" class="headerlink" title="中间件的功能"></a>中间件的功能</h3><p>1.修改req，res对象<br>2.终结请求，响应循环<br>3.调用下一个中间件<br>如果某一个中间件没有调用next方法，则代表请求处理到此为止。</p><h3 id="中间件的加载"><a href="#中间件的加载" class="headerlink" title="中间件的加载"></a>中间件的加载</h3><p>使用<code>use</code>，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">app.use(md);</span><br></pre></td></tr></table></figure><h3 id="next-方法"><a href="#next-方法" class="headerlink" title="next()方法"></a>next()方法</h3><p>当我们调用app.use方法时，在内部形成了一个中间件数组，在内部会将执行下一个中间件的操作放在next方法内部，当我们执行next方法就代表执行下一个中间件，</p><h3 id="中间件的串行调用"><a href="#中间件的串行调用" class="headerlink" title="中间件的串行调用"></a>中间件的串行调用</h3><p>在实际开发中我们希望一些操作能够串行执行，比如等待写入日志完成后再执行数据库操作，最后再进行路由处理，这样就需要串行调用某些异步中间件</p><h6 id="举个Express栗子："><a href="#举个Express栗子：" class="headerlink" title="举个Express栗子："></a>举个Express栗子：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)();</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;i am middleware1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;i am middleware1&#x27;</span>)</span><br><span class="line">         next()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>结果：<br>//i am middleware1<br>//i am middleware2</p><blockquote><p>原理就是 第二个中间件调用了 process.nextTick是一个异步调用，因此马上返回到第一个中间件继续执行</p></blockquote><h6 id="举个Koa2栗子："><a href="#举个Koa2栗子：" class="headerlink" title="举个Koa2栗子："></a>举个Koa2栗子：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;Koa&#x27;</span>)();</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(<span class="function"><span class="title">async</span>(<span class="params">ctx,next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;i am middleware1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function"><span class="title">async</span>(<span class="params">ctx,next</span>)</span>&#123;</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;i am middleware1&#x27;</span>)</span><br><span class="line">         next()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><blockquote><p>原理 使用了 await ,知道next内部的异步方法完成之前，middleware1都不会向下执行。</p></blockquote><h3 id="再举一个例子-如何实现超时响应"><a href="#再举一个例子-如何实现超时响应" class="headerlink" title="再举一个例子-如何实现超时响应"></a>再举一个例子-如何实现超时响应</h3><p>使用async 和 promise.race方法来比较setimeout和之后的中间件哪个更快完成。</p><blockquote><p>promise.race方法：哪个返回快，就返回哪个结果，不管成功还是失败</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> tmr = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">const</span> timeout = <span class="number">5000</span></span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.race([</span><br><span class="line">       <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">           tmr = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;request timeout&#x27;</span>)</span><br><span class="line">               e.status = <span class="number">408</span>,</span><br><span class="line">               reject(e)</span><br><span class="line">           &#125;,timeout)</span><br><span class="line">       &#125;),</span><br><span class="line">       <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">           (<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">await</span> next();</span><br><span class="line">               <span class="built_in">clearTimeout</span>(tmr);</span><br><span class="line">               resolve()</span><br><span class="line">           &#125;)();   <span class="comment">//执行后面加载的中间件</span></span><br><span class="line">       &#125;)</span><br><span class="line">    ])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="后续如有更深的体会再补充……"><a href="#后续如有更深的体会再补充……" class="headerlink" title="后续如有更深的体会再补充……"></a>后续如有更深的体会再补充……</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E6%9C%BA%E6%99%BA%E5%A6%82%E6%88%91.jpg"                      alt="image"                ></p>]]></content>
      
      
      <categories>
          
          <category> Koa2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来玩，Koa2!（一）</title>
      <link href="2018/05/18/%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%8E%A9%EF%BC%8CKoa2!/"/>
      <url>2018/05/18/%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%8E%A9%EF%BC%8CKoa2!/</url>
      
        <content type="html"><![CDATA[<h3 id="一-历史渊源："><a href="#一-历史渊源：" class="headerlink" title="一 历史渊源："></a>一 历史渊源：</h3><p>在谈Koa2之前，我们先来认识下<code>Connect</code>,诞生于2010年，可以将<code>Connect</code>理解成node中间件的脚手架，只提供基本的调用逻辑，不具备处理业务逻辑的能力。<br><a id="more"></a><br>例如 用USE next</p><p>Express这个框架出现在2010年，继承了<code>Connect</code>的大部分思想，在最新的4.x版本，<code>Express</code>拜托了<code>Connect</code>的依赖，摒弃了静态文件模块之外的所有中间件，只保留核心路由处理逻辑及一些其他代码。</p><p>但是<code>Express</code>很多场景以及存在问题，之后就推出了<code>Koa1.x</code>  <code>Koa2.x</code>.初衷是彻底解决Node <strong>web开发异步问题</strong>。</p><p>二.创建一个最简单的服务器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;Koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa;</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span>&#123;</span><br><span class="line">    ctx.body=<span class="string">&#x27;hello,koa2!!!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Node提供了request和response这2个对象，Koa把他封装了起来 ctx 是缩写；<br>常用的request：</p><ul><li style="list-style: none"><input type="checkbox"></input> ctx.header</li><li style="list-style: none"><input type="checkbox"></input> ctx,path</li><li style="list-style: none"><input type="checkbox"></input> ctx.query</li><li style="list-style: none"><input type="checkbox"></input> ctx,querystring</li><li style="list-style: none"><input type="checkbox"></input> ctx,get</li></ul><p>常用的response</p><ul><li style="list-style: none"><input type="checkbox"></input> ctx.body</li><li style="list-style: none"><input type="checkbox"></input> ctx.status</li><li style="list-style: none"><input type="checkbox"></input> ctx.set()</li><li style="list-style: none"><input type="checkbox"></input> ctx.append()</li></ul><h3 id="介绍常用的"><a href="#介绍常用的" class="headerlink" title="介绍常用的"></a>介绍常用的</h3><p>ctx.state:可以将后端传过来的数据到前端。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.state.user = <span class="keyword">await</span> User.find(id)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="处理http请求"><a href="#处理http请求" class="headerlink" title="处理http请求"></a>处理http请求</h3><p>ctx相当与ctx.requert或者ctx.response,判断http方法用ctx.method,get请求用ctx.query</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(url,<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.method);</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.query);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>get请求直觉拿ctx.req<br>先引入 bodyParser<br>post请求用ctx.request.body.xxx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.post(url,<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> name = ctx.request.body.name</span><br><span class="line">    <span class="keyword">const</span> password = ctx.request.body.password</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Koa2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs是什么</title>
      <link href="2018/05/10/%E7%AC%AC%E4%B8%80%E7%AB%A0%20Nodejs%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>2018/05/10/%E7%AC%AC%E4%B8%80%E7%AB%A0%20Nodejs%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是运行时？举一个例子"><a href="#1-什么是运行时？举一个例子" class="headerlink" title="1.什么是运行时？举一个例子"></a>1.什么是运行时？举一个例子</h2><blockquote><p>所谓运行时（runtime)  就想象成一种编程员的运行的环境 这个运行环境包括代码运行的编译器以及操作系统的底层支持</p></blockquote><a id="more"></a><h2 id="2-什么是回调？回调与异步调用有必然联系吗？"><a href="#2-什么是回调？回调与异步调用有必然联系吗？" class="headerlink" title="2.什么是回调？回调与异步调用有必然联系吗？"></a>2.什么是回调？回调与异步调用有必然联系吗？</h2><p>回调就是一个函数作为参数传递给另一个函数，并且作为参数的函数可以被执行，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    alert(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>回调函数既可以同步（map）又可以异步（setTimeOut）</p><p>与异步调用的关系：在Node中 如果遇到IO操作比如磁盘写入写出，代码发起一个调用后继续向下执行，<br>Io操作完成后，再执行对应的回调函数，虽然代码在单线程环境下，单依靠异步+回调 实现对高并发的支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.readerFile(<span class="string">&quot;foo.txt&quot;</span>,callback)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;猜猜谁是不是先被执行啊？&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-什么是事件"><a href="#3-什么是事件" class="headerlink" title="3 什么是事件"></a>3 什么是事件</h2><p>在交互的页面上，用户发生一系列事件：单击按钮，拖动元素 这些事件按照一定的顺序加载到一个队列中区。</p><h2 id="4并行与并发有什么区别和联系"><a href="#4并行与并发有什么区别和联系" class="headerlink" title="4并行与并发有什么区别和联系"></a>4并行与并发有什么区别和联系</h2><p>举一个例子</p><p>并发：火车站取票，2排队伍 只有一个取票机，只能队列头排的人去取票 同时向前移动</p><p>并行：火车站取票 2个队伍 2个取票机，同时向前移动 速度是一个窗口的2倍以上。<br>并发是希望做更多的事情（处理多个队列）<br>并行是希望更快的完成任务</p><p>联系： 并发中可以存在并行</p><h2 id="5-同步与异步，阻塞与非阻塞的区别"><a href="#5-同步与异步，阻塞与非阻塞的区别" class="headerlink" title="5.同步与异步，阻塞与非阻塞的区别"></a>5.同步与异步，阻塞与非阻塞的区别</h2><p>同步异步是描述进程/线程的调用方式</p><p>阻塞非阻塞是针对Io状态而言，关注程序在等待IO调用返回这段事件的状态</p><p>他们之间没有必然的联系</p><p>阻塞 不等于 同步  非阻塞 不等于 异步</p><p>为什么官网 Node没有 标榜自己是异步io  而是非阻塞io呢？<br>因为非阻塞是实打实的  Node的异步Io 是靠 Libuv模拟出来的</p><p><code>同步调用会造成进程的Io阻塞  异步调用不会造成进行的Io阻塞</code>**</p><h2 id="6-事件循环的运行过程"><a href="#6-事件循环的运行过程" class="headerlink" title="6.事件循环的运行过程"></a>6.事件循环的运行过程</h2><p>浏览器循环：Ajax为例，当javascript执行对应代码，注册一个事件，请求后就执行完毕了，后续操作会交给回调函数来处理，<br>浏览器会在不断的遍历事件队列，ajax完成之前，事件队列还是空的（<code>不是请求这动作被加入队列，而是请求完成这一事件被加入队列</code>），当ajax完成后这个队列就好增加一个事件，如果这个事件绑定回调，则循环就去执行这个回调</p><p>Node的循环：事件循环由libuv来实现<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/node%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png"                      alt="image"                ></p><p>timers：出来settimeout 和 setinterval的回调</p><p>I/O callbacks  除了timers close setImmediate事件回调外，大多数回调在这个阶段执行</p><p>idle prepare：内部使用，不管他</p><p>poll：轮询 不断检查是否由新的io事件，事件循环可能会在这里阻塞</p><p>check： 处理setimmediate事件的回调</p><p>close callbacks 处理close相关的事件</p><h2 id="7-nextTick的原理是什么-和-setImmaite有什么区别"><a href="#7-nextTick的原理是什么-和-setImmaite有什么区别" class="headerlink" title="7.nextTick的原理是什么 和 setImmaite有什么区别"></a>7.nextTick的原理是什么 和 setImmaite有什么区别</h2><p>process.nextTick 是一个异步动作   在事件循环当前阶段结束后执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line"><span class="comment">//next</span></span><br><span class="line"><span class="comment">//first</span></span><br></pre></td></tr></table></figure><p>但是 Node限制了nextTickQueue的大小，当达到最大限制后就会报错<br>区别：<br>setImmediate 不接受一个时间作为参数  在当前事件循环结尾触发，对应的回调在当前事件的循环尾执行<br>process.nextTick 会在当前操作完成后立即执行  会比setImmediate  先执行</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less的常用方法</title>
      <link href="2018/05/09/less%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>2018/05/09/less%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>常常用less解决一些问题，一些常用的再记录下<br><a id="more"></a></p><p><code>&amp;</code>相当于父元素里的谁<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@width:10;</span><br><span class="line"><span class="selector-tag">nav</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#738797</span>;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">&amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&amp;<span class="selector-class">.padding_left</span>&#123;</span><br><span class="line"><span class="attribute">padding-left</span>: @width*<span class="number">2px</span>;</span><br><span class="line">&#125; ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line"><span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@height</span> :document.documentElement.clientHeight;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#738797</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">height</span>: @height *<span class="number">1px</span>;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.classa</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#b7b7b7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearFix</span>&#123;</span><br><span class="line">  *zoom:<span class="number">1</span>;</span><br><span class="line">  &amp;:after&#123;</span><br><span class="line">    content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.classb</span>&#123;</span><br><span class="line">  <span class="selector-class">.classa</span>;</span><br><span class="line">  <span class="selector-class">.clearFix</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="带参数混合"><a href="#带参数混合" class="headerlink" title="带参数混合"></a>带参数混合</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="keyword">@color</span>)&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid @color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="selector-id">#b7b7b7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="selector-id">#ff0000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="selector-id">#b7b7b7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="多个参数的混合"><a href="#多个参数的混合" class="headerlink" title="多个参数的混合"></a>多个参数的混合</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="keyword">@width</span>,<span class="keyword">@style</span>,<span class="keyword">@color</span>)&#123;</span><br><span class="line">  <span class="attribute">border</span>:@width @style @color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>,solid,<span class="selector-id">#b7b7b7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>,solid,<span class="selector-id">#ff0000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">2px</span>,solid,<span class="selector-id">#b7b7b7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box4</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>,dotted,<span class="selector-id">#b7b7b7</span>);</span><br><span class="line">&#125;*</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="带默认值的参数混合"><a href="#带默认值的参数混合" class="headerlink" title="带默认值的参数混合"></a>带默认值的参数混合</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.border(@width:1px,@style:solid)&#123;</span><br><span class="line">  <span class="attribute">border</span>:@width @style <span class="number">#033333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>,dotted);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box4</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.border(top,@width:1px)&#123;</span><br><span class="line">  <span class="attribute">border-top</span>:@width solid <span class="number">#033333</span>;</span><br><span class="line">&#125;</span><br><span class="line">.border(right,@width:1px)&#123;</span><br><span class="line">  <span class="attribute">border-right</span>:@width solid <span class="number">#033333</span>;</span><br><span class="line">&#125;</span><br><span class="line">.border(bottom,@width:1px)&#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>:@width solid <span class="number">#033333</span>;</span><br><span class="line">&#125;</span><br><span class="line">.border(left,@width:1px)&#123;</span><br><span class="line">  <span class="attribute">border-left</span>:@width solid <span class="number">#033333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.border(@_,@width:1px)&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="built_in">round</span>(<span class="number">5.5</span>)*<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="attribute">top</span>,<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="attribute">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="attribute">bottom</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box4</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="attribute">left</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>@_</code>表示无论匹配谁最后都还会执行一次这个方法带上里面的属性**</p></blockquote><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blue</span>&#123;</span><br><span class="line">  <span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">  <span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="selector-class">.blue</span> &gt; <span class="selector-class">.button</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="避免编译"><a href="#避免编译" class="headerlink" title="避免编译"></a>避免编译</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:@rem;</span><br><span class="line">  //转义字符  用二边算法算<span class="attribute">font</span>要用括号括起来</span><br><span class="line">  <span class="attribute">font</span>:(<span class="number">12</span>/@rem)~<span class="string">&#x27;/&#x27;</span>(<span class="number">20</span>/@rem) <span class="string">&#x27;宋体&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//这种注释方法不会被编译到css文件里面去（通常用于生产环节）</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    这种注释会被解析到css文件里面去</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack初体验</title>
      <link href="2018/05/08/webpack%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>2018/05/08/webpack%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前端为什么需要WebPack？"><a href="#前端为什么需要WebPack？" class="headerlink" title="前端为什么需要WebPack？"></a>前端为什么需要WebPack？</h2><p>现在的前端网页功能丰富，特别是SPA（single page web application 单页应用）技术流行后，JavaScript的复杂度增加和需要一大堆依赖包，还需要解决SCSS，Less……新增样式的扩展写法的编译工作。所以现代化的前端已经完全依赖于WebPack的辅助了。<br><a id="more"></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/webpack.png"                      alt="image"                ></p><p>现在最流行的三个前端框架，可以说和webpack已经紧密相连，框架官方都推出了和自身框架依赖的webpack构建工具。</p><ol><li>React.js+WebPack</li><li>Vue.js+WebPack</li><li>AngluarJS+WebPack</li></ol><h2 id="什么是WebPack？"><a href="#什么是WebPack？" class="headerlink" title="什么是WebPack？"></a>什么是WebPack？</h2><blockquote><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Sass，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。在3.0出现后，Webpack还肩负起了优化项目的责任。</p></blockquote><p>这段话有三个重点：</p><ol><li>打包：可以把多个Javascript文件打包成一个文件，减少服务器压力和下载带宽。</li><li>转换：把拓展语言转换成为普通的JavaScript，让浏览器顺利运行。</li><li>优化：前端变的越来越复杂后，性能也会遇到问题，而WebPack也开始肩负起了优化和提升性能的责任。</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局安装</span></span><br><span class="line">npm install -g webpack</span><br><span class="line"></span><br><span class="line">npm init</span><br><span class="line">npm install --save-dev webpack@<span class="number">3.10</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">&lt;!--查看webpack版本--&gt;</span><br><span class="line">webpack -v</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/webpack%E5%88%9D%E4%BD%93%E9%AA%8C.png"                      alt="image"                ></p><h2 id="主要配置文件"><a href="#主要配置文件" class="headerlink" title="主要配置文件"></a>主要配置文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> HTMLPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">&quot;development&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: path.join(__dirname, <span class="string">&quot;../client/app.js&quot;</span>)   <span class="comment">//入口文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&quot;[name].[hash].js&quot;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&quot;../dist&quot;</span>),    <span class="comment">//打包后输出文件</span></span><br><span class="line">    publicPath: <span class="string">&quot;/public/&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx$/</span>,</span><br><span class="line">        use: <span class="string">&quot;babel-loader&quot;</span>      <span class="comment">// 编译文件</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        exclude: [path.join(__dirname, <span class="string">&quot;../node_modules&quot;</span>)] <span class="comment">//排除文件</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HTMLPlugin(&#123;</span><br><span class="line">      template: path.join(__dirname, <span class="string">&quot;../client/template.html&quot;</span>) <span class="comment">//dist生产的html以他为模板</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDev) &#123;</span><br><span class="line">    <span class="comment">// 客户端热更新需要的</span></span><br><span class="line">  config.entry = &#123;</span><br><span class="line">    app: [<span class="string">&quot;react-hot-loader/patch&quot;</span>, path.join(__dirname, <span class="string">&quot;../client/app.js&quot;</span>)]</span><br><span class="line">  &#125;;</span><br><span class="line">  config.devServer = &#123;</span><br><span class="line">    host: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="string">&quot;3000&quot;</span>,</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 默认会以根文件夹提供本地服务器，这里指定文件夹</span></span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    publicPath: <span class="string">&quot;/public/&quot;</span>,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      index: <span class="string">&quot;/public/index.html&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//热替换方法  来自webpack自带</span></span><br><span class="line">  config.plugins.push(<span class="keyword">new</span> webpack.HotModuleReplacementPlugin());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;build:client&quot;</span>: <span class="string">&quot;webpack --config  build/webpack.config.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build:server&quot;</span>: <span class="string">&quot;webpack --config  build/webpack.server.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;clear&quot;</span>: <span class="string">&quot;rimraf dist&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;npm run clear &amp;&amp; npm run build:client &amp;&amp; npm run build:server&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;node server/server.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dev:client&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="babelrc文件"><a href="#babelrc文件" class="headerlink" title=".babelrc文件"></a>.babelrc文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">      [<span class="string">&quot;es2015&quot;</span>, &#123; <span class="string">&quot;loose&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">      <span class="string">&quot;react&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;react-hot-loader/babel&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="要热更新的主文件"><a href="#要热更新的主文件" class="headerlink" title="要热更新的主文件"></a>要热更新的主文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./views/App.jsx&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;AppContainer&#125; <span class="keyword">from</span> <span class="string">&#x27;react-hot-loader&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">Component</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> renderMethod = <span class="built_in">module</span>.hot? ReactDOM.render : ReactDOM.hydrate</span><br><span class="line">    renderMethod(</span><br><span class="line">        &lt;AppContainer&gt;</span><br><span class="line">            &lt;Component/&gt;</span><br><span class="line">        &lt;/AppContainer&gt;,</span><br><span class="line">        root</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">render(App);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">&#x27;./views/App.jsx&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">         <span class="keyword">const</span> NextApp = <span class="built_in">require</span>(<span class="string">&#x27;./views/App.jsx&#x27;</span>).default;</span><br><span class="line">         render(NextApp)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这个叫Puppeteer的小爬虫，了解一下！</title>
      <link href="2018/05/01/%E8%BF%99%E4%B8%AA%E5%8F%ABPuppeteer%E7%9A%84%E5%B0%8F%E7%88%AC%E8%99%AB%EF%BC%8C%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%EF%BC%81/"/>
      <url>2018/05/01/%E8%BF%99%E4%B8%AA%E5%8F%ABPuppeteer%E7%9A%84%E5%B0%8F%E7%88%AC%E8%99%AB%EF%BC%8C%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>你讲会学到如何使用JavaScript自动化抓取网页里面感兴趣的内容。我们将会使用Puppeteer，Puppeteer是一个Node库，提供接口来控制headless Chrome。Headless Chrome是一种不使用Chrome来运行Chrome浏览器的方式。</p><p>如果你不知道Puppeteer，也不了解headless Chrome，那么你只要知道我们将要编写JavaScript代码来自动化控制Chrome就行。<br><a id="more"></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.fundebug.com/2017/11/01/guide-to-automating-scraping-the-web-with-js/first_book_inspect_copy.png"                      alt="image"                ></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install –save puppeteer</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="举例1-截屏"><a href="#举例1-截屏" class="headerlink" title="举例1 截屏"></a>举例1 截屏</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getPic</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;<span class="attr">headless</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://google.com&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.setViewport(&#123;<span class="attr">width</span>: <span class="number">1000</span>, <span class="attr">height</span>: <span class="number">500</span>&#125;)</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">&#x27;google.png&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getPic();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>第1行：引入我们需要的库Puppeteer；</li><li>第3-10行：主函数getPic()包含了所有的自动化代码；</li><li>第12行：调用getPic()函数。</li><li>第4行：<br>const broswer = await puppeteer.launch();<br>这行代码启动puppeteer，我们实际上启动了一个Chrome实例，并且和我们声明的browser变量绑定起来。因为我们使用了await关键字，该函数会暂停直到Promise完全被解析。也就是说成功创建Chrome实例或则报错。</li><li><p>第5行：<br>const page = await browser.newPage();<br>我们在浏览器中创建一个新的页面，通过使用await关键字来等待页面成功创建。</p></li><li><p>第6行：<br>await page.goto(‘<a class="link"   href="https://google.com&#39;)" >https://google.com&#39;)<i class="fas fa-external-link-alt"></i></a>;<br>使用page.goto()打开谷歌首页。</p></li><li><p>第7行：<br>await page.screenshot({path: ‘google.png’});<br>调用screenshot()函数将当前页面截屏。</p></li><li><p>第9行：<br>await browser.close();<br>将浏览器关闭。</p></li></ul><h2 id="举例2-百度关键字搜索"><a href="#举例2-百度关键字搜索" class="headerlink" title="举例2 百度关键字搜索"></a>举例2 百度关键字搜索</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 演示自动访问百度网站并抓取相关搜索关键词</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(</span><br><span class="line">      &#123;<span class="attr">headless</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>);</span><br><span class="line"> <span class="comment">// 焦点到搜索关键字输入框</span></span><br><span class="line">  <span class="keyword">await</span> page.focus(<span class="string">&#x27;#kw&#x27;</span>);</span><br><span class="line">  <span class="comment">// 输入关键字 Chrome Headless</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">&#x27;#kw&#x27;</span>, <span class="string">&#x27;Chrome Headless&#x27;</span>, &#123;<span class="attr">delay</span>: <span class="number">100</span>&#125;);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">await</span> page.click(<span class="string">&#x27;#su&#x27;</span>); <span class="comment">// 点击“百度一下”提交按钮</span></span><br><span class="line">  <span class="keyword">const</span> waitForElement = page.waitForSelector(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(3) &gt; th:nth-child(5) &gt; a&#x27;</span>, &#123;<span class="attr">visible</span>:<span class="literal">true</span>,<span class="attr">timeout</span>: <span class="number">3000</span>&#125;); <span class="comment">// 等待 3 秒或者页面显示完成 注释1</span></span><br><span class="line">  <span class="keyword">try</span> &#123;<span class="comment">// 此处是可能产生例外的语句</span></span><br><span class="line">    <span class="keyword">await</span> waitForElement;   　</span><br><span class="line">    <span class="keyword">var</span> kw = [];　 <span class="comment">// 注释2</span></span><br><span class="line">    kw[<span class="number">0</span>] = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(1) &gt; th:nth-child(1) &gt; a&#x27;</span>, <span class="function"><span class="params">el</span> =&gt;</span> el.innerHTML); <span class="comment">//注释3</span></span><br><span class="line">    kw[<span class="number">1</span>] = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(1) &gt; th:nth-child(3) &gt; a&#x27;</span>, <span class="function"><span class="params">el</span> =&gt;</span> el.innerHTML);</span><br><span class="line">    kw[<span class="number">2</span>] = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(1) &gt; th:nth-child(5) &gt; a&#x27;</span>, <span class="function"><span class="params">el</span> =&gt;</span> el.innerHTML);</span><br><span class="line">    kw[<span class="number">3</span>] = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(2) &gt; th:nth-child(1) &gt; a&#x27;</span>, <span class="function"><span class="params">el</span> =&gt;</span> el.innerHTML);</span><br><span class="line">    kw[<span class="number">4</span>] = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(2) &gt; th:nth-child(3) &gt; a&#x27;</span>, <span class="function"><span class="params">el</span> =&gt;</span> el.innerHTML);</span><br><span class="line">    kw[<span class="number">5</span>] = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(2) &gt; th:nth-child(5) &gt; a&#x27;</span>, <span class="function"><span class="params">el</span> =&gt;</span> el.innerHTML);</span><br><span class="line">    kw[<span class="number">6</span>] = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(3) &gt; th:nth-child(1) &gt; a&#x27;</span>, <span class="function"><span class="params">el</span> =&gt;</span> el.innerHTML);</span><br><span class="line">    kw[<span class="number">7</span>] = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(3) &gt; th:nth-child(3) &gt; a&#x27;</span>, <span class="function"><span class="params">el</span> =&gt;</span> el.innerHTML);</span><br><span class="line">    kw[<span class="number">8</span>] = <span class="keyword">await</span> page.$eval(<span class="string">&#x27;#rs &gt; table &gt; tbody &gt; tr:nth-child(3) &gt; th:nth-child(5) &gt; a&#x27;</span>, <span class="function"><span class="params">el</span> =&gt;</span> el.innerHTML);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;相关搜索关键词：&#x27;</span>);</span><br><span class="line">    <span class="comment">//遍历相关搜索关键词.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;kw.length;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(kw[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    　　  <span class="comment">// 此处是负责例外处理的语句</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;网页中没有找到相关搜索&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    　　  <span class="comment">// 此处是出口语句 　　</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  browser.close(); <span class="comment">// 关闭退出。可注释掉此行代码，便于观察最后的结果</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="举例3-抓取数据"><a href="#举例3-抓取数据" class="headerlink" title="举例3 抓取数据"></a>举例3 抓取数据</h2><blockquote><p>首先，了解一下<code>Puppeteer</code>的API。文档提供了非常丰富的方法不仅支持在网页上点击，而且可以填写表单，读取数据。</p><p>接下来我们会爬取<a class="link"   href="http://books.toscrape.com/" >Books to Scrape<i class="fas fa-external-link-alt"></i></a>，这是一个伪造的网上书店专门用来练习爬取数据。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&quot;puppeteer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延时器</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">time</span> =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, time);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行&quot;</span> + time + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * One 爬虫类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnePaChong</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 最大索引</span></span><br><span class="line">    <span class="built_in">this</span>.maxIndex = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化函数</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;正在启动浏览器...&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">      args: [<span class="string">&quot;--no-sandbox&quot;</span>],</span><br><span class="line">      dumpio: <span class="literal">false</span>,</span><br><span class="line">      headless: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;正在打开新页面...&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.page = <span class="keyword">await</span> <span class="built_in">this</span>.browser.newPage();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顺序爬取页面</span></span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">this</span>.maxIndex; i++) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">this</span>.getPageInfo(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.closeBrowser();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 抓取页面内容</span></span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="title">getPageInfo</span>(<span class="params">actPage</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 延时 1000 毫秒</span></span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;现在进入第&quot;</span> + actPage + <span class="string">&quot;页面&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> page = <span class="built_in">this</span>.page;</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">`http://books.toscrape.com/catalogue/page-<span class="subst">$&#123;actPage&#125;</span>.html`</span>,&#123;</span><br><span class="line">      waitUntil:<span class="string">&#x27;networkidle2&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 获取信息</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取文本</span></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> elements = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.product_pod&quot;</span>); <span class="comment">// 获取所有书籍元素</span></span><br><span class="line">        <span class="keyword">let</span> data = []; <span class="comment">// 初始化空数组来存储数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> element <span class="keyword">of</span> elements) &#123;</span><br><span class="line">          <span class="comment">// 循环</span></span><br><span class="line">          <span class="keyword">let</span> title = element.childNodes[<span class="number">5</span>].innerText; <span class="comment">// 获取标题</span></span><br><span class="line">          <span class="keyword">let</span> price = element.childNodes[<span class="number">7</span>].children[<span class="number">0</span>].innerText; <span class="comment">// 获取价格</span></span><br><span class="line">           data.push(&#123; title, price &#125;); <span class="comment">// 存入数组</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> arr = [...result]</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;-------------------------------------------- start&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;页面页码：&#x27;</span>, actPage);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;采集状态：&#x27;</span>, <span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;采集数据：&#x27;</span>, result);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;采集数据：&#x27;</span>, arr.length);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;-------------------------------------------- end&#x27;</span>)</span><br><span class="line">      process.send(result)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;-------------------------------------------- start&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;页面页码：&quot;</span>, actPage);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;采集状态：&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;错误信息：&quot;</span>, error);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;-------------------------------------------- end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 关闭浏览器</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">closeBrowser</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;正在关闭浏览器...&quot;</span>);</span><br><span class="line">    process.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.browser.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启用爬虫</span></span><br><span class="line"><span class="keyword">new</span> OnePaChong();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>1.类似分页抓取数据如何实现全部数据都抓取到（现在只能实现一个页面的抓取）然后传给数据库保存</p>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 个人常用命令</title>
      <link href="2018/04/26/Git%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2018/04/26/Git%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>刚进入新公司，被告知团队是用 Git 管理项目代码的，而你却从来没用过 <code>Git</code>。纵然同事告诉你「没事，先自学一下」「有问题可以问我」，但你肯定不想一进公司就花太多时间在自我学习上，也不想过多地打扰这些刚认识的同事。怎么办？</p><p>对你来说，最重要的是，先知道 Git 怎么用。先把最基本的掌握了，至于正规团队使用 Git 有什么额外要求、<code>Git</code> 有什么高级用法、Git 的原理这些，都可以放在这之后。万事开头难，你先把 <code>Git</code> 最基本的使用掌握了，后面的再一步一步来。…</p><a id="more"></a><h2 id="把远程仓库取到本地"><a href="#把远程仓库取到本地" class="headerlink" title="把远程仓库取到本地"></a>把远程仓库取到本地</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 你刚复制的地址</span><br></pre></td></tr></table></figure><h2 id="它会列出你的提交历史"><a href="#它会列出你的提交历史" class="headerlink" title="它会列出你的提交历史"></a>它会列出你的提交历史</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><h2 id="status-是用来查看工作目录当前状态的指令"><a href="#status-是用来查看工作目录当前状态的指令" class="headerlink" title="status 是用来查看工作目录当前状态的指令"></a><code>status</code> 是用来查看工作目录当前状态的指令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ol><li>你在 master branch</li><li>当前 branch 没有落后于 origin/master</li><li>你有 untracked files （未追踪的文件），文件名是 shopping list.txt。</li><li>你可以使用 git add 来开始追踪文件。…</li></ol><h2 id="你通过-add-指令暂存的内容，都会被写进这个文件里"><a href="#你通过-add-指令暂存的内容，都会被写进这个文件里" class="headerlink" title="你通过 add 指令暂存的内容，都会被写进这个文件里"></a>你通过 <code>add</code> 指令暂存的内容，都会被写进这个文件里</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h2 id="提交的方式是用-commit-指令"><a href="#提交的方式是用-commit-指令" class="headerlink" title="提交的方式是用 commit 指令"></a>提交的方式是用 commit 指令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><h2 id="提交一次或多次之后，把本地提交-push-到中央仓库（git-push）"><a href="#提交一次或多次之后，把本地提交-push-到中央仓库（git-push）" class="headerlink" title="提交一次或多次之后，把本地提交 push 到中央仓库（git push）"></a>提交一次或多次之后，把本地提交 <code>push</code> 到中央仓库（<code>git push</code>）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="你想创建一个叫做-“feature1”-的-branch-分支"><a href="#你想创建一个叫做-“feature1”-的-branch-分支" class="headerlink" title="你想创建一个叫做 “feature1” 的 branch 分支"></a>你想创建一个叫做 “feature1” 的 branch 分支</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch feature1</span><br><span class="line">git checkout -b feature1</span><br></pre></td></tr></table></figure><h2 id="切换-branch"><a href="#切换-branch" class="headerlink" title="切换 branch"></a>切换 branch</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature1</span><br></pre></td></tr></table></figure><h2 id="删除-branch"><a href="#删除-branch" class="headerlink" title="删除 branch"></a>删除 branch</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature1</span><br></pre></td></tr></table></figure><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge feature1</span><br></pre></td></tr></table></figure><h2 id="思维导图分享"><a href="#思维导图分享" class="headerlink" title="思维导图分享"></a>思维导图分享</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/git教程多看！！.png"                      alt="git流程图"                ></p><h2 id="常用-Git-命令总结"><a href="#常用-Git-命令总结" class="headerlink" title="常用 Git 命令总结"></a>常用 Git 命令总结</h2><hr><ul><li><p>git config –global user.name “你的名字” 让你全部的 Git 仓库绑定你的名字</p></li><li><p>git config –global user.email “你的邮箱” 让你全部的 Git 仓库绑定你的邮箱</p></li><li><p>git init 初始化你的仓库</p></li><li><p>git add . 把工作区的文件全部提交到暂存区</p></li><li><p>git add ./<file>/ 把工作区的 &lt; file &gt; 文件提交到暂存区</p></li><li><p>git commit -m “xxx” 把暂存区的所有文件提交到仓库区，暂存区空空荡荡</p></li><li><p>git remote add origin <a class="link"   href="https://github.com/name/name_cangku.git" >https://github.com/name/name_cangku.git<i class="fas fa-external-link-alt"></i></a> 把本地仓库与远程仓库连接起来</p></li><li><p>git push -u origin master 把仓库区的主分支 master 提交到远程仓库里</p></li><li><p>git push -u origin &lt;其他分支&gt; 把其他分支提交到远程仓库</p></li><li><p>git status 查看当前仓库的状态</p></li><li><p>git diff 查看文件修改的具体内容</p></li><li><p>git log 显示从最近到最远的提交历史</p></li><li><p>git clone + 仓库地址下载克隆文件</p></li><li><p>git reset –hard + 版本号 回溯版本，版本号在 commit 的时候与 master 跟随在一起</p></li><li><p>git reflog 显示命令历史</p></li><li><p>git checkout – <file> 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是 Git 世界的 ctrl + z</p></li><li><p>git rm 删除版本库的文件</p></li><li><p>git branch 查看当前所有分支</p></li><li><p>git branch &lt;分支名字&gt; 创建分支</p></li><li><p>git checkout &lt;分支名字&gt; 切换到分支</p></li><li><p>git merge &lt;分支名字&gt; 合并分支</p></li><li><p>git branch -d &lt;分支名字&gt; 删除分支, 有可能会删除失败，因为 Git 会保护没有被合并的分支</p></li><li><p>git branch -D + &lt;分支名字&gt; 强行删除，丢弃没被合并的分支</p></li><li><p>git log –graph 查看分支合并图</p></li><li><p>git merge –no-ff &lt;分支名字&gt; 合并分支的时候禁用 Fast forward 模式, 因为这个模式会丢失分支历史信息</p></li><li><p>git stash 当有其他任务插进来时，把当前工作现场 “存储” 起来, 以后恢复后继续工作</p></li><li><p>git stash list 查看你刚刚 “存放” 起来的工作去哪里了</p></li><li><p>git stash apply 恢复却不删除 stash 内容</p></li><li><p>git stash drop 删除 stash 内容</p></li><li><p>git stash pop 恢复的同时把 stash 内容也删了</p></li><li><p>git remote 查看远程库的信息，会显示 origin，远程仓库默认名称为 origin</p></li><li><p>git remote -v 显示更详细的信息</p></li><li><p>git pull 把最新的提交从远程仓库中抓取下来，在本地合并, 和 git push 相反</p></li><li><p>git rebase 把分叉的提交历史 “整理” 成一条直线，看上去更直观</p></li><li><p>git tag 查看所有标签，可以知道历史版本的 tag</p></li><li><p>git tag <name> 打标签，默认为 HEAD。比如 git tag v1.0</p></li><li><p>git tag <tagName> &lt; 版本号 &gt; 把版本号打上标签，版本号就是 commit 时，跟在旁边的一串字母数字</p></li><li><p>git show <tagName> 查看标签信息</p></li><li><p>git tag -a <tagName> -m “&lt; 说明 &gt;” 创建带说明的标签。-a 指定标签名，-m 指定说明文字</p></li><li><p>git tag -d <tagName> 删除标签</p></li><li><p>git push origin <tagname> 推送某个标签到远程</p></li><li><p>git push origin –tags 一次性推送全部尚未推送到远程的本地标签</p></li><li><p>git push origin :refs/tags/<tagname> 删除远程标签 &lt; tagname&gt;</p></li><li><p>git config –global color.ui true 让 Git 显示颜色，会让命令输出看起来更醒目</p></li><li><p>git add -f <file> 强制提交已忽略的的文件</p></li><li><p>git check-ignore -v <file> 检查为什么 Git 会忽略该文件</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿美团App（个人中心组件）</title>
      <link href="2018/04/26/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E4%B8%AA%E4%BA%BA%E4%B8%AD%E5%BF%83%E7%BB%84%E4%BB%B6%EF%BC%89/"/>
      <url>2018/04/26/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E4%B8%AA%E4%BA%BA%E4%B8%AD%E5%BF%83%E7%BB%84%E4%BB%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>写一个个人中心组件<br><a id="more"></a></p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/TIM%E6%88%AA%E5%9B%BE20180426142012.png"                      alt="image"                ></p><h1 id="虚拟数据"><a href="#虚拟数据" class="headerlink" title="虚拟数据"></a>虚拟数据</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">getDataList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            [</span><br><span class="line">                [</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;我的钱包&#x27;</span>, <span class="attr">subtitle</span>: <span class="string">&#x27;办信用卡&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_wallet.png&#x27;</span>)&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;余额&#x27;</span>, <span class="attr">subtitle</span>: <span class="string">&#x27;￥95872385&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_balance.png&#x27;</span>)&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;抵用券&#x27;</span>, <span class="attr">subtitle</span>: <span class="string">&#x27;63&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_voucher.png&#x27;</span>)&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;会员卡&#x27;</span>, <span class="attr">subtitle</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_membercard.png&#x27;</span>)&#125;</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;好友去哪&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_friends.png&#x27;</span>)&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;我的评价&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_comment.png&#x27;</span>)&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;我的收藏&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_collection.png&#x27;</span>)&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;会员中心&#x27;</span>, <span class="attr">subtitle</span>: <span class="string">&#x27;v15&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_membercenter.png&#x27;</span>)&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;积分商城&#x27;</span>, <span class="attr">subtitle</span>: <span class="string">&#x27;好礼已上线&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_member.png&#x27;</span>)&#125;</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;客服中心&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_customerService.png&#x27;</span>)&#125;,</span><br><span class="line">                    &#123;<span class="attr">title</span>: <span class="string">&#x27;关于美团&#x27;</span>, <span class="attr">subtitle</span>: <span class="string">&#x27;我要合作&#x27;</span>, <span class="attr">image</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/icon_mine_aboutmeituan.png&#x27;</span>)&#125;</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">renderHeader = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">           &lt;View style=&#123;styles.header&#125;&gt;</span><br><span class="line">               &lt;Image</span><br><span class="line">                   style=&#123;styles.avatar&#125;</span><br><span class="line">                   source=&#123;<span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/avatar.png&#x27;</span>)&#125;</span><br><span class="line">               /&gt;</span><br><span class="line">               &lt;View&gt;</span><br><span class="line">                   &lt;View style=&#123;&#123;<span class="attr">flexDirection</span>: <span class="string">&#x27;row&#x27;</span>, <span class="attr">alignItems</span>: <span class="string">&#x27;center&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">                       &lt;Heading2 style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>&#125;&#125;&gt;大保健&lt;/Heading2&gt;</span><br><span class="line">                       &lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">&#x27;../../img/mine/beauty_technician_v15.png&#x27;</span>)&#125; /&gt;</span><br><span class="line">                   &lt;/View&gt;</span><br><span class="line">                   &lt;Paragraph style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">marginTop</span>: <span class="number">10</span>&#125;&#125;&gt;个人信息 &gt;&lt;/Paragraph&gt;</span><br><span class="line">               &lt;/View&gt;</span><br><span class="line">           &lt;/View&gt;</span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">backgroundColor</span>: color.paper&#125;&#125;&gt;</span><br><span class="line">            &lt;View style=&#123;styles.headerBackground&#125; /&gt;</span><br><span class="line">            &lt;ScrollView</span><br><span class="line">                refreshControl=&#123;</span><br><span class="line">                    &lt;RefreshControl</span><br><span class="line">                        refreshing=&#123;<span class="built_in">this</span>.state.isRefreshing&#125;</span><br><span class="line">                        onRefresh=&#123;<span class="built_in">this</span>.onHeaderRefresh&#125;</span><br><span class="line">                        tintColor=<span class="string">&#x27;gray&#x27;</span></span><br><span class="line">                    /&gt;</span><br><span class="line">                &#125;</span><br><span class="line">            &gt;</span><br><span class="line">                &#123;<span class="built_in">this</span>.renderHeader()&#125;</span><br><span class="line">                &lt;SpacingView /&gt;</span><br><span class="line">                &#123;<span class="built_in">this</span>.renderCells()&#125;</span><br><span class="line">            &lt;/ScrollView&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="renderCells方法-2个for循环-分解成三块内容显示-每一快的组件DetailCell"><a href="#renderCells方法-2个for循环-分解成三块内容显示-每一快的组件DetailCell" class="headerlink" title="renderCells方法 2个for循环 分解成三块内容显示 每一快的组件DetailCell"></a>renderCells方法 2个for循环 分解成三块内容显示 每一快的组件DetailCell</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">renderCells = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> cells = []</span><br><span class="line">       <span class="keyword">let</span> dataList = <span class="built_in">this</span>.getDataList()</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataList.length; i++) &#123;</span><br><span class="line">           <span class="keyword">let</span> sublist = dataList[i]</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; sublist.length; j++) &#123;</span><br><span class="line">               <span class="keyword">let</span> data = sublist[j]</span><br><span class="line">               <span class="keyword">let</span> cell = (</span><br><span class="line">                   &lt;DetailCell</span><br><span class="line">                       key=&#123;data.title&#125;</span><br><span class="line">                       title=&#123;data.title&#125;</span><br><span class="line">                       subtitle=&#123;data.subtitle&#125;</span><br><span class="line">                       image=&#123;data.image&#125;</span><br><span class="line">                   /&gt;</span><br><span class="line">               )</span><br><span class="line">               cells.push(cell)</span><br><span class="line">           &#125;</span><br><span class="line">           cells.push(</span><br><span class="line">               &lt;SpacingView key=&#123;i&#125; /&gt;</span><br><span class="line">           )</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">           &lt;View&gt;</span><br><span class="line">               &#123;cells&#125;</span><br><span class="line">           &lt;/View&gt;</span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="DetailCell-js"><a href="#DetailCell-js" class="headerlink" title="DetailCell.js"></a>DetailCell.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailCell</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;  &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;image,title,subtitle,style&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">        <span class="keyword">let</span> iconElement = <span class="built_in">this</span>.props.image &amp;&amp; (</span><br><span class="line">            &lt;Image style=&#123;styles.icon&#125; source=&#123;image&#125;/&gt;</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;TouchableOpacity &gt;</span><br><span class="line">                  &lt;View style=&#123;[styles.container,style]&#125;&gt;</span><br><span class="line">                     &#123;iconElement&#125;</span><br><span class="line">                     &lt;Heading3&gt;&#123;title&#125;&lt;/Heading3&gt;</span><br><span class="line">                     &lt;View style=&#123;&#123;<span class="attr">flex</span>:<span class="number">1</span>&#125;&#125;/&gt;</span><br><span class="line">                     &lt;Paragraph style=&#123;&#123;<span class="attr">color</span>:<span class="string">&#x27;#999&#x27;</span>&#125;&#125;&gt;&#123;subtitle&#125;&lt;/Paragraph&gt;</span><br><span class="line">                     &lt;Image style=&#123;styles.arrow&#125; source=&#123;<span class="built_in">require</span>(<span class="string">&#x27;../img/public/cell_arrow.png&#x27;</span>)&#125; /&gt;</span><br><span class="line">                  &lt;/View&gt;</span><br><span class="line">                  &lt;Separator/&gt;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">    )&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿美团App（猜你喜欢部分组件）</title>
      <link href="2018/04/25/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E7%8C%9C%E4%BD%A0%E5%96%9C%E6%AC%A2%E9%83%A8%E5%88%86%E7%BB%84%E4%BB%B6%EF%BC%89/"/>
      <url>2018/04/25/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E7%8C%9C%E4%BD%A0%E5%96%9C%E6%AC%A2%E9%83%A8%E5%88%86%E7%BB%84%E4%BB%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>写一个猜你喜欢组件<br><a id="more"></a></p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/TIM%E6%88%AA%E5%9B%BE20180426140623.png"                      alt="image"                ></p><h1 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击详情跳转</span></span><br><span class="line"> <span class="function"><span class="title">onCellSelected</span>(<span class="params">info</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.props.navigation.navigate(<span class="string">&quot;GroupPurchaseScene&quot;</span>, &#123; <span class="attr">info</span>: info &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> renderItem = <span class="function"><span class="params">rowData</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     &lt;GroupPurchaseCell</span><br><span class="line">       onPress=&#123;<span class="built_in">this</span>.onCellSelected.bind(<span class="built_in">this</span>)&#125;</span><br><span class="line">       info=&#123;rowData.item&#125;</span><br><span class="line">     /&gt;</span><br><span class="line">   );</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="GroupPurchaseCell-js"><a href="#GroupPurchaseCell-js" class="headerlink" title="GroupPurchaseCell.js"></a>GroupPurchaseCell.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupPurchaseCell</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; info, onPress, waiting &#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">let</span> imageUrl = info.imageUrl.replace(<span class="string">&quot;w.h&quot;</span>, <span class="string">&quot;160.0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;TouchableOpacity</span><br><span class="line">        style=&#123;styles.container&#125;</span><br><span class="line">        onPress=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          NoDoublePress.onPress(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            onPress(info);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;Image style=&#123;styles.icon&#125; source=&#123;&#123; <span class="attr">uri</span>: imageUrl &#125;&#125; /&gt;</span><br><span class="line">        &lt;View style=&#123;styles.rightContainer&#125;&gt;</span><br><span class="line">          &lt;Heading2&gt;&#123;info.title&#125;&lt;/Heading2&gt;</span><br><span class="line">          &lt;Paragraph numberOfLines=&#123;<span class="number">0</span>&#125; style=&#123;&#123; <span class="attr">marginTop</span>: <span class="number">8</span> &#125;&#125;&gt;</span><br><span class="line">            &#123;info.subtitle&#125;</span><br><span class="line">          &lt;/Paragraph&gt;</span><br><span class="line">          &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">justifyContent</span>: <span class="string">&quot;flex-end&quot;</span> &#125;&#125;&gt;</span><br><span class="line">            &lt;Heading2 style=&#123;styles.price&#125;&gt;&#123;info.price&#125;元&lt;/Heading2&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/TouchableOpacity&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>详情页面效果图</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/TIM%E6%88%AA%E5%9B%BE20180426141130.png"                      alt="image"                ></p><h1 id="GroupPurchaseScene-js"><a href="#GroupPurchaseScene-js" class="headerlink" title="GroupPurchaseScene.js"></a>GroupPurchaseScene.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupPurchaseScene</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">    headerTitle: <span class="string">&quot;团购详情&quot;</span>,</span><br><span class="line">    headerRight: (</span><br><span class="line">      &lt;NavigationItem</span><br><span class="line">        icon=&#123;<span class="built_in">require</span>(<span class="string">&quot;../../img/public/icon_navigationItem_share.png&quot;</span>)&#125;</span><br><span class="line">        onPress=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          alert(<span class="string">&quot;share&quot;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    ),</span><br><span class="line">    headerStyle:&#123;</span><br><span class="line">      borderBottomWidth: <span class="number">0</span>, <span class="comment">//取消底部阴影</span></span><br><span class="line">      elevation: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; info &#125; = <span class="built_in">this</span>.props.navigation.state.params;</span><br><span class="line">    <span class="keyword">let</span> imageUrl = info.imageUrl.replace(<span class="string">&quot;w.h&quot;</span>, <span class="string">&quot;480.0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;Image source=&#123;&#123; <span class="attr">uri</span>: imageUrl &#125;&#125; style=&#123;styles.banner&#125; /&gt;</span><br><span class="line">          &lt;View style=&#123;styles.topContainer&#125;&gt;</span><br><span class="line">            &lt;Heading2 style=&#123;&#123; <span class="attr">color</span>: color.primary &#125;&#125;&gt;￥&lt;/Heading2&gt;</span><br><span class="line">            &lt;Heading1 style=&#123;&#123; <span class="attr">marginBottom</span>: -<span class="number">8</span> &#125;&#125;&gt;&#123;info.price&#125;&lt;/Heading1&gt;</span><br><span class="line">            &lt;Paragraph style=&#123;&#123; <span class="attr">marginLeft</span>: <span class="number">10</span> &#125;&#125;&gt;</span><br><span class="line">              门市价：￥&#123;(info.price * <span class="number">1.1</span>).toFixed(<span class="number">0</span>)&#125;</span><br><span class="line">            &lt;/Paragraph&gt;</span><br><span class="line">            &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span> &#125;&#125; /&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">                            title=<span class="string">&#x27;立即抢购&#x27;</span></span><br><span class="line">                            titleStyle=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">fontSize</span>: <span class="number">18</span>&#125;&#125;</span><br><span class="line">                            style=&#123;styles.buyButton&#125;</span><br><span class="line">                        /&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Separator /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View style=&#123;styles.tagContainer&#125;&gt;</span><br><span class="line">          &lt;Image</span><br><span class="line">            style=&#123;&#123; <span class="attr">width</span>: <span class="number">20</span>, <span class="attr">height</span>: <span class="number">20</span> &#125;&#125;</span><br><span class="line">            source=&#123;<span class="built_in">require</span>(<span class="string">&quot;../../img/home/icon_deal_anytime_refund.png&quot;</span>)&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;Paragraph style=&#123;&#123; <span class="attr">color</span>: <span class="string">&quot;#89B24F&quot;</span> &#125;&#125;&gt; 随时退&lt;/Paragraph&gt;</span><br><span class="line">          &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span> &#125;&#125; /&gt;</span><br><span class="line">          &lt;Paragraph&gt;已售<span class="number">123</span>&lt;/Paragraph&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿美团App（团购部分组件）</title>
      <link href="2018/04/24/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E5%9B%A2%E8%B4%AD%E9%83%A8%E5%88%86%E7%BB%84%E4%BB%B6%EF%BC%89/"/>
      <url>2018/04/24/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E5%9B%A2%E8%B4%AD%E9%83%A8%E5%88%86%E7%BB%84%E4%BB%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>写一个中间团购部分组件<br><a id="more"></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/TIM%E6%88%AA%E5%9B%BE20180426134926.png"                      alt="image"                ></p><h1 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求</span></span><br><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.requestData();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">requestData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="built_in">this</span>.requestRecommend();</span><br><span class="line"><span class="comment">//团购加载</span></span><br><span class="line"><span class="built_in">this</span>.requestDiscount();</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//团购加载</span></span><br><span class="line">requestDiscount = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(api.discount);</span><br><span class="line">  <span class="keyword">let</span> json = <span class="keyword">await</span> response.json();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;json&quot;</span> + <span class="built_in">JSON</span>.stringify(json));</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">discounts</span>: json.data &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  alert(<span class="string">&quot;error &quot;</span> + error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">onGridSelected = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;进来了&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.props.navigation.navigate(<span class="string">&quot;WebScreen&quot;</span>, &#123; <span class="attr">url</span>: url &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;SpacingView /&gt;</span><br><span class="line">    &lt;HomeGridView</span><br><span class="line">      infos=&#123;<span class="built_in">this</span>.state.discounts&#125;</span><br><span class="line">      onGridSelected=&#123;<span class="built_in">this</span>.onGridSelected&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;SpacingView /&gt;</span><br></pre></td></tr></table></figure><h1 id="HomeGridVie-js"><a href="#HomeGridVie-js" class="headerlink" title="HomeGridVie.js"></a>HomeGridVie.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeGridView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;infos, onGridSelected&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &#123;infos.map(<span class="function">(<span class="params">info, index</span>) =&gt;</span> (</span><br><span class="line">                    &lt;HomeGridItem</span><br><span class="line">                        key=&#123;index&#125;</span><br><span class="line">                        info=&#123;info&#125;</span><br><span class="line">                        onPress=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                            onGridSelected(index)</span><br><span class="line">                        &#125;&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                ))&#125;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HomeGridItem-js"><a href="#HomeGridItem-js" class="headerlink" title="HomeGridItem.js"></a>HomeGridItem.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeGridItem</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;info, onPress&#125; = <span class="built_in">this</span>.props</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> title = info.title;</span><br><span class="line">        <span class="keyword">let</span> subtitle = info.subtitle;</span><br><span class="line">        <span class="keyword">let</span> imageUrl = info.image</span><br><span class="line">        <span class="keyword">let</span> color = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">        <span class="comment">// let title = info.maintitle</span></span><br><span class="line">        <span class="comment">// let color = info.typeface_color</span></span><br><span class="line">        <span class="comment">// let subtitle = info.deputytitle</span></span><br><span class="line">        <span class="comment">// let imageUrl = info.imageurl.replace(&#x27;w.h&#x27;, &#x27;120.0&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;TouchableOpacity style=&#123;styles.container&#125; onPress=&#123;onPress&#125;&gt;</span><br><span class="line">                &lt;View&gt;</span><br><span class="line">                    &lt;Heading2 style=&#123;&#123;<span class="attr">color</span>: color, <span class="attr">marginBottom</span>: <span class="number">10</span>&#125;&#125;&gt;&#123;title&#125;&lt;/Heading2&gt;</span><br><span class="line">                    &lt;Heading3&gt;&#123;subtitle&#125;&lt;/Heading3&gt;</span><br><span class="line">                &lt;/View&gt;</span><br><span class="line">                &lt;Image style=&#123;styles.icon&#125; source=&#123;&#123;<span class="attr">uri</span>: imageUrl&#125;&#125; /&gt;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿美团App（头部导航）</title>
      <link href="2018/04/22/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E5%A4%B4%E9%83%A8%E5%AF%BC%E8%88%AA%EF%BC%89/"/>
      <url>2018/04/22/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E5%A4%B4%E9%83%A8%E5%AF%BC%E8%88%AA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>首先App开始写一个头部导航按钮<br><a id="more"></a></p><p>效果图如下<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/tabbar.png"                      alt="image"                ></p><p>注意<br>安卓环境下默认状态栏是要单独设置的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;StatusBar backgroundColor=&#123;color.primary&#125; barStyle=<span class="string">&quot;light-content&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">   headerTitle: (</span><br><span class="line">     &lt;TouchableOpacity style=&#123;styles.searchBar&#125;&gt;</span><br><span class="line">       &lt;Image</span><br><span class="line">         source=&#123;<span class="built_in">require</span>(<span class="string">&quot;../../img/home/search_icon.png&quot;</span>)&#125;</span><br><span class="line">         style=&#123;styles.searchIcon&#125;</span><br><span class="line">       /&gt;</span><br><span class="line">       &lt;Text&gt;搜索&lt;/Text&gt;</span><br><span class="line">     &lt;/TouchableOpacity&gt;</span><br><span class="line">   ),</span><br><span class="line">   headerLeft: <span class="xml"><span class="tag">&lt;<span class="name">NavigationItem</span> <span class="attr">title</span>=<span class="string">&quot;定位&quot;</span> <span class="attr">titleStyle</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">white</span>&quot; &#125;&#125; /&gt;</span></span>,</span><br><span class="line">   headerRight: (</span><br><span class="line">     &lt;NavigationItem</span><br><span class="line">       icon=&#123;<span class="built_in">require</span>(<span class="string">&quot;../../img/mine/icon_navigationItem_message_white.png&quot;</span>)&#125;</span><br><span class="line">       onPress=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         navigation.navigate(<span class="string">&quot;WebScene&quot;</span>);</span><br><span class="line">       &#125;&#125;</span><br><span class="line">     /&gt;</span><br><span class="line">   ),</span><br><span class="line">   headerStyle: &#123; <span class="attr">backgroundColor</span>: color.primary &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="NavigationItem-js组件"><a href="#NavigationItem-js组件" class="headerlink" title="NavigationItem.js组件"></a>NavigationItem.js组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavigationItem</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> titleElement = <span class="built_in">this</span>.props.title &amp;&amp; (</span><br><span class="line">            &lt;Text style=&#123;[styles.title, <span class="built_in">this</span>.props.titleStyle]&#125;&gt;&#123;<span class="built_in">this</span>.props.title&#125;&lt;/Text&gt;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> iconElement = <span class="built_in">this</span>.props.icon &amp;&amp; (</span><br><span class="line">            &lt;Image style=&#123;[styles.icon, <span class="built_in">this</span>.props.iconStyle]&#125; source=&#123;<span class="built_in">this</span>.props.icon&#125; /&gt;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;TouchableOpacity onPress=&#123;<span class="built_in">this</span>.props.onPress&#125;&gt;</span><br><span class="line">                &#123;iconElement&#125;</span><br><span class="line">                &#123;titleElement&#125;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿美团App（底部导航）</title>
      <link href="2018/04/21/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%EF%BC%89/"/>
      <url>2018/04/21/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>首先App开始写一个底部导航按钮<br><a id="more"></a></p><p>效果图如下<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/tabbar.png"                      alt="image"                ></p><h6 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h6><p>安卓默认位置Top<br>iOS默认位置是 bottom<br>组件化思想封装的重要性</p><h4 id="react-navigation-标题在安卓上不居中问题"><a href="#react-navigation-标题在安卓上不居中问题" class="headerlink" title="react-navigation 标题在安卓上不居中问题"></a>react-navigation 标题在安卓上不居中问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">headerTitleStyle:&#123;</span><br><span class="line">       flex: <span class="number">1</span>,</span><br><span class="line">        textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">      headerTintColor:<span class="string">&#x27;#000&#x27;</span>,</span><br><span class="line">      headerBackTitle:<span class="literal">null</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="react-navigation-导航去掉下面边框，阴影"><a href="#react-navigation-导航去掉下面边框，阴影" class="headerlink" title="react-navigation 导航去掉下面边框，阴影"></a>react-navigation 导航去掉下面边框，阴影</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">        headerStyle:&#123;</span><br><span class="line">            borderBottomWidth: <span class="number">0</span>,</span><br><span class="line">            elevation: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="react-native-防止重复点击"><a href="#react-native-防止重复点击" class="headerlink" title="react-native 防止重复点击"></a>react-native 防止重复点击</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> NoDoublePress = &#123;</span><br><span class="line">    lastPressTime: <span class="number">1</span>,</span><br><span class="line">    <span class="function"><span class="title">onPress</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> curTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">if</span> (curTime - <span class="built_in">this</span>.lastPressTime &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.lastPressTime = curTime;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = NoDoublePress;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyButton</span><br><span class="line">    onPress=&#123;() =&gt; &#123;</span><br><span class="line">        NoDoublePress.onPress(() =&gt; &#123;</span><br><span class="line">            this.onPressLogin();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">Text</span>&gt;</span> 登 录 <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyButton</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootScene</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Navigation/&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Tab = TabNavigator(&#123;</span><br><span class="line">    Home: &#123;</span><br><span class="line">        screen: HomeScene,</span><br><span class="line">        navigationOptions: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">            tabBarLabel: <span class="string">&#x27;团购&#x27;</span>,</span><br><span class="line">            tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">                &lt;TabBarItem</span><br><span class="line">                    tintColor=&#123;tintColor&#125;</span><br><span class="line">                    focused=&#123;focused&#125;</span><br><span class="line">                    normalImage=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./img/tabbar/tabbar_homepage.png&#x27;</span>)&#125;</span><br><span class="line">                    selectedImage=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./img/tabbar/tabbar_homepage_selected.png&#x27;</span>)&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    Nearby: &#123;</span><br><span class="line">        screen: NearbyScene,</span><br><span class="line">        navigationOptions: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">            tabBarLabel: <span class="string">&#x27;附近&#x27;</span>,</span><br><span class="line">            tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">                &lt;TabBarItem</span><br><span class="line">                    tintColor=&#123;tintColor&#125;</span><br><span class="line">                    focused=&#123;focused&#125;</span><br><span class="line">                    normalImage=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./img/tabbar/tabbar_merchant.png&#x27;</span>)&#125;</span><br><span class="line">                    selectedImage=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./img/tabbar/tabbar_merchant_selected.png&#x27;</span>)&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    Order: &#123;</span><br><span class="line">        screen: OrderScene,</span><br><span class="line">        navigationOptions: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">            tabBarLabel: <span class="string">&#x27;订单&#x27;</span>,</span><br><span class="line">            tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">                &lt;TabBarItem</span><br><span class="line">                    tintColor=&#123;tintColor&#125;</span><br><span class="line">                    focused=&#123;focused&#125;</span><br><span class="line">                    normalImage=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./img/tabbar/tabbar_order.png&#x27;</span>)&#125;</span><br><span class="line">                    selectedImage=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./img/tabbar/tabbar_order_selected.png&#x27;</span>)&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    Mine: &#123;</span><br><span class="line">        screen: MineScene,</span><br><span class="line">        navigationOptions: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">            tabBarLabel: <span class="string">&#x27;我的&#x27;</span>,</span><br><span class="line">            tabBarIcon: <span class="function">(<span class="params">&#123;focused, tintColor&#125;</span>) =&gt;</span> (</span><br><span class="line">                &lt;TabBarItem</span><br><span class="line">                    tintColor=&#123;tintColor&#125;</span><br><span class="line">                    focused=&#123;focused&#125;</span><br><span class="line">                    normalImage=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./img/tabbar/tabbar_mine.png&#x27;</span>)&#125;</span><br><span class="line">                    selectedImage=&#123;<span class="built_in">require</span>(<span class="string">&#x27;./img/tabbar/tabbar_mine_selected.png&#x27;</span>)&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">      <span class="comment">//第二个参数代表</span></span><br><span class="line">        tabBarComponent: TabBarBottom,  <span class="comment">//tab要用的组件</span></span><br><span class="line">        tabBarPosition: <span class="string">&#x27;bottom&#x27;</span>,       <span class="comment">//tab位置选择</span></span><br><span class="line">        lazy: <span class="literal">true</span>,                   <span class="comment">// true代表只加载当前</span></span><br><span class="line">        animationEnabled:<span class="literal">false</span>,                <span class="comment">//是否有动画</span></span><br><span class="line">        swipeEnabled:<span class="literal">false</span>,                     <span class="comment">//切换动画  </span></span><br><span class="line">        tabBarOptions: &#123;</span><br><span class="line">            activeTintColor:color.primary,    <span class="comment">//激活图标颜色</span></span><br><span class="line">            inactiveTintColor:color.gray,     <span class="comment">//非激活状态颜色</span></span><br><span class="line">            style: &#123;<span class="attr">backgroundColor</span>: <span class="string">&#x27;white&#x27;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Navigation = StackNavigator(&#123;</span><br><span class="line">    Tab:&#123;<span class="attr">screen</span>:Tab&#125;,</span><br><span class="line">    WebScreen:&#123;</span><br><span class="line">        screen:WebScreen</span><br><span class="line">    &#125;,</span><br><span class="line">    GroupPurchaseScene:&#123;</span><br><span class="line">       screen:GroupPurchaseScene</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;,&#123;</span><br><span class="line">   navigationOptions:&#123;</span><br><span class="line">       headerTintColor:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RootScene</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TabBarItem-js"><a href="#TabBarItem-js" class="headerlink" title="TabBarItem.js"></a>TabBarItem.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabBarItem</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;focused, selectedImage, normalImage, tintColor&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Image</span><br><span class="line">                source=&#123;focused ? selectedImage : normalImage&#125;</span><br><span class="line">                style=&#123;&#123;<span class="attr">tintColor</span>: tintColor, <span class="attr">width</span>: <span class="number">25</span>, <span class="attr">height</span>: <span class="number">25</span>&#125;&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿美团App（轮播导航组件）</title>
      <link href="2018/04/21/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E8%BD%AE%E6%92%AD%E5%AF%BC%E8%88%AA%E7%BB%84%E4%BB%B6%EF%BC%89/"/>
      <url>2018/04/21/%E4%BB%BF%E7%BE%8E%E5%9B%A2App%EF%BC%88%E8%BD%AE%E6%92%AD%E5%AF%BC%E8%88%AA%E7%BB%84%E4%BB%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>写一个头部轮播菜单导航组件<br><a id="more"></a></p><p>效果图</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/TIM%E5%9B%BE%E7%89%8720180420183305.png"                      alt="image"                ></p><p>注意<br>循环事件的获取<br>点击事件的获取</p><h1 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;HomeMenuView</span><br><span class="line">         menuInfos=&#123;api.menuInfos&#125;</span><br><span class="line">         onMenuSelected=&#123;<span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">           alert(<span class="string">&quot;test &quot;</span> + index);</span><br><span class="line">         &#125;&#125;</span><br><span class="line">       /&gt;</span><br></pre></td></tr></table></figure><h1 id="小圆点组件"><a href="#小圆点组件" class="headerlink" title="小圆点组件"></a>小圆点组件</h1><p>import PageControl from ‘react-native-page-control’</p><h1 id="HomeMenuView-js"><a href="#HomeMenuView-js" class="headerlink" title="HomeMenuView.js"></a>HomeMenuView.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HomeMenuView</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            currentPage: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//手势移动计算偏移量  </span></span><br><span class="line">    onScroll = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = e.nativeEvent.contentOffset.x</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;x  &#x27;</span>+x)</span><br><span class="line">        <span class="keyword">let</span> currentPage = <span class="built_in">Math</span>.round(x / screen.width)</span><br><span class="line">        <span class="built_in">console</span>.log(currentPage)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state.currentPage != currentPage) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">currentPage</span>: currentPage&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> &#123;menuInfos, onMenuSelected&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="comment">//根据请求过来的图片数量分页</span></span><br><span class="line">        <span class="keyword">let</span> pageCount = <span class="built_in">Math</span>.ceil(menuInfos.length / <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//图标组件</span></span><br><span class="line">        <span class="keyword">let</span> menuElements = menuInfos.map(<span class="function">(<span class="params">info, index</span>) =&gt;</span> (</span><br><span class="line">            &lt;HomeMenuItem</span><br><span class="line">                key=&#123;index&#125;</span><br><span class="line">                title=&#123;info.title&#125;</span><br><span class="line">                icon=&#123;info.icon&#125;</span><br><span class="line">                onPress=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    onMenuSelected &amp;&amp; onMenuSelected(index)</span><br><span class="line">                &#125;&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        ))</span><br><span class="line">        <span class="keyword">let</span> menuViews = []</span><br><span class="line">         <span class="comment">//每一页都有图标  循环得到</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pageCount; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> elementsPerPage = menuElements.slice(i * <span class="number">10</span>, i * <span class="number">10</span> + <span class="number">10</span>)</span><br><span class="line">            <span class="keyword">let</span> menuView = (</span><br><span class="line">                &lt;View key=&#123;i&#125; style=&#123;styles.itemsView&#125;&gt;</span><br><span class="line">                    &#123;elementsPerPage&#125;</span><br><span class="line">                &lt;/View&gt;</span><br><span class="line">            )</span><br><span class="line">            menuViews.push(menuView)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(menuViews)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &lt;ScrollView</span><br><span class="line">                    horizontal</span><br><span class="line">                    pagingEnabled</span><br><span class="line">                    showsHorizontalScrollIndicator=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">                    onScroll=&#123;<span class="built_in">this</span>.onScroll&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;View style=&#123;styles.menuContainer&#125;&gt;</span><br><span class="line">                        &#123;menuViews&#125;</span><br><span class="line">                    &lt;/View&gt;</span><br><span class="line">                &lt;/ScrollView&gt;</span><br><span class="line">                <span class="comment">//小圆点组件</span></span><br><span class="line">                &lt;PageControl</span><br><span class="line">                    style=&#123;styles.pageControl&#125;</span><br><span class="line">                    numberOfPages=&#123;pageCount&#125;</span><br><span class="line">                    currentPage=&#123;<span class="built_in">this</span>.state.currentPage&#125;</span><br><span class="line">                    pageIndicatorTintColor=<span class="string">&#x27;gray&#x27;</span></span><br><span class="line">                    currentPageIndicatorTintColor=&#123;color.primary&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HomeMenuItem-js"><a href="#HomeMenuItem-js" class="headerlink" title="HomeMenuItem.js"></a>HomeMenuItem.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeMenuItem</span> <span class="keyword">extends</span> <span class="title">PureComponent</span>&lt;<span class="title">Props</span>, <span class="title">State</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;title, icon, onPress&#125; = <span class="built_in">this</span>.props</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;TouchableOpacity onPress=&#123;onPress&#125; style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &lt;Image source=&#123;icon&#125; style=&#123;styles.icon&#125; /&gt;</span><br><span class="line">                &lt;Text&gt;&#123;title&#125;&lt;/Text&gt;</span><br><span class="line">            &lt;/TouchableOpacity&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/TIM%E6%88%AA%E5%9B%BE20180420181138.png"                      alt="image"                ></p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几分钟带你入门-ES7异步神器async-await</title>
      <link href="2018/04/12/%E5%87%A0%E5%88%86%E9%92%9F%E5%B8%A6%E4%BD%A0%E5%85%A5%E9%97%A8-ES7%E5%BC%82%E6%AD%A5%E7%A5%9E%E5%99%A8async-awaitasync/"/>
      <url>2018/04/12/%E5%87%A0%E5%88%86%E9%92%9F%E5%B8%A6%E4%BD%A0%E5%85%A5%E9%97%A8-ES7%E5%BC%82%E6%AD%A5%E7%A5%9E%E5%99%A8async-awaitasync/</url>
      
        <content type="html"><![CDATA[<p>关于异步处理，ES5的回调使我们陷入地狱，ES6的Promise使我们脱离魔障，终于、ES7的async-await带我们走向光明。————-哎姓克哎喂特<br><a id="more"></a></p><h1 id="async-await和Promise的关系"><a href="#async-await和Promise的关系" class="headerlink" title="async-await和Promise的关系"></a>async-await和Promise的关系</h1><h2 id="最近更新2019-06-21"><a href="#最近更新2019-06-21" class="headerlink" title="最近更新2019-06-21"></a>最近更新2019-06-21</h2><p>经常会看到有了 async-await、promise 还有必要学习吗、async await优于promise的几个特点，接收了这些信息后，就蒙圈了。现在才知道，async-await是promise和generator的语法糖。只是为了让我们书写代码时更加流畅，当然也增强了代码的可读性。简单来说：async-await 是建立在 promise机制之上的，并不能取代其地位。</p><p>基本语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">basicDemo</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="built_in">console</span>.log(result); </span><br><span class="line">&#125; </span><br><span class="line">basicDemo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sleep = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(resolve);</span><br><span class="line">      <span class="built_in">console</span>.log(reject);</span><br><span class="line">      reject(<span class="string">&quot;这里返回错误&quot;</span>);</span><br><span class="line">    <span class="comment">//   resolve(&#x27;这里返回正确&#x27;)</span></span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> start = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 在这里使用起来就像同步代码那样直观</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ok  &#x27;</span>+res);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;错误返回  &#x27;</span>+error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>举例说明啊，</li><li>你有三个请求需要发生，</li><li>第三个请求是依赖于第二个请求的解构第二个请求依赖于第一个请求的结果。</li><li>若用 ES5实现会有3层的回调，若用Promise 实现至少需要3个then。</li><li>一个是代码横向发展，另一个是纵向发展。今天指给出 async-await 的实现哈~</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">second, param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(param);</span><br><span class="line">    &#125;, second);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result1 = <span class="keyword">await</span> sleep(<span class="number">2000</span>, <span class="string">&quot;req01&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> result2 = <span class="keyword">await</span> sleep(<span class="number">1000</span>, <span class="string">&quot;req02&quot;</span> + result1);</span><br><span class="line">  <span class="keyword">let</span> result3 = <span class="keyword">await</span> sleep(<span class="number">500</span>, <span class="string">&quot;req03&quot;</span> + result2);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">` <span class="subst">$&#123;result3&#125;</span> <span class="subst">$&#123;result2&#125;</span> <span class="subst">$&#123;result1&#125;</span> `</span>);</span><br><span class="line">&#125;</span><br><span class="line">test(); </span><br><span class="line"><span class="comment">// req03req02req01 req02req01 req01</span></span><br></pre></td></tr></table></figure><h1 id="小心你的并行处理"><a href="#小心你的并行处理" class="headerlink" title="小心你的并行处理!!!"></a>小心你的并行处理!!!</h1><p>我这里为啥加了三个感叹号呢~，因为对于初学者来说一不小心就将 ajax 的并发请求发成了阻塞式同步的操作了，我就真真切切的在工作中写了这样的代码。await 若等待的是 promise 就会停止下来。业务是这样的，我有三个异步请求需要发送，相互没有关联，只是需要当请求都结束后将界面的 loading 清除掉即可。<br>刚学完 async await 开心啊，到处乱用~</p><p>// 总结 promise.all 的特点<br>// 1、接收一个 Promise 实例的数组或具有 Iterator 接口的对象，</p><p>// 2、如果元素不是 Promise 对象，则使用 Promise.resolve 转成 Promise 对象</p><p>// 3、如果全部成功，状态变为 resolved，返回值将组成一个数组传给回调</p><p>// 4、只要有一个失败，状态就变为 rejected，返回值将直接传递给回调<br>// all() 的返回值也是新的 Promise 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">correctDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> p1 = sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">let</span> p2 = sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">let</span> p3 = sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;clear the loading~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">correctDemo(); <span class="comment">// clear the loading~</span></span><br></pre></td></tr></table></figure><h1 id="await-in-for-循环"><a href="#await-in-for-循环" class="headerlink" title="await in for 循环"></a>await in for 循环</h1><p>==await必须在async函数的上下文中的==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">forDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">forDemo()</span><br></pre></td></tr></table></figure><h4 id="2018-06-01更新引入bluebrid-串行"><a href="#2018-06-01更新引入bluebrid-串行" class="headerlink" title="2018-06-01更新引入bluebrid 串行"></a>2018-06-01更新引入bluebrid 串行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getApi1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> bluebird.delay(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://rap2api.taobao.org/app/mock/17194//list1&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1111</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span>(response.status !== <span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.json()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getApi2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;等待1秒哦&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> bluebird.delay(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://rap2api.taobao.org/app/mock/17194/list2&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url,&#123;<span class="string">&#x27;token&#x27;</span>:<span class="number">111</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span>(response.status !== <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.json()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showGetInfo = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.time(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">          <span class="keyword">const</span> names = [<span class="string">&#x27;getApi1&#x27;</span>,<span class="string">&#x27;getApi2&#x27;</span>,<span class="string">&#x27;getApi3&#x27;</span>,<span class="string">&#x27;getApi4&#x27;</span>];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> names) &#123;</span><br><span class="line">              <span class="keyword">if</span> (names.hasOwnProperty(name)) &#123;</span><br><span class="line">                 <span class="keyword">const</span> res =  <span class="keyword">await</span> getApi1(name)</span><br><span class="line">                 <span class="built_in">console</span>.log(<span class="string">&#x27;bool1&#x27;</span>,res.success);</span><br><span class="line">                 <span class="built_in">console</span>.log(<span class="string">&#x27;bool2&#x27;</span>,res.results);</span><br><span class="line">              &#125; </span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">console</span>.timeEnd(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.timeEnd(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">&#x27;错误error:&#x27;</span>+error);</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">showGetInfo();</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/image20180615153239.png"                      alt="image"                ></p><h4 id="2018-06-01更新-引入bluebrid-并行"><a href="#2018-06-01更新-引入bluebrid-并行" class="headerlink" title="2018-06-01更新 引入bluebrid 并行"></a>2018-06-01更新 引入bluebrid 并行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&quot;node-fetch&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bluebird = <span class="built_in">require</span>(<span class="string">&quot;bluebird&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getApi1</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> bluebird.delay(<span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&quot;https://easy-mock.com/mock/5d09c91f44339368a2ce4c22/myapi/name&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url, &#123;</span><br><span class="line">    method: <span class="string">&quot;POST&quot;</span>, <span class="comment">//post请求</span></span><br><span class="line">    headers: &#123;</span><br><span class="line">      Accept: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="comment">//post请求参数</span></span><br><span class="line">      name: name</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> response.json();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showGetInfo = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">&quot;时间&quot;</span>);</span><br><span class="line">    <span class="comment">//参数设置成数组</span></span><br><span class="line">    <span class="keyword">const</span> names = [<span class="string">&quot;jordan&quot;</span>, <span class="string">&quot;james&quot;</span>,<span class="string">&quot;kobe&quot;</span>];</span><br><span class="line">   &lt;!--先触发所有的请求，组成一个数组--&gt;</span><br><span class="line"><span class="keyword">const</span> promisesArr = names.map(<span class="function"><span class="params">x</span> =&gt;</span> getApi1(x));</span><br><span class="line">    &lt;!--然后遍历这个数组，等待结果出来--&gt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> promise <span class="keyword">of</span> promisesArr) &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> promise;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;bool1&quot;</span>, res.success, res.data.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">&quot;时间&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">&quot;时间&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&quot;错误error:&quot;</span> + error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">showGetInfo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/image20180615154603.png"                      alt="image"                ></p><h3 id="2018-06-01补充"><a href="#2018-06-01补充" class="headerlink" title="2018-06-01补充"></a>2018-06-01补充</h3><p>async await的错误处理，知识点的补充</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getApi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://rap2api.taobao.org/app/mock/7551//changeroom&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1111</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span>(response.status !== <span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.json()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showGetInfo = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> res = <span class="keyword">await</span> getApi();</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;bool&#x27;</span>,res.success);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;results&#x27;</span>,res.results.length);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">&#x27;错误error:&#x27;</span>+error);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showGetInfo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="处理await的串行"><a href="#处理await的串行" class="headerlink" title="处理await的串行"></a>处理await的串行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//串行</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getApi1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://rap2api.taobao.org/app/mock/17194//list1&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1111</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span>(response.status !== <span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.json()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getApi2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://rap2api.taobao.org/app/mock/17194/list2&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url,&#123;<span class="string">&#x27;token&#x27;</span>:<span class="number">111</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span>(response.status !== <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;====================================&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(response.json);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;====================================&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.json()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showGetInfo = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> res1 = <span class="keyword">await</span> getApi1();</span><br><span class="line">          <span class="keyword">const</span> res2 = <span class="keyword">await</span> getApi2();</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;bool1&#x27;</span>,res1.success,<span class="string">&#x27;bool2&#x27;</span>,res2.success);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;results1&#x27;</span>,res1.results.length,<span class="string">&#x27;results2&#x27;</span>,res2.results);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">&#x27;错误error:&#x27;</span>+error);</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">showGetInfo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/image20180615144620.png"                      alt="image"                ></p><h3 id="处理await的并行"><a href="#处理await的并行" class="headerlink" title="处理await的并行"></a>处理await的并行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加一个超时</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">timeout=<span class="number">2000</span></span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(resolve,timeout);</span><br><span class="line">&#125;) </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getApi1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> sleep();</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://rap2api.taobao.org/app/mock/17194//list1&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url,&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1111</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span>(response.status !== <span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.json()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getApi2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;等待2秒哦&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> sleep();</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;http://rap2api.taobao.org/app/mock/17194/list2&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url,&#123;<span class="string">&#x27;token&#x27;</span>:<span class="number">111</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span>(response.status !== <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.json()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showGetInfo = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.time(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">          <span class="keyword">const</span> res1Promise =  getApi1();</span><br><span class="line">          <span class="keyword">const</span> res2Promise =  getApi2();</span><br><span class="line">          <span class="keyword">const</span> res1 = <span class="keyword">await</span> res1Promise;</span><br><span class="line">          <span class="keyword">const</span> res2 = <span class="keyword">await</span> res2Promise;</span><br><span class="line">          </span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;bool1&#x27;</span>,res1.success,<span class="string">&#x27;results1&#x27;</span>,res1.results.length,);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;bool2&#x27;</span>,res2.success,<span class="string">&#x27;results2&#x27;</span>,res2.results);</span><br><span class="line">          <span class="built_in">console</span>.timeEnd(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">&#x27;错误error:&#x27;</span>+error);</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">showGetInfo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/image20180615144727.png"                      alt="image"                ></p><h3 id="Promise-all处理await的并行"><a href="#Promise-all处理await的并行" class="headerlink" title="Promise.all处理await的并行"></a>Promise.all处理await的并行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> showGetInfo = <span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.time(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">          <span class="keyword">const</span> [res1,res2]= <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">              getApi1(),getApi2()</span><br><span class="line">          ])</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;bool1&#x27;</span>,res1.success,<span class="string">&#x27;results1&#x27;</span>,res1.results.length,);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;bool2&#x27;</span>,res2.success,<span class="string">&#x27;results2&#x27;</span>,res2.results);</span><br><span class="line">          <span class="built_in">console</span>.timeEnd(<span class="string">&#x27;时间&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">&#x27;错误error:&#x27;</span>+error);</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">showGetInfo();</span><br></pre></td></tr></table></figure><h1 id="Promise-all-处理-Rejection-的技巧"><a href="#Promise-all-处理-Rejection-的技巧" class="headerlink" title="Promise.all 处理 Rejection 的技巧"></a>Promise.all 处理 Rejection 的技巧</h1><blockquote><p>Promise.all 这个 API 允许我们在多个操作完成之后继续做某些事情，遗憾的是 Promise.all 只会在所有传给他的 Promise 都 resolve 了之后才会 resolve，如果其中的一个 reject 了，那么 Promise.all 后面的 then 就不会被执行，catch 会被执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&quot;node-fetch&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showGetInfo = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">&quot;时间&quot;</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.all(</span><br><span class="line">    [</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(<span class="number">1</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> reject(<span class="number">2</span>), <span class="number">2000</span>)),</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(<span class="number">3</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> reject(<span class="number">4</span>), <span class="number">3000</span>)),</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(<span class="number">2</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> reject(<span class="number">5</span>), <span class="number">4000</span>)),</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(<span class="number">4</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> reject(<span class="number">6</span>), <span class="number">1000</span>)),</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(<span class="number">5</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> reject(<span class="number">7</span>), <span class="number">1000</span>)),</span><br><span class="line">    ].map(<span class="function"><span class="params">p</span> =&gt;</span> p.catch(<span class="function">() =&gt;</span> <span class="literal">undefined</span>))</span><br><span class="line">  ).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">&quot;时间&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;done!&quot;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">showGetInfo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190621212414.png"                      alt=""                ></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> ES7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native开发实用小技巧(持续更新)</title>
      <link href="2018/04/10/React%20Native%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/"/>
      <url>2018/04/10/React%20Native%E5%BC%80%E5%8F%91%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</url>
      
        <content type="html"><![CDATA[<h4 id="代码的缩进，使用4个空格，还是2个空格？"><a href="#代码的缩进，使用4个空格，还是2个空格？" class="headerlink" title="代码的缩进，使用4个空格，还是2个空格？"></a>代码的缩进，使用4个空格，还是2个空格？</h4><p>我的回答是：2个空格。<br>跟上面一样，我刚转到JavaScript的时候，觉得2个空格很反人类，太挤了。所以一直坚持4个空格。直到UI代码慢慢变多，嵌套变深。。。我才开始慢慢怀疑自己。前几天，我搜索了多个热门的JavaScript开源项目，无一例外使用的是2个空格。所以，我果断把代码改成2个空格。<br><a id="more"></a></p><h4 id="如何根据不同屏幕尺寸，做等比例布局？"><a href="#如何根据不同屏幕尺寸，做等比例布局？" class="headerlink" title="如何根据不同屏幕尺寸，做等比例布局？"></a>如何根据不同屏幕尺寸，做等比例布局？</h4><p>美工出标注图的时候，通常是按照屏幕宽度750出的。如果需求是UI根据不同屏幕尺寸，做等比例的缩放。我们可以写一个叫px2dp的公共方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Dimensions&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> basePixelWidth = <span class="number">750</span></span><br><span class="line"><span class="keyword">const</span> px2dp = (px: number): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> px * Dimensions.get(<span class="string">&#x27;window&#x27;</span>).width / basePixelWidth</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比如要设置View的宽度为屏幕的一半。就可以这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> <span class="attr">px2dp</span>(<span class="attr">375</span>)&#125;&#125; /&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="如何快速获取屏幕宽高？"><a href="#如何快速获取屏幕宽高？" class="headerlink" title="如何快速获取屏幕宽高？"></a>如何快速获取屏幕宽高？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Dimensions, PixelRatio&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> screenWidth = Dimensions.get(<span class="string">&#x27;window&#x27;</span>).width</span><br><span class="line"><span class="keyword">const</span> screenHeight = Dimensions.get(<span class="string">&#x27;window&#x27;</span>).height</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> screen = &#123;</span><br><span class="line">  width: screenWidth,</span><br><span class="line">  height: screenHeight,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> screen</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="如何判断设备是iPhoneX？"><a href="#如何判断设备是iPhoneX？" class="headerlink" title="如何判断设备是iPhoneX？"></a>如何判断设备是iPhoneX？</h4><p>我们有时候需要对iPhoneX的异形屏做一些特殊的适配，就需要判断一个设备是否是iPhoneX<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Platform, Dimensions&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isIphoneX = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> dimen = Dimensions.get(<span class="string">&#x27;window&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    Platform.OS === <span class="string">&#x27;ios&#x27;</span> &amp;&amp;</span><br><span class="line">    !Platform.isPad &amp;&amp;</span><br><span class="line">    !Platform.isTVOS &amp;&amp;</span><br><span class="line">    (dimen.height === <span class="number">812</span> || dimen.width === <span class="number">812</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是iOS设备</span></span><br><span class="line"><span class="keyword">const</span> isIOS = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Platform.OS === <span class="string">&#x27;ios&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否是Android设备</span></span><br><span class="line"><span class="keyword">const</span> isAndroid = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Platform.OS === <span class="string">&#x27;android&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态栏的高度</span></span><br><span class="line"><span class="keyword">const</span> statusBarHeight = <span class="function">() =&gt;</span> (isIOS() ? (isIphoneX() ? <span class="number">44</span> : <span class="number">20</span>) : <span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="如何优雅的为每个页面增加Loading页、错误页？"><a href="#如何优雅的为每个页面增加Loading页、错误页？" class="headerlink" title="如何优雅的为每个页面增加Loading页、错误页？"></a>如何优雅的为每个页面增加Loading页、错误页？</h4><p>很多App大部分页面都需要用到Loading页。如果数据获取失败，还需要显示错误页，告诉用户错误原因，并且让用户点击重试。这时候，我们可以定义一个通用的组件叫Scene，然后在这个类中，定义Loading页面和错误页。使用的时候，只需要在我们的component这样实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;isLoading, error&#125; = <span class="built_in">this</span>.state</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Scene</span><br><span class="line">      isLoading=&#123;isLoading&#125;</span><br><span class="line">      error=&#123;error&#125;</span><br><span class="line">      onRetry=&#123;<span class="built_in">this</span>.requestData&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/Scene&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们需要请求网络的时候，把isLoading设置为true。这样Scene组件就会为我们展示一个Loading页面。<br>当网络请求失败的时候，把isLoading设置为false，error设置为具体的错误信息。Scene组件就会显示一个错误页，并且有一个“重试”按钮。用户点击“重试”后，会调用onRetry回调。<br>Scene的代码简化后，大概是这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type Props = &#123;</span><br><span class="line">  isLoading?: boolean,</span><br><span class="line">  error?: ?string,</span><br><span class="line">  onRetry?: <span class="built_in">Function</span>,</span><br><span class="line">  children?: any,</span><br><span class="line">  style?: <span class="built_in">Object</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scene</span> <span class="keyword">extends</span> <span class="title">PureComponent</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;isLoading, style, error, children, onRetry&#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;[styles.container, style]&#125;&gt;</span><br><span class="line">        &#123;!isLoading &amp;&amp; children&#125;</span><br><span class="line">        &lt;ErrorView text=&#123;error&#125; onPress=&#123;onRetry&#125; /&gt;</span><br><span class="line">        &lt;LoadingView isLoading=&#123;isLoading&#125; /&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是，ErrorView、LoadingView需要使用下面这种绝对布局。否则可能会被页面的内容顶到屏幕外面。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">position</span>: <span class="string">&#x27;absolute&#x27;</span>,</span><br><span class="line">    top: <span class="number">0</span>,</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    right: <span class="number">0</span>,</span><br><span class="line">    bottom: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native面试题库(持续更新)</title>
      <link href="2018/04/09/React%20Native%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/"/>
      <url>2018/04/09/React%20Native%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</url>
      
        <content type="html"><![CDATA[<p><em>本文原创首发于公众号：ReactNative开发圈，转载需注明出处。</em></p><h2 id="1-React-Native相对于原生的ios和Android有哪些优势？"><a href="#1-React-Native相对于原生的ios和Android有哪些优势？" class="headerlink" title="1.React Native相对于原生的ios和Android有哪些优势？"></a>1.React Native相对于原生的ios和Android有哪些优势？</h2><p>1.性能媲美原生APP<br>2.使用JavaScript编码，只要学习这一种语言<br>3.绝大部分代码安卓和IOS都能共用<br>4.组件式开发，代码重用性很高<br>5.跟编写网页一般，修改代码后即可自动刷新，不需要慢慢编译，节省很多编译等待时间<br>6.支持APP热更新，更新无需重新安装APP<br><a id="more"></a><br>缺点：<br>内存占用相对较高<br>版本还不稳定，一直在更新，现在还没有推出稳定的1.0版本</p><h2 id="2-React-Native组件的生命周期"><a href="#2-React-Native组件的生命周期" class="headerlink" title="2.React Native组件的生命周期"></a>2.React Native组件的生命周期</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pic.yupoo.com/forrest071/dede824f/a0e072f5.jpg"                      alt=""                ></p><p>生命周期    调用次数    能否使用 setSate()</p><table><thead><tr><th>周期名称以及调用次数</th><th>能否使用 setSate()</th><th>还没想好</th></tr></thead><tbody><tr><td>getDefaultProps    1(全局调用一次)</td><td>否</td></tr><tr><td>getInitialState    1</td><td>否</td></tr><tr><td>componentWillMount    1</td><td>是</td></tr><tr><td>render    &gt;=1</td><td>否</td></tr><tr><td>componentDidMount    1</td><td>是</td></tr><tr><td>componentWillReceiveProps    &gt;=0</td><td>是</td></tr><tr><td>shouldComponentUpdate    &gt;=0</td><td>否</td></tr><tr><td>componentWillUpdate    &gt;=0</td><td>否</td></tr><tr><td>componentDidUpdate    &gt;=0</td><td>否</td></tr><tr><td>componentWillUnmount</td><td>否</td></tr></tbody></table><h2 id="3-当你调用setState的时候，发生了什么事？"><a href="#3-当你调用setState的时候，发生了什么事？" class="headerlink" title="3.当你调用setState的时候，发生了什么事？"></a>3.当你调用setState的时候，发生了什么事？</h2><p>当调用 setState 时，React会做的第一件事情是将传递给 setState 的对象合并到组件的当前状态。<br>这将启动一个称为和解（reconciliation）的过程。<br>和解（reconciliation）的最终目标是以最有效的方式，根据这个新的状态来更新UI。<br>为此，React将构建一个新的 React 元素树（您可以将其视为 UI 的对象表示）。<br>一旦有了这个树，为了弄清 UI 如何响应新的状态而改变，React 会将这个新树与上一个元素树相比较（ diff ）。<br>通过这样做， React 将会知道发生的确切变化，并且通过了解发生什么变化，只需在绝对必要的情况下进行更新即可最小化 UI 的占用空间。</p><h2 id="4-props和state相同点和不同点"><a href="#4-props和state相同点和不同点" class="headerlink" title="4.props和state相同点和不同点"></a>4.props和state相同点和不同点</h2><p>1.不管是props还是state的改变，都会引发render的重新渲染。<br>2.都能由自身组件的相应初始化函数设定初始值。</p><p>不同点<br>1.初始值来源：state的初始值来自于自身的getInitalState（constructor）函数；props来自于父组件或者自身getDefaultProps（若key相同前者可覆盖后者）。</p><p>2.修改方式：state只能在自身组件中setState，不能由父组件修改；props只能由父组件修改，不能在自身组件修改。</p><p>3.对子组件：props是一个父组件传递给子组件的数据流，这个数据流可以一直传递到子孙组件；state代表的是一个组件内部自身的状态，只能在自身组件中存在。</p><h2 id="5-shouldComponentUpdate-应该做什么"><a href="#5-shouldComponentUpdate-应该做什么" class="headerlink" title="5.shouldComponentUpdate 应该做什么"></a>5.shouldComponentUpdate 应该做什么</h2><p>其实这个问题也是跟reconciliation有关系。<br>“和解（ reconciliation ）的最终目标是以最有效的方式，根据新的状态更新用户界面”。<br>如果我们知道我们的用户界面（UI）的某一部分不会改变，<br>那么没有理由让 React 很麻烦地试图去弄清楚它是否应该渲染。<br>通过从 shouldComponentUpdate 返回 false，<br>React 将假定当前组件及其所有子组件将保持与当前组件相同</p><h2 id="6-reactJS的props-children-map函数来遍历会收到异常提示，为什么？应该如何遍历？"><a href="#6-reactJS的props-children-map函数来遍历会收到异常提示，为什么？应该如何遍历？" class="headerlink" title="6.reactJS的props.children.map函数来遍历会收到异常提示，为什么？应该如何遍历？"></a>6.reactJS的props.children.map函数来遍历会收到异常提示，为什么？应该如何遍历？</h2><p>this.props.children 的值有三种可能：<br>    1.当前组件没有子节点，它就是 undefined;<br>    2.有一个子节点，数据类型是 object ；<br>    3.有多个子节点，数据类型就是 array 。<br>系统提供React.Children.map()方法安全的遍历子节点对象</p><h2 id="7-redux状态管理的流程"><a href="#7-redux状态管理的流程" class="headerlink" title="7.redux状态管理的流程"></a>7.redux状态管理的流程</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pic.yupoo.com/forrest071/0f711f99/33431f36.png"                      alt=""                ><br>action是用户触发或程序触发的一个普通对象。<br>reducer是根据action操作来做出不同的数据响应，返回一个新的state。<br>store的最终值就是由reducer的值来确定的。（一个store是一个对象, reducer会改变store中的某些值）<br>action -&gt; reducer -&gt; 新store -&gt; 反馈到UI上有所改变。</p><h2 id="8-加载bundle的机制"><a href="#8-加载bundle的机制" class="headerlink" title="8.加载bundle的机制"></a>8.加载bundle的机制</h2><p>要实现RN的脚本热更新，我们要搞明白RN是如何去加载脚本的。 在编写业务逻辑的时候，我们会有许多个js文件，打包的时候RN会将这些个js文件打包成一个叫index.android.bundle(ios的是index.ios.bundle)的文件，所有的js代码(包括rn源代码、第三方库、业务逻辑的代码)都在这一个文件里，启动App时会第一时间加载bundle文件，所以脚本热更新要做的事情就是替换掉这个bundle文件。</p><h2 id="9-Flex布局"><a href="#9-Flex布局" class="headerlink" title="9.Flex布局"></a>9.Flex布局</h2><p>采用Flex布局的元素，称为Flex容器（flex Container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pic.yupoo.com/forrest071/bd1d492f/2c0075a1.png"                      alt=""                ></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><p>容器的属性<br>以下6个属性设置在容器上。<br>flex-direction  属性决定主轴的方向（即项目的排列方向)。<br>flex-wrap   属性定义，如果一条轴线排不下，如何换行。<br>flex-flow   flex-flow属性是flex-direction属性和flex-wrap属性的简写形式。<br>justify-content   定义了项目在主轴上的对齐方式。<br>align-items  属性定义项目在交叉轴上如何对齐。<br>align-content  align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><h2 id="10-请简述-code-push-的原理"><a href="#10-请简述-code-push-的原理" class="headerlink" title="10.请简述 code push 的原理"></a>10.请简述 code push 的原理</h2><p>code push 调用 react native 的打包命令，将当前环境的非 native 代码全量打包成一个 bundle 文件，然后上传到微软云服务器（Windows Azure）。 在 app 中启动页（或 splash 页）编写请求更新的代码（请求包含了本地版本，hashCode、appToken 等信息），微软服务端对比本地 js bundle 版本和微软服务器的版本，如果本地版本低，就下载新的 js bundle 下来后实现更新(code push 框架实现)。</p><h2 id="11-Redux中同步-action-与异步-action-最大的区别是什么"><a href="#11-Redux中同步-action-与异步-action-最大的区别是什么" class="headerlink" title="11.Redux中同步 action 与异步 action 最大的区别是什么"></a>11.Redux中同步 action 与异步 action 最大的区别是什么</h2><p>同步只返回一个普通 action 对象。而异步操作中途会返回一个 promise 函数。当然在 promise 函数处理完毕后也会返回一个普通 action 对象。thunk 中间件就是判断如果返回的是函数，则不传导给 reducer，直到检测到是普通 action 对象，才交由 reducer 处理。</p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是Redux</title>
      <link href="2018/02/01/%E4%BB%80%E4%B9%88%E6%98%AFRedux/"/>
      <url>2018/02/01/%E4%BB%80%E4%B9%88%E6%98%AFRedux/</url>
      
        <content type="html"><![CDATA[<p>认识下redux<br><a id="more"></a><br>什么是redux<br>当你去开发复杂的单页应用的时候你需要管理各种复杂的应用状态，这鞋状态可能是服务器返回的状，态，本地的数据  url   redux可预测的状态管理 只维护数据<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/clipboard-201821.png"                      alt="clipboard-201821"                ><br>一个应用如何复杂 只有一个store 数据只存store<br>得到store数据  用 getstate（）<br>不能直接修改store  而是应该发起一个action 请求  然后 reducer会去更改数据，如何更改你不用关心</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="comment">// reducer唯一  state</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;type&#125; = action;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span>++ state;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取最新的store数据</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(counter);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).click(<span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 发布action来更新数据</span></span><br><span class="line">  store.dispatch(&#123;<span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听state的变化</span></span><br><span class="line">store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//一旦state变化就可以再去更新View视图相关</span></span><br><span class="line">  <span class="keyword">let</span> state = store.getState();</span><br><span class="line">  <span class="built_in">console</span>.log(state);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="错误的更新state"><a href="#错误的更新state" class="headerlink" title="错误的更新state"></a>错误的更新state</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/QQ截图20180201125747-201821.jpg"                      alt="QQ截图20180201125747-201821"                ></p><h4 id="正确的更新state"><a href="#正确的更新state" class="headerlink" title="正确的更新state"></a>正确的更新state</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/QQ截图20180201125840-201821.jpg"                      alt="QQ截图20180201125840-201821"                ></p><p>action可能非常多，一个可维护的应用你要把acion放再一个文件里面<br>或者视图相关的action放在某个模块里面</p><p>counter不能副作用 什么是副作用  就是里面如果ajax请求 路由跳转  或者 counter1 counter2</p><h4 id="react与redux如何一起用"><a href="#react与redux如何一起用" class="headerlink" title="react与redux如何一起用"></a>react与redux如何一起用</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/QQ截图20180131184308-201821.jpg"                      alt="QQ截图20180131184308-201821"                ></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React之简书界面demo</title>
      <link href="2018/01/31/React%E4%B9%8B%E7%AE%80%E4%B9%A6%E7%95%8C%E9%9D%A2demo/"/>
      <url>2018/01/31/React%E4%B9%8B%E7%AE%80%E4%B9%A6%E7%95%8C%E9%9D%A2demo/</url>
      
        <content type="html"><![CDATA[<p>做一些小练习<br><a id="more"></a><br>分析项目界面<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/简书界面组件拆分-2018131.jpg"                      alt="简书界面组件拆分-2018131"                ></p><p><a href="https://codesandbox.io/s/2w863wvp70"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://codesandbox.io/static/img/play-codesandbox.svg"                      alt="Edit antd reproduction template"                ></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个 reduce 实现</title>
      <link href="2017/12/30/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAreduce%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2017/12/30/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAreduce%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>我们知道 reduce 方法是 ES5 引入的，reduce 英文解释翻译过来为「减少，缩小，使还原，使变弱」</p><a id="more"></a><p>它的使用语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br></pre></td></tr></table></figure><p>这里我们简要介绍一下。</p><ol><li>reduce 第一个参数 callback 是核心，它对数组的每一项进行「叠加加工」，其最后一次返回值将作为 reduce 方法的最终返回值。 它包含 4 个参数：</li><li>previousValue 　表示「上一次」 callback 函数的返回值</li><li>currentValue 　数组遍历中正在处理的元素</li><li>currentIndex 　可选，表示 currentValue 在数组中对应的索引。如果提供了 initialValue，则起始索引号为 0，否则为 1</li><li>array 　可选，调用 reduce() 的数组</li><li>initialValue 可选，作为第一次调用 callback 时的第一个参数。如果没有提供 initialValue，那么数组中的第一个元素将作为 callback 的第一个参数。</li><li>reduce 实现 runPromiseInSequence</li></ol><p>我们看它的一个典型应用，按顺序运行 Promise：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f1 = <span class="function">() =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;p1 running&quot;</span>);</span><br><span class="line">      resolve(<span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function">() =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;p2 running&quot;</span>);</span><br><span class="line">      resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [f1, f2];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runPromiseInSequence = <span class="function">(<span class="params">array, value</span>) =&gt;</span></span><br><span class="line">  array.reduce(<span class="function">(<span class="params">promiseChain, currentFunction</span>) =&gt;</span> promiseChain.then(currentFunction), <span class="built_in">Promise</span>.resolve(value));</span><br><span class="line"></span><br><span class="line">runPromiseInSequence(array, <span class="string">&quot;init&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>方案 ①</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ① 定义到 Array.prototype 上。 函数有两个参数</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.myReduse = <span class="function"><span class="keyword">function</span>(<span class="params">callback, init</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// init 是可选的， 这里的 this 是调用的那个array。</span></span><br><span class="line">  init = init || <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> array = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ② 定义 prev 之前的结果 和 循环起始点</span></span><br><span class="line">  <span class="keyword">let</span> prev,</span><br><span class="line">    startIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// ③ 没有初始值 &amp;&amp; 数组是空  =&gt; 报错</span></span><br><span class="line">  <span class="keyword">if</span> (!init &amp;&amp; array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;空数组，没有初始值&quot;</span>);</span><br><span class="line">  <span class="comment">// 没有初始值 &amp;&amp; 数组长度=1  =&gt; 直接返回第一项，callback不执行</span></span><br><span class="line">  <span class="keyword">if</span> (!init &amp;&amp; array.length == <span class="number">1</span>) <span class="keyword">return</span> array[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 没有初始值 &amp;&amp; 长度大于1  =&gt;  从第二项开始，prev = 第一项的值</span></span><br><span class="line">  <span class="keyword">if</span> (!init &amp;&amp; array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    prev = array[<span class="number">0</span>];</span><br><span class="line">    startIndex = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 有初始值 &amp;&amp; 长度大于1  =&gt;  从第一项开始，prev = init 初始值</span></span><br><span class="line">  <span class="keyword">if</span> (init &amp;&amp; array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    prev = init;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = startIndex; index &lt; array.length; index++) &#123;</span><br><span class="line">    <span class="comment">// prev 始终是回调函数执行的结果，</span></span><br><span class="line">    <span class="comment">// callback 按照顺序传入值： 前面的结果， 当前项的值， 当前索引，原数组</span></span><br><span class="line">    prev = callback(prev, array[index], index, array);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回之前项的结果。</span></span><br><span class="line">  <span class="keyword">return</span> prev;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方案 ②</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.reduce =</span><br><span class="line">  <span class="built_in">Array</span>.prototype.reduce ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">func, initialValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> base = <span class="keyword">typeof</span> initialValue === <span class="string">&quot;undefined&quot;</span> ? arr[<span class="number">0</span>] : initialValue;</span><br><span class="line">    <span class="keyword">var</span> startPoint = <span class="keyword">typeof</span> initialValue === <span class="string">&quot;undefined&quot;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    arr.slice(startPoint).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val, index</span>) </span>&#123;</span><br><span class="line">      base = func(base, val, index + startPoint, arr);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> base;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://juejin.im/post/5bc6de295188255c372f8697" >JS Array.prototype.reduce 的一些理解<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.zhihu.com/market/paid_column/1167078439772721152/section/1169948349812842496" >数组 reduce 方法的相关实现<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://juejin.im/post/5d568e23f265da0390052a3d" >数组 reduce 一看一整天<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个call或 apply</title>
      <link href="2017/12/25/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAcall%E6%88%96%20apply/"/>
      <url>2017/12/25/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAcall%E6%88%96%20apply/</url>
      
        <content type="html"><![CDATA[<h1 id="call语法："><a href="#call语法：" class="headerlink" title="call语法："></a>call语法：</h1><blockquote><p>fun.call(thisArg,arg1,arg2,…)，调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。</p></blockquote><p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  Product.call(<span class="built_in">this</span>, name, price);</span><br><span class="line">  <span class="built_in">this</span>.category = <span class="string">&#x27;food&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Food(<span class="string">&#x27;cheese&#x27;</span>, <span class="number">5</span>).name);</span><br><span class="line"><span class="comment">//&quot;cheese&quot;</span></span><br></pre></td></tr></table></figure></p><p>简单说下实现原理：</p><ol><li>将函数设为对象的属性</li><li>执行&amp;删除这个函数</li><li>指定 this到函数并传入给定参数执行函数</li><li>如果不传入参数，默认指向为 window</li></ol><p>乞丐版本：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/carbon1.png"                      alt=""                ></p><p>代码：<br>如果我们想要实现一个新的newcall理想状态应该怎么样？</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/carbon.png"                      alt=""                ><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.newcall = <span class="function"><span class="keyword">function</span> (<span class="params">content = <span class="built_in">window</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//this指的是bar(name,age)</span></span><br><span class="line">  content.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="comment">// 取出参数中的第一个参数 与其他参数</span></span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">//content.fn就是指bar方法</span></span><br><span class="line">  <span class="keyword">let</span> result = content.fn(...args);</span><br><span class="line">  <span class="comment">//删除this</span></span><br><span class="line">  <span class="keyword">delete</span> content.fn;</span><br><span class="line">  <span class="comment">//返回新对象</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190424102151.png"                      alt=""                ></p><h1 id="apply语法："><a href="#apply语法：" class="headerlink" title="apply语法："></a>apply语法：</h1><blockquote><p>func.apply(thisArg,[argsArray])，调用一个函数，以及作为一个数组（或类似数组对象）提供的参数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.newapply = <span class="function"><span class="keyword">function</span> (<span class="params">content = <span class="built_in">window</span></span>) </span>&#123;</span><br><span class="line">  content.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="comment">//判断是否有第二个参数</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">    result = content.fn(...arguments[<span class="number">1</span>]);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    result = content.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> content.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">bar.newapply(foo,[<span class="string">&quot;jack&quot;</span>])</span><br></pre></td></tr></table></figure><h1 id="手写系列"><a href="#手写系列" class="headerlink" title="手写系列"></a>手写系列</h1><ol><li><del><strong>实现一个new操作符</strong></del></li><li><del>实现一个JSON.stringify</del></li><li><del>实现一个JSON.parse</del></li><li><del>实现一个call或 apply</del></li><li><del>实现一个Function.bind</del></li><li>实现一个继承</li><li>实现一个JS函数柯里化</li><li>手写一个Promise(中高级必考)</li><li>手写防抖(Debouncing)和节流(Throttling)</li><li>手写一个JS深拷贝</li><li>实现一个instanceOf</li></ol>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个instanceof</title>
      <link href="2017/12/25/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAinstanceof/"/>
      <url>2017/12/25/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAinstanceof/</url>
      
        <content type="html"><![CDATA[<p>在 JavaScript 中，判断一个变量的类型尝尝会用 typeof 运算符，在使用 typeof 运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回 “object”。ECMAScript 引入了另一个 Java 运算符 instanceof 来解决这个问题。instanceof 运算符与 typeof 运算符相似，用于识别正在处理的对象的类型。与 typeof 方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型。<br><a id="more"></a><br>instanceof 示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      get:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是一个获取方法&#x27;</span>,<span class="built_in">this</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   F.prototype.get_pro = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;这是一个原型实例上的方法&#x27;</span>,<span class="built_in">this</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> w = <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(w <span class="keyword">instanceof</span> F);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><br>这段代码问的是“变量 w 是否为 F 对象的实例？”w 的确是 F 对象的实例，因此结果是”true”。尽管不像 typeof 方法那样灵活，但是在 typeof 方法返回 “object” 的情况下，instanceof 方法还是很有用的。</p><p>实现原理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现一个instanceof</span></span><br><span class="line"><span class="comment"> * instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newInstanceof</span>(<span class="params">left,right</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//获取实例的原型对象</span></span><br><span class="line">       <span class="keyword">let</span> proto = left.__proto__;</span><br><span class="line">       <span class="comment">//获取构造函数的原型对象</span></span><br><span class="line">       <span class="keyword">let</span> prototype = right.prototype;</span><br><span class="line">       <span class="comment">//默认判断true</span></span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">         <span class="comment">//如果实例对象为空 则为false</span></span><br><span class="line">         <span class="keyword">if</span>(proto == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">         <span class="comment">//如果原型对象 === 构造函数的原型对象 则判断true</span></span><br><span class="line">         <span class="keyword">if</span>(proto == prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">         <span class="comment">//否则继续想原型对象的上一级寻找原型对象，一直找到Object为止</span></span><br><span class="line">         proto = proto.__proto__;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">W</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    get:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;我是w&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(newInstanceof(w,F))</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(newInstanceof(w,W))</span><br><span class="line">  <span class="built_in">console</span>.log(newInstanceof(w,<span class="built_in">Object</span>))</span><br></pre></td></tr></table></figure></p><h1 id="手写系列"><a href="#手写系列" class="headerlink" title="手写系列"></a>手写系列</h1><ol><li><del><strong>实现一个new操作符</strong></del></li><li><del>实现一个JSON.stringify</del></li><li><del>实现一个JSON.parse</del></li><li><del>实现一个call或 apply</del></li><li><del>实现一个Function.bind</del></li><li>实现一个继承</li><li>实现一个JS函数柯里化</li><li>手写一个Promise(中高级必考)</li><li>手写防抖(Debouncing)和节流(Throttling)</li><li>手写一个JS深拷贝</li><li><del>实现一个instanceOf</del></li></ol>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个JSON.stringify与JSON.parse</title>
      <link href="2017/12/24/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAJSON.stringify%E4%B8%8EJSON.parse/"/>
      <url>2017/12/24/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAJSON.stringify%E4%B8%8EJSON.parse/</url>
      
        <content type="html"><![CDATA[<h1 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h1><p>我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。</p><blockquote><p>JSON.stringify(value[, replacer[, space]])</p></blockquote><ol><li>Boolean|Number|String 类型会自动转换成对应的原始值。</li><li>undefined、任意函数以及 symbol，会被忽略（出现在非数组对象的属性值中时），或者被转换成 null（出现在数组中时）。</li><li>不可枚举的属性会被忽略</li><li>如果一个对象的属性值通过某种间接的方式指回该对象本身，即循环引用，属性也会被忽略。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonStringify</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> type = <span class="keyword">typeof</span> obj;</span><br><span class="line">    <span class="keyword">if</span> (type !== <span class="string">&quot;object&quot;</span> || type === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/string|undefined|function/</span>.test(type)) &#123;</span><br><span class="line">        obj = <span class="string">&#x27;&quot;&#x27;</span> + obj + <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">String</span>(obj)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> json = [];</span><br><span class="line">      <span class="comment">// typeof []也是object 继续判断是否是数组</span></span><br><span class="line">      arr = (obj &amp;&amp; obj.constructor === <span class="built_in">Array</span>);</span><br><span class="line">      <span class="comment">// 遍历对象</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">let</span> v = obj[k];</span><br><span class="line">        <span class="keyword">let</span> type = <span class="keyword">typeof</span> v;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/string|undefined|function/</span>.test(type)) &#123;</span><br><span class="line">          v = <span class="string">&#x27;&quot;&#x27;</span> + v + <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">//判断如果是object继续递归</span></span><br><span class="line">          v = jsonStringify(type);</span><br><span class="line">        &#125;</span><br><span class="line">        json.push((arr ? <span class="string">&quot;&quot;</span> : <span class="string">&#x27;&quot;&#x27;</span>+ k + <span class="string">&#x27;&quot;:&#x27;</span>)+<span class="built_in">String</span>(v))</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="keyword">return</span> (arr ? <span class="string">&quot;[&quot;</span> : <span class="string">&quot;&#123;&quot;</span>) + <span class="built_in">String</span>(json)+(arr ? <span class="string">&quot;]&quot;</span> : <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(jsonStringify(<span class="number">2</span>))</span><br><span class="line">  <span class="built_in">console</span>.log(jsonStringify(&#123;<span class="attr">x</span>: <span class="number">5</span>&#125;))</span><br><span class="line">  <span class="comment">// &quot;&#123;&quot;x&quot;:5&#125;&quot;</span></span><br><span class="line">    <span class="built_in">console</span>.log(jsonStringify([<span class="number">1</span>, <span class="string">&quot;false&quot;</span>, <span class="literal">false</span>])) <span class="comment">// &quot;[1,&quot;false&quot;,false]&quot;</span></span><br><span class="line">    <span class="built_in">console</span>.log(jsonStringify(&#123;<span class="attr">b</span>: <span class="literal">undefined</span>&#125;))</span><br></pre></td></tr></table></figure><h1 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h1><p>我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p><blockquote><p>JSON.parse(text[, reviver])</p></blockquote><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123; &quot;name&quot;:&quot;runoob&quot;, &quot;alexa&quot;:10000, &quot;site&quot;:&quot;www.runoob.com&quot; &#125;&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = obj.name + <span class="string">&quot;：&quot;</span> + obj.site;</span><br></pre></td></tr></table></figure><p>第一种写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonParse</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">&#x27;(&#x27;</span> + opt + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(jsonParse(jsonStringify(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="literal">undefined</span>, <span class="attr">z</span>: <span class="literal">null</span>&#125;)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190424095154.png"                      alt=""                ><br>第二种写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。提供可选的reviver函数用以在返回之前对所得到的对象执行变换(操作)。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonStr = <span class="string">&#x27;&#123; &quot;age&quot;: 20, &quot;name&quot;: &quot;jack&quot; &#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> json = (<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;return&#x27;</span>+jsonStr))();</span><br><span class="line"><span class="built_in">console</span>.log(json)</span><br></pre></td></tr></table></figure><br><strong>原因是：核心： Function与 eval有相同的字符串参数特性。</strong></p><blockquote><p> let func=newFunction(arg1,arg2,…,functionBody);</p></blockquote><h1 id="手写系列"><a href="#手写系列" class="headerlink" title="手写系列"></a>手写系列</h1><ol><li><del><strong>实现一个new操作符</strong></del></li><li><del>实现一个JSON.stringify</del></li><li><del>实现一个JSON.parse</del></li><li>实现一个call或 apply</li><li><del>实现一个Function.bind</del></li><li>实现一个继承</li><li>实现一个JS函数柯里化</li><li>手写一个Promise(中高级必考)</li><li>手写防抖(Debouncing)和节流(Throttling)</li><li>手写一个JS深拷贝</li><li><del>实现一个instanceOf</del></li></ol>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【置顶】JavaScript 编码风格指南</title>
      <link href="2017/12/22/JavaScript%20%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
      <url>2017/12/22/JavaScript%20%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>序语言的编码风格指南对于一个长期维护的软件而言是非常重要的。本指南是基于“Java语言编码规范”（Code Conventions fo the Java Programming Language）和Crockford的（JavaScript）规范，同时结合了我个人的经验和喜好做了一些改动。<br><a id="more"></a><br>1.缩进</p><p>每一行的层级由四个空格组成，避免使用制表符（Tab）进行缩进。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.行的长度</p><p>每行长度不应该超过80个字符。如果一行多余80个字符，应当在一个运算符（逗号，加号等）后换行。下一行应当增加两极缩进（8个字符）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">doSomething(argument1, argument2, argument3, argument4,</span><br><span class="line">        argument5);</span><br><span class="line"><span class="comment">// 不好的写法：第二行只有四个空格的缩进</span></span><br><span class="line">doSomething(argument1, argument2, argument3, argument4,</span><br><span class="line">    argument5);</span><br><span class="line"><span class="comment">// 不好的写法：在运算符之前换行</span></span><br><span class="line">doSomething(argument1, argument2, argument3, argument4</span><br><span class="line">             ,argument5);</span><br></pre></td></tr></table></figure><p>3.原始值</p><p>字符串应当始终使用单引号(避免使用双引号)且保持一行。避免在字符串中使用斜线另起一行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Nicholas&#x27;</span>;</span><br><span class="line"><span class="comment">// 不好的写法： 双引号</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="comment">// 不好的写法：字符串结束之前换行</span></span><br><span class="line"><span class="keyword">var</span> longString = <span class="string">&#x27;Here is the story, of a man \</span></span><br><span class="line"><span class="string">named Brady.&#x27;</span>;</span><br><span class="line">数字应当使用十进制整数，科学计数法表示整数，十六进制整数，或者十进制浮点小数，小数点前后应当至少保留一位数字。避免使用八进制直接量。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> price = <span class="number">10.0</span>;</span><br><span class="line"><span class="keyword">var</span> price = <span class="number">10.00</span>;</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xA2</span>;</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1e23</span>;</span><br><span class="line"><span class="comment">// 不好的写法：十进制数字以小数点结尾</span></span><br><span class="line"><span class="keyword">var</span> price = <span class="number">10.</span>;</span><br><span class="line"><span class="comment">// 不好的写法：十进制数字以小数点开头</span></span><br><span class="line"><span class="keyword">var</span> price = <span class="number">.1</span>;</span><br><span class="line"><span class="comment">// 不好的写法：八进制（base 8）写法已废弃</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">010</span>;</span><br></pre></td></tr></table></figure><p>特殊值null除了下述情况下应当避免使用。</p><p>用来初始化一个变量，这个变量可能被赋值为一个对象。<br>用来和一个已经初始化的变量比较，这个变量可以是也可以不是一个变量。<br>当函数的参数期望是对象时，被用作参数传入。<br>当函数的返回值期望是对象时，被用作返回值传出。<br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersion</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (persion != <span class="literal">null</span>) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：和一个未被初始化的变量比较</span></span><br><span class="line"><span class="keyword">var</span> persion;</span><br><span class="line"><span class="keyword">if</span> (persion != <span class="literal">null</span>) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2, arg3, arg4</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arg4 != <span class="literal">null</span>) &#123;</span><br><span class="line">        doSomething(Else);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>避免使用特殊值 undefined。判断一个变量是否定义应当使用typeof操作符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> variable == <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：使用了undefined直接量</span></span><br><span class="line"><span class="keyword">if</span> (variable == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// do something;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.运算符间距</p><p>二元运算符前后必须使用一个空格来保持表达式的整洁。操作符包括赋值运算符和逻辑运算符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> found = (values[i] === item);</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt; <span class="number">10</span>)) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    process(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：丢失空格</span></span><br><span class="line"><span class="keyword">var</span> found = (values[i]===item);</span><br><span class="line"><span class="comment">// 不好的写法：丢失空格</span></span><br><span class="line"><span class="keyword">if</span> (found&amp;&amp;(count&gt;<span class="number">10</span>)) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：丢失空格</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">    process(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.括号间距</p><p>当使用括号时，紧接左括号之后和紧接右括号之前不应该有空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> found = (values[i] === item);</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt; <span class="number">10</span>)) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    process(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：左括号之后有额外的空格</span></span><br><span class="line"><span class="keyword">var</span> found = ( values[i] === item);</span><br><span class="line"><span class="comment">// 不好的写法：右括号之后有额外的空格</span></span><br><span class="line"><span class="keyword">if</span> (found &amp;&amp; (count &gt; <span class="number">10</span>) ) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：参数两边有额外的空格</span></span><br><span class="line"><span class="keyword">for</span> (i= <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    process( i );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.对象直接量</p><p>对象直接量应当使用如下格式。</p><p>其实左括号应当同表达式保持同一行。<br>每个属性的名值对应当保持一个缩进，第一个属性应当在左括号后另起一行。<br>每个属性的名值对应当使用不用引号的属性名，其后紧跟一个冒号（之前不含空格）,而后是值。<br>倘若属性值是函数类型，函数体应当在属性名之下另起一行，而且其后均应保留一个空行。<br>一组相关的属性前后可以插入空行以提升代码的可读性。<br>结束的右括号应当独占一行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    key1: value1,</span><br><span class="line">    key2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//做些什么</span></span><br><span class="line">    &#125;,</span><br><span class="line">    key3: value3</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 不好的写法：不且当的缩进</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">                key1: value1,</span><br><span class="line">                key2: value2</span><br><span class="line">            &#125;</span><br><span class="line">;</span><br><span class="line"><span class="comment">// 不好的写法：函数体周围缺少空行</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    key1: value1,</span><br><span class="line">    key2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//做些什么</span></span><br><span class="line">    &#125;,</span><br><span class="line">    key3: value3</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当对象字面量作为函数参数时，如果值是变量，起始花括号应当同函数名在同一行。</p><p>所有其余先前列出的规则同样使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">doSomething(&#123;</span><br><span class="line">    key1: value1,</span><br><span class="line">    key2: value2</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 不好的写法： 所有代码在一行上</span></span><br><span class="line">doSomething(&#123; <span class="attr">key1</span>: value1, <span class="attr">key2</span>: value2 &#125;);</span><br></pre></td></tr></table></figure><h4 id="7-注释"><a href="#7-注释" class="headerlink" title="7.注释"></a>7.注释</h4><p>频繁地使用注释有助于他人理解你的代码。如下情况应当使用注释。</p><p>代码晦涩难懂。<br>可能被误认为错误的代码。<br>必要但不明显的针对特定浏览器的代码。<br>对于对象、方法或者属性，生成文档是有必要的（使用且当的文档注释）。<br>7.1 单行注释</p><h5 id="单行注释应当来说明一行代码或者一组相关的代码。单行注释可能有三种使用方式。"><a href="#单行注释应当来说明一行代码或者一组相关的代码。单行注释可能有三种使用方式。" class="headerlink" title="单行注释应当来说明一行代码或者一组相关的代码。单行注释可能有三种使用方式。"></a>单行注释应当来说明一行代码或者一组相关的代码。单行注释可能有三种使用方式。</h5><ol><li>独占一行的注释，用来解释下一行代码。</li><li>在代码行的尾部注释，用来解释之前的代码。</li><li>多行，用来注释掉一个代码块。</li><li>这里有一些示例代码。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 如果代码执行到这里，则表明通过了所有安全性检查</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：注释之前没有空行</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 如果代码执行到这里，则表明通过了所有安全性检查</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：错误的缩进</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"><span class="comment">// 如果代码执行到这里，则表明通过了所有安全性检查</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：这里应当用多行注释</span></span><br><span class="line"><span class="comment">// 接下来的这段代码非常难，那么，让我详细解释一下</span></span><br><span class="line"><span class="comment">// 这段代码的作用是首先判断条件是否为真</span></span><br><span class="line"><span class="comment">// 只有为真时才执行。这里的条件是通过</span></span><br><span class="line"><span class="comment">// 多个函数计算出来的，在整个会话生命期内</span></span><br><span class="line"><span class="comment">// 这个值是可以修改的</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 如果代码执行到这里，则表明通过了所有安全性检查</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="对于代码尾单行注释的情况，应确保代码尾同注释之间至少一个缩进。"><a href="#对于代码尾单行注释的情况，应确保代码尾同注释之间至少一个缩进。" class="headerlink" title="对于代码尾单行注释的情况，应确保代码尾同注释之间至少一个缩进。"></a>对于代码尾单行注释的情况，应确保代码尾同注释之间至少一个缩进。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> result = something + somethingElse; <span class="comment">// somethingElse will never be null</span></span><br><span class="line"><span class="comment">// 不好的写法：代码和注释间没有足够的空格</span></span><br><span class="line"><span class="keyword">var</span> result = something + somethingElse;<span class="comment">// somethingElse will never be null</span></span><br><span class="line">注释一个代码块时在连续多行使用单行注释是唯一可以接受的情况。多行注释不应当在这种情况下使用。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="comment">// if (condition) &#123;</span></span><br><span class="line"><span class="comment">//     doSomething();</span></span><br><span class="line"><span class="comment">//     thenDoSomethingElse();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-2-多行注释"><a href="#7-2-多行注释" class="headerlink" title="7.2 多行注释"></a>7.2 多行注释</h4><h5 id="多行注释应当在代码需要更多文字去解释的时候使用。每个多行注释都至少有如下三行。"><a href="#多行注释应当在代码需要更多文字去解释的时候使用。每个多行注释都至少有如下三行。" class="headerlink" title="多行注释应当在代码需要更多文字去解释的时候使用。每个多行注释都至少有如下三行。"></a>多行注释应当在代码需要更多文字去解释的时候使用。每个多行注释都至少有如下三行。</h5><ol><li>首行仅仅包括/*注释开始。该行不应当有其他文字。</li><li>接下来的行以*开头并保持左对齐。这些行可以有文字描述。</li><li>最后一行以*/开头并同先前行保持对齐。也不应该有其他文字。</li><li>多行注释的手行应当保持同它描述代码的相同层次缩进。后续的每行应当有同样层次的缩进并附加一个空格（为了适当保持*字符的对齐）。对每一个多行代码之前应预留一个空格。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果代码执行到这里</span></span><br><span class="line"><span class="comment">     * 说明通过了所有的安全检测</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：注释之前无空行</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果代码执行到这里</span></span><br><span class="line"><span class="comment">     * 说明通过了所有的安全检测</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：星号后没有空格</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *如果代码执行到这里</span></span><br><span class="line"><span class="comment">     *说明通过了所有的安全检测</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：错误的缩进</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果代码执行到这里</span></span><br><span class="line"><span class="comment"> * 说明通过了所有的安全检测</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    allowed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：代码尾部注释不要用多行注释格式</span></span><br><span class="line"><span class="keyword">var</span> result = something + somethingElse; <span class="comment">/* somethingElse will never be null */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-3-注释声明"><a href="#7-3-注释声明" class="headerlink" title="7.3 注释声明"></a>7.3 注释声明</h4><p>注释有时候也可以用来给一段代码声明额外的信息。这些声明的格式以单个单词打头并紧跟一个双引号。可使用的声明如下。</p><p>TODO</p><p>说明代码还未完成。应当包含下一步要做的事情。</p><p>HACK</p><p>表明代码实现走了一个捷径。应当包含为何使用hack的原因。这也可能表明该问题可能会有更好的解决办法。</p><p>XXX</p><p>说明代码是有问题的并应当尽快修复。</p><p>FIXME</p><p>说明代码是有问题的并应尽快修复。重要行略次于XXX。</p><p>REVIEW</p><p>说明代码任何可能的改动都需要评审。</p><p>这些声明可能在一行或多行注释中使用，并且应当遵循一般注释类型相同的格式规则。</p><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="comment">// TODO：我希望找到一种更快捷的方式</span></span><br><span class="line">doSomething();</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * HACK：不得不针对IE做的特殊处理。我计划后续有时间时</span></span><br><span class="line"><span class="comment"> * 重写这部分。这些代码可能需要在v1.2版本之前替换掉</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="comment">// REVIEW：有更好的方法吗？</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：注释声明空格不正确</span></span><br><span class="line"><span class="comment">// TODO： 我希望找到一种更快捷的方式</span></span><br><span class="line">doSomething();</span><br><span class="line"><span class="comment">// 不好的写法：代码和注释应当保持同样的缩进</span></span><br><span class="line">    <span class="comment">// REVIEW：有更好的方法吗？</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="8-声明变量"><a href="#8-声明变量" class="headerlink" title="8.声明变量"></a>8.声明变量</h4><p>所有的变量在使用前应当事先定义。变量定义应当放在函数开头，使用一个var表达式每行一个变量。除了首行，所有行都应当多一层缩进以使变量名能够垂直方向对齐。变量定义时应当初始化，并赋值操作符应当保持一直的缩进。初始化的变量应当在未初始化变量之前。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</span><br><span class="line">    name = <span class="string">&#x27;Nicholas&#x27;</span>,</span><br><span class="line">    found = <span class="literal">false</span>,</span><br><span class="line">    empty;</span><br><span class="line"><span class="comment">// 不好的写法：不恰当的初始化赋值</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</span><br><span class="line">   name = <span class="string">&#x27;Nicholas&#x27;</span>,</span><br><span class="line">   found= <span class="literal">false</span>,</span><br><span class="line">   empty;</span><br><span class="line"><span class="comment">// 不好的写法：错误缩进</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>,</span><br><span class="line">name = <span class="string">&#x27;Nicholas&#x27;</span>,</span><br><span class="line">found = <span class="literal">false</span>,</span><br><span class="line">empty;</span><br><span class="line"><span class="comment">// 不好的写法：多个定于写在一行</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>, name = <span class="string">&#x27;Nicholas&#x27;</span>,</span><br><span class="line">    found = <span class="literal">false</span>, empty;</span><br><span class="line"><span class="comment">// 不好的写法：为初始化的变量放在最前边</span></span><br><span class="line"><span class="keyword">var</span> empty,</span><br><span class="line">    count = <span class="number">10</span>,</span><br><span class="line">    name = <span class="string">&#x27;Nicholas&#x27;</span>,</span><br><span class="line">    found = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 不好的写法：多个var表达式</span></span><br><span class="line"><span class="keyword">var</span> empty,</span><br><span class="line">    count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Nicholas&#x27;</span>,</span><br><span class="line">    found = <span class="literal">false</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-函数声明"><a href="#9-函数声明" class="headerlink" title="9.函数声明"></a>9.函数声明</h4><p>函数应当在使用前提前定义。一个不是作为方法的函数（也就是说没有作为一个对象的属性）应当使用函数定义的格式（不是函数表达式和Function构造格式）。函数名和开始圆括号之间不应当有空格。结束的圆括号和右边的花括号之间应该留一个空格。右侧的花括号应当同function关键字保持同一行。开始和结束括号之间不应该有空格。参数名之间应当在逗号之后保留一个空格。函数体应当保持一级缩进。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：第一行不恰当的空格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：函数表达式</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：右侧花括号不对</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1, arg2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg1 + arg2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误的写法：使用了Function构造器</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;arg1&#x27;</span>, <span class="string">&#x27;arg2&#x27;</span>, <span class="keyword">return</span> arg1 + arg2);</span><br><span class="line">其他函数内部定义函数应当在<span class="keyword">var</span>语句后立即定义。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">10</span>,</span><br><span class="line">        name = <span class="string">&#x27;Nicholas&#x27;</span>,</span><br><span class="line">        found = <span class="literal">false</span>,</span><br><span class="line">        empty;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用inner()的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：inner函数的定义先于变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">10</span>,</span><br><span class="line">        name = <span class="string">&#x27;Nicholas&#x27;</span>,</span><br><span class="line">        found = <span class="literal">false</span>,</span><br><span class="line">        empty;</span><br><span class="line">    <span class="comment">// 调用inner()的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>匿名函数可能作为方法赋值给对象，或者作为其他函数的参数。function关键字同开始括号之间不应有空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">object.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 不好的写法：不正确的空格</span></span><br><span class="line">object.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;;</span><br><span class="line">立即被调用的函数应当在函数调用的外层用圆括号包裹。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> value = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hi&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="comment">// 不好的写法：函数调用外层没有用圆括号包裹</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hi&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="comment">// 不好的写法：圆括号的位置不当</span></span><br><span class="line"><span class="keyword">var</span> value = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">&#x27;Hi&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="10-命名"><a href="#10-命名" class="headerlink" title="10.命名"></a>10.命名</h4><p>变量和函数在命名时应当小心。命名应仅限与数字字母字符，某些情况也可以使用下划线。最好不要在任何命名中使用美元（$）或反斜杠（\）。</p><p>变量命名应当采用驼峰命名格式，首字母小写，每个单词首字母大写。变量名的第一个单词应是一个名词（而非动词），以避免同函数混淆。不要在变量命名中使用下划线。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> accountNumber = <span class="string">&#x27;8401-1&#x27;</span>;</span><br><span class="line"><span class="comment">// 不好的写法：大些字母开头</span></span><br><span class="line"><span class="keyword">var</span> AccountNumber = <span class="string">&#x27;8401-1&#x27;</span>;</span><br><span class="line"><span class="comment">// 不好的写法：使用下划线</span></span><br><span class="line"><span class="keyword">var</span> account_number = <span class="string">&#x27;8401-1&#x27;</span>;</span><br><span class="line">函数命名也应当采用驼峰命名格式。函数名的第一个单词应当是动词（而非名词）来避免同变量混淆。函数名中最好不要使用下划线。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：大些字母开头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：名词开头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">car</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：使用下划线</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_something</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line">构造函数——通过<span class="keyword">new</span>运算符创建新对象的函数——也应当以驼峰格式命名并且首字母大写。构造函数名称应一非动词开头，因为<span class="keyword">new</span>代表这创建一个对象实例的操作。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：小字母开头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：使用下划线</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">My_Object</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：动词开头</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">My_Object</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="常量（值不会被改变的变量）的命名应当是所有字母大写，不同单词之间用单个下划线隔开。"><a href="#常量（值不会被改变的变量）的命名应当是所有字母大写，不同单词之间用单个下划线隔开。" class="headerlink" title="常量（值不会被改变的变量）的命名应当是所有字母大写，不同单词之间用单个下划线隔开。"></a>常量（值不会被改变的变量）的命名应当是所有字母大写，不同单词之间用单个下划线隔开。</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> TOTAL_COUNT = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 不好的写法：驼峰形式</span></span><br><span class="line"><span class="keyword">var</span> totalCount = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 不好的写法：混合形式</span></span><br><span class="line"><span class="keyword">var</span> total_COUNT= <span class="number">10</span>;</span><br><span class="line">对象的属性同变量的同命名规则相同。对象的方法同函数的命名规则相同。如果属性或方法是私有的，应当在之前加一个下划线。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    _count: <span class="number">10</span>,</span><br><span class="line">    _getCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="11-严格模式"><a href="#11-严格模式" class="headerlink" title="11.严格模式"></a>11.严格模式</h4><p>严格模式应当仅限在函数内部使用，千万不要在全局使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法：全局使用严格模式</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你期望在多个函数中使用严格模式而不需要多次声明“use<br>strict”，可以使用立刻被调用的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomethingElse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h4 id="12-赋值"><a href="#12-赋值" class="headerlink" title="12.赋值"></a>12.赋值</h4><p>当给变量赋值时，如果右侧是含有比较语句的表达式，需要用括号包裹。</p><p>// 好的写法<br>var flag = (i &lt; count);<br>// 不好的写法：遗漏括号<br>var flag = i &lt; count;</p><h4 id="13-等号运算符"><a href="#13-等号运算符" class="headerlink" title="13.等号运算符"></a>13.等号运算符</h4><p>使用===（严格相等）和！==（严格不相等）代替==（相等）和！=（不等）来避免弱类型转换错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> same =(a === b);</span><br><span class="line"><span class="comment">// 不好的写法：使用==</span></span><br><span class="line"><span class="keyword">var</span> same =(a == b);</span><br></pre></td></tr></table></figure><h4 id="14-三元操作符"><a href="#14-三元操作符" class="headerlink" title="14.三元操作符"></a>14.三元操作符</h4><p>三元运算应当仅仅用在条件赋值语句中，而不要作为if语句的替代品。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的方法</span></span><br><span class="line"><span class="keyword">var</span> value = condition ? value1 : value2;</span><br><span class="line"><span class="comment">// 不好的方法</span></span><br><span class="line"><span class="keyword">var</span> condition ? doSomething() : doSomethingElse();</span><br></pre></td></tr></table></figure><p>15.语句</p><p>15.1 简单语句</p><p>每一行最多只包含一条语句。所有简单语句都应该以分号（;）结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">count++;</span><br><span class="line">a = b;</span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line">count++; a = b;</span><br></pre></td></tr></table></figure><h5 id="15-2-返回语句"><a href="#15-2-返回语句" class="headerlink" title="15.2 返回语句"></a>15.2 返回语句</h5><p>返回语句当返回一个值的时候不应该使用圆括号包裹，除非在某些情况下这么做可以让返回值更容易理解。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">return</span> collection.size();</span><br><span class="line"><span class="keyword">return</span> (size &gt; <span class="number">0</span> ? size : defaultSize);</span><br></pre></td></tr></table></figure><h5 id="15-3-复合语句"><a href="#15-3-复合语句" class="headerlink" title="15.3 复合语句"></a>15.3 复合语句</h5><p>复合语句是大括号括起来的语句列表。</p><p>括起来的语句应当较复合语句多缩进一个层级。<br>开始的大括号应当在复合语句所在行的末尾；结束的大括号应当独占一行且同复合语句的开始保持同样的缩进。<br>当语句是控制结构的一部分时，诸如if或者for语句，所有语句都需要用大括号括起来，也包括单个单词。zh这个约定使得我们更方便地添加语句而不用担心忘记加括号而引起bug。<br>像if一样的语句开始的关键字，其后应该紧跟一个空格，起始大括号应当在空格之后。<br>15.4 if 语句</p><p>if语句应当是下面的格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绝不允许在if语句中省略花括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：不且当的空格</span></span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：遗漏花括号</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    doSomething();</span><br><span class="line"><span class="comment">// 不好的写法：所有代码在一行</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123; doSomething(); &#125;</span><br><span class="line"><span class="comment">// 不好的写法：所有代码在一行且没有花括号</span></span><br><span class="line"><span class="keyword">if</span> (condition) doSomething();</span><br></pre></td></tr></table></figure><p>15.5 for 语句</p><p>for类型的语句应是下面的格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; update) &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object) &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>语句的初始化不应当有变量声明。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">var</span> i,</span><br><span class="line">    len;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="number">10</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：初始化时候声明变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="number">10</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不好的写法：初始化的时候声明变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> object) &#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用for-in语句时，记得使用hasOwnProperty()进行双重检查来过滤出对象的成员。</p><p>15.6 while 语句</p><p>while类的语句应当是下面的格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15.7 do 语句</p><p>do类的语句应当是下面格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><p>15.8 switch 语句</p><p>switch类的语句应当是下面格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> expression:</span><br><span class="line">        statments</span><br><span class="line">    defaul:</span><br><span class="line">        statments</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch下的每一个case都应当保持一个缩进。除第一个之外包括default在内的每一个case都应当在之前保持一个空行。每一个语句（除了default）都应当以break、return、throw结尾，或者用一行注释表示跳过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">/* falls through */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        doSomething();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    defaul:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;This should not happen&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个switch语句不包含default情况，应应用一行注释代替。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">/* falls through */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        doSomething();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 没有default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15.9 ty 语句</p><p>try类语句应当格式如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125; <span class="keyword">catch</span> (variable) &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125; <span class="keyword">catch</span> (variable) &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    statments</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16-留白"><a href="#16-留白" class="headerlink" title="16.留白"></a>16.留白</h4><p>在逻辑相关的代码之间添加空行可以提高代码的可读性。</p><p>两行空行仅限在如下情况中使用。</p><p>在不同的源码文件之间。<br>在类和接口定义之间。<br>单行空行仅限在如下情况中使用。</p><p>方法之间。<br>方法中局部变量和第一行语句之间。<br>多行或者单行注释之前。<br>方法中逻辑代码块之间以提升代码的可读性。<br>空格应在如下情况中使用。</p><p>关键词后跟括号的情况应当用空格隔开。<br>参数列表中逗号之后应当保留一个空格。<br>所有的除了点（.）之外的二元运算符，其操作数都应当用空格隔开。单目运算符的操作数之间不应该用<br>空白隔开，诸如一元减号，递增（++），递减（–）。</p><p>for语句中的表达方式之间应当用空格号隔开。</p><h4 id="17-需要避免的"><a href="#17-需要避免的" class="headerlink" title="17.需要避免的"></a>17.需要避免的</h4><p>切勿使用像String一类的原始包装类型创建新的对象。<br>避免使用eval（）。<br>避免使用with语句。该语句在严格模式中不复存在，可能在未来的ECMAScript标准中也将去除。<br>数字应当使用十进制整数，科学计数法表示整数，十六进制整数，或者十进制浮点小数，小数点前后应当至少保留一位数字。避免使用八进制直接量。</p><h4 id="18-编程实践"><a href="#18-编程实践" class="headerlink" title="18.编程实践"></a>18.编程实践</h4><h5 id="什么是松耦合"><a href="#什么是松耦合" class="headerlink" title="什么是松耦合"></a>什么是松耦合</h5><p>很多设计模式就是为了解决紧耦合的问题，如果2个组件耦合太紧，则说明一个组件和另一个组件的直接相关，如果修改一个组件的逻辑那么另一个组件逻辑也需修改。<br>比如一个名为error的css类名，有一天你觉得error不合适，想换warning那么不仅要修改css还要修改所有页面classsName的HTML，。<br>当你能够做到修改个一个组件不需要更改其他组件时候，做到了松耦合。</p><h5 id="将javascript从css中抽离"><a href="#将javascript从css中抽离" class="headerlink" title="将javascript从css中抽离"></a>将javascript从css中抽离</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不好的写法</span></span><br><span class="line">.box&#123;</span><br><span class="line">    width:expression&#123;<span class="built_in">document</span>.body.offsetWidth+<span class="string">&quot;px&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将css从javascript中抽离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不好的写法</span></span><br><span class="line">element.style.color=<span class="string">&quot;red&quot;</span></span><br><span class="line"></span><br><span class="line">element.style.left=<span class="string">&quot;10px&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//好的写法</span></span><br><span class="line">css中加入</span><br><span class="line">.reveal&#123;</span><br><span class="line">    color:red;</span><br><span class="line">    left:10px;</span><br><span class="line">    top:110px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">element.className += <span class="string">&quot; reveal&quot;</span></span><br><span class="line"></span><br><span class="line">element.classList.add(<span class="string">&quot;reveal&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="将javascript从html中抽离"><a href="#将javascript从html中抽离" class="headerlink" title="将javascript从html中抽离"></a>将javascript从html中抽离</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不好的写法</span></span><br><span class="line">&lt;button onclick=<span class="string">&quot;doSomething()&quot;</span> id=<span class="string">&quot;action-btn&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//好的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//........</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn = ....</span><br><span class="line">btn.addEventListenter(<span class="string">&quot;click&quot;</span>,doSomething,<span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="19-事件处理"><a href="#19-事件处理" class="headerlink" title="19.事件处理"></a>19.事件处理</h4><h4 id="20-避免空比较"><a href="#20-避免空比较" class="headerlink" title="20.避免空比较"></a>20.避免空比较</h4><h3 id="最后代码优化的建议"><a href="#最后代码优化的建议" class="headerlink" title="最后代码优化的建议"></a><strong>最后代码优化的建议</strong></h3><ul><li style="list-style: none"><input type="checkbox" checked></input> SOLID原则尽量保证SOLID原则的前提下，用最简易的代码满足需求（即不要考虑太多未来的可能性）</li><li style="list-style: none"><input type="checkbox" checked></input> 新需求需要修改现存代码的时候，尽可能保证SOLID原则需求不足以做出理想设计的时候，</li><li style="list-style: none"><input type="checkbox" checked></input> 允许存在违反SOLID的代码尽量保证自动化测试的代码覆盖率代码可读性高于一切，</li><li style="list-style: none"><input type="checkbox" checked></input> 尽量写自注释代码（即不需要额外注释，通过变量/方法命名就能读懂）</li><li style="list-style: none"><input type="checkbox" checked></input> ReSharper</li></ul><p>转载自<a class="link"   href="http://note.youdao.com/" >http://forsigner.com/2013/09/01/javascript-style-guide/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个New操作符</title>
      <link href="2017/12/13/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AANew%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>2017/12/13/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AANew%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="实现一个new"><a href="#实现一个new" class="headerlink" title="实现一个new"></a>实现一个new</h1><a id="more"></a><ol><li>它创建了一个全新的对象。</li><li>它会被执行 [[Prototype]]（也就是 <strong>proto</strong>）链接。</li><li>它使 this指向新创建的对象。。</li><li>通过 new创建的每个对象将最终被 [[Prototype]]链接到这个函数的 prototype对象上。</li><li>如果函数没有返回对象类型 Object(包含 Functoin,Array,Date,RegExg,Error)，那么 new表达式中的函数调用将返回该对象引用。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个新的对象</span></span><br><span class="line">        <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">        <span class="comment">// 取出第一个参数，该参数就是我们将会传入的构造函数，比如在调用new(P)的时候，Constructor就是P本身</span></span><br><span class="line">        <span class="comment">// arguments会被shift去除第一个参数，剩余的就是构造器P的参数</span></span><br><span class="line">        <span class="keyword">let</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将obj的原型指向构造函数，此时obj可以访问构造函数原型中的属性</span></span><br><span class="line">        obj.__proto__ = Constructor.prototype;</span><br><span class="line">        <span class="comment">// 改变构造函数的this的指向，使其指向obj， 此时obj也可以访问构造函数中的属性了</span></span><br><span class="line">        <span class="keyword">let</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="comment">// 确保 new 出来的是个对象 返回的值是什么就return什么</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> ? result : obj</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">name,a,b</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">        <span class="built_in">console</span>.log(a+b)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(newF(A,<span class="string">&#x27;小米&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190424003635.png"                      alt=""                ></p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>如何绑定this, call、apply使用<br>比如这句： <code>[].shift.call(arguments)</code>的意思是：<br>[1,2,3,4]  ====&gt; shift ==&gt; [2,3,4] 其中 Constructor就是1,</p><p>arguments使用<br>而到了这句 <code>Constructor.apply(obj, arguments)</code> 中 arguments就是[2,3,4]，意思是obj的this指向全部指向return新实例对象，并且把参数传入</p><p>原型链基础</p><h1 id="手写系列"><a href="#手写系列" class="headerlink" title="手写系列"></a>手写系列</h1><ol><li><del><strong>实现一个new操作符</strong></del></li><li>实现一个JSON.stringify</li><li>实现一个JSON.parse</li><li>实现一个call或 apply</li><li><del>实现一个Function.bind</del></li><li>实现一个继承</li><li>实现一个JS函数柯里化</li><li>手写一个Promise(中高级必考)</li><li>手写防抖(Debouncing)和节流(Throttling)</li><li>手写一个JS深拷贝</li><li>实现一个instanceOf</li></ol>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【置顶】Web前端开发规范手册</title>
      <link href="2017/12/12/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%89%8B%E5%86%8C/"/>
      <url>2017/12/12/Web%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>为提高团队协作效率, 便于后台人员添加功能及前端后期优化维护, 输出高质量的文档, 特制订此文档. 本规范文档一经确认, 前端开发人员必须按本文档规范进行前台页面开发. 本文档如有不对或者不合适的地方请及时提出, 经讨论决定后可以更改此文档.<br><a id="more"></a></p><p>一、规范目的<br>1.1     概述</p><p>为提高团队协作效率, 便于后台人员添加功能及前端后期优化维护, 输出高质量的文档, 特制订此文档. 本规范文档一经确认, 前端开发人员必须按本文档规范进行前台页面开发. 本文档如有不对或者不合适的地方请及时提出, 经讨论决定后可以更改此文档.</p><p>二、文件规范</p><p>2.1  文件命名规则</p><blockquote><p>文件名称统一用小写的英文字母、数字和下划线的组合，其中不得包含汉字、空格和特殊字符；命名原则的指导思想一是使得你自己和工作组的每一个成员能够方便的理解每一个文件的意义，二是当我们在文件夹中使用“按名称排例”的命令时，同一种大类的文件能够排列在一起，以便我们查找、修改、替换、计算负载量等等操作。</p></blockquote><p>a.  HTML的命名原则<br>引文件统一使用index.htm  index.html  index.asp文件名（小写）<br>各子页命名的原则首先应该以栏目名的英语翻译取单一单词为名称。例如：<br>关于我们 \ aboutus<br>信息反馈 \ feedback<br>产 品 \ product<br>如果栏目名称多而复杂并不好以英文单词命名，则统一使用该栏目名称拼音或拼音的首字母表示；<br>每一个目录中应该包含一个缺省的html 文件，文件名统一用index.htm  index.html  index.asp；</p><p>b.  图片的命名原则<br>图片的名称分为头尾两部分，用下划线隔开，头部分表示此图片的大类性质<br>例如：广告、标志、菜单、按钮等等。<br>放置在页面顶部的广告、装饰图案等长方形的图片取名： banner<br>标志性的图片取名为： logo<br>在页面上位置不固定并且带有链接的小图片我们取名为 button<br>在页面上某一个位置连续出现，性质相同的链接栏目的图片我们取名： menu<br>装饰用的照片我们取名： pic<br>不带链接表示标题的图片我们取名： title<br>范例：banner_sohu.gif  banner_sina.gif  menu_aboutus.gif  menu_job.gif  title_news.gif  logo_police.gif   logo_national.gif   pic_people.jpg<br>鼠标感应效果图片命名规范为”图片名+_+on/off”。<br>例如：menu1_on.gif  menu1_off.gif</p><p>c.  javascript的命名原则<br>例如：广告条的javascript文件名为 ad.js  弹出窗口的javascript文件名为 pop.js</p><p>d.  动态语言文件命名原则<br>以性质<em>描述，描述可以有多个单词，用“</em>”隔开，性质一般是该页面得概要。<br>范例：register_form.asp   register_post.asp   topic_lock.asp</p><p>2.2  文件存放位置规范</p><p>_Root<br>    cn    存放中文HTML文件<br>    en    存放英文HTML文件<br>    flash    存放Flash文件<br>    images    存放图片文件<br>    imagestudio    存放PSD源文件<br>    flashstudio    存放flash源文件<br>    inc    存放include文件<br>    library    存放DW库文件<br>    media    存放多媒体文件<br>    project    存放工程项目资料<br>    temp    存放客户原始资料<br>    js    存放JavaScript脚本<br>    css    存放CSS文件</p><p>2.3  CSS 书写规范</p><p>基本原则：</p><p>CSS样式可细分为3类：自定义样式、重新定义HTML样式、链接状态样式。</p><ol><li>样式为设计师自定义的新 CSS 样式，影响被使用本样式的区域，用于完成网页中局部的样式设定。样式名 “.”+“相应样式效果描述的单词或缩写”例：“ .shadow ”<br>文字样式样式名“.no”+“字号”+“行距”+“颜色缩写”例：“ .no12 ” 、“ .no12-24 ”</li><li>义HTML样式为设计师重新定义已有的HTML标签样式，影响全部的被设定标签样式，用于统一网页中某一标签的样式定义。样式名“HTML标签”例：hr { border: 1px dotted #333333 }</li><li>态样式为设计师对链接不同状态设定特殊样式，影响被使用本样式区域中的链接。<br>该样式写法有2种： a.nav:link    nav.a:link  第一种只能修饰<a>标签中；第二种可以修饰所有包含有<a>标签的其他标签。<br>页面内的样式加载必须用链接方式<link rel="stylesheet" type="text/css" href="style/style.css"></li></ol><p>注意细则：</p><ol><li>协作开发及分工: i会根据各个模块, 同时根据页面相似程序, 事先写好大体框架文件, 分配给前端人员实现内部结构&amp;表现&amp;行为; 共用css文件base.css由i书写, 协作开发过程中, 每个页面请务必都要引入, 此文件包含reset及头部底部样式, 此文件不可随意修改;</li><li>class与id的使用: id是唯一的并是父级的, class是可以重复的并是子级的, 所以id仅使用在大的模块上, class可用在重复使用率高及子级中; id原则上都是由我分发框架文件时命名的, 为JavaScript预留钩子的除外;</li><li>为JavaScript预留钩子的命名, 请以 js_ 起始, 比如: js_hide, js_show;</li><li>class与id命名: 大的框架命名比如header/footer/wrapper/left/right之类的在2中由i统一命名.其他样式名称由 小写英文 &amp; 数字 &amp; _ 来组合命名, 如i_comment, fontred, width200; 避免使用中文拼音, 尽量使用简易的单词组合; 总之, 命名要语义化, 简明化.</li><li>规避class与id命名(此条重要, 若有不明白请及时与i沟通):<br>a, 通过从属写法规避, 示例见d;<br>b, 取父级元素id/class命名部分命名, 示例见d;<br>c, 重复使用率高的命名, 请以自己代号加下划线起始, 比如i_clear;<br>d, a,b两条, 适用于在2中已建好框架的页面, 如, 要在2中已建好框架的页面代码<div id="mainnav"></div>中加入新的div元素,<br>按a命名法则: <div id="mainnav"><div class="firstnav">…</div></div>,<br>样式写法:  #mainnav  .firstnav{…….}<br>按b命名法则: <div id="mainnav"><div class="main_firstnav">…</div></div>,<br>样式写法:  .main_firstnav{…….}</li><li>css属性书写顺序, 建议遵循 布局定位属性–&gt;自身属性–&gt;文本属性–&gt;其他属性. 此条可根据自身习惯书写, 但尽量保证同类属性写在一起. 属性列举: 布局定位属性主要包括: margin、padding、float（包括clear）、position（相应的 top,right,bottom,left）、display、visibility、overflow等；自身属性主要包括: width &amp; height &amp; background &amp; border; 文本属性主要包括：font、color、text-align、text-decoration、text-indent等；其他属性包括: list-style(列表样式)、vertical-vlign、cursor、z-index(层叠顺序) 、zoom等.我所列出的这些属性只是最常用到的, 并不代表全部;</li><li>书写代码前, 考虑并提高样式重复使用率;</li><li>充分利用html自身属性及样式继承原理减少代码量, 比如:<br><ul class="list"><li>这儿是标题列表<span>2010-09-15</span></ul><br>定义ul.list li{position:relative}  ul.list li span{position:absolute; right:0}<br>即可实现日期居右显示</li><li>样式表中中文字体名, 请务必转码成unicode码, 以避免编码错误时乱码;</li><li>背景图片请尽可能使用sprite技术, 减小http请求, 考虑到多人协作开发, sprite按模块制作;</li><li>使用table标签时(尽量避免使用table标签), 请不要用width/ height/cellspacing/cellpadding等table属性直接定义表现, 应尽可能的利用table自身私有属性分离结构与表现, 如thead,tr,th,td,tbody,tfoot,colgroup,scope; (cellspaing及cellpadding的css控制方法: table{border:0;margin:0;border-collapse:collapse;} table th, table td{padding:0;} , base.css文件中我会初始化表格样式)</li><li>杜绝使用<meta http-equiv="X-UA-Compatible" content="IE=7" /> 兼容ie8;</li><li>用png图片做图片时, 要求图片格式为png-8格式,若png-8实在影响图片质量或其中有半透明效果, 请为ie6单独定义背景:<br>background:none;_filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=crop, src=’img/bg.png’);</li><li>避免兼容性属性的使用, 比如text-shadow || css3的相关属性;</li><li>减少使用影响性能的属性, 比如position:absolute || float ;</li><li>必须为大区块样式添加注释, 小区块适量注释;</li><li>代码缩进与格式: 建议单行书写, 可根据自身习惯, 后期优化i会统一处理;</li></ol><h5 id="命名规则："><a href="#命名规则：" class="headerlink" title="命名规则："></a>命名规则：</h5><ol><li>头：header</li><li>内容：content/container</li><li>尾：footer</li><li>导航：nav</li><li>侧栏：sidebar</li><li>栏目：column</li><li>页面外围控制整体布局宽度：wrapper</li><li>左右中：left right center</li><li>登录条：loginbar</li><li>标志：logo</li><li>广告：banner</li><li>页面主体：main</li><li>热点：hot</li><li>新闻：news</li><li>下载：download</li><li>子导航：subnav</li><li>菜单：menu</li><li>子菜单：submenu</li><li>搜索：search</li><li>友情链接：friendlink</li><li>页脚：footer</li><li>版权：copyright</li><li>滚动：scroll</li><li>内容：content</li><li>标签页：tab</li><li>文章列表：list</li><li>提示信息：msg</li><li>小技巧：tips</li><li>栏目标题：title</li><li>加入：joinus</li><li>指南：guild</li><li>服务：service</li><li>注册：regsiter</li><li>状态：status</li><li>投票：vote</li><li>合作伙伴：partner<h5 id="二-注释的写法"><a href="#二-注释的写法" class="headerlink" title="(二)注释的写法:"></a>(二)注释的写法:</h5>/<em> Footer </em>/<br>内容区<br>/<em> End Footer </em>/<h5 id="三-id的命名"><a href="#三-id的命名" class="headerlink" title="(三)id的命名:"></a>(三)id的命名:</h5><h6 id="1-页面结构"><a href="#1-页面结构" class="headerlink" title="(1)页面结构"></a>(1)页面结构</h6></li><li>容器: container</li><li>页头：header</li><li>内容：content/container</li><li>页面主体：main</li><li>页尾：footer</li><li>导航：nav</li><li>侧栏：sidebar</li><li>栏目：column</li><li>页面外围控制整体布局宽度：wrapper</li><li>左右中：left right center</li></ol><h6 id="2-导航"><a href="#2-导航" class="headerlink" title="(2)导航"></a>(2)导航</h6><ol><li>导航：nav</li><li>主导航：mainbav</li><li>子导航：subnav</li><li>顶导航：topnav</li><li>边导航：sidebar</li><li>左导航：leftsidebar</li><li>右导航：rightsidebar</li><li>菜单：menu</li><li>子菜单：submenu</li><li>标题: title</li><li>摘要: summary</li></ol><h6 id="3-功能"><a href="#3-功能" class="headerlink" title="(3)功能"></a>(3)功能</h6><ol><li>标志：logo</li><li>广告：banner</li><li>登陆：login</li><li>登录条：loginbar</li><li>注册：regsiter</li><li>搜索：search</li><li>功能区：shop</li><li>标题：title</li><li>加入：joinus</li><li>状态：status</li><li>按钮：btn</li><li>滚动：scroll</li><li>标签页：tab</li><li>文章列表：list</li><li>提示信息：msg</li><li>当前的: current</li><li>小技巧：tips</li><li>图标: icon</li><li>注释：note</li><li>指南：guild</li><li>服务：service</li><li>热点：hot</li><li>新闻：news</li><li>下载：download</li><li>投票：vote</li><li>合作伙伴：partner</li><li>友情链接：link</li><li>版权：copyright\</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个 compose 实现</title>
      <link href="2017/11/14/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAcompose%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2017/11/14/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAcompose%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>创建一个函数,通过把一个函数的输出作为输入发送给另一个函数的方式把两个函数组合起来</p></blockquote><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>比如我们要实现输入 jack，smith 我们就要打印出来，‘HELLO，JACK SMITH’ 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greeting = <span class="function">(<span class="params">firstName, lastName</span>) =&gt;</span> <span class="string">&quot;hello, &quot;</span> + firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line"><span class="keyword">var</span> toUpper = <span class="function"><span class="params">str</span> =&gt;</span> str.toUpperCase();</span><br><span class="line"><span class="keyword">var</span> fn = compose(toUpper, greeting);</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;smith&quot;</span>));</span><br></pre></td></tr></table></figure><p>这就是 compose 大致的使用，总结下来要注意的有以下几点</p><ol><li><p>compose 的参数是函数，返回的也是一个函数</p></li><li><p>因为除了第一个函数的接受参数，其他函数的接受参数都是上一个函数的返回值，所以初始函数的参数是多元的，而其他函数的接受值是一元的</p></li><li><p>compsoe 函数可以接受任意的参数，所有的参数都是函数，且执行方向是自<code>右向左的</code>，初始函数一定放到参数的<code>最右面</code></p></li></ol><p>compose 的<code>好处</code>我简单提一下，如果还想再加一个处理函数，不需要修改 fn，只需要在执行一个 compose，比如我们再想加一个 trim，只需要这样做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trim = <span class="function"><span class="params">str</span> =&gt;</span> str.trim();</span><br><span class="line"><span class="keyword">var</span> newFn = compose(trim, fn);</span><br><span class="line"><span class="built_in">console</span>.log(newFn(<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;smith&quot;</span>));</span><br></pre></td></tr></table></figure><p>维护和扩展都十分的方便。</p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>例子分析完了，本着究其根本的原则，还是要探究与一下 compose 到底是如何实现的,javascript 函数式编程的两大类库，lodash.js 和 ramda.js 是如何实现的，其中 ramda.js 实现的过程非常函数式。</p><p>我的思路是:compose 返回一个函数,为了记录递归的执行情况，还要记录参数的长度 len,还要给返回的函数添加一个名字 f1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = args.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数体里面要做的事情就是不断的执行<code>args</code>中的函数，将上一个函数的执行结果作为下一个执行函数的输入参数,需要一个游标<code>count</code>来记录 args 函数列表的执行情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> diy_compose = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = args.length;</span><br><span class="line">  <span class="keyword">var</span> count = len - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">...args1</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args1); <span class="comment">// [0,100], [result:&#x27;100&#x27;]</span></span><br><span class="line">    result = args[count].apply(<span class="built_in">this</span>, args1);</span><br><span class="line">    <span class="comment">//判断如果是最后一个则直接退出</span></span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      count--;</span><br><span class="line">      <span class="comment">//递归执行f1</span></span><br><span class="line">      <span class="keyword">return</span> f1.call(<span class="literal">null</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="string">&quot;result : &quot;</span> + (x + y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toUpper = <span class="function"><span class="params">str</span> =&gt;</span> str.toUpperCase();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = diy_compose(toUpper, greeting);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c(<span class="number">0</span>, <span class="number">100</span>)); <span class="comment">//RESULT : 100</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>compose 函数首先回执行 b,并将 b 的返回值作为参数传递给 a,该函数调用的方向是<code>从右往左</code>(也就是先执行 b,再执行 a)</p><h3 id="lodash-实现"><a href="#lodash-实现" class="headerlink" title="lodash 实现"></a>lodash 实现</h3><p>lodash 的思路同上，不过是用迭代实现的，我就把它的源代码贴过来看一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flow = <span class="function"><span class="keyword">function</span>(<span class="params">funcs</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取方法参数长度</span></span><br><span class="line">  <span class="keyword">var</span> length = funcs.length;</span><br><span class="line">  <span class="comment">//记录长度值</span></span><br><span class="line">  <span class="keyword">var</span> index = length;</span><br><span class="line">  <span class="comment">//递归减减</span></span><br><span class="line">  <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">    <span class="comment">//如果判断某一个不是方法则输出警告⚠️</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> funcs[index] !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Expected a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> result = length ? funcs[index].apply(<span class="built_in">this</span>, args) : args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">      result = funcs[index].call(<span class="built_in">this</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> flowRight = <span class="function"><span class="keyword">function</span>(<span class="params">funcs</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//方法参数反转..[fn2,fn1] ===&gt; [fn1,fn2]</span></span><br><span class="line">  <span class="keyword">return</span> flow(funcs.reverse());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看出，lodash 的本来实现是从左到右的，但也提供了从右到左的 flowRight，还多了一层函数的校验，而且接收的是数组，不是参数序列,而且从这行<code>var result = length ? funcs[index].apply(this, args) : args[0]可以看出允许数组为空</code>，可以看出还是非常严谨的。我写的就缺少这种严谨的异常处理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://segmentfault.com/a/1190000008394749" >compose 的实现<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写个 bind 实现</title>
      <link href="2017/11/13/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAbind%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2017/11/13/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAbind%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>bind 的介绍</p><blockquote><p>bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。</p></blockquote><h3 id="首先介绍下区别"><a href="#首先介绍下区别" class="headerlink" title="首先介绍下区别"></a>首先介绍下区别</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/blog/20181113/125057318.png"                      alt="mark"                ></p><h3 id="第一个返回一个新函数的实现"><a href="#第一个返回一个新函数的实现" class="headerlink" title="第一个返回一个新函数的实现"></a>第一个返回一个新函数的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.customeBind = <span class="function"><span class="keyword">function</span>(<span class="params">thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    self.apply(thisArg);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newFunc = func.customeBind(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line">newFunc(); <span class="comment">//---&gt; this.a  // 1</span></span><br></pre></td></tr></table></figure><h3 id="传参的模拟实现"><a href="#传参的模拟实现" class="headerlink" title="传参的模拟实现"></a>传参的模拟实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.customeBind = <span class="function"><span class="keyword">function</span>(<span class="params">thisArg, ...list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    self.apply(thisArg, [...list]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newFunc2 = func.customeBind(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">newFunc2();</span><br></pre></td></tr></table></figure><h3 id="原型继承模拟实现"><a href="#原型继承模拟实现" class="headerlink" title="原型继承模拟实现"></a>原型继承模拟实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.customeBind = <span class="function"><span class="keyword">function</span>(<span class="params">thisArg, ...list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="built_in">this</span>; <span class="comment">//目标函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果把返回函数当做构造函数 就是找不到目标函数上的方法</span></span><br><span class="line">  <span class="comment">//解决:新函数继承目标函数的原型</span></span><br><span class="line">  <span class="keyword">let</span> NewBind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    self.apply(thisArg, [...list]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//原型继承:  以某一个对象作为原型创建一个新的对象出来</span></span><br><span class="line">  NewBind.prototype = <span class="built_in">Object</span>.create(self.prototype);</span><br><span class="line">  <span class="comment">//构造函数（即对象和数组文字）的情况下创建的对象将具有constructor指向该对象的基础对象构造函数类型的属性。</span></span><br><span class="line">  NewBind.prototype.constructor = self;</span><br><span class="line">  <span class="comment">//返回新函数</span></span><br><span class="line">  <span class="keyword">return</span> NewBind;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newFunc2 = func.customeBind(&#123; <span class="attr">a</span>: <span class="number">2</span> &#125;, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">newFunc2();</span><br><span class="line"><span class="keyword">let</span> f2 = <span class="keyword">new</span> newFunc2();</span><br><span class="line"><span class="built_in">console</span>.log(f2);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/blog/20181113/124644715.png"                      alt="mark"                ></p><h1 id="手写系列"><a href="#手写系列" class="headerlink" title="手写系列"></a>手写系列</h1><ol><li><del><strong>实现一个new操作符</strong></del></li><li><del>实现一个JSON.stringify</del></li><li><del>实现一个JSON.parse</del></li><li>实现一个call或 apply</li><li><del>实现一个Function.bind</del></li><li>实现一个继承</li><li>实现一个JS函数柯里化</li><li>手写一个Promise(中高级必考)</li><li>手写防抖(Debouncing)和节流(Throttling)</li><li>手写一个JS深拷贝</li><li><del>实现一个instanceOf</del></li><li><del>实现一个 bing</del></li></ol>]]></content>
      
      
      <categories>
          
          <category> 手写系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT 设计模式之寄生式继承</title>
      <link href="2017/10/31/%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF/"/>
      <url>2017/10/31/%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>寄生式继承</p><a id="more"></a><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/TIM%E6%88%AA%E5%9B%BE20171101182848.png"                      alt="image"                ></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> go = <span class="string">&#x27;我是私有的&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.color = color;</span><br><span class="line">  <span class="built_in">this</span>.price = price;</span><br><span class="line">  <span class="built_in">this</span>.getGo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> go;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Car.prototype.getCar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;颜色&#x27;</span> + <span class="built_in">this</span>.color);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cruze</span>(<span class="params">color, price</span>) </span>&#123;</span><br><span class="line">  Car.call(<span class="built_in">this</span>, color, price);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//寄生式继承</span></span><br><span class="line">inherit(Car, cruze);</span><br><span class="line">cruze.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是TEST&#x27;</span> + <span class="built_in">this</span>.color);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">father, son</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _prototype = <span class="built_in">Object</span>.create(father.prototype); <span class="comment">//创建爹的副本</span></span><br><span class="line">  _prototype.construction = son; <span class="comment">//更改自己的构造函数</span></span><br><span class="line">  son.prototype = _prototype; <span class="comment">//再给自己</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//new一下拿别人的属性  call一下拿别人的属性方法</span></span><br><span class="line"><span class="keyword">var</span> _cruze = <span class="keyword">new</span> cruze(<span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(_cruze);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Javascript </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack3.10.0使用</title>
      <link href="2017/10/26/webpack3.10.0%E4%BD%BF%E7%94%A8/"/>
      <url>2017/10/26/webpack3.10.0%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>前端工程师必备技能<br><a id="more"></a></p><h1 id="初级入门"><a href="#初级入门" class="headerlink" title="初级入门"></a>初级入门</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181029/k4h3fBH6jF.png"                      alt="mark"                ></p><blockquote><p>yarn add <a class="link"   href="mailto:webpack@3.10.0" >webpack@3.10.0<i class="fas fa-external-link-alt"></i></a></p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181029/Fdh6AleHJC.png"                      alt="mark"                ></p><blockquote><p>yarn add <a class="link"   href="mailto:html-webpack-plugin@2.30.1" >html-webpack-plugin@2.30.1<i class="fas fa-external-link-alt"></i></a></p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181029/hH6CEggja4.png"                      alt="mark"                ></p><blockquote><p>yarn add  babel-core,babel-loader babel-preset-env</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181029/d9I2gh7e5d.png"                      alt="mark"                ></p><blockquote><p>yarn add less  css-loader less-loader styke-loader extract-text-webpack-plugin</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181029/734BIe6HDH.png"                      alt="mark"                ></p><p>yarn add url-loader  file-loader</p><p>file-laoder在文件大小低于限制时,可以返回一个DataURL</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181029/Ilb17KDc0K.png"                      alt="mark"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181029/ddIBHJA108.png"                      alt="mark"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181029/0mFfEG4H5i.png"                      alt="mark"                ></p><h2 id="基础配置代码如下"><a href="#基础配置代码如下" class="headerlink" title="基础配置代码如下"></a>基础配置代码如下</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: mikey.zhaopeng</span></span><br><span class="line"><span class="comment"> * @Date: 2018-10-28 23:44:17</span></span><br><span class="line"><span class="comment"> * @Last Modified by: 马里奥</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2018-10-29 13:02:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">&quot;extract-text-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&quot;./src/app.js&quot;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">//解析目录</span></span><br><span class="line">    filename: <span class="string">&quot;js/app.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// react(jsx)语法的处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">&quot;env&quot;</span>, <span class="string">&quot;react&quot;</span>] <span class="comment">//eev 根据环境打包</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// css文件的处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          <span class="comment">//所有入口css 提取出来</span></span><br><span class="line">          fallback: <span class="string">&quot;style-loader&quot;</span>, <span class="comment">//必须下style-loader</span></span><br><span class="line">          use: <span class="string">&quot;css-loader&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// less文件的处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          use: [<span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">     <span class="comment">// 图片的配置</span></span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">&#x27;url-loader?limit=8192&amp;name=images/[hash:8].[name].[ext]&#x27;</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">name: <span class="string">&#x27;./images&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 字体图标的配置</span></span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.(eot|svg|ttf|woff|woff2|otf)$/</span>,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">&#x27;url-loader?limit=8192&amp;name=font/[hash:8].[name].[ext]&#x27;</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">name: <span class="string">&#x27;./font&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">//处理html文件</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&quot;./src/index.html&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// // 独立css文件</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">&quot;css/[name].css&quot;</span>),</span><br><span class="line">    <span class="comment">// 提出公共模块</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">&quot;common&quot;</span>,</span><br><span class="line">      filename: <span class="string">&quot;js/base.js&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">8086</span>,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      index: <span class="string">&quot;/dist/index.html&quot;</span>, <span class="comment">//404 或招不到则返回首页</span></span><br><span class="line">      favicon: <span class="string">&#x27;./favicon.ico&#x27;</span>    <span class="comment">//必须在更目录放一张ico图片</span></span><br><span class="line">    &#125;,</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">//自动打开浏览器</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&quot;/manage&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;http://admintest.happymmall.com&quot;</span>, <span class="comment">//选择请求代理</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/user/logout.do&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;http://admintest.happymmall.com&quot;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图片配置中有一个错误的地方纠正"><a href="#图片配置中有一个错误的地方纠正" class="headerlink" title="图片配置中有一个错误的地方纠正"></a>图片配置中有一个错误的地方纠正</h2><p>会出现  <a class="link"   href="http://xxx.xx.com/css/image/1.jpg" >http://xxx.xx.com/css/image/1.jpg<i class="fas fa-external-link-alt"></i></a>;</p><p>正确的网址 应该是  <a class="link"   href="http://xxx.xx.com/image/1.jpg" >http://xxx.xx.com/image/1.jpg<i class="fas fa-external-link-alt"></i></a>;</p><p>为什么会多一个css可能css-loade解析时候没有配置输出路径</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片的配置</span></span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">&quot;url-loader?limit=819200&amp;name=images/[hash:8].[name].[ext]&quot;</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            name: <span class="string">&quot;./images&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="comment">// 字体图标的配置</span></span><br><span class="line">     &#123;</span><br><span class="line">      test: <span class="regexp">/\.(eot|svg|ttf|woff|woff2|otf)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">            loader: <span class="string">&quot;url-loader?limit=819200&amp;name=fonts/[hash:8].[name].[ext]&quot;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">            name: <span class="string">&quot;./fonts&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用类型和值类型</title>
      <link href="2017/10/24/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
      <url>2017/10/24/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%80%BC%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>每种数据类型的内存分配</p><a id="more"></a><h3 id="值类型内存分配"><a href="#值类型内存分配" class="headerlink" title="值类型内存分配"></a>值类型内存分配</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B2%20%281%29.png"                      alt="image"                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chainStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> store1 = <span class="string">&quot;Nike China&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> store2 = store1;</span><br><span class="line">  store1 = <span class="string">&quot;Nike U.S.A.&quot;</span>;</span><br><span class="line">  alert(store2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1; <span class="comment">//这个时候不进行内存分配</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;传智播客&quot;</span>; <span class="comment">//分配内存</span></span><br><span class="line"><span class="keyword">var</span> str3 = str2;</span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="built_in">console</span>.log(str2 == str3); <span class="comment">//比较的是指针指向的内存空间中存储的值</span></span><br><span class="line"><span class="built_in">console</span>.log(str2 === str3); <span class="comment">//比较的是地址和地址中存储的值</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B2%20%282%29.png"                      alt="image"                ></p><blockquote><p>把一个值类型（也可以叫基本类型）store2 传递给另一个变量（赋值）时，其实是分配了一块新的内存空间，因此改变 store1 的值对 store2 没有任何影响，因为它不像引用类型，变量的交换其实是交换了指像同一个内容的地址。</p></blockquote><h3 id="引用类型内存分配型"><a href="#引用类型内存分配型" class="headerlink" title="引用类型内存分配型"></a>引用类型内存分配型</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B3.png"                      alt="image"                ></p><p>对象是引用类型，赋值只是生成一个内存保存地址而已<br>var y = x;<br>如果变量 x 表示一个对象.<br>则通过赋值后,y 生成一个变量,变量包含一个地址,地址指向对象 x.<br>所以从本质上而言,不会生成新的变量, x,y 指向内存中的同一位置<br>当你通过 y 改变对象的值，这种变化也会反映到 x 上。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B4.png"                      alt="image"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B5.png"                      alt="image"                ></p><blockquote><p>在上面的代码中，store2 只进行了一次赋值，理论上它的值已定，但后面通过改写 store1 的值，发现 store2 的值也发生了改变，这正是引用类型的特征，也是我们要注意的地方。</p></blockquote><hr><h3 id="引用类型和值类型区别"><a href="#引用类型和值类型区别" class="headerlink" title="引用类型和值类型区别"></a>引用类型和值类型区别</h3><ol><li>内存分配机制不一样</li><li>引用类型—创建一个变量—内存中保存的是变量真实入口的地址</li><li>值类型：创建一个变量，内存创建一个区域</li><li>说白了就是引用类型会分配两个区域：一个保存地址，一个保存内容</li><li>变量赋值是否的区别</li><li>将一个值类型赋值给另一个变量，实际上新创建一个区域</li><li>引用类型，只是创建一个区域，保存另一个变量的入口地址</li><li>值类型赋值，会重新分配内存</li><li>引用类型赋值其实赋的是指针</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B6.png"                      alt="image"                ></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Javascript </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型判断的几种方式</title>
      <link href="2017/10/23/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2017/10/23/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>如何判断数据类型？？<br>基础数据类型的判断几种方式</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;传智播客&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;传智播客&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">     数据类型判断 - typeof</span></span><br><span class="line"><span class="comment">     *******************************************************************************/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数据类型判断 - typeof&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">//&#x27;undefined&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// well-known bug</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">//&#x27;boolean&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">123</span>); <span class="comment">//&#x27;number&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&quot;abc&quot;</span>); <span class="comment">//&#x27;string&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;); <span class="comment">//&#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">//&#x27;object&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); <span class="comment">//&#x27;object&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> unknownVariable); <span class="comment">//&#x27;undefined&#x27;</span></span><br><span class="line"><span class="comment">//    在使用 typeof 运算符时采用引用类型存储值会出现一个问题，</span></span><br><span class="line"><span class="comment">//    无论引用的是什么类型的对象，它都返回 &quot;object&quot;。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">     数据类型判断 - toString.call</span></span><br><span class="line"><span class="comment">     通用但很繁琐的方法： prototype</span></span><br><span class="line"><span class="comment">     *******************************************************************************/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数据类型判断 - toString.call&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="number">123</span>)); <span class="comment">//[object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="string">&quot;123&quot;</span>)); <span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="literal">undefined</span>)); <span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="literal">true</span>)); <span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(&#123;&#125;)); <span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call([])); <span class="comment">//[object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">//[object Function]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(str) === <span class="string">&quot;[object String]&quot;</span>); <span class="comment">//-------&gt; true;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(num) === <span class="string">&quot;[object Number]&quot;</span>); <span class="comment">//-------&gt; true;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">&quot;[object Array]&quot;</span>); <span class="comment">//-------&gt; true;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(date) === <span class="string">&quot;[object Date]&quot;</span>); <span class="comment">//-------&gt; true;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(fn) === <span class="string">&quot;[object Function]&quot;</span>); <span class="comment">//-------&gt; true;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">     数据类型判断 - instanceof</span></span><br><span class="line"><span class="comment">     *******************************************************************************/</span></span><br><span class="line"><span class="comment">//    判断已知对象类型实例化的方法： instanceof</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数据类型判断 - instanceof&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//---------------&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(date <span class="keyword">instanceof</span> <span class="built_in">Date</span>); <span class="comment">//---------------&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(fn <span class="keyword">instanceof</span> <span class="built_in">Function</span>); <span class="comment">//------------&gt; true</span></span><br><span class="line"><span class="comment">//    alert(f instanceof function)        //------------&gt; false</span></span><br><span class="line"><span class="comment">//    注意：instanceof 后面一定要是对象类型，并且大小写不能错，该方法适合一些条件选择或分支。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">     数据类型判断 - 根据对象的constructor判断： constructor</span></span><br><span class="line"><span class="comment">     *******************************************************************************/</span></span><br><span class="line"><span class="comment">//    根据对象的constructor判断： constructor</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数据类型判断 - constructor&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>); <span class="comment">//----------&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(date.constructor === <span class="built_in">Date</span>); <span class="comment">//-----------&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.constructor === <span class="built_in">Function</span>); <span class="comment">//-------&gt; true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Javascript </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT设计模式之原型继承</title>
      <link href="2017/09/22/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/"/>
      <url>2017/09/22/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>涉及到多个对象，我们通过原型模式来实现对新对象的创建<br><a id="more"></a></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//涉及到多个对象，我们通过原型模式来实现对新对象的创建</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">prototypeExtend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//缓存类 为了实例化返回对象临时创建  跟临时变量性质差不多</span></span><br><span class="line">            <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">                args = <span class="built_in">arguments</span>,</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                len = args.length;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="comment">//遍历每一个对象的属性</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> args[i]) &#123;</span><br><span class="line">                    <span class="comment">//属性缓存在缓存类型中</span></span><br><span class="line">                    F.prototype[j] = args[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//返回一个实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> penguin = prototypeExtend(&#123;</span><br><span class="line">            speed: <span class="number">20</span>,</span><br><span class="line">            swim: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;速度&quot;</span> + <span class="built_in">this</span>.speed);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            run: <span class="function"><span class="keyword">function</span>(<span class="params">speed</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;跑步速度&#x27;</span> + speed);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            jump: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;跳跃动作&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        penguin.swim();</span><br><span class="line">        penguin.run(<span class="number">10</span>);</span><br><span class="line">        penguin.jump();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT设计模式之原型模式</title>
      <link href="2017/09/21/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2017/09/21/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>项目经理要求：页面中有很多焦点图 每个焦点图的实现方式不一样，左右切换 上下切换<br><a id="more"></a></p><h5 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LoopImages = <span class="function"><span class="keyword">function</span>(<span class="params">imgArr, container</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">this</span>.imagesArray = imgArr; <span class="comment">//轮播图数组</span></span><br><span class="line">           <span class="built_in">this</span>.container = container; <span class="comment">//轮播图容器</span></span><br><span class="line">           <span class="built_in">this</span>.creatImage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">//创建轮播图片</span></span><br><span class="line">           <span class="built_in">this</span>.changeImage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">//厂家切换下一张图片</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//写一个上下切换的类</span></span><br><span class="line">       <span class="keyword">var</span> SlidLoopImage = <span class="function"><span class="keyword">function</span>(<span class="params">imgArr, container</span>) </span>&#123;</span><br><span class="line">               LoopImages.call(<span class="built_in">this</span>, imgArr, container);</span><br><span class="line">               <span class="built_in">this</span>.changeImage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                   <span class="built_in">console</span>.log(<span class="string">&#x27;这里显示的上下切换效果&#x27;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//渐隐渐显得切换</span></span><br><span class="line">       <span class="keyword">var</span> FadeLoopImage = <span class="function"><span class="keyword">function</span>(<span class="params">imgArr, container, arrow</span>) </span>&#123;</span><br><span class="line">               LoopImages.call(<span class="built_in">this</span>, imgArr, container);</span><br><span class="line">               <span class="comment">//切换箭头的私有变量</span></span><br><span class="line">               <span class="built_in">this</span>.arrow = arrow;</span><br><span class="line">               <span class="built_in">this</span>.changeImage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                   <span class="built_in">console</span>.log(<span class="string">&#x27;这里显示的是渐隐渐显得切换&#x27;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//一个数组 一个容器 一个懒</span></span><br><span class="line">       <span class="keyword">var</span> fadeImage = <span class="keyword">new</span> FadeLoopImage(</span><br><span class="line">           [<span class="string">&#x27;1.jpg&#x27;</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="string">&#x27;3,jpg&#x27;</span>],</span><br><span class="line">           <span class="string">&#x27;slider&#x27;</span>, [<span class="string">&#x27;left.jpg&#x27;</span>, <span class="string">&#x27;right.jpg&#x27;</span>]</span><br><span class="line">       );</span><br><span class="line">       fadeImage.changeImage();</span><br></pre></td></tr></table></figure><h5 id="改进写法"><a href="#改进写法" class="headerlink" title="改进写法"></a>改进写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LoopImages = <span class="function"><span class="keyword">function</span>(<span class="params">imgArr, container</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">this</span>.imagesArray = imgArr; <span class="comment">//数组</span></span><br><span class="line">           <span class="built_in">this</span>.container = container; <span class="comment">//容器</span></span><br><span class="line">       &#125;</span><br><span class="line">       LoopImages.prototype = &#123;</span><br><span class="line">           creatImage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;这里存照片&#x27;</span>);</span><br><span class="line">           &#125;,</span><br><span class="line">           changeImage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;这里显示切换下一张照片&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//上下切换类</span></span><br><span class="line">       <span class="keyword">var</span> SlidLoopImage = <span class="function"><span class="keyword">function</span>(<span class="params">imgArr, container</span>) </span>&#123;</span><br><span class="line">           LoopImages.call(<span class="built_in">this</span>, imgArr, container);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       SlidLoopImage.prototype = <span class="keyword">new</span> LoopImages();</span><br><span class="line">       SlidLoopImage.prototype.changeImage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;这里重写继承切换下一张图片方法&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//左右切换类</span></span><br><span class="line">       <span class="keyword">var</span> FadeLoopImage = <span class="function"><span class="keyword">function</span>(<span class="params">imgArr, container, arrow</span>) </span>&#123;</span><br><span class="line">           LoopImages.call(<span class="built_in">this</span>, imgArr, container);</span><br><span class="line">           <span class="built_in">this</span>.arrow = arrow;</span><br><span class="line">       &#125;</span><br><span class="line">       FadeLoopImage.prototype = <span class="keyword">new</span> LoopImages();</span><br><span class="line">       FadeLoopImage.prototype.changeImage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;这里显示的是重写左右切换方法&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//测试用例</span></span><br><span class="line">       <span class="built_in">console</span>.log(fadeImage.container);</span><br><span class="line">       fadeImage.changeImage();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//原型扩展</span></span><br><span class="line">       <span class="comment">//原型对象是一个共享对象 父类的实例对象或者子类的继承；都是它的一个指向</span></span><br><span class="line">       <span class="comment">//任何时候对基类伙子子类进行方法的扩展</span></span><br><span class="line">       LoopImages.prototype.getImageLength = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">this</span>.imagesArray.length;</span><br><span class="line">       &#125;</span><br><span class="line">       FadeLoopImage.prototype.getContainer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">this</span>.container;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(fadeImage.getImageLength); <span class="comment">//获取它的新方法</span></span><br><span class="line">       <span class="built_in">console</span>.log(fadeImage.getContainer);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT设计模式之建造者模式</title>
      <link href="2017/09/20/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>2017/09/20/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>需求分析：发布简历 种类多目的为了创建对象，<br>更关心创造这个对象的整个过程<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Human = <span class="function"><span class="keyword">function</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">this</span>.skill = param &amp;&amp; param.skill || <span class="string">&#x27;保密&#x27;</span>;</span><br><span class="line">           <span class="built_in">this</span>.hobby = param &amp;&amp; param.hobby || <span class="string">&#x27;保密&#x27;</span>;</span><br><span class="line">       &#125;;</span><br><span class="line">       Human.prototype = &#123;</span><br><span class="line">           getSkill: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">this</span>.skill;</span><br><span class="line">           &#125;,</span><br><span class="line">           getHobby: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">this</span>.hobby;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">//抽象出姓名解析类</span></span><br><span class="line">       <span class="comment">//实例化一个姓名</span></span><br><span class="line">       <span class="keyword">var</span> Name = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">           (<span class="function"><span class="keyword">function</span>(<span class="params">name, that</span>) </span>&#123;</span><br><span class="line">               that.wholeName = name;</span><br><span class="line">               <span class="keyword">if</span> (name.indexOf(<span class="string">&quot; &quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                   that.FirstName = name.slice(<span class="number">0</span>, name.indexOf(<span class="string">&quot; &quot;</span>));</span><br><span class="line">                   that.SecondName = name.slice(name.indexOf(<span class="string">&quot; &quot;</span>));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)(name, that)</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">//抽象出期望职位类</span></span><br><span class="line">       <span class="keyword">var</span> Work = <span class="function"><span class="keyword">function</span>(<span class="params">work</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">           (<span class="function"><span class="keyword">function</span>(<span class="params">work, that</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">switch</span> (work) &#123;</span><br><span class="line">                   <span class="keyword">case</span> <span class="string">&#x27;code&#x27;</span>:</span><br><span class="line">                       that.work = <span class="string">&#x27;工程师&#x27;</span>;</span><br><span class="line">                       that.workDescript = <span class="string">&#x27;每天喜欢编程&#x27;</span>;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">case</span> <span class="string">&#x27;UI&#x27;</span>:</span><br><span class="line">                       that.work = <span class="string">&#x27;设计师&#x27;</span>;</span><br><span class="line">                       that.workDescript = <span class="string">&#x27;每天喜欢设计&#x27;</span>;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">case</span> <span class="string">&#x27;teach&#x27;</span>:</span><br><span class="line">                       that.work = <span class="string">&#x27;教师&#x27;</span>;</span><br><span class="line">                       that.workDescript = <span class="string">&#x27;每天喜欢看书&#x27;</span>;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">default</span>:</span><br><span class="line">                       that.work = work;</span><br><span class="line">                       that.workDescript = <span class="string">&#x27;对不起，我们不清楚你的职业&#x27;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)(work, that)</span><br><span class="line">           Work.prototype.changeWork = <span class="function"><span class="keyword">function</span>(<span class="params">work</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">this</span>.work = work;</span><br><span class="line">           &#125;</span><br><span class="line">           Work.prototype.changeDes = <span class="function"><span class="keyword">function</span>(<span class="params">setence</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">this</span>.workDescript = setence;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/****</span></span><br><span class="line"><span class="comment">        *    建造者</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        ***/</span></span><br><span class="line">       <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, work</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> _person = <span class="keyword">new</span> Human();</span><br><span class="line">           _person.name = <span class="keyword">new</span> Name(name);</span><br><span class="line">           _person.work = <span class="keyword">new</span> Work(work);</span><br><span class="line">           <span class="keyword">return</span> _person;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;jack chan&quot;</span>, <span class="string">&quot;code&quot;</span>);</span><br><span class="line">       <span class="built_in">console</span>.log(person.skill);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT设计模式之给我一张名片工厂模式</title>
      <link href="2017/09/19/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%99%E6%88%91%E4%B8%80%E5%BC%A0%E5%90%8D%E7%89%87%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>2017/09/19/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%99%E6%88%91%E4%B8%80%E5%BC%A0%E5%90%8D%E7%89%87%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>项目经理要求小白做一个需求投放各式各样的广告<br>需求总在变如何应对？<br><a id="more"></a></p><h5 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Java = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.content = content;</span><br><span class="line">    <span class="comment">//闭包执行</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        div.innerHTML = content;</span><br><span class="line">        div.style.color = <span class="string">&quot;pink&quot;</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>).appendChild(div);</span><br><span class="line">    &#125;)(content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Php = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">        <span class="comment">//闭包执行</span></span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">            div.innerHTML = content;</span><br><span class="line">            div.style.color = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>).appendChild(div);</span><br><span class="line">        &#125;)(content);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//工厂模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">JobFactory</span>(<span class="params">type, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Java&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Java(content);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Php&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Php(content);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="改进写法"><a href="#改进写法" class="headerlink" title="改进写法"></a>改进写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Factory = <span class="function"><span class="keyword">function</span>(<span class="params">type, content</span>) </span>&#123; </span><br><span class="line">  <span class="comment">//运用安全模式  判断是否为new创建的对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> Factory) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">this</span>[type](content);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Factory(type, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Factory.prototype = &#123;</span><br><span class="line">    Java: <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">        <span class="comment">//闭包执行</span></span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">            div.innerHTML = content;</span><br><span class="line">            div.style.color = <span class="string">&quot;skyblue&quot;</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>).appendChild(div);</span><br><span class="line">        &#125;)(content);</span><br><span class="line">    &#125;,</span><br><span class="line">    Php: <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">        <span class="comment">//闭包执行</span></span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">            div.innerHTML = content;</span><br><span class="line">            div.style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>).appendChild(div);</span><br><span class="line">        &#125;)(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">    type: <span class="string">&#x27;Java&#x27;</span>,</span><br><span class="line">    content: <span class="string">&quot;Java开发哪家强&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    type: <span class="string">&#x27;Php&#x27;</span>,</span><br><span class="line">    content: <span class="string">&quot;Php开发哪家强&quot;</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">    Factory(data[i].type, data[i].content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT设计模式之简单工厂模式</title>
      <link href="2017/09/18/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9E%8B%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>2017/09/18/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9E%8B%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>需求登陆模块用户输入框需求：有多种提示框，如确认框，警告框，输入框；<br><a id="more"></a></p><h5 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统的写法</span></span><br><span class="line"><span class="keyword">var</span> LoginAlert = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.content = text;</span><br><span class="line">&#125;</span><br><span class="line">LoginAlert.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> userNameAlert = <span class="keyword">new</span> LoginAlert(<span class="string">&#x27;用户名不能多于16个字母或者数字&#x27;</span>)</span><br><span class="line">userNameAlert.show();</span><br><span class="line"><span class="keyword">var</span> passwordAlert = <span class="keyword">new</span> LoginAlert(<span class="string">&#x27;输入的密码不正确&#x27;</span>);</span><br><span class="line">passwordAlert.show();</span><br><span class="line"><span class="comment">//多一个按钮的提示框</span></span><br><span class="line"><span class="keyword">var</span> LoginPrompt = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.content = text;</span><br><span class="line">&#125;</span><br><span class="line">LoginPrompt.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> userLoginPrompt = <span class="keyword">new</span> LoginPrompt(<span class="string">&quot;今天的心气是&quot;</span>);</span><br><span class="line">userLoginPrompt.show();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="改进写法"><a href="#改进写法" class="headerlink" title="改进写法"></a>改进写法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatPop</span>(<span class="params">type, text</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> num;</span><br><span class="line">           <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">           o.content = text;</span><br><span class="line">           o.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="comment">//显示</span></span><br><span class="line">               <span class="comment">//显示通用样式</span></span><br><span class="line">               alert(num + text);</span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="keyword">if</span> (type == <span class="string">&quot;alert&quot;</span>) &#123;</span><br><span class="line">               num = <span class="number">1</span>;</span><br><span class="line">               <span class="comment">//只显示一个按钮</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (type == <span class="string">&quot;prompt&quot;</span>) &#123;</span><br><span class="line">               <span class="comment">//添加多一个输入框</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (type == <span class="string">&quot;confirm&quot;</span>) &#123;</span><br><span class="line">               <span class="comment">//添加多一个输入框和一个按钮</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> o;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> userNameAlert = creatPop(<span class="string">&#x27;alert&#x27;</span>, <span class="string">&quot;用户名只能6个字母或数字&quot;</span>);</span><br><span class="line">       userNameAlert.show();</span><br><span class="line">       <span class="keyword">var</span> userNamePrompt= creatPop(<span class="string">&#x27;prompt&#x27;</span>, <span class="string">&quot;用户名姓名&quot;</span>);</span><br><span class="line">       userNamePrompt.show();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT设计模式之找个检察长</title>
      <link href="2017/09/17/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%89%BE%E4%B8%AA%E6%A3%80%E5%AF%9F%E9%95%BF/"/>
      <url>2017/09/17/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%89%BE%E4%B8%AA%E6%A3%80%E5%AF%9F%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h5 id="new的含义"><a href="#new的含义" class="headerlink" title="new的含义"></a>new的含义</h5><p>new的作用就是对当前对象的this的不断赋值，如果没有new，就会执行函数，这个函数在全局作用域执行，所以this指向对象自然是全局变量 window；<br>book变量得不到Book这个类执行，所以undefined；<br><a id="more"></a></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用闭包来实现</span></span><br><span class="line">  <span class="keyword">var</span> Book = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//静态私有变量</span></span><br><span class="line">    <span class="keyword">var</span> bookNum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//静态私有方法  外部不可访问</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkBook</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">       alert(name)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//创建类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_book</span>(<span class="params">id, name, price</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> name, price;</span><br><span class="line">      <span class="comment">//特权方法</span></span><br><span class="line">      <span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">      <span class="built_in">this</span>.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">      <span class="built_in">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">      <span class="built_in">this</span>.setPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">      <span class="built_in">this</span>.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">      bookNum++;</span><br><span class="line">      <span class="keyword">if</span> (bookNum &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;出错了！&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.setName(name);</span><br><span class="line">      <span class="built_in">this</span>.setPrice(price)</span><br><span class="line">    &#125;</span><br><span class="line">    _book.prototype = &#123;</span><br><span class="line">      isJsBook: <span class="literal">false</span>,</span><br><span class="line">      display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _book;</span><br><span class="line">  &#125;)()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b = <span class="keyword">new</span> Book(<span class="number">11</span>,<span class="string">&quot;javascript&quot;</span>,<span class="number">40</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(b.bookNum); <span class="comment">//--&gt;undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(b.isJsBook); <span class="comment">//--&gt;false</span></span><br><span class="line">  <span class="built_in">console</span>.log(b.id); <span class="comment">//--&gt;11</span></span><br><span class="line"><span class="comment">//  console.log(b.checkBook(&quot;jack&quot;)); //--&gt; b.checkBook is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Book0 = <span class="function"><span class="keyword">function</span>(<span class="params">title, time, type</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">    <span class="built_in">this</span>.time = time;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> book0 = Book0(<span class="number">112</span>, <span class="string">&quot;css&quot;</span>, <span class="number">40</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(book0); <span class="comment">//--&gt;undefined 没有new实例化</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">window</span>.title); <span class="comment">//--&gt;112</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//去找检察长判定是否实例化</span></span><br><span class="line">  <span class="keyword">var</span> Book1 = <span class="function"><span class="keyword">function</span>(<span class="params">tit, time, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> Book) &#123;</span><br><span class="line">      <span class="built_in">this</span>.tit = tit;</span><br><span class="line">      <span class="built_in">this</span>.time = time;</span><br><span class="line">      <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Book1(tit, time, type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> book1 = Book1(<span class="number">12</span>, <span class="string">&quot;javascript&quot;</span>, <span class="number">40</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(book1);</span><br><span class="line">  <span class="built_in">console</span>.log(book1.tit);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.tit); <span class="comment">//--&gt;undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT设计模式之封装明星</title>
      <link href="2017/09/16/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B0%81%E8%A3%85%E6%98%8E%E6%98%9F/"/>
      <url>2017/09/16/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B0%81%E8%A3%85%E6%98%8E%E6%98%9F/</url>
      
        <content type="html"><![CDATA[<p>面向对象是思想<br><a id="more"></a></p><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span>(<span class="params">id, name, price</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.id =id;</span><br><span class="line">     &#125;</span><br><span class="line">     Book.prototype =&#123;</span><br><span class="line">        display:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>通过this添加的属性和方法与通过prototype添加的属性和方法有什么区别？</p><p>通过this添加时在<code>当前对象</code>上添加的，<br>每创建一个对象。它都有一个原型prototype指向其继承的属性方法，这样通过prototype继承的方法并不是自身，this的属性和方法是自身拥有，每次通过类创建一个新对象指向自身属性和方法<br>而通过prototype继承通过类创建属性和方法不会再次创建</p><h5 id="constructor是什么？"><a href="#constructor是什么？" class="headerlink" title="constructor是什么？"></a>constructor是什么？</h5><p>在prototype对象中会出现一个和函数创建this一样的一个constructor属性<br>constructor属性指向就是拥有这个原型对象的函数或对象</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span>(<span class="params">id, name, price</span>) </span>&#123;</span><br><span class="line">     <span class="comment">//私有属性不可通过实例化点语法访问</span></span><br><span class="line">     <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">checkId</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">     <span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">     <span class="built_in">this</span>.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">     <span class="built_in">this</span>.setName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">     <span class="built_in">this</span>.setPrice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">     <span class="comment">//公有属性</span></span><br><span class="line">     <span class="built_in">this</span>.id = id;</span><br><span class="line">     <span class="comment">//公有方法</span></span><br><span class="line">     <span class="built_in">this</span>.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">     <span class="built_in">this</span>.setName(name);</span><br><span class="line">     <span class="built_in">this</span>.setPrice(price);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//静态公有属性</span></span><br><span class="line">   Book.isChinese = <span class="literal">true</span>;</span><br><span class="line">   <span class="comment">//静态公有方法</span></span><br><span class="line">   Book.resetTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;new Time&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//公有属性与方法</span></span><br><span class="line">   Book.prototype = &#123;</span><br><span class="line">     isJsBook: <span class="literal">false</span>,</span><br><span class="line">     display: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> b = <span class="keyword">new</span> Book(<span class="number">11</span>, <span class="string">&quot;javascript&quot;</span>, <span class="number">50</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(b.num); <span class="comment">//--&gt; undefined</span></span><br><span class="line">   <span class="built_in">console</span>.log(b.isJsBook); <span class="comment">//--&gt;false</span></span><br><span class="line">   <span class="built_in">console</span>.log(b.id); <span class="comment">//--&gt;11</span></span><br><span class="line">   <span class="built_in">console</span>.log(b.isChinese); <span class="comment">//--&gt;undefined</span></span><br><span class="line">   <span class="comment">//类的静态公有属性通过类自身来访问</span></span><br><span class="line">   <span class="built_in">console</span>.log(Book.isChinese); <span class="comment">//--&gt;true</span></span><br><span class="line">   <span class="built_in">console</span>.log(Book.resetTime()); <span class="comment">// --&gt;new Time</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT学习笔记之数组对象知识点总结</title>
      <link href="2017/09/14/JAVASCRIPT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>2017/09/14/JAVASCRIPT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>数组对象是使用单独的变量名来存储一系列的值；数组可以用一个变量名存储所有的值，并且可以用变量名访问任何一个值；数组中的每个元素都有自己的的ID索引，以便它可以很容易地被访问到……<br><a id="more"></a><br>JavaScript数组元素可以是不同的变量类型。数组元素可以是字符串，可以是对象元素，可以是函数，也可以说是另一个数组……</p><p>JavaScript Array对象属性有constructor（引用数组对象的构造函数），length（返回数组的长度），prototype(增加属性或方法扩展数组定义)。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/js%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84.jpg"                      alt="image"                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;数组对象&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="literal">null</span>,<span class="string">&quot;&quot;</span>,<span class="literal">undefined</span>];</span><br><span class="line"> <span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">null</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(arr.toString()); <span class="comment">//--&gt;&quot;1,3,1,4,0,,,&quot;</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr.valueOf());<span class="comment">//--&gt;Array [ 1, 3, 1, 4, 0, null, &quot;&quot;, undefined ]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr.concat(arr2));<span class="comment">//--&gt;Array [ 1, 3, 1, 4, 0, null, &quot;&quot;, undefined, 1, 2, 多于 1… ]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr.reverse())<span class="comment">//--&gt;Array [ undefined, &quot;&quot;, null, 0, 4, 1, 3, 1 ]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//--&gt;Array [ &quot;&quot;, null, 0 ]</span></span><br><span class="line"> <span class="built_in">console</span>.log(arr2.slice(<span class="number">1</span>, <span class="number">2</span>));<span class="comment">//--&gt;Array [ 2 ]</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Javascript </tag>
            
            <tag> DOM </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript设计模式学习之前要了解这些</title>
      <link href="2017/09/14/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%89%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/"/>
      <url>2017/09/14/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%89%8D%E8%A6%81%E4%BA%86%E8%A7%A3%E8%BF%99%E4%BA%9B/</url>
      
        <content type="html"><![CDATA[<p>我们刚进入公司都是小白，某天公司项目经理给让做一个表单验证</p><p>90%的你会做这样的传统的面相过程编程<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190303013854.png"                      alt=""                ><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统面相过程</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">argument</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// body... </span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params">argument</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// body... </span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">checkPwd</span>(<span class="params">argument</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// body... </span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>缺点：设置了很多全局变量，不利于团队开发</p><p>因为这跟下面的变量名提前在function没有区别？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//验证姓名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如果团队中有人跟你用了同一个变量名定义了方法那你的方法就被覆盖了</strong></p><p>我们一步一步优化：<br>先看看用<code>对象收编变量</code>的方法试试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">CheckObject.checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;检查姓名&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = CheckObject.checkName();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>这样也有缺点：当别人想用你代码的时候比较麻烦，这个对象不能复制一份或者说这个对象<code>new</code>出来的新对象，新对象中没有<code>继承</code>这些新方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被new之后方法  新建对象内部没有方法</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> CheckObject();</span><br><span class="line"><span class="comment">// console.log(b.checkName());  </span></span><br><span class="line"><span class="comment">//index.js:18 Uncaught TypeError: b.checkName is not a function</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190303012130.png"                      alt=""                ></p><h4 id="类也可以"><a href="#类也可以" class="headerlink" title="类也可以"></a>类也可以</h4><p>所以我们应该添加<code>this</code>关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.checkName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;new检查姓名&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> a2 = <span class="keyword">new</span> CheckObject();</span><br><span class="line"><span class="built_in">console</span>.log(a2);</span><br><span class="line"><span class="comment">//CheckObject &#123;checkName: ƒ&#125;</span></span><br><span class="line"><span class="comment">// checkName: ƒ()</span></span><br><span class="line"><span class="comment">// __proto__: Object</span></span><br><span class="line"> </span><br><span class="line"> <span class="built_in">console</span>.log(a2.checkName());</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190303012424.png"                      alt=""                ></p><p>但这个还是有一点缺点：<br>我们把所有方法都放在函数内部，通过this定义，所以每一次通过<code>new</code>关键词来创建新对象，this上的属性进行复制，然而有时候这样的方法创建造成的<code>性能消耗</code>是很奢侈的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************* */</span></span><br><span class="line"><span class="comment">/*************检查 */</span></span><br><span class="line"> <span class="keyword">var</span> CheckObject           = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">     CheckObject.prototype = &#123;</span><br><span class="line">     checkName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;检查姓名new&#x27;</span>);</span><br><span class="line">     &#125;,</span><br><span class="line">     checkAge : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;检查年龄new&#x27;</span>);</span><br><span class="line">     &#125;,</span><br><span class="line">     checkSex :<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;检查性别new&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> c = <span class="keyword">new</span> CheckObject();</span><br><span class="line"> c.checkName();</span><br><span class="line"> c.checkAge();</span><br><span class="line"> c.checkSex();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样创建出来的对象实例所拥有的方法就只有一个了，因为他们都要在<code>prototype</code>原型依次寻找，找到都是同一个</p><h4 id="方法还可以链式调用"><a href="#方法还可以链式调用" class="headerlink" title="方法还可以链式调用"></a>方法还可以链式调用</h4><p>如果对a写三遍调用也太麻烦了所以我们用this做返回，因为this指向的就是当前对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CheckObject           = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">    CheckObject.prototype = &#123;</span><br><span class="line">   checkName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;检查姓名new&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span> <span class="comment">//返回当前对象</span></span><br><span class="line">   &#125;,</span><br><span class="line">   checkAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;检查年龄new&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   checkSex: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;检查性别new&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> CheckObject();</span><br><span class="line">d.checkName().checkSex().checkSex();</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/20190303013248.png"                      alt=""                ></p><h4 id="函数的祖先"><a href="#函数的祖先" class="headerlink" title="函数的祖先"></a>函数的祖先</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.addMethod = <span class="function"><span class="keyword">function</span>(<span class="params">name,fn</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>[name] = fn;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="最后举一个简单栗子"><a href="#最后举一个简单栗子" class="headerlink" title="最后举一个简单栗子"></a>最后举一个简单栗子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单验证需求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       需求说明：给表单提交填写验证码校验方法</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    用户名：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span> 邮箱：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span> 密码：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pwd = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)[<span class="number">2</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>)[<span class="number">3</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//运行</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> nameVal = name.value;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(nameVal);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> emailVal = email.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> pwdVal = pwd.value;</span></span><br><span class="line">            method.checkName(nameVal).checkEmail(emailVal).checkPwd(pwdVal);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//原型连上添加方法  避免全局污染</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">Function</span>.prototype.addMethod = <span class="function"><span class="keyword">function</span>(<span class="params">name, fn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// body... </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>[name] = fn;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> method = <span class="keyword">new</span> <span class="built_in">Function</span>();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    method.addMethod(<span class="string">&quot;checkName&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line">        if (!str) &#123;</span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;用户名不能为空&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.length &lt; <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;用户名长度大于6&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    method.addMethod(<span class="string">&quot;checkEmail&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line">        if (!str) &#123;</span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;这是验证邮箱&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    method.addMethod(<span class="string">&quot;checkPwd&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line">        if (!str) &#123;</span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;这是输入验证密码&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.length &lt; <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&#x27;这是大于6位验证密码&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT学习笔记之DOM知识点总结</title>
      <link href="2017/09/13/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BDOM%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>2017/09/13/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BDOM%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>JavaScript的window对象对应着浏览器窗口本身，因此这个对象的属性和方法统称为BOM（浏览器对象模型），如window.open(),window.location等。<br><a id="more"></a></p><p>JavaScript的document对象是指文档对象模型，主要是处理网页内容。DOM（Document Object Model）即文档对象模型，是针对 HTML 和 XML 文档的 API 。字母D指document（文档），字母O指object（对象），字母指Model（模型）。DOM 描绘了一个层次化的节点树。节点表示一个连接点，文档是由节点构成的集合，DOM的节点主要分为三类：元素节点、文本节点（不是文本内容）、属性节点。</p><h5 id="获取节点的名称和类型"><a href="#获取节点的名称和类型" class="headerlink" title="获取节点的名称和类型"></a>获取节点的名称和类型</h5><p><code>nodeName</code>属性用来获取节点的名称，文本节点返回#text,元素节点返回标签名称（此时等价于tagName）。语法：目标节点.<code>nodeName</code></p><p><code>nodeType</code>属性用来获取节点的类型，元素节点：1，属性节点：2，文本节点：3。语法：目标节点.<code>nodeType</code><br>nodeValue属性用来获取和设置节点的值。元素节点返回 <code>null</code> 。语法：目标节点.<code>nodeValue</code></p><h5 id="获取元素节点的方式"><a href="#获取元素节点的方式" class="headerlink" title="获取元素节点的方式"></a>获取元素节点的方式</h5><p><code>document.getElementById</code> 通过ID查找，返回唯一元素节点</p><p><code>document.getElementsByName</code> 通过表单元素name属性查找，返回元素节点数组</p><p><code>document.getElementsByTagName</code> 通过标签名称查找，返回元素节点数组<br>以下三种方法属于HTML5 DOM，并非所有浏览器支持（如某些低版本IE就不支持），属于高级方法</p><p><code>document.getElementsByClassName</code> 通过class属性的类名查找，返回元素节点数组</p><p><code>document.querySelector</code>通过selector条件获取元素节点，只返回符合条件的第一个元素节点<br><code>document.querySelectorAll</code>通过selector条件获取元素节点，返回所有符合条件的元素节点数组，多条件使用逗号分隔，表示要查找的元素必须符合所有逗号分隔的条件，如果一个元素只符合逗号分隔的条件中的一个，则不会被返回</p><p>小结： <code>getElementById</code>和<code>querySelector</code>只返回一个元素节点，而<code>getElementsByName</code>、getElementsByTagName、<code>getElementsByClassName</code>、<code>querySelectorAll</code>返回的是元素节点(类)数组</p><h5 id="节点指针"><a href="#节点指针" class="headerlink" title="节点指针"></a>节点指针</h5><p><code>childNodes</code>属性用来获取元素节点的子节点，返回节点数组。语法：<code>父节点.childNodes</code>;</p><p><code>children</code>属性可以用来获取忽略了空白节点的有效节点（在某些浏览器上，空白符或换行符也是一个文本节点）。语法：<code>父节点.children</code>;</p><p><code>firstChild</code>属性可以用来获取元素的第一个子节点，等价于 childNodes[0]。语法：<code>父节点.firstChild</code>;</p><p><code>lastChild</code>属性可以用来获取元素的最后一个子节点，等价于 childNodes[childNodes.length-1]。语法：父节点.lastChild;</p><p><code>previousSibling</code>属性用来获取目标节点的前一个兄弟节点。语法：目标节点.previousSibling;</p><p><code>nextSibling</code>属性用来获取目标节点的后一个兄弟节点。语法：目标节点.nextSibling;</p><p><code>parentNode</code>属性用来获取已知节点的父节点。语法：子节点.parentNode;</p><p><code>ownerDocument</code>属性用来当前节点所在文档的根节点，等价于document。语法：目标节点.ownerDocument;</p><h5 id="节点的操作"><a href="#节点的操作" class="headerlink" title="节点的操作"></a>节点的操作</h5><p><code>createElement</code>方法用来创建元素节点。语法：document.createElement(‘元素标签名称’);</p><p><code>createAttribute</code>方法用来创建属性节点。语法：document.createAttribute(‘属性名称’);</p><p><code>createTextNode</code>方法用来创建文本节点。语法：document.createTextNode(‘文本内容’);</p><p><code>appendChild</code>方法用来在目标节点的子节点的末尾添加一个子节点（可以是createElement创建的元素节点，也可以是createTextNode创建的文本节点）。语法：parent.appendChild(要插入的节点);</p><p><code>insertBefore</code>方法用来在目标元素的前面插入一个新元素节点，此时的指针在目标元素的父级上。语法：parent.insertBefore(newElement,targetElement);</p><p>DOM中没有insertAfter这个方法，但是可以通过以下方法来模拟insertAfter;<br>/*</p><ul><li>newElement : 要插入的新元素</li><li>targetElement : 目标元素<br>*/</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newElement,targetElement</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parent = targetElement.parentNode;</span><br><span class="line">    <span class="keyword">if</span>(parent.lastChild == targetElement)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         如果目标元素是parent的最后一个子元素，则把新元素追加到parent元素上，</span></span><br><span class="line"><span class="comment">         也就是在parent的子元素的末尾位置添加新元素 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        parent.appendChild(newElement);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          否则，就把新元素添加到目标元素和目标元素的下一个兄弟元素之间    </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        parent.insertBefore(newElement,targetElement.nextSibling);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>replaceChild</code>方法用来替换一个元素节点，此时的指针在目标元素的父级上。语法：parent.replaceChild(replaceElement,targetElement);</p><p><code>cloneChild</code>方法用来克隆一个元素节点，传递一个布尔参数，参数为true时表示复制当前节点及其所有子节点，参数为false时表示支付至当前节点。语法：目标元素.cloneChild(true|false);</p><p><code>removeChild</code>方法用来删除一个指定节点。语法：removeChild(要删除的节点);</p><p><code>getAttribute</code>方法用来获取一个属性的值。语法：目标元素.getAttribute(元素属性名称);</p><p><code>setAttribute</code>方法用来设置一个属性的值，没有该属性则创建。语法：目标元素.setAttribute(元素属性名称,属性值);</p><p><code>removeAttribute</code>方法用来删除一个属性节点。语法：目标元素.removeAttribute(要删除的属性名称);</p><h5 id="DOM操作内容"><a href="#DOM操作内容" class="headerlink" title="DOM操作内容"></a>DOM操作内容</h5><p><code>style</code>属性用来获取和设置元素的行内样式。语法：element.style;style属性只能获取和设置行内样式，对于如font-size这种样式属性，应该去掉 - 并且将 - 后面的第一个字母大写，驼峰法来获取和设置 如：element.style.fontSize , element.style.backgroundColor</p><p><code>getComputedStyle</code>全局方法用来获取计算后的样式，第一个参数是元素节点，第二个参数是类型，如:hover,:active等伪类，默认情况下传 null ,某些IE版本使用currentStyle属性来获取 box.currentStyle。语法：window.getComputedStyle(元素，类型)</p><p><code>className</code>属性用来获取和设置元素的样式名称。语法：element.className<br>自定义的 addClass() | hasClass() | removeClass() 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素是否含有某样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">element,className</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !!element.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(\\s|^)&#x27;</span>+className+<span class="string">&#x27;(\\s|$)&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向元素添加新样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">element,className</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(hasClass(element,className) == <span class="literal">false</span>)&#123;</span><br><span class="line">          element.className += <span class="string">&#x27; &#x27;</span>+className;</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//移除元素的指定样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">element,className</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentClass = element.className;</span><br><span class="line">     <span class="keyword">if</span>(hasClass(element,className))&#123;</span><br><span class="line">         currentClass = currentClass.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(\\s|^)&#x27;</span>+className+<span class="string">&#x27;(\\s|$)&#x27;</span>),<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="comment">//去除空格</span></span><br><span class="line">        currentClass = currentClass.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        element.className = currentClass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="OM操作位置和大小"><a href="#OM操作位置和大小" class="headerlink" title="OM操作位置和大小"></a>OM操作位置和大小</h5><p><code>clientWidth</code>属性用来获取元素的实际宽度，该值受滚动条和内边距影响，外边距和border不会影响。语法：element.clientWidth;</p><p><code>clientHeigh</code>t属性用来获取元素的实际高度，该值受滚动条和内边距影响，外边距和border不会影响。语法：element.clientHeight;</p><p><code>offsetWidth</code>属性用来获取元素的实际宽度，该值受边框和内边距影响，外边距和滚动条不会影响。语法：element.offsetWidth;</p><p><code>offsetHeight</code>属性用来获取元素的实际高度，该值受边框和内边距影响，外边距和滚动条不会影响。语法：element.offsetHeight;</p><p><code>offsetTop</code>和<code>offsetLeft</code>属性用来获取元素相对于父级的位置。该值受外边距影响。语法：element.offsetTop || element.offsetLeft;</p><p><code>scrollTop</code>和<code>scrollLeft</code>属性用来获取滚动条被隐藏的区域大小，也可设置定位到该区域（比如返回顶部）。语法：element.scrollTop || element.scrollLeft || element.scrollTop = 0;</p><h5 id="常用到的简洁快速的DOCUMENT属性和方法"><a href="#常用到的简洁快速的DOCUMENT属性和方法" class="headerlink" title="常用到的简洁快速的DOCUMENT属性和方法"></a>常用到的简洁快速的DOCUMENT属性和方法</h5><p>document.title 用来获取文档标题</p><p>document.domain 用来获取当前域名</p><p>document.URL 用来获取当前url路径</p><p>document.forms 获取表单集合</p><p>document.images 获取图片集合</p><p>document.body 获取body元素节点</p><p>document.compatMode 识别文档模式</p><p>本文标题：JavaScript学习笔记之Dom知识点总结</p><p>本文链接：<a class="link"   href="https://smohan.net/blog/vhikuj" >https://smohan.net/blog/vhikuj<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Javascript </tag>
            
            <tag> DOM </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs搭建socket.io聊天室</title>
      <link href="2017/09/08/Nodejs%E6%90%AD%E5%BB%BAsocket.io%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
      <url>2017/09/08/Nodejs%E6%90%AD%E5%BB%BAsocket.io%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
      
        <content type="html"><![CDATA[<p>下面是一条数据的旅程，这条数据我们叫他req。<br><a id="more"></a></p><h5 id="原理从http讲起"><a href="#原理从http讲起" class="headerlink" title="原理从http讲起"></a>原理从http讲起</h5><p>HTTP协议是无状态的，服务器只会响应来自客户端的请求，但是它与客户端之间不具备持续连接。<br>我们可以非常轻松的捕获浏览器上发生的事件（比如用户点击了盒子），这个事件可以轻松产生与服务器的数据交互（比如Ajax）。但是，反过来却是不可能的：服务器端发生了一个事件，服务器无法将这个事件的信息实时主动通知它的客户端。只有在客户端查询服务器的当前状态的时候，所发生事件的信息才会从服务器传递到客户端。</p><h5 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h5><p> 最新的HTML5协议，制定了WebSocket协议标准，允许客户端和服务器以全双工的方式进行通信。<br>WebSocket的原理非常的简单：利用HTTP请求产生握手，握手之后，二者转用TCP协议进行交流（QQ的协议）。<br>使用WebSocket协议，需要浏览器和服务器都支持才可以使用。</p><h5 id="Socket-IO"><a href="#Socket-IO" class="headerlink" title="Socket.IO"></a>Socket.IO</h5><p> Node.js从诞生之日起，就支持WebSocket协议。不过，从底层一步一步搭建一个Socket服务器很费劲（想象一下Node写一个静态文件服务都那么费劲）。所以，有大神帮我们写了一个库Socket.IO。<br> Socket.IO是业界良心，新手福音。它屏蔽了所有底层细节，让顶层调用非常简单。并且还为不支持WebSocket协议的浏览器，提供了长轮询的透明模拟机制。<br>Node的单线程、非阻塞I/O、事件驱动机制，使它非常适合Socket服务器。</p><h5 id="服务器端的配置"><a href="#服务器端的配置" class="headerlink" title="服务器端的配置"></a>服务器端的配置</h5><p>当server创建出来之后，语句<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>能够实例化io对象，此时网址/socket.io/socket.io.js将被默认提供一个静态js文件服务。<br>监听：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">io.on(<span class="string">&quot;connection&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>socket对象有emit方法和on方法。emit方法用于发送一个自定义事件，on方法用于监听服务器发送的自定义事件。</p><h5 id="客户端端的配置"><a href="#客户端端的配置" class="headerlink" title="客户端端的配置"></a>客户端端的配置</h5><p>HTML页面必须运行在服务器上，不能为本地。<br>HTML页面需要引用/socket.io/socket.io.js文件，然后执行io()函数，并得到socket对象。<br>socket对象有emit方法和on方法。emit方法用于发送一个自定义事件，on方法用于监听服务器发送的自定义事件。</p><h5 id="Express与Socket-IO"><a href="#Express与Socket-IO" class="headerlink" title="Express与Socket.IO"></a>Express与Socket.IO</h5><p>Express框架可以和Socket.IO搭配使用，但是不能像通常的Express程序那样，用app.listen进行监听了，而是采用一种固定的模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(http);</span><br><span class="line">http.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><h6 id="登陆页面"><a href="#登陆页面" class="headerlink" title="登陆页面"></a>登陆页面</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/check&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">            输入昵称：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送消息&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;socket.io聊天室 欢迎主淫：&lt;span id=<span class="string">&quot;name&quot;</span>&gt;&lt;%=name%&gt;&lt;<span class="regexp">/span&gt;&lt;/</span>h1&gt;</span><br><span class="line">   &lt;ul id=<span class="string">&quot;messages&quot;</span>&gt;&lt;/ul&gt;</span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;caozuo&quot;</span>&gt;</span><br><span class="line">       &lt;input id=<span class="string">&quot;m&quot;</span> autocomplete=<span class="string">&quot;off&quot;</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;/socket.io/socket.io.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;http://libs.baidu.com/jquery/1.11.3/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> socket = io();</span><br><span class="line">       $(<span class="string">&#x27;#m&#x27;</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (e.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">               <span class="comment">//点击发送按钮，提交输入的信息</span></span><br><span class="line">               socket.emit(<span class="string">&#x27;message&#x27;</span>, &#123;</span><br><span class="line">                   <span class="string">&quot;msg&quot;</span>: $(<span class="string">&#x27;#m&#x27;</span>).val(),</span><br><span class="line">                   <span class="string">&quot;name&quot;</span>: $(<span class="string">&quot;#name&quot;</span>).html()</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="built_in">console</span>.log($(<span class="string">&quot;#m&quot;</span>).val());</span><br><span class="line">               $(<span class="built_in">this</span>).val(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">               <span class="comment">// return false;</span></span><br><span class="line">               <span class="comment">//接收到chat message时</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">//监听服务端传回来的数据</span></span><br><span class="line">       socket.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">           <span class="comment">//将chat message显示在页面</span></span><br><span class="line">           <span class="built_in">console</span>.log(msg);</span><br><span class="line">           $(<span class="string">&#x27;#messages&#x27;</span>).prepend(<span class="string">&quot;&lt;li&gt;&lt;b&gt;&quot;</span> + msg.name + <span class="string">&quot;:&lt;/b&gt;&quot;</span> + msg.msg + <span class="string">&quot;&lt;/li&gt;&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>).Server(app);</span><br><span class="line"><span class="comment">//创建一个io对象</span></span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>)(http);</span><br><span class="line"><span class="comment">//session保存用户名</span></span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="comment">//使用session</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: <span class="string">&#x27;keyboard cat&#x27;</span>,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"><span class="comment">//中间件 首页</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">&quot;roomLogin&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> allUser = [];</span><br><span class="line"><span class="comment">//确认登陆</span></span><br><span class="line">app.get(<span class="string">&quot;/check&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.query.name);</span><br><span class="line">    <span class="keyword">var</span> name = req.query.name;</span><br><span class="line">    <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">        res.send(<span class="string">&quot;必须填写用户名&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (allUser.indexOf(name) != -<span class="number">1</span>) &#123;</span><br><span class="line">        res.send(<span class="string">&quot;用户名已经被占用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    allUser.push(name);</span><br><span class="line">    <span class="comment">//保存用户名缓存</span></span><br><span class="line">    req.session.name = name;</span><br><span class="line">    res.redirect(<span class="string">&quot;/chat&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/chat&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.session.name) &#123;</span><br><span class="line">        res.redirect(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(<span class="string">&quot;chat&quot;</span>, &#123;</span><br><span class="line">        name: req.session.name</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    socket.on(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;msg:&#x27;</span> + msg);</span><br><span class="line">        <span class="comment">//把客户端传给我们的值再广播发送给别人就是聊天室</span></span><br><span class="line">        io.emit(<span class="string">&quot;message&quot;</span>, msg);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// var server = http.createServer(function(req, res) &#123;</span></span><br><span class="line"><span class="comment">//     if (req.url == &quot;/&quot;) &#123;</span></span><br><span class="line"><span class="comment">//         fs.readFile(&quot;./tellRoom.html&quot;, function(err, data) &#123;</span></span><br><span class="line"><span class="comment">//             res.end(data);</span></span><br><span class="line"><span class="comment">//         &#125;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听链接事件</span></span><br><span class="line"><span class="comment">// io.on(&quot;connection&quot;, function(socket) &#123;</span></span><br><span class="line"><span class="comment">//     // console.log(&#x27;一个客户端获得连接了&#x27;);</span></span><br><span class="line"><span class="comment">//     //接收数据</span></span><br><span class="line"><span class="comment">//     socket.on(&quot;question&quot;, function(msg) &#123;</span></span><br><span class="line"><span class="comment">//         console.log(&quot;本服务器得到提问&quot; + msg);</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">//     //发送数据  单对单</span></span><br><span class="line"><span class="comment">//     // socket.emit(&quot;ans&quot;, &quot;吃了&quot;);</span></span><br><span class="line"><span class="comment">//     //广播 一对多</span></span><br><span class="line"><span class="comment">//     io.emit(&quot;ans&quot;, &quot;吃了&quot;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.listen(<span class="number">3000</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果图：<br>稍后上传。。。。。。懒 - -！！！</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 开发规范</title>
      <link href="2017/08/21/JavaScript%20%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>2017/08/21/JavaScript%20%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>原文链接：<a class="link"   href="http://foreverz.cn/2017/08/23/JS开发规范/" >http://foreverz.cn/2017/08/23/JS开发规范/<i class="fas fa-external-link-alt"></i></a></p><p>从事前端开发也有一段时间了，一直在遵循着规范化开发，从 js 也逐渐转向了 ts ，在这个过程中也有了很多收获，在此把自己的开发心得写下来。</p><p>本文参考了JavaScript 开发规范，并做了补充和修改，同时删去了框架开发相关的内容(侵删)。</p><h5 id="1-命名规范"><a href="#1-命名规范" class="headerlink" title="1. 命名规范"></a>1. 命名规范</h5><p>ECMAScript 规范中标识符采用驼峰大小写格式，驼峰命名法由小(大)写字母开始，后续每个单词首字母都大写。根据首字母是否大写，分为两种方式：</p><p>Pascal Case 大驼峰式命名法：首字母大写。eg：<br><code>StudentInfo</code>、<code>UserInfo</code>、<code>ProductInfo</code><br>Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo<br>标识符，则包括变量、函数名、类名、属性名和函数或类的参数，每个命名方法又略有不同，下面详细解释一下：</p><p>1.1 变量</p><p>命名方法：小驼峰式命名法。</p><p>命名规范：前缀应当是名词。(函数的名字前缀为动词，以此区分变量和函数)</p><p>命名建议：尽量在变量名字中体现所属类型，如:length、count等表示数字类型；而包含name、title表示为字符串类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的命名方式</span></span><br><span class="line"><span class="keyword">let</span> maxCount = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> tableTitle = <span class="string">&#x27;LoginTable&#x27;</span>;</span><br><span class="line"><span class="comment">// 不好的命名方式</span></span><br><span class="line"><span class="keyword">let</span> setCount = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> getTitle = <span class="string">&#x27;LoginTable&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.2 常量</p><p>命名方法：名称全部大写。</p><p>命名规范：使用大写字母和下划线来组合命名，下划线用以分割单词。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_COUNT = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">&#x27;http://www.foreverz.com&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3 函数</p><p>命名方法：小驼峰式命名法。</p><p>命名规范：前缀应当为动词。</p><p>命名建议：可使用常见动词约定</p><table><thead><tr><th>动词</th><th>含义</th><th>返回值</th></tr></thead><tbody><tr><td>can</td><td>判断是否可执行某个动作(权限)</td><td>函数返回一个布尔值。true：可执行；false：不可执行</td></tr><tr><td>has</td><td>判断是否含有某个值</td><td>函数返回一个布尔值。true：含有此值；false：不含有此值</td></tr><tr><td>is</td><td>判断是否为某个值</td><td>函数返回一个布尔值。true：为某个值；false：不为某个值</td></tr><tr><td>get</td><td>获取某个值</td><td>函数返回一个非布尔值</td></tr><tr><td>set</td><td>设置某个值</td><td>无返回值、返回是否设置成功或者返回链式对象</td></tr><tr><td>load</td><td>加载某些数据</td><td>无返回值或者返回是否加载完成的结果</td></tr><tr><td>render</td><td>渲染生成某些数据</td><td>无返回值或者返回是否渲染完成</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否可阅读</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canRead</span>(<span class="params"></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取名称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.4 类 &amp; 构造函数</p><p>命名方法：大驼峰式命名法，首字母大写。</p><p>命名规范：前缀为名称。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  public name: string;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;mevyn&#x27;</span>);</span><br></pre></td></tr></table></figure><p>1.5 类的成员</p><p>类的成员包含：</p><p>公共属性和方法：跟变量和函数的命名一样。</p><p>私有属性和方法：前缀为_(下划线)，后面跟公共属性和方法一样的命名方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  private _name: string;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">  <span class="comment">// 公共方法</span></span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 公共方法</span></span><br><span class="line">  <span class="function"><span class="title">setName</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.setName(<span class="string">&#x27;mervyn&#x27;</span>);</span><br><span class="line">person.getName(); <span class="comment">// -&gt;mervyn</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-注释规范"><a href="#2-注释规范" class="headerlink" title="2. 注释规范"></a>2. 注释规范</h5><p>js 支持三种不同类型的注释：行内注释、单行注释和多行注释：</p><p>2.1 行内注释</p><p>说明：行内注释以两个斜线开始，以行尾结束。</p><p>语法：code // 这是行内注释</p><p>使用方式：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</p><p>命名建议：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用来显示一个解释的评论</span></span><br><span class="line"><span class="comment">// -&gt; 用来显示表达式的结果，</span></span><br><span class="line"><span class="comment">// &gt;用来显示 console 的输出结果，</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 测试函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>); <span class="comment">// &gt;Hello World!</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span> + <span class="number">2</span>; <span class="comment">// -&gt;5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2 单行注释</p><p>说明：单行注释以两个斜线开始，以行尾结束。</p><p>语法：// 这是单行注释</p><p>使用方式：单独一行：//(双斜线)与注释文字之间保留一个空格。</p><p>eg：</p><p>// 调用了一个函数；1)单独在一行<br>setTitle();<br>2.3 多行注释</p><p>说明：以 /<em> 开头， </em>/ 结尾</p><p>语法：/<em> 注释说明 </em>/</p><p>使用方法：若开始/<em>和结束</em>/都在一行，推荐采用单行注释。若至少三行注释时，第一行为/<em>，最后行为</em>/，其他行以<em>开始，并且注释文字与</em>保留一个空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 代码执行到这里后会调用setTitle()函数</span></span><br><span class="line"><span class="comment">* setTitle()：设置title的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">setTitle();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.4 函数(方法)注释</p><p>说明：函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照JSDoc</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 函数说明</span></span><br><span class="line"><span class="comment">* @关键字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">常用注释关键字：(只列出一部分，并不是全部)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注释名    语法    含义    示例<br>@param    @param 参数名 {参数类型} 描述信息    描述参数的信息    @param name {String} 传入名称<br>@return    @return {返回类型} 描述信息    描述返回值的信息    @return {Boolean} true:可执行;false:不可执行<br>@author    @author 作者信息 [附属信息：如邮箱、日期]    描述此函数作者的信息    @author 张三 2015/07/21<br>@version    @version XX.XX.XX    描述此函数的版本号    @version 1.0.3<br>@example    @example 示例代码    演示函数的使用    @example setTitle(‘测试’)<br>/**</p><ul><li>合并Grid的行</li><li>@param grid {Ext.Grid.Panel} 需要合并的Grid</li><li>@param cols {Array} 需要合并列的Index(序号)数组；从0开始计数，序号也包含。</li><li>@param isAllSome {Boolean} ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样</li><li>@return void</li><li>@author polk6 2015/07/21</li><li>@example</li><li><hr></li><li>|  年龄 |  姓名 |                             |  年龄 |  姓名 |</li><li>—————–      mergeCells(grid,[0])   —————–</li><li>|  18   |  张三 |              =&gt;             |       |  张三 |</li><li>—————–                             -  18   ———</li><li>|  18   |  王五 |                             |       |  王五 |</li><li><hr><em></em>/</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeCells</span>(<span class="params">grid: Ext.Grid.Panel, cols: <span class="built_in">Number</span>[], isAllSome: boolean = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do Something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里只是详细讲解了 标识符命名规范 和 代码注释规范，还有很多其它的规范没来得及填充，可以参考一下Airbnb JavaScript Style Guide</p><h5 id="参考书籍和文章："><a href="#参考书籍和文章：" class="headerlink" title="参考书籍和文章："></a>参考书籍和文章：</h5><p><a class="link"   href="https://juejin.im/entry/599ed0c4f265da2499602ceb" >HTML/CSS/JS编码规范<i class="fas fa-external-link-alt"></i></a></p><p>JavaScript高级程序设计（第3版）</p><p>JavaScript 开发规范</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向过程-日历（三）</title>
      <link href="2017/08/18/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B-%E6%97%A5%E5%8E%86%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2017/08/18/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B-%E6%97%A5%E5%8E%86%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>注意实现功能：</p><ol><li>查找当前日期并实现之后10天可点击，其余天数不可点击</li><li>点击左右按钮切换月份</li><li>点击符合规则的日期把日期及价格显示在对应输入框中</li><li>判断当最后一行没有日期显示时候对应高度与上一行显示日期的高度一致</li></ol><h5 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E6%97%A5%E5%8E%86.gif"                      alt="image"                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> aInput = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oNowTime = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;nowTime&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oNextTime = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;nextTime&#x27;</span>);</span><br><span class="line"><span class="comment">//获取span</span></span><br><span class="line"><span class="keyword">var</span> aNowSpan = oNowTime.getElementsByTagName(<span class="string">&quot;span&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> aNextSpan = oNextTime.getElementsByTagName(<span class="string">&quot;span&quot;</span>);</span><br><span class="line"><span class="comment">//获取所以td</span></span><br><span class="line"><span class="keyword">var</span> aTd = oDiv.getElementsByTagName(<span class="string">&quot;td&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> bBtn = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">aInput[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">if</span>(bBtn) &#123;</span><br><span class="line">oDiv.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"><span class="comment">//判断是否下一年</span></span><br><span class="line"><span class="keyword">if</span>(oDate.getMonth() + <span class="number">1</span> == <span class="number">12</span>) &#123;</span><br><span class="line"><span class="comment">//传位置   年 月  true代表这个月还是下一个月</span></span><br><span class="line">showDate(oNowTime, oDate.getFullYear(), oDate.getMonth() + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">showDate(oNextTime, oDate.getFullYear() + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">showDate(oNowTime, oDate.getFullYear(), oDate.getMonth() + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">showDate(oNextTime, oDate.getFullYear(), oDate.getMonth() + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用查找日期方法找到当前日期所对应的td</span></span><br><span class="line">showColor(oDate.getDate());</span><br><span class="line">showBtn();</span><br><span class="line">showClick();</span><br><span class="line">            hideLastTr();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">oDiv.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">bBtn = !bBtn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDate</span>(<span class="params">obj, year, month, bBtn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">//设置开关防止重新生成</span></span><br><span class="line"><span class="keyword">if</span>(!obj.bBtn) &#123;</span><br><span class="line"><span class="comment">//生成周表格table table有个特别在ie下用HTML是不兼容的</span></span><br><span class="line">obj.oTitle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">obj.oTitle.className = <span class="string">&#x27;title&#x27;</span>;</span><br><span class="line">obj.appendChild(obj.oTitle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oTable = <span class="built_in">document</span>.createElement(<span class="string">&#x27;table&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oThead = <span class="built_in">document</span>.createElement(<span class="string">&#x27;thead&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oTr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;周日&#x27;</span>, <span class="string">&#x27;周一&#x27;</span>, <span class="string">&#x27;周二&#x27;</span>, <span class="string">&#x27;周三&#x27;</span>, <span class="string">&#x27;周四&#x27;</span>, <span class="string">&#x27;周五&#x27;</span>, <span class="string">&#x27;周六&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> oTh = <span class="built_in">document</span>.createElement(<span class="string">&#x27;th&#x27;</span>);</span><br><span class="line">oTh.innerHTML = arr[i];</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> || i == <span class="number">6</span>) &#123;</span><br><span class="line">oTh.className = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">oTr.appendChild(oTh);</span><br><span class="line">&#125;</span><br><span class="line">oThead.appendChild(oTr);</span><br><span class="line">oTable.appendChild(oThead);</span><br><span class="line"><span class="comment">//生成日期 生成5个行 7个列  每一行七个列</span></span><br><span class="line"><span class="keyword">var</span> oTbody = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tBody&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> oTr = <span class="built_in">document</span>.createElement(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line"><span class="keyword">var</span> oTd = <span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span><br><span class="line">oTr.appendChild(oTd);</span><br><span class="line">&#125;</span><br><span class="line">oTbody.appendChild(oTr);</span><br><span class="line">&#125;</span><br><span class="line">oTable.appendChild(oTbody);</span><br><span class="line">obj.appendChild(oTable);</span><br><span class="line"></span><br><span class="line">obj.bBtn = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据bbtn判断左边右边的年份换一种写法</span></span><br><span class="line"><span class="keyword">if</span>(bBtn) &#123;</span><br><span class="line">obj.oTitle.innerHTML = <span class="string">&#x27;&lt;div class=&quot;l&quot;&gt;&lt;span&gt;&#x27;</span> + (month - <span class="number">1</span>) + <span class="string">&#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;</span> + <span class="string">&#x27;&lt;div class=&quot;c&quot;&gt;&lt;span&gt;&#x27;</span> + year + <span class="string">&#x27;&lt;/span&gt;年&lt;span&gt;&#x27;</span> + month + <span class="string">&#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">obj.oTitle.innerHTML = <span class="string">&#x27;&lt;div class=&quot;r&quot;&gt;&lt;span&gt;&#x27;</span> + (month + <span class="number">1</span>) + <span class="string">&#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;</span> + <span class="string">&#x27;&lt;div class=&quot;c&quot;&gt;&lt;span&gt;&#x27;</span> + year + <span class="string">&#x27;&lt;/span&gt;年&lt;span&gt;&#x27;</span> + month + <span class="string">&#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成每一个月的天数 每次点击月份清空</span></span><br><span class="line"><span class="keyword">var</span> aTd = obj.getElementsByTagName(<span class="string">&#x27;td&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aTd.length; i++) &#123;</span><br><span class="line">aTd[i].innerHTML = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断月份的天数</span></span><br><span class="line"><span class="keyword">if</span>(month == <span class="number">1</span> || month == <span class="number">3</span> || month == <span class="number">5</span> || month == <span class="number">7</span> || month == <span class="number">8</span> || month == <span class="number">10</span> || month == <span class="number">12</span>) &#123;</span><br><span class="line">dayNum = <span class="number">31</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(month == <span class="number">4</span> || month == <span class="number">6</span> || month == <span class="number">9</span> || month == <span class="number">11</span>) &#123;</span><br><span class="line">dayNum = <span class="number">30</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(month == <span class="number">2</span> &amp;&amp; isLeapYear(year)) &#123;</span><br><span class="line">dayNum = <span class="number">29</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dayNum = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line">oDate.setFullYear(year);</span><br><span class="line">oDate.setMonth(month - <span class="number">1</span>);</span><br><span class="line">oDate.setDate(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(oDate.getDay());</span><br><span class="line"><span class="comment">//根据1号 对应的 getDay（）是周几？</span></span><br><span class="line"><span class="keyword">switch</span>(oDate.getDay()) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="comment">//周日 第一个td开始遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">1</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">2</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">3</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">4</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">5</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">6</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ajax请求</span></span><br><span class="line">ajax(<span class="string">&#x27;data.js?&#x27;</span> + <span class="built_in">Math</span>.random(), <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> j = <span class="built_in">eval</span>(<span class="string">&#x27;(&#x27;</span> + str + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(j)</span><br><span class="line"><span class="keyword">var</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aTd.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(aTd[i].innerHTML == <span class="number">1</span>) &#123;</span><br><span class="line">now = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(j.code) &#123;</span><br><span class="line"><span class="comment">//如果这个月的天数小于数组长度则长度最多为日期天数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j.list.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j.list[i]) &#123;</span><br><span class="line"><span class="keyword">var</span> oP = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">oP.innerHTML = j.list[i] + <span class="string">&#x27;元&#x27;</span>;</span><br><span class="line">aTd[i + now].appendChild(oP);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断如果左边是1月 则 按钮应该是12月份</span></span><br><span class="line"><span class="keyword">if</span>(month == <span class="number">1</span> &amp;&amp; bBtn) &#123;</span><br><span class="line">obj.oTitle.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>].innerHTML = <span class="number">12</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(month == <span class="number">12</span> &amp;&amp; !bBtn) &#123;</span><br><span class="line">obj.oTitle.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>].innerHTML = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//判断是否是闰年</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLeapYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> bBtn = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;&#x27;</span> + date + <span class="string">&#x27;(&lt;p&gt;)*&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = aTd.length; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(aTd[i].innerHTML != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">result.push(aTd[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断当前日期</span></span><br><span class="line"><span class="keyword">if</span>(aNowSpan[<span class="number">1</span>].innerHTML == oDate.getFullYear() &amp;&amp; aNowSpan[<span class="number">2</span>].innerHTML == oDate.getMonth() + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(reg.test(result[i].innerHTML) &amp;&amp; bBtn) &#123;</span><br><span class="line">result[i].className = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">index = i;</span><br><span class="line">bBtn = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到当天日期是td第几个然后从今天开始往后几个都可以选择</span></span><br><span class="line"><span class="keyword">for</span>(len = index + <span class="number">11</span>; index + <span class="number">1</span> &lt; len; index++) &#123;</span><br><span class="line">result[index + <span class="number">1</span>].className = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//清空每个td的颜色变灰色</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">result[i].className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showBtn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取左右2边的月份及年</span></span><br><span class="line"><span class="keyword">var</span> leftMonth = <span class="built_in">parseInt</span>(aNowSpan[<span class="number">0</span>].innerHTML);</span><br><span class="line"><span class="keyword">var</span> leftYear = <span class="built_in">parseInt</span>(aNowSpan[<span class="number">1</span>].innerHTML);</span><br><span class="line"><span class="keyword">var</span> rightMonth = <span class="built_in">parseInt</span>(aNextSpan[<span class="number">0</span>].innerHTML);</span><br><span class="line"><span class="keyword">var</span> rightYear = <span class="built_in">parseInt</span>(aNextSpan[<span class="number">1</span>].innerHTML);</span><br><span class="line">aNowSpan[<span class="number">0</span>].parentNode.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(leftMonth == <span class="number">12</span>) &#123;</span><br><span class="line">showDate(oNowTime, leftYear - <span class="number">1</span>, leftMonth, <span class="literal">true</span>);</span><br><span class="line">showDate(oNextTime, leftYear, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">showDate(oNowTime, leftYear, leftMonth, <span class="literal">true</span>);</span><br><span class="line">showDate(oNextTime, leftYear, leftMonth + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">showBtn();</span><br><span class="line">showColor(<span class="keyword">new</span> <span class="built_in">Date</span>().getDate());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">aNextSpan[<span class="number">0</span>].parentNode.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rightMonth == <span class="number">1</span>) &#123;</span><br><span class="line">showDate(oNowTime, rightYear, <span class="number">12</span>, <span class="literal">true</span>);</span><br><span class="line">showDate(oNextTime, rightYear + <span class="number">1</span>, rightMonth);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">showDate(oNowTime, rightYear, rightMonth - <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">showDate(oNextTime, rightYear, rightMonth);</span><br><span class="line">&#125;</span><br><span class="line">showBtn();</span><br><span class="line">showColor(<span class="keyword">new</span> <span class="built_in">Date</span>().getDate());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点击事件显示日期在输入框</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/(\d+)((&lt;p&gt;)*)/</span>;</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aTd.length; i++) &#123;</span><br><span class="line">aTd[i].index = i;</span><br><span class="line">aTd[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//判断可以点击的日期</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.className == <span class="string">&quot;red&quot;</span> || <span class="built_in">this</span>.className == <span class="string">&quot;blue&quot;</span>) &#123;</span><br><span class="line"><span class="comment">//判断左边日期还是右边日期</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.index &lt; aTd.length / <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.innerHTML.replace(re, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">aInput[<span class="number">0</span>].value = oDate.getFullYear() + <span class="string">&#x27;-&#x27;</span> + (oDate.getMonth() + <span class="number">1</span>) + <span class="string">&#x27;-&#x27;</span> + $<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>((oDate.getMonth() + <span class="number">2</span>) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.innerHTML.replace(re, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">aInput[<span class="number">0</span>].value = oDate.getFullYear() + <span class="number">1</span> + <span class="string">&#x27;-&#x27;</span> + (oDate.getMonth() + <span class="number">2</span>) + <span class="string">&#x27;-&#x27;</span> + $<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.innerHTML.replace(re, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">aInput[<span class="number">0</span>].value = oDate.getFullYear() + <span class="string">&#x27;-&#x27;</span> + (oDate.getMonth() + <span class="number">2</span>) + <span class="string">&#x27;-&#x27;</span> + $<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断表格内是否有价格显示</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>)[<span class="number">0</span>]) &#123;</span><br><span class="line">aInput[<span class="number">1</span>].value = <span class="built_in">this</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>)[<span class="number">0</span>].innerHTML;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">aInput[<span class="number">1</span>].value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oDiv.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">bBtn = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//隐藏多余的td表格框</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hideLastTr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> bBtn = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> bBtn2 = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">35</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(aTd[i].innerHTML != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">bBtn = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bBtn) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">35</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line"><span class="comment">//  aTd[i].style.display = &#x27;none&#x27;;</span></span><br><span class="line">aTd[i].style.height = <span class="string">&#x27;42px&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">35</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line">aTd[i].style.height = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">77</span>; i &lt; <span class="number">84</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(aTd[i].innerHTML != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">bBtn2 = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bBtn2) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">77</span>; i &lt; <span class="number">84</span>; i++) &#123;</span><br><span class="line">aTd[i].style.height = <span class="string">&#x27;42px&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">77</span>; i &lt; <span class="number">84</span>; i++) &#123;</span><br><span class="line">aTd[i].style.height = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 练习Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> HTML </tag>
            
            <tag> Javascript </tag>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向过程-日历（一）</title>
      <link href="2017/08/17/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B-%E6%97%A5%E5%8E%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2017/08/17/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B-%E6%97%A5%E5%8E%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>思路：首先获取元素节点元素—&gt;根据点击事件隐藏显示元素—&gt;建立showdate方法（判断12月 则右边年份+1，月份1 ）—&gt;还要设置btn开关 防止多次重建—&gt;根据元素清空 for循环列 行、把 th tr thead加入table—&gt;根据判断每一次点击进入月份必须先清空一次td判断月份大小及闰年—&gt; switch循环加入日期</p><h5 id="布局是这样紫的"><a href="#布局是这样紫的" class="headerlink" title="布局是这样紫的"></a>布局是这样紫的</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E6%97%A5%E5%8E%86%E5%B8%83%E5%B1%80.png"                      alt="image"                ></p><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确定&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nowTime&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;l&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span>月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">span</span>&gt;</span>年<span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span>月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>周一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>周二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>周三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>周四<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>周五<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>周六<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>周日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    1</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>200元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nextTime&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;r&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span>月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">span</span>&gt;</span>年<span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span>月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>周一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>周二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>周三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>周四<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>周五<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>周六<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>周日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    1</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>200元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">*&#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; <span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-id">#div1</span>&#123; <span class="attribute">margin</span>:<span class="number">20px</span>; <span class="attribute">position</span>:absolute; <span class="attribute">top</span>:<span class="number">25px</span>; <span class="attribute">left</span>:<span class="number">10px</span>; <span class="attribute">display</span>:block;&#125;</span><br><span class="line"><span class="selector-id">#nowTime</span>&#123; <span class="attribute">width</span>:<span class="number">330px</span>; <span class="attribute">float</span><span class="selector-pseudo">:left</span>;&#125;</span><br><span class="line"><span class="selector-id">#nextTime</span> &#123; <span class="attribute">width</span>:<span class="number">330px</span>; <span class="attribute">float</span><span class="selector-pseudo">:left</span>; <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-class">.title</span>&#123; <span class="attribute">width</span>:<span class="number">100%</span>; <span class="attribute">height</span>:<span class="number">30px</span>; <span class="attribute">background</span>:red; <span class="attribute">color</span>:<span class="number">#FFFFFF</span>; <span class="attribute">position</span>:relative;&#125;</span><br><span class="line"><span class="selector-class">.title</span> <span class="selector-class">.c</span>&#123; <span class="attribute">text-align</span>:center; <span class="attribute">line-height</span>:<span class="number">30px</span>;&#125;</span><br><span class="line"><span class="selector-class">.title</span> <span class="selector-class">.l</span>&#123; <span class="attribute">position</span>:absolute; <span class="attribute">top</span>:<span class="number">6px</span>; <span class="attribute">left</span>:<span class="number">5px</span>;&#125;</span><br><span class="line"><span class="selector-class">.title</span> <span class="selector-class">.r</span>&#123; <span class="attribute">position</span>:absolute; <span class="attribute">top</span>:<span class="number">6px</span>; <span class="attribute">right</span>:<span class="number">5px</span>;&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123; <span class="attribute">width</span>:<span class="number">100%</span>; <span class="attribute">background</span>:<span class="number">#dee3e9</span>; <span class="attribute">color</span>:<span class="number">#9ea7ac</span>;&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">tr</span>&#123; <span class="attribute">background</span>:<span class="number">#f9fafc</span>;&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span>&#123; <span class="attribute">width</span>:<span class="number">46px</span>; <span class="attribute">padding</span>:<span class="number">5px</span>;&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span>&#123; <span class="attribute">padding</span>:<span class="number">5px</span>; <span class="attribute">text-align</span>:center;&#125;</span><br><span class="line"><span class="selector-class">.red</span>&#123; <span class="attribute">color</span>:<span class="number">#FF0000</span>;&#125;</span><br><span class="line"><span class="selector-class">.blue</span>&#123; <span class="attribute">color</span>:<span class="number">#0000FF</span>;&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span> <span class="selector-tag">p</span>&#123; <span class="attribute">color</span>:<span class="number">#FF0000</span>;&#125;</span><br><span class="line"><span class="selector-tag">input</span>&#123; <span class="attribute">margin</span>:<span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 练习Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> HTML </tag>
            
            <tag> Javascript </tag>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向过程-日历（二）</title>
      <link href="2017/08/17/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B-%E6%97%A5%E5%8E%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2017/08/17/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B-%E6%97%A5%E5%8E%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>现在用面向过程方式</p><ol><li>点击按钮显示或隐藏日历</li><li>设置日期对象 通过showDate方法传对应日期过去</li><li>showDate方法动态生成table日历表格</li><li>根据日期判断闰年</li><li>根据月份判断天数遍历从每月1号对应周几开始遍历第几个td开始**</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E6%97%A5%E5%8E%862.jpg"                      alt="image"                ></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> aInput = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oNowTime = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;nowTime&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oNextTime = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;nextTime&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bBtn = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">aInput[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">if</span>(bBtn) &#123;</span><br><span class="line">oDiv.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"><span class="comment">//判断是否下一年</span></span><br><span class="line"><span class="keyword">if</span>(oDate.getMonth() + <span class="number">1</span> == <span class="number">12</span>) &#123;</span><br><span class="line"><span class="comment">//传位置   年 月  true代表这个月还是下一个月</span></span><br><span class="line">showDate(oNowTime, oDate.getFullYear(), oDate.getMonth() + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">showDate(oNextTime, oDate.getFullYear() + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">showDate(oNowTime, oDate.getFullYear(), oDate.getMonth() + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">showDate(oNextTime, oDate.getFullYear(), oDate.getMonth() + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">oDiv.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">bBtn = !bBtn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDate</span>(<span class="params">obj, year, month, bBtn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">//设置开关防止重新生成</span></span><br><span class="line"><span class="keyword">if</span>(!obj.bBtn) &#123;</span><br><span class="line"><span class="comment">//生成周表格table table有个特别在ie下用HTML是不兼容的</span></span><br><span class="line">obj.oTitle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">obj.oTitle.className = <span class="string">&#x27;title&#x27;</span>;</span><br><span class="line">obj.appendChild(obj.oTitle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oTable = <span class="built_in">document</span>.createElement(<span class="string">&#x27;table&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oThead = <span class="built_in">document</span>.createElement(<span class="string">&#x27;thead&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> oTr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;周一&#x27;</span>, <span class="string">&#x27;周二&#x27;</span>, <span class="string">&#x27;周三&#x27;</span>, <span class="string">&#x27;周四&#x27;</span>, <span class="string">&#x27;周五&#x27;</span>, <span class="string">&#x27;周六&#x27;</span>, <span class="string">&#x27;周日&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> oTh = <span class="built_in">document</span>.createElement(<span class="string">&#x27;th&#x27;</span>);</span><br><span class="line">oTh.innerHTML = arr[i];</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">5</span> || i == <span class="number">6</span>) &#123;</span><br><span class="line">oTh.className = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">oTr.appendChild(oTh);</span><br><span class="line">&#125;</span><br><span class="line">oThead.appendChild(oTr);</span><br><span class="line">oTable.appendChild(oThead);</span><br><span class="line"><span class="comment">//生成日期 生成6个行 7个列  每一行七个列</span></span><br><span class="line"><span class="keyword">var</span> oTbody = <span class="built_in">document</span>.createElement(<span class="string">&#x27;tBody&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> oTr = <span class="built_in">document</span>.createElement(<span class="string">&quot;tr&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line"><span class="keyword">var</span> oTd = <span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span><br><span class="line">oTr.appendChild(oTd);</span><br><span class="line">&#125;</span><br><span class="line">oTbody.appendChild(oTr);</span><br><span class="line">&#125;</span><br><span class="line">oTable.appendChild(oTbody);</span><br><span class="line">obj.appendChild(oTable);</span><br><span class="line"></span><br><span class="line">obj.bBtn = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.oTitle.innerHTML = (bBtn ? &#x27;&lt;div class=&quot;l&quot;&gt;&lt;span&gt;&#x27; + (month - 1) + &#x27;&lt;/span&gt;月&lt;/div&gt;&#x27; : &#x27;&lt;div class=&quot;r&quot;&gt;&lt;span&gt;&#x27; + (month + 1) + &#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;) + &#x27;&lt;div class=&quot;c&quot;&gt;&lt;span&gt;&#x27; + year + &#x27;&lt;/span&gt;年&lt;span&gt;&#x27; + month + &#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;;</span></span><br><span class="line"><span class="comment">//换一种写法</span></span><br><span class="line"><span class="keyword">if</span>(bBtn) &#123;</span><br><span class="line">obj.oTitle.innerHTML = <span class="string">&#x27;&lt;div class=&quot;l&quot;&gt;&lt;span&gt;&#x27;</span> + (month - <span class="number">1</span>) + <span class="string">&#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;</span> + <span class="string">&#x27;&lt;div class=&quot;c&quot;&gt;&lt;span&gt;&#x27;</span> + year + <span class="string">&#x27;&lt;/span&gt;年&lt;span&gt;&#x27;</span> + month + <span class="string">&#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">obj.oTitle.innerHTML = <span class="string">&#x27;&lt;div class=&quot;r&quot;&gt;&lt;span&gt;&#x27;</span> + (month + <span class="number">1</span>) + <span class="string">&#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;</span> + <span class="string">&#x27;&lt;div class=&quot;c&quot;&gt;&lt;span&gt;&#x27;</span> + year + <span class="string">&#x27;&lt;/span&gt;年&lt;span&gt;&#x27;</span> + month + <span class="string">&#x27;&lt;/span&gt;月&lt;/div&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成每一个月的天数 每次点击月份清空</span></span><br><span class="line"><span class="keyword">var</span> aTd = obj.getElementsByTagName(<span class="string">&#x27;td&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aTd.length; i++) &#123;</span><br><span class="line">aTd[i].innerHTML = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断月份的天数</span></span><br><span class="line"><span class="keyword">if</span>(month == <span class="number">1</span> || month == <span class="number">3</span> || month == <span class="number">5</span> || month == <span class="number">7</span> || month == <span class="number">8</span> || month == <span class="number">10</span> || month == <span class="number">12</span>) &#123;</span><br><span class="line">dayNum = <span class="number">31</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(month == <span class="number">4</span> || month == <span class="number">6</span> || month == <span class="number">9</span> || month == <span class="number">11</span>) &#123;</span><br><span class="line">dayNum = <span class="number">30</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(month == <span class="number">2</span> &amp;&amp; isLeapYear(year)) &#123;</span><br><span class="line">dayNum = <span class="number">29</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dayNum = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line">oDate.setFullYear(year);</span><br><span class="line">oDate.setMonth(month - <span class="number">1</span>);</span><br><span class="line">oDate.setDate(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(oDate.getDay());</span><br><span class="line"><span class="comment">//根据1号 对应的 getDay（）是周几？</span></span><br><span class="line"><span class="keyword">switch</span>(oDate.getDay()) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="comment">//周日 第七个td开始遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">6</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">1</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">2</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">3</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">4</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dayNum; i++) &#123;</span><br><span class="line">aTd[i + <span class="number">5</span>].innerHTML = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否是闰年</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLeapYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 练习Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> HTML </tag>
            
            <tag> Javascript </tag>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件系列_弹窗</title>
      <link href="2017/08/16/%E7%BB%84%E4%BB%B6%E7%B3%BB%E5%88%97_%E5%BC%B9%E7%AA%97/"/>
      <url>2017/08/16/%E7%BB%84%E4%BB%B6%E7%B3%BB%E5%88%97_%E5%BC%B9%E7%AA%97/</url>
      
        <content type="html"><![CDATA[<p>我们在前端开发的过程中（其它开发也一样），总是会遇到这样一种情况：以前做的一个项目，里面有个组件，比如对话弹窗、登陆窗等等。<br><a id="more"></a><br>一般我们写了之后就很少去管它了，但是像这样的一些组件，在不同的项目开发过程总是很多时候需要复用起来的。虽然现在网上很多js库都封装了这样的一些组件，如果你为了图快、方便的话，那么直接使用这些库也是可以的，但从这两个方面来说，我觉得有必要我们把我们写过的这些组件分离出来从而以后复用：1、如果你用第三方库的话，我们都知道，有很多第三方库并不是刚好封装了你要的那个组件而已，比如你需要一个登陆组件，那么可能第三方库确实封装了这个组件，但同时也封装了很多其它组件，所以你如果用第三方库的话，那么你就会为了一个小组件引入一些庞大的js文件和css文件以及图片！这样的库引入多了的话，那么后期你不仅需要更多地维护各个库的冲突等等问题，而且你的网站因此也会响应越来越慢，影响用户体验！2、如果你自己把你写过的组件单独分离出来复用的话，首先来说，你自己写过的，那么你用起来也会比较熟悉，对不？而且，这样的工作你做多了以后，提高你基本功的同时，你还会发现你现在就是在写一个“第三方库”了，虽然有很多瑕疵，但是原理差不多的！</p><h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><h5 id="html"><a href="#html" class="headerlink" title="html"></a>html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sc-box sc-login-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sc-login&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sc-login&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;text-ellipsis sc-login__title&quot;</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sc-login__input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>账号：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请填写账号&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请填写密码&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sc-login__btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;login_cancel btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">title</span>=<span class="string">&quot;#&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;login_ensure btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">title</span>=<span class="string">&quot;#&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 向外暴露一个接口Login，为了减少命名冲突，相关操作在其实例属性或者方法上执行</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.init.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Login.prototype = &#123;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*id参数用于获取login弹窗</span></span><br><span class="line"><span class="comment">*config用于设置相关回调参数等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">init:<span class="function"><span class="keyword">function</span>(<span class="params">id,config</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> login_dom = (<span class="keyword">typeof</span> id === <span class="string">&#x27;string&#x27;</span>)?<span class="built_in">document</span>.getElementById(id):id;</span><br><span class="line"><span class="keyword">if</span>(!login_dom)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//登陆框隐藏操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">login_dom.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//点击取消按钮操作</span></span><br><span class="line">login_dom.querySelector(<span class="string">&#x27;.login_cancel&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">hide();</span><br><span class="line"><span class="keyword">if</span>(config.cancel)&#123;</span><br><span class="line">config.cancel();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//点击确定按钮操作</span></span><br><span class="line">login_dom.querySelector(<span class="string">&#x27;.login_ensure&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">hide();</span><br><span class="line"><span class="keyword">if</span>(config.ensure)&#123;</span><br><span class="line">config.ensure();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：实际使用过程中，根据需要写在window.onload或jquery的$回调函数里面调用</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">new</span> Login(<span class="string">&#x27;sc-login&#x27;</span>,&#123;</span><br><span class="line">cancel:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//点击取消按钮脚本 goes here</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;取消&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">ensure:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//点击确定按钮脚本 goes here</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;确定&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Javascript </tag>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三栏布局的五种写法</title>
      <link href="2017/08/05/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E4%BA%94%E7%A7%8D%E5%86%99%E6%B3%95/"/>
      <url>2017/08/05/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E4%BA%94%E7%A7%8D%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>已知高度  左右距离固定 中间自适应三栏布局在html很常见，基础知识回顾<br><a id="more"></a></p><blockquote><p>双飞翼布局与圣杯布局的不同之处，圣杯布局的的左中右三列容器，中间middle多了一个子容器存在，通过控制 middle 的子容器的 margin 或者 padding 空出左右两列的宽度。</p></blockquote><h2 id="最常见的圣杯布局实现方法"><a href="#最常见的圣杯布局实现方法" class="headerlink" title="最常见的圣杯布局实现方法"></a>最常见的圣杯布局实现方法</h2><p>关键点</p><ol><li>圣杯布局的关键点是通过 margin-left 与 left 属性将左右两列放置到准确的位置</li><li>圣杯布局的关键点父元素需要设置 padding</li><li>圣杯布局的关键点 margin-left 取值为百分比时，是以其父元素的宽度为基准的</li></ol><html><br><iframe width="100%" height="300" src="//jsrun.net/ZYXKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br></html><h2 id="最常见的双飞翼布局实现方法"><a href="#最常见的双飞翼布局实现方法" class="headerlink" title="最常见的双飞翼布局实现方法"></a>最常见的双飞翼布局实现方法</h2><p>关键点</p><ol><li>双飞翼布局的关键点是通过 margin-left 属性将左右两列放置到准确的位置，通过控制 middle 的子容器的 margin 或者 padding 空出左右两列的宽度</li><li>双飞翼布局的关键点父元素不需要设置 padding</li><li>双飞翼布局的关键点 margin-left 取值为百分比时，是以其父元素的宽度为基准的</li></ol><iframe width="100%" height="300" src="//jsrun.net/hYXKp/embedded/all/light" allowfullscreen="allowfullscreen" frameborder="0"></iframe><h4 id="其他布局方法"><a href="#其他布局方法" class="headerlink" title="其他布局方法-"></a>其他布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .layout &#123;</span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.layout</span> <span class="selector-tag">article</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">min-height</span>: <span class="number">100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="其他布局方法-1"><a href="#其他布局方法-1" class="headerlink" title="其他布局方法-"></a>其他布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout float&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .layout.float .left &#123;</span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .layout.float .right &#123;</span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .layout.float .mid &#123;</span><br><span class="line"><span class="css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>浮动解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="其他布局方法-2"><a href="#其他布局方法-2" class="headerlink" title="其他布局方法-"></a>其他布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            .layout.table .left-mid-right &#123;</span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="css">            <span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.left-mid-right</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: table-cell;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            .layout.table .left &#123;</span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background</span>: red;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            .layout.table .right &#123;</span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background</span>: blue;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            .layout.table .mid &#123;</span><br><span class="line"><span class="css">                <span class="attribute">background</span>: yellow;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>flexbox布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他布局方法-3"><a href="#其他布局方法-3" class="headerlink" title="其他布局方法-"></a>其他布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout flexbox&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">          .layout.flexbox &#123;</span><br><span class="line"><span class="css">              <span class="attribute">margin-top</span>: <span class="number">130px</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          .layout.flexbox .left-mid-right &#123;</span><br><span class="line"><span class="css">              <span class="attribute">display</span>: flex;</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          .layout.flexbox .left &#123;</span><br><span class="line"><span class="css">              <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">background</span>: red;</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          .layout.flexbox .right &#123;</span><br><span class="line"><span class="css">              <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">background</span>: blue;</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          .layout.flexbox .mid &#123;</span><br><span class="line"><span class="css">              <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">background</span>: yellow;</span></span><br><span class="line">          &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h1</span>&gt;</span>flexbox布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他布局方法-4"><a href="#其他布局方法-4" class="headerlink" title="其他布局方法-"></a>其他布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout absolute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.layout</span><span class="selector-class">.absolute</span> <span class="selector-class">.left-mid-right</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .layout.absolute .left &#123;</span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .layout.absolute .right &#123;</span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .layout.absolute .mid &#123;</span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">right</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: yellow;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="其他布局方法-5"><a href="#其他布局方法-5" class="headerlink" title="其他布局方法-"></a>其他布局方法-</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;layout grid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">          .layout.grid .left-mid-right &#123;</span><br><span class="line"><span class="css">              <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">              <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">              <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">              grid-template-rows: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">              grid-template-<span class="attribute">columns</span>: <span class="number">300px</span> auto <span class="number">300px</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          .layout.grid .left &#123;</span><br><span class="line"><span class="css">              <span class="attribute">background</span>: red;</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          .layout.grid .right &#123;</span><br><span class="line"><span class="css">              <span class="attribute">background</span>: blue;</span></span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          .layout.grid .mid &#123;</span><br><span class="line"><span class="css">              <span class="attribute">background</span>: yellow;</span></span><br><span class="line">          &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;left-mid-right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网格布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是三栏布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 的本质</title>
      <link href="2017/08/03/Node.js%20%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
      <url>2017/08/03/Node.js%20%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<p>下面是一条数据的旅程，这条数据我们叫他req。<br><a id="more"></a><br>req在浏览器很无聊，通过网络跑到了Node.js服务器，它的目的是想见到国王server.js（你编写的代码），req想和server.js要一个html文件，可它进入服务器时，迎接它的是个大臣，大臣告诉他，server.js正在接待另一个req，请他等0.1毫秒。终于req见到了国王，国王的会议室挺漂亮的，下面是会议室的大体样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.on(“request”,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>req和server.js要一个hello.html的网页文件，这时候它看到会议室外面还有几个req在等待，server.js国王把任务交给了 fs大臣，然后马上就去接待另一个req了，req心里想国王的效率好高啊，难道这就是传说中的永不阻塞的 I/O 吗，这时候fs大臣帮它把hello.html文件送上了返程的列车res。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.on(“request”,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    fs.createReadStream(“hello.html”).pipe(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>req回到浏览器后，感慨Node.js 国家办事效率，它在日记中写下：</p><p>通过集权的编码方式，让代码更加好管理、更好维护，避免多线程带来的死锁等后遗症。通过非阻塞异步 I/O 的调用，把耗时的工作交给底下人去办，而不是等待I/O完成后再进行下一步的工作，而是通过事件模式，监听工作进度，这段时间里，Node.js还可以不 间断的处理其他请求。等到I/O处理完毕后，会接收到一个事件。<br>Node.js是什么？</p><p>Node提供一种简单的构建可伸缩网络程序的方法。在 Java 和 PHP 这类语言中，每个连接都会生成一个新线程，每个新线程可能需要 2 MB 的配套内存。在一个拥有 8 GB RAM 的系统上，理论上最大的并发连接数量是 4,000 个用户。随着您的客户群的增长，如果希望您的 Web 应用程序支持更多用户，那么，您必须添加更多服务器。</p><p>Node更改了连接到服务器的方式。每个连接发射一个在 Node 引擎的进程中运行的事件，而不是为每个连接生成一个新的 OS 线程。它绝不会死锁，因为它根本不允许使用锁，它不会直接阻塞 I/O 调用。它的服务器能支持数万个并发连接。</p><p>Node.js背后真正的优势</p><p>Node.js 有很多优势，在我看来除了高性能外，它统一了前后端语言和数据 (json)，这才是它最大优势。paypal公司全面转至Node.js技术，主要原因是Node.js提高了开发效率，同时也节省了成本。</p><p>难学吗？</p><p>只要会JavaScript基本知识即可，javascript的运行环境通常是浏览器，Node.js给了javascript在服务器端运行环境，这个环境下，还配备了一套API，包括I/O、网络等功能。</p><p>转自：<a class="link"   href="http://www.html-js.cn/details/VkK2RAlG-.html" >http://www.html-js.cn/details/VkK2RAlG-.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb的二种写入方式</title>
      <link href="2017/07/27/mongodb%E7%9A%84%E4%BA%8C%E7%A7%8D%E5%86%99%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
      <url>2017/07/27/mongodb%E7%9A%84%E4%BA%8C%E7%A7%8D%E5%86%99%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>MongoDB 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便。 MongoDB 工作在收集和文件的概念。<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs模块formidable实现多文件上传</title>
      <link href="2017/07/10/nodeJs%E6%A8%A1%E5%9D%97formidable%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%9B%BE%E4%B8%8A%E4%BC%A0/"/>
      <url>2017/07/10/nodeJs%E6%A8%A1%E5%9D%97formidable%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%9B%BE%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>在进行node web开发时，我们可能经常遇到上传文件的问题，这一块如果我们没有经验，可能会遇到很多坑，下面我将跟大家分享一下，实现文件上传的一些方式。<br><a id="more"></a></p><blockquote><p>通过一段时间的查阅资料、摸索，我发现实现上传的方式有：1.express中间件multer模块（此效率最高，在express3.x原生支持，到了express4.x独立成一个模块了），2.connect-multiparty模块（但现在官方不推荐），3.使用multiparty模块实现（此方法比较普遍），4.使用formidable插件实现（插件呢，就是简单易懂）;</p></blockquote><p>首先知道enctype这个属性管理的是表单的MIME编码。共有三个值可选：</p><ol><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain<blockquote><p>其中application/x-www-form-urlencoded是默认值，作用是设置表单传输的编码。例如我们在AJAX中见过xmlHttp.setRequestHeader(“Content-Type”,”application/x-www-form- urlencoded”);如果不写会报错的，但是在html的form表单里是可以不写enctype=application/x-www-form-urlencoded,因为默认的HTML表单就是这种传输编码类型的。<br>　　而multipart/form-data是用来制定传输数据的特殊类型的，主要就是我们上传的非文本的内容，比如图片或是是mp3等等。<br>　　text/plain是纯文本传输的意思，在发邮件的时候要设置这种编码类型，否则会出现接收时编码混乱的问题。网络上经常拿text/plain和 text/html做比较，其实这两个很好区分，前者用来传输纯文本文件，后者则是传递html代码的编码类型，在发送头文件时才用得上。①和③都不能用于上传文件，只有multipart/form-data才能完整的传递文件数据。</p></blockquote></li></ol><p>==　formidable上传插件，也是在github上同类功能人气比较高的。==</p><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><p>　　1. 速度快（~500M/s）,没有non-buffering multipart解析</p><p>　　2.自动写入到上传文件磁盘</p><p>　　3.占用内存低</p><p>　　4.优雅的错误处理</p><p>　　5.非常高的测试覆盖率</p><h6 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;&#125;多张<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to &#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;image&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file_upload&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> btn = $(<span class="string">&quot;#submit&quot;</span>);</span><br><span class="line">      btn.on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         uploadByForm();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ajax 上传。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">uploadByForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">//第一步</span></span><br><span class="line">      <span class="comment">//定义表单变量</span></span><br><span class="line">      <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;file_upload&#x27;</span>).files;</span><br><span class="line">      <span class="comment">//console.log(file.length);</span></span><br><span class="line">      <span class="comment">//新建一个FormData对象</span></span><br><span class="line">      <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(); <span class="comment">//++++++++++</span></span><br><span class="line">      <span class="comment">//追加文件数据</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; file.length; i++) &#123;</span><br><span class="line">          formData.append(<span class="string">&quot;file[&quot;</span> + i + <span class="string">&quot;]&quot;</span>, file[i]); <span class="comment">//++++++++++</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(formData);</span><br><span class="line">      <span class="comment">//formData.append(&quot;file&quot;, file[0]); //++++++++++</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//post方式</span></span><br><span class="line">      xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/api/upload/data&#x27;</span>); <span class="comment">//第二步骤</span></span><br><span class="line">      <span class="comment">//发送请求</span></span><br><span class="line">      xhr.send(formData); <span class="comment">//第三步骤</span></span><br><span class="line">      <span class="comment">//ajax返回</span></span><br><span class="line">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//第四步</span></span><br><span class="line">          <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(xhr.response);</span><br><span class="line">              <span class="built_in">console</span>.log(data)</span><br><span class="line">              <span class="built_in">console</span>.log(data.filesUrl);</span><br><span class="line">              <span class="keyword">if</span>(data.sucess != <span class="string">&quot;0&quot;</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                alert(<span class="string">&quot;上传成功！！，其中&quot;</span>+data.error+<span class="string">&quot;个失败&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span>&#123;</span><br><span class="line">                 alert(<span class="string">&quot;上传失败！！&quot;</span> + data.filesUrl);</span><br><span class="line">              &#125;</span><br><span class="line">             &#125;</span><br><span class="line">          <span class="comment">//设置超时时间</span></span><br><span class="line">          xhr.timeout = <span class="number">100000</span>;</span><br><span class="line">          xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;　　　　 alert(<span class="string">&#x27;请求超时！&#x27;</span>);　　 &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">obj</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="comment">//对象转数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class="line">             html += <span class="string">&quot;&lt;li&gt; &lt;img src=&#x27;../&quot;</span>+obj[i]+<span class="string">&quot;&#x27;&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">&quot;.box&quot;</span>).append(html);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="后端代码处理"><a href="#后端代码处理" class="headerlink" title="后端代码处理"></a>后端代码处理</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&quot;/upload/data&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm(); <span class="comment">//创建上传表单</span></span><br><span class="line">    form.encoding = <span class="string">&#x27;utf-8&#x27;</span>; <span class="comment">//设置编辑</span></span><br><span class="line">    form.uploadDir = <span class="string">&#x27;tmp/&#x27;</span>; <span class="comment">//设置上传目录</span></span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>; <span class="comment">//保留后缀</span></span><br><span class="line">    form.maxFieldsSize = <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">//文件大小;</span></span><br><span class="line">     <span class="comment">//将多个参数组合成一个 path</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    /Users/lovewcc/Documents/暴力熊团队/nodeTest/uploads</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> targetDir = path.join(__dirname, <span class="string">&#x27;../uploads&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(targetDir);</span><br><span class="line">    <span class="comment">//文件路径是否存在 不存在则创建</span></span><br><span class="line">    fs.access(targetDir, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            fs.mkdirSync(targetDir);</span><br><span class="line">        &#125;</span><br><span class="line">        _fileParse(); <span class="comment">//调用多图上传方法</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_fileParse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        form.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">            <span class="keyword">var</span> filesUrl = []; <span class="comment">//数组</span></span><br><span class="line">            <span class="keyword">var</span> errCount = <span class="number">0</span>; <span class="comment">//错误长度</span></span><br><span class="line">            <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(files);</span><br><span class="line">            <span class="built_in">console</span>.log(keys);</span><br><span class="line">            keys.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(files[key].path);</span><br><span class="line">                <span class="keyword">var</span> filePath = files[key].path;</span><br><span class="line">                <span class="keyword">var</span> fileExt = filePath.substring(filePath.lastIndexOf(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">                <span class="comment">//图片大小</span></span><br><span class="line">                <span class="keyword">if</span> (files[key].size &gt; form.maxFieldsSize) &#123;</span><br><span class="line">                    errCount += <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//图片类型</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="string">&#x27;.jpg.png&#x27;</span>).indexOf(fileExt.toLowerCase()) === -<span class="number">1</span>) &#123;</span><br><span class="line">                    errCount += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//以当前时间戳对上传文件进行重命名</span></span><br><span class="line">                    <span class="keyword">var</span> fileName = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + fileExt;</span><br><span class="line">                    <span class="built_in">console</span>.log(fileName);</span><br><span class="line">                    <span class="keyword">var</span> targetFile = path.join(targetDir, fileName);</span><br><span class="line">                    <span class="built_in">console</span>.log(targetFile);</span><br><span class="line">                    <span class="comment">//移动文件 异步经常有问题 改成同步Sync</span></span><br><span class="line">                    fs.renameSync(files[key].path, targetFile);</span><br><span class="line">                    filesUrl.push(<span class="string">&#x27;uploads/&#x27;</span> + fileName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            res.json(&#123; <span class="attr">success</span>: keys.length - errCount, <span class="attr">error</span>: errCount, <span class="attr">filesUrl</span>: filesUrl &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除临时文件夹</span></span><br><span class="line"><span class="keyword">var</span> emptyDir = <span class="function"><span class="keyword">function</span>(<span class="params">fileUrl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> files = fs.readdirSync(fileUrl); <span class="comment">//读取该文件夹</span></span><br><span class="line">    files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> stats = fs.statSync(fileUrl + <span class="string">&#x27;/&#x27;</span> + file);</span><br><span class="line">        <span class="keyword">if</span> (stats.isDirectory()) &#123;</span><br><span class="line">            emptyDir(fileUrl + <span class="string">&#x27;/&#x27;</span> + file);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fs.unlinkSync(fileUrl + <span class="string">&#x27;/&#x27;</span> + file);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;删除文件&quot;</span> + fileUrl + <span class="string">&#x27;/&#x27;</span> + file + <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下安装MongoDB 及使用教程</title>
      <link href="2017/07/09/Mac%E4%B8%8B%E5%AE%89%E8%A3%85MongoDB%20%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>2017/07/09/Mac%E4%B8%8B%E5%AE%89%E8%A3%85MongoDB%20%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>MongoDB 是一个跨平台的，面向文档的数据库，提供高性能，高可用性和可扩展性方便。 MongoDB 工作在收集和文件的概念。<br><a id="more"></a></p><p>什么是NoSql？</p><blockquote><p>NoSql，全称是 Not Only Sql,指的是非关系型的数据库。下一代数据库主要解决几个要点：非关系型的、分布式的、开源的、水平可扩展的。原始的目的是为了大规模web应用，这场运动开始于2009年初，通常特性应用如：模式自由、支持简易复制、简单的API、最终的一致性（非ACID）、大容量数据等。NoSQL被我们用得最多的当数key-value存储，当然还有其他的文档型的、列存储、图型数据库、xml数据库等。</p></blockquote><p>为什么要使用MongoDB</p><ol><li>JSON风格文件的形式，面向文档存储：数据存储</li><li>对任何属性可索引</li><li>复制和高可用性</li><li>自动分片</li><li>丰富的查询</li><li>快速就地更新</li><li>MongoDB的专业技术支持</li></ol><p>首先安装HomeBrew</p><blockquote><p>/usr/bin/ruby -e “$(curl -fsSL <a class="link"   href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" >https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;<i class="fas fa-external-link-alt"></i></a></p></blockquote><ol><li>下载nodejs,一路next 安装完成后，在终端输入 node -v 有显示版本号就代表安装成功，其他异常情况本文不作介绍；</li></ol><ol start="2"><li>下载Mongodb后，将Mongodb-3.2.5.tar.gz 复制到 /usr/local 路径下解压得到mongodb这个文件夹，（下图中的是我自己改了名字删掉了版本号）</li></ol><p>*默认情况下在Finder中是看不到 /usr 这个目录的（终端用得溜的请略过），可以打开Finder后按shift + command +G 输入 /usr/local后回车便能看到这个隐藏的目录了</p><ol start="3"><li><p>上图中展示的就是我的本机的目录结构了，在/usr/local/mongodb/bin下就是mongodb的执行文件了</p></li><li><p>然后在根目录下新建 data 文件夹，里面再建一个db文件夹，就是上图中那个 usr文件夹上面的 那个data文件夹 ，里面是用来存放数据库的，</p></li><li><p>终端切换到/usr/local/mongodb/bin目录下，</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs模块formidable实现单文件上传</title>
      <link href="2017/07/09/nodeJs%E6%A8%A1%E5%9D%97formidable%E5%AE%9E%E7%8E%B0%E5%8D%95%E5%9B%BE%E4%B8%8A%E4%BC%A0/"/>
      <url>2017/07/09/nodeJs%E6%A8%A1%E5%9D%97formidable%E5%AE%9E%E7%8E%B0%E5%8D%95%E5%9B%BE%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>在进行node web开发时，我们可能经常遇到上传文件的问题，这一块如果我们没有经验，可能会遇到很多坑，下面我将跟大家分享一下，实现文件上传的一些方式。<br><a id="more"></a></p><blockquote><p>通过一段时间的查阅资料、摸索，我发现实现上传的方式有：1.express中间件multer模块（此效率最高，在express3.x原生支持，到了express4.x独立成一个模块了），2.connect-multiparty模块（但现在官方不推荐），3.使用multiparty模块实现（此方法比较普遍），4.使用formidable插件实现（插件呢，就是简单易懂）;</p></blockquote><p>首先知道enctype这个属性管理的是表单的MIME编码。共有三个值可选：</p><ol><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain<blockquote><p>其中application/x-www-form-urlencoded是默认值，作用是设置表单传输的编码。例如我们在AJAX中见过xmlHttp.setRequestHeader(“Content-Type”,”application/x-www-form- urlencoded”);如果不写会报错的，但是在html的form表单里是可以不写enctype=application/x-www-form-urlencoded,因为默认的HTML表单就是这种传输编码类型的。<br>　　而multipart/form-data是用来制定传输数据的特殊类型的，主要就是我们上传的非文本的内容，比如图片或是是mp3等等。<br>　　text/plain是纯文本传输的意思，在发邮件的时候要设置这种编码类型，否则会出现接收时编码混乱的问题。网络上经常拿text/plain和 text/html做比较，其实这两个很好区分，前者用来传输纯文本文件，后者则是传递html代码的编码类型，在发送头文件时才用得上。①和③都不能用于上传文件，只有multipart/form-data才能完整的传递文件数据。</p></blockquote></li></ol><p>==　formidable上传插件，也是在github上同类功能人气比较高的。==</p><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><p>　　1. 速度快（~500M/s）,没有non-buffering multipart解析</p><p>　　2.自动写入到上传文件磁盘</p><p>　　3.占用内存低</p><p>　　4.优雅的错误处理</p><p>　　5.非常高的测试覆盖率</p><h6 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myForm&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">style</span>=<span class="string">&quot;opacity: 0&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; left: 50%; top: 50%;margin-left:-60px;margin-top:10px;height: 40px;width:100px;cursor:pointer&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;fulAvatar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file_upload&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;图片地址&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;uploadByForm();&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="后端代码处理"><a href="#后端代码处理" class="headerlink" title="后端代码处理"></a>后端代码处理</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;[type]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.get(<span class="string">&#x27;/upload&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">&quot;form&quot;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;EXpress&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//设置头像</span></span><br><span class="line">router.post(<span class="string">&quot;/upload/post&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm(); <span class="comment">//创建上传表单</span></span><br><span class="line">    form.encoding = <span class="string">&#x27;utf-8&#x27;</span>; <span class="comment">//设置编辑</span></span><br><span class="line">    form.uploadDir = <span class="string">&#x27;tmp/&#x27;</span>;</span><br><span class="line">    <span class="comment">//form.uploadDir = path.join(__dirname, &#x27;tmp&#x27;); //文件保存的临时目录为当前项目下的tmp文件夹</span></span><br><span class="line">    form.maxFieldsSize = <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">//用户头像大小限制为最大1M</span></span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>; <span class="comment">//使用文件的原扩展名</span></span><br><span class="line"></span><br><span class="line">    form.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(files);</span></span><br><span class="line">         <span class="built_in">console</span>.log(files.logo.path);</span><br><span class="line">        <span class="comment">//  var filePath = &#x27;&#x27;;</span></span><br><span class="line">        <span class="comment">// if(file.logo)&#123;</span></span><br><span class="line">        <span class="comment">//   filePath = file.logo.path;</span></span><br><span class="line">        <span class="comment">// &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//   for(var key in file)&#123;</span></span><br><span class="line">        <span class="comment">//          if( file[key].path &amp;&amp; filePath===&#x27;&#x27; )&#123;</span></span><br><span class="line">        <span class="comment">//              filePath = file[key].path;</span></span><br><span class="line">        <span class="comment">//              break;</span></span><br><span class="line">        <span class="comment">//          &#125;</span></span><br><span class="line">        <span class="comment">//      &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">//文件移动的目录文件夹，不存在时创建目标文件夹</span></span><br><span class="line">        <span class="comment">// var tagetDir = path.join(__dirname, &#x27;uploads&#x27;);</span></span><br><span class="line">        <span class="comment">// console.log(tagetDir);</span></span><br><span class="line">        <span class="comment">//  if (!fs.existsSync(targetDir)) &#123;</span></span><br><span class="line">        <span class="comment">//     fs.mkdir(targetDir);</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件类型判断</span></span><br><span class="line">        <span class="keyword">var</span> filePath = files.logo.path;</span><br><span class="line">        <span class="keyword">var</span> extName = filePath.substring(filePath.lastIndexOf(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">        <span class="keyword">if</span> ((<span class="string">&#x27;.jpg.png&#x27;</span>).indexOf(extName.toLowerCase()) === -<span class="number">1</span>) &#123;</span><br><span class="line">            res.code = <span class="number">2</span>;</span><br><span class="line">            res.locals.error = <span class="string">&#x27;只支持png和jpg格式图片&#x27;</span>;</span><br><span class="line">             emptyDir(form.uploadDir);<span class="comment">//删除临时文件夹</span></span><br><span class="line">            res.json(&#123; <span class="string">&#x27;err&#x27;</span>: res.locals.error, <span class="string">&quot;code&quot;</span>: res.code &#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (files.logo.size &gt; form.maxFieldsSize) &#123;</span><br><span class="line">            res.code = <span class="number">1</span>;</span><br><span class="line">            res.locals.error = <span class="string">&#x27;图片大小超过1M&#x27;</span>;</span><br><span class="line">            emptyDir(form.uploadDir);<span class="comment">//删除临时文件夹</span></span><br><span class="line">            res.json(&#123; <span class="string">&#x27;err&#x27;</span>: res.locals.error, <span class="string">&quot;code&quot;</span>: res.code &#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据内容符合则转移文件内容</span></span><br><span class="line">        <span class="keyword">var</span> avatarName = <span class="built_in">Math</span>.random() + <span class="string">&#x27;.&#x27;</span> + extName;</span><br><span class="line">        <span class="comment">//图片老地址写入地址；</span></span><br><span class="line">        <span class="keyword">var</span> oldPath = form.uploadDir + avatarName;</span><br><span class="line">        <span class="comment">//图片新地址写入地址；</span></span><br><span class="line">        <span class="keyword">var</span> newPath = <span class="string">&#x27;uploads/&#x27;</span> + avatarName;</span><br><span class="line">        <span class="keyword">var</span> showUrl = __dirname + <span class="string">&#x27;/&#x27;</span> + newPath;</span><br><span class="line">        fs.rename(files.logo.path, newPath, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.info(err);</span><br><span class="line">                    res.json(&#123; <span class="attr">code</span>: <span class="number">3</span>, <span class="attr">message</span>: <span class="string">&#x27;操作失败&#x27;</span> &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 上传成功，返回文件的相对路径</span></span><br><span class="line">                    <span class="comment">//删除tmp中所以临时文件</span></span><br><span class="line">                <span class="keyword">var</span> rootFile = form.uploadDir;<span class="comment">//要删除的文件夹 url</span></span><br><span class="line">                <span class="comment">//删除所有的文件(将所有文件夹置空)</span></span><br><span class="line">                  emptyDir(form.uploadDir);</span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                        <span class="string">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                        <span class="string">&quot;newPath&quot;</span>: showUrl,</span><br><span class="line">                        <span class="string">&quot;imgurl&quot;</span>: newPath</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> emptyDir = <span class="function"><span class="keyword">function</span>(<span class="params">fileUrl</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> files = fs.readdirSync(fileUrl);<span class="comment">//读取该文件夹</span></span><br><span class="line">        files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> stats = fs.statSync(fileUrl+<span class="string">&#x27;/&#x27;</span>+file);</span><br><span class="line">            <span class="keyword">if</span>(stats.isDirectory())&#123;</span><br><span class="line">                emptyDir(fileUrl+<span class="string">&#x27;/&#x27;</span>+file);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fs.unlinkSync(fileUrl+<span class="string">&#x27;/&#x27;</span>+file);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;删除文件&quot;</span>+fileUrl+<span class="string">&#x27;/&#x27;</span>+file+<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs知多少</title>
      <link href="2017/07/04/nodejs%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
      <url>2017/07/04/nodejs%E7%9F%A5%E5%A4%9A%E5%B0%91/</url>
      
        <content type="html"><![CDATA[<p>经常遇到的问题总结<br><a id="more"></a></p><blockquote><p>require 用来加载代码，而 exports 和 module.exports 则用来导出代码。<br>很多新手可能会迷惑于 exports 和 module.exports 的区别，为了更好的理解 exports 和 module.exports 的关系，我们先来巩固下 js 的基础。</p></blockquote><h6 id="我们只需知道三点就知道-exports-和-module-exports-的区别了："><a href="#我们只需知道三点就知道-exports-和-module-exports-的区别了：" class="headerlink" title="我们只需知道三点就知道 exports 和 module.exports 的区别了："></a>我们只需知道三点就知道 exports 和 module.exports 的区别了：</h6><ol><li>module.exports 初始值为一个空对象 {}</li><li>exports 是指向的 module.exports 的引用</li><li>require() 返回的是 module.exports 而不是 exports</li></ol><p>我们经常看到这样的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span> = <span class="built_in">module</span>.exports = &#123;...&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;...&#125;</span><br><span class="line"><span class="built_in">exports</span> = <span class="built_in">module</span>.exports</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>原理很简单：module.exports 指向新的对象时，exports 断开了与 module.exports 的引用，那么通过 exports = module.exports 让 exports 重新指向 module.exports。</p></blockquote><p>package.json 对于 Node.js 应用来说是一个不可或缺的文件，它存储了该 Node.js 应用的名字、版本、描述、作者、入口文件、脚本、版权等等信息。npm 官网有 package.json 每个字段的详细介绍：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i express --save --save-exact (安装 express，同时将 <span class="string">&quot;express&quot;</span>: <span class="string">&quot;4.14.0&quot;</span> 写入 dependencies )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在开发过程中，每次修改代码保存后，我们都需要手动重启程序，才能查看改动的效果。使用 supervisor 可以解决这个繁琐的问题，全局安装 supervisor：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g supervisor</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 supervisor –harmony index 启动程序，如下所示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://maninboat.gitbooks.io/n-blog/content/book/img/3.1.2.png"                      alt="image"                ></p><p>supervisor 会监听当前目录下 node 和 js 后缀的文件，当这些文件发生改动时，supervisor 会自动重启程序。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs之博客（四）</title>
      <link href="2017/07/03/NodeJs%E4%B9%8B%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>2017/07/03/NodeJs%E4%B9%8B%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>用户注册及登录<br><a id="more"></a></p><h2 id="login-js"><a href="#login-js" class="headerlink" title="login.js"></a>login.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#btn&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//通过ajax提交请求</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            url: <span class="string">&#x27;/api/user/adminlogin&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                username: $(<span class="string">&quot;#userName&quot;</span>).val(),</span><br><span class="line">                password: $(<span class="string">&quot;#password&quot;</span>).val()</span><br><span class="line">            &#125;,</span><br><span class="line">            dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!result.code) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.reload();</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(result.message);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> User = <span class="built_in">require</span>(<span class="string">&#x27;../models/user&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> Content = <span class="built_in">require</span>(<span class="string">&#x27;../models/content&#x27;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加用户注册路由</span></span><br><span class="line"><span class="comment"> * 统一返回格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> responseDate;</span><br><span class="line">router.use(<span class="function"><span class="keyword">function</span>(<span class="params">rep, res, next</span>) </span>&#123;</span><br><span class="line">    responseDate = &#123;</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        message: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">router.post(<span class="string">&#x27;/user/register&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = req.body.username;</span><br><span class="line">    <span class="keyword">var</span> password = req.body.password;</span><br><span class="line">    <span class="keyword">var</span> repassword = req.body.repassword;</span><br><span class="line">    <span class="keyword">if</span> (username === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        responseDate.code = <span class="number">1</span>;</span><br><span class="line">        responseDate.message = <span class="string">&quot;用户名不能为空！&quot;</span>;</span><br><span class="line">        res.json(responseDate);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (password === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        responseDate.code = <span class="number">2</span>;</span><br><span class="line">        responseDate.message = <span class="string">&quot;密码不能为空！&quot;</span>;</span><br><span class="line">        res.json(responseDate);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (password != repassword) &#123;</span><br><span class="line">        responseDate.code = <span class="number">3</span>;</span><br><span class="line">        responseDate.message = <span class="string">&quot;二次输入的密码不一致&quot;</span>;</span><br><span class="line">        res.json(responseDate);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    User.findOne(&#123;</span><br><span class="line">        username: username</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">userInfo</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userInfo) &#123;</span><br><span class="line">            responseDate.code = <span class="number">4</span>;</span><br><span class="line">            responseDate.message = <span class="string">&#x27;该用户名已注册！&#x27;</span>;</span><br><span class="line">            res.json(responseDate);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建新对象</span></span><br><span class="line">        <span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">            username: username,</span><br><span class="line">            password: password</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//保存数据库</span></span><br><span class="line">        <span class="keyword">return</span> user.save();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">newUserInfo</span>) </span>&#123;</span><br><span class="line">        responseDate.message = <span class="string">&quot;注册成功！&quot;</span>;</span><br><span class="line">        <span class="comment">//当注册成功之后直接登录界面 传值给前台页面</span></span><br><span class="line">        responseDate.newUserInfo = &#123;</span><br><span class="line">            _id: newUserInfo._id,</span><br><span class="line">            username: newUserInfo.username</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//保存至cookie发送到浏览器</span></span><br><span class="line">        req.cookies.set(<span class="string">&#x27;userInfo&#x27;</span>, <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            _id: newUserInfo._id,</span><br><span class="line">            username: newUserInfo.username</span><br><span class="line">        &#125;));</span><br><span class="line">        res.json(responseDate);</span><br><span class="line">        <span class="comment">// console.log(newUserInfo);</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/user/login&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取前台传过来的值</span></span><br><span class="line">    <span class="keyword">var</span> username = req.body.username;</span><br><span class="line">    <span class="keyword">var</span> password = req.body.password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (username === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        responseDate.code = <span class="number">1</span>;</span><br><span class="line">        responseDate.message = <span class="string">&quot;用户名不能为空！&quot;</span>;</span><br><span class="line">        res.json(responseDate);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (password === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        responseDate.code = <span class="number">2</span>;</span><br><span class="line">        responseDate.message = <span class="string">&quot;密码不能为空！&quot;</span>;</span><br><span class="line">        res.json(responseDate);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    User.findOne(&#123;</span><br><span class="line">        username: username,</span><br><span class="line">        password: password</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">userInfo</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!userInfo) &#123;</span><br><span class="line">            responseDate.code = <span class="number">3</span>;</span><br><span class="line">            responseDate.message = <span class="string">&quot;用户名或密码错误！&quot;</span>;</span><br><span class="line">            res.json(responseDate);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        responseDate.message = <span class="string">&quot;登录成功！&quot;</span>;</span><br><span class="line">        <span class="comment">//传值给前台页面</span></span><br><span class="line">        responseDate.userInfo = &#123;</span><br><span class="line">            _id: userInfo._id,</span><br><span class="line">            username: userInfo.username</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//保存至cookie发送到浏览器</span></span><br><span class="line">        req.cookies.set(<span class="string">&#x27;userInfo&#x27;</span>, <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            _id: userInfo._id,</span><br><span class="line">            username: userInfo.username</span><br><span class="line">        &#125;));</span><br><span class="line">        res.json(responseDate);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/user/logout&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//清空cookie</span></span><br><span class="line">    req.cookies.set(<span class="string">&quot;userInfo&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    res.json(responseDate);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮箱拖拽及删除</title>
      <link href="2017/07/03/%E9%82%AE%E7%AE%B1%E6%8B%96%E6%8B%BD%E5%8F%8A%E5%88%A0%E9%99%A4/"/>
      <url>2017/07/03/%E9%82%AE%E7%AE%B1%E6%8B%96%E6%8B%BD%E5%8F%8A%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p>练习邮箱拖拽，及元素删除<br><a id="more"></a><br>注意点;</p><ul><li>jq move 是在$(doucment)</li><li>火狐下阻止浏览器默认事件 需要ev.preventDefault();<br>ev.stopPropagation();</li><li>点击单选框的时候 如果鼠标down事件存在 则要阻止冒泡<br>ev.stopPropagation();</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> html = list.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;li data-id=<span class="subst">$&#123;item.id&#125;</span>&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;checkbox&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                         &lt;span&gt;<span class="subst">$&#123;item.caption&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                         &lt;span&gt;<span class="subst">$&#123;item.time&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;<span class="subst">$&#123;item.desc&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">               &lt;/li&gt;`</span></span><br><span class="line">    &#125;).join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> oUl = $(<span class="string">&quot;.emailListUl&quot;</span>);</span><br><span class="line">    oUl.html(html);</span><br><span class="line">    <span class="comment">//获取选中</span></span><br><span class="line">    <span class="keyword">var</span> checkedlen = $(<span class="string">&quot;.emailListUl li input&quot;</span>);</span><br><span class="line">    <span class="comment">//全选按钮 或者 全不选</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> checkboxAll = $(<span class="string">&quot;.emailHead input&quot;</span>);</span><br><span class="line">    checkboxAll.on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> arrs = whoSelected();</span><br><span class="line">            <span class="built_in">console</span>.log(arrs)</span><br><span class="line">            $(<span class="string">&quot;.emailListUl li input&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, $(<span class="built_in">this</span>).is(<span class="string">&#x27;:checked&#x27;</span>));</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="built_in">this</span>).is(<span class="string">&#x27;:checked&#x27;</span>)) &#123;</span><br><span class="line">                $(<span class="string">&quot;.emailListUl li&quot;</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#f2f6f9&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;.emailListUl li&quot;</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//选中的input的个数 及下标</span></span><br><span class="line">    $(<span class="string">&quot;.emailListUl li input&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!($(<span class="built_in">this</span>).is(<span class="string">&#x27;:checked&#x27;</span>))) &#123;</span><br><span class="line">            $(<span class="string">&quot;.emailHead input&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            $(<span class="built_in">this</span>).parent().css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="built_in">this</span>).parent().css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#f2f6f9&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arr = whoSelected();</span><br><span class="line">        <span class="keyword">if</span> (arr.length == checkedlen.length) &#123;</span><br><span class="line">            $(<span class="string">&quot;.emailHead input&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $(<span class="built_in">this</span>).parent().mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="comment">/* Act on the event */</span></span><br><span class="line">            <span class="comment">//消灭冒泡</span></span><br><span class="line">            ev.stopPropagation();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//　用来获选中的input</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">whoSelected</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = [];</span><br><span class="line">        checkedlen.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="built_in">this</span>).is(<span class="string">&quot;:checked&quot;</span>)) &#123;</span><br><span class="line">                arr.push($(<span class="built_in">this</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">var</span> delet = $(<span class="string">&quot;#delet&quot;</span>);</span><br><span class="line">    delet.on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        htmldelete();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">htmldelete</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//点击并返回选择的个数；</span></span><br><span class="line">        <span class="keyword">var</span> selectArr = whoSelected();</span><br><span class="line">        <span class="built_in">console</span>.log(selectArr)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; selectArr.length; i++) &#123;</span><br><span class="line">            selectArr[i].parent().remove(); <span class="comment">// 删除被选中input的父级li</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; list.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[j].id == selectArr[i]) &#123;</span><br><span class="line">                    <span class="comment">//这里应该是后端返回ajax传送数据请求数据库删除</span></span><br><span class="line">                    list.splice(i, <span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">console</span>.log(list);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在某一点上limousedown会出现 tip</span></span><br><span class="line">    <span class="keyword">var</span> tip = $(<span class="string">&quot;#hint3&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> lis = oUl.find(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> beenDel = $(<span class="string">&quot;.beenDel&quot;</span>); <span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line">    lis.mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> selectArr = whoSelected();</span><br><span class="line">        <span class="built_in">console</span>.log(selectArr.length);</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).find(<span class="string">&quot;input&quot;</span>).is(<span class="string">&quot;:checked&quot;</span>)) &#123;</span><br><span class="line">            tip.show();</span><br><span class="line">            tip.css(<span class="string">&quot;left&quot;</span>, ev.clientX + <span class="number">4</span> + <span class="string">&quot;px&quot;</span>);</span><br><span class="line">            tip.css(<span class="string">&quot;top&quot;</span>, ev.clientY + <span class="number">4</span> + <span class="string">&quot;px&quot;</span>);</span><br><span class="line">            tip.html(<span class="string">&#x27;选中&#x27;</span> + selectArr.length + <span class="string">&#x27;封邮件&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//碰撞 默认没有碰到</span></span><br><span class="line">        <span class="keyword">var</span> isCollision = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//获取选中了几个</span></span><br><span class="line">        $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="comment">/* Act on the event */</span></span><br><span class="line">            tip.css(<span class="string">&quot;left&quot;</span>, ev.clientX + <span class="string">&quot;px&quot;</span>);</span><br><span class="line">            tip.css(<span class="string">&quot;top&quot;</span>, ev.clientY + <span class="string">&quot;px&quot;</span>);</span><br><span class="line">            ev.preventDefault();</span><br><span class="line">            <span class="comment">//取消默认行为</span></span><br><span class="line">            <span class="keyword">if</span> (collision($(<span class="string">&quot;#hint3&quot;</span>), $(<span class="string">&quot;.beenDel&quot;</span>))) &#123;</span><br><span class="line">                isCollision = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="built_in">document</span>).mouseup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">/* Act on the event */</span></span><br><span class="line">            tip.hide();</span><br><span class="line">            <span class="keyword">if</span> (isCollision) &#123;</span><br><span class="line">                <span class="comment">//删除节点</span></span><br><span class="line">                htmldelete();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">document</span>.mouseover = <span class="built_in">document</span>.mouseup = <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="拖拽封装"><a href="#拖拽封装" class="headerlink" title="拖拽封装"></a>拖拽封装</h5><p>jquery转jsdom元素需要$(“id”)[0];<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRect</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> obj[<span class="number">0</span>].getBoundingClientRect();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collision</span>(<span class="params">obj1,obj2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> obj1Rect = getRect(obj1);</span><br><span class="line"><span class="keyword">var</span> obj2Rect = getRect(obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果obj1碰上了哦obj2返回true，否则放回false</span></span><br><span class="line"><span class="keyword">var</span> obj1Left = obj1Rect.left;</span><br><span class="line"><span class="keyword">var</span> obj1Right = obj1Rect.right;</span><br><span class="line"><span class="keyword">var</span> obj1Top = obj1Rect.top;</span><br><span class="line"><span class="keyword">var</span> obj1Bottom = obj1Rect.bottom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2Left = obj2Rect.left;</span><br><span class="line"><span class="keyword">var</span> obj2Right = obj2Rect.right;</span><br><span class="line"><span class="keyword">var</span> obj2Top = obj2Rect.top;</span><br><span class="line"><span class="keyword">var</span> obj2Bottom = obj2Rect.bottom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( obj1Right &lt; obj2Left || obj1Left &gt; obj2Right || obj1Bottom &lt; obj2Top || obj1Top &gt; obj2Bottom )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 练习Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs之短信发送</title>
      <link href="2017/06/30/Node%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>2017/06/30/Node%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们在平常的开发中经常会遇到在注册的时候要发送手机短信验证码，或者是在一些安全性校验的时候要发送手机短信验证码， 于是找了很多短信验证码平台，但是支持nodejs的平台很少，今天就介绍一个少有的支持node的短信验证平台</p></blockquote><a id="more"></a><h6 id="前台js部分"><a href="#前台js部分" class="headerlink" title="前台js部分"></a>前台js部分</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;yunpian/sms&quot;</span>,</span><br><span class="line">    data: &#123; <span class="attr">mobile</span>: $(<span class="string">&quot;#mobile&quot;</span>).val() &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="后台js部分"><a href="#后台js部分" class="headerlink" title="后台js部分"></a>后台js部分</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改为您的apikey.可在官网（https://www.yunpian.com)登录后获取</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改为您要发送的手机号码，多个号码用逗号隔开</span></span><br><span class="line"><span class="comment">// var mobile = &#x27;13083950500&#x27;;</span></span><br><span class="line"><span class="comment">// 修改为您要发送的短信内容</span></span><br><span class="line"><span class="comment">// var text = &#x27;【h5web开发者】您的验证码是666666。如非本人操作，请忽略本短信&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定发送模板的内容</span></span><br><span class="line"><span class="keyword">var</span> tpl_value = &#123; <span class="string">&#x27;#code#&#x27;</span>: <span class="string">&#x27;1234&#x27;</span>, <span class="string">&#x27;#company#&#x27;</span>: <span class="string">&#x27;yunpian&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// 智能匹配模板发送https地址</span></span><br><span class="line"><span class="keyword">var</span> sms_host = <span class="string">&#x27;sms.yunpian.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一返回格式</span></span><br><span class="line"><span class="keyword">var</span> responseData;</span><br><span class="line"></span><br><span class="line">router.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    responseData = &#123;</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        message: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/sms&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res,next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> apikey = <span class="string">&#x27;319c56f98891*******42a52836**0&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> mobile = req.body.mobile;</span><br><span class="line">    <span class="keyword">let</span> random = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">1000000</span>);</span><br><span class="line">    <span class="keyword">let</span> text = <span class="string">&#x27;【h5web开发者】您的验证码是$&#123;random&#125;。如非本人操作，请忽略本短信&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;通过post&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">        hostname: sms_host,</span><br><span class="line">        port: <span class="number">443</span>,</span><br><span class="line">        url: <span class="string">&#x27;https://sms.yunpian.com/v2/sms/single_send.json&#x27;</span>,</span><br><span class="line">        method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        form:&#123;</span><br><span class="line">            apikey:apikey,</span><br><span class="line">            mobile:mobile,</span><br><span class="line">            text:text,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request(options,<span class="function"><span class="keyword">function</span>(<span class="params">error,response,body</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&quot;response&quot;</span>+response);</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&quot;body&quot;</span>+body);</span><br><span class="line">           <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">           res.send(&#123;</span><br><span class="line">               status:<span class="literal">true</span>,</span><br><span class="line">               message:body,</span><br><span class="line">               checkCode:random</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!error &amp;&amp; response.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                status:<span class="literal">false</span>,</span><br><span class="line">                message:body</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                status:<span class="literal">false</span>,</span><br><span class="line">                message:error</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs之邮件发送</title>
      <link href="2017/06/30/Node%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>2017/06/30/Node%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>使用Nodejs收发电子邮件也非常简单，Nodemailer包就可以帮助快速实现发邮件的功能。<br><a id="more"></a></p><h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><blockquote><p>电子邮件，是互联网应用最广泛使用的服务之一，通过电子邮件系统，我们可以与世界上任何一个角落的网络用户进行联系。</p></blockquote><h6 id="前台js部分"><a href="#前台js部分" class="headerlink" title="前台js部分"></a>前台js部分</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node email.js</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="后台js部分"><a href="#后台js部分" class="headerlink" title="后台js部分"></a>后台js部分</h6><p>安装==nodemailer==模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemailer</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>安装==smtpTransport==模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemailer-smtp-transport</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> nodemailer = <span class="built_in">require</span>(<span class="string">&quot;nodemailer&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> smtpTransport = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer-smtp-transport&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">邮件发送</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 开启一个 SMTP 连接池</span></span><br><span class="line">app.get(<span class="string">&#x27;/sendmail&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//依赖的两个模块</span></span><br><span class="line">    <span class="keyword">var</span> nodemailer = <span class="built_in">require</span>(<span class="string">&quot;nodemailer&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> smtpTransport = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer-smtp-transport&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> to = <span class="string">&#x27;admin@xxx.com&#x27;</span>; <span class="comment">//发送地址</span></span><br><span class="line">    <span class="comment">// var to=&#x27;admin@xxx.com,editor@xxx.com&#x27;; //发送给多个人，英文逗号隔开</span></span><br><span class="line">    <span class="keyword">var</span> subject = <span class="string">&#x27;邮件标题&#x27;</span>; <span class="comment">//发送的标题</span></span><br><span class="line">    <span class="keyword">var</span> html = <span class="string">&#x27;&lt;div&gt;邮件内容&lt;/div&gt;&#x27;</span>; <span class="comment">//发送的内容</span></span><br><span class="line">    <span class="keyword">var</span> transport = nodemailer.createTransport(smtpTransport(&#123;</span><br><span class="line">        host: <span class="string">&#x27;smtp.exmail.qq.com&#x27;</span>,</span><br><span class="line">        port: <span class="number">465</span>,</span><br><span class="line">        secure: <span class="literal">true</span>,</span><br><span class="line">        auth: &#123;</span><br><span class="line">            user: <span class="string">&#x27;admin@xxx.com&#x27;</span>, <span class="comment">//你真实的邮箱</span></span><br><span class="line">            pass: <span class="string">&#x27;yyyy&#x27;</span> <span class="comment">//真实的密码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mailOptions = &#123;</span><br><span class="line">        <span class="keyword">from</span>: <span class="string">&#x27;xxx &lt;no_reply@xxx.com&gt;&#x27;</span>,</span><br><span class="line">        to: to,</span><br><span class="line">        subject: subject,</span><br><span class="line">        html: html</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    transport.sendMail(mailOptions, <span class="function"><span class="keyword">function</span>(<span class="params">error, info</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            res.send(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(info.response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs之博客（三）</title>
      <link href="2017/06/29/NodeJs%E4%B9%8B%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2017/06/29/NodeJs%E4%B9%8B%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>增加==cookie==与数据库==mongodb==<br><a id="more"></a></p><h2 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E5%90%AF%E5%8A%A8mongodb.png"                      alt="image"                ></p><h2 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**更多数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//加载cookies模块</span></span><br><span class="line"><span class="keyword">var</span> Cookies = <span class="built_in">require</span>(<span class="string">&#x27;cookies&#x27;</span>);</span><br><span class="line"><span class="comment">//加载数据库user表数据</span></span><br><span class="line"><span class="keyword">var</span> User = <span class="built_in">require</span>(<span class="string">&#x27;./models/User&#x27;</span>);</span><br><span class="line"><span class="comment">//设置cookie</span></span><br><span class="line">app.use( <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    req.cookies = <span class="keyword">new</span> Cookies(req, res);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析登录用户的cookie信息</span></span><br><span class="line">    req.userInfo = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (req.cookies.get(<span class="string">&#x27;userInfo&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.userInfo = <span class="built_in">JSON</span>.parse(req.cookies.get(<span class="string">&#x27;userInfo&#x27;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取当前登录用户的类型，是否是管理员</span></span><br><span class="line">            User.findById(req.userInfo._id).then(<span class="function"><span class="keyword">function</span>(<span class="params">userInfo</span>) </span>&#123;</span><br><span class="line">                req.userInfo.isAdmin = <span class="built_in">Boolean</span>(userInfo.isAdmin);</span><br><span class="line">                next();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">。。。。。。</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost:27018/blog&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接失败&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功&#x27;</span>);</span><br><span class="line">        app.listen(<span class="number">8081</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="users-js"><a href="#users-js" class="headerlink" title="users.js"></a>users.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户的表结构</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    password: <span class="built_in">String</span>,</span><br><span class="line">    <span class="comment">//是否是管理员</span></span><br><span class="line">    isAdmin: &#123;</span><br><span class="line">        type: <span class="built_in">Boolean</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建用户登录及注册的数据库表<br>实际操作过程中不是操作表结构而是操作模型类<br>所以还要创建一个模型类数据==model==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> usersSchema = <span class="built_in">require</span>(<span class="string">&#x27;../schemas/users&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//moudlue下创建一个模型</span></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;User&#x27;</span>, usersSchema);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs之博客（二）</title>
      <link href="2017/06/28/NodeJs%E4%B9%8B%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2017/06/28/NodeJs%E4%B9%8B%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>增加第三方模块<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by 毅 on 2016/7/30.</span></span><br><span class="line"><span class="comment"> * 应用程序的启动（入口）文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载express模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//加载模板处理模块</span></span><br><span class="line"><span class="keyword">var</span> swig = <span class="built_in">require</span>(<span class="string">&#x27;swig&#x27;</span>);</span><br><span class="line"><span class="comment">//加载数据库模块</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">//加载body-parser，用来处理post提交过来的数据</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">//加载cookies模块</span></span><br><span class="line"><span class="keyword">var</span> Cookies = <span class="built_in">require</span>(<span class="string">&#x27;cookies&#x27;</span>);</span><br><span class="line"><span class="comment">//创建app应用 =&gt; NodeJS Http.createServer();</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置静态文件托管 处理 js css</span></span><br><span class="line"><span class="comment">//当用户访问的url以/public开始，那么直接返回对应__dirname + &#x27;/public&#x27;下的文件</span></span><br><span class="line">app.use( <span class="string">&#x27;/public&#x27;</span>, express.static( __dirname + <span class="string">&#x27;/public&#x27;</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置应用模板</span></span><br><span class="line"><span class="comment">//定义当前应用所使用的模板引擎</span></span><br><span class="line"><span class="comment">//第一个参数：模板引擎的名称，同时也是模板文件的后缀，第二个参数表示用于解析处理模板内容的方法</span></span><br><span class="line">app.engine(<span class="string">&#x27;html&#x27;</span>, swig.renderFile);</span><br><span class="line"><span class="comment">//设置模板文件存放的目录，第一个参数必须是views，第二个参数是目录</span></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;./views&#x27;</span>);</span><br><span class="line"><span class="comment">//注册所使用的模板引擎，第一个参数必须是 view engine，第二个参数和app.engine这个方法中定义的模板引擎的名称（第一个参数）是一致的</span></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;html&#x27;</span>);</span><br><span class="line"><span class="comment">//在开发过程中，需要取消模板缓存</span></span><br><span class="line">swig.setDefaults(&#123;<span class="attr">cache</span>: <span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//bodyparser设置 去除缓存</span></span><br><span class="line">app.use( bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">true</span>&#125;) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 根据不同的功能划分模块</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./routers/admin&#x27;</span>));</span><br><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./routers/api&#x27;</span>));</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./routers/main&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听http请求</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8081</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs之博客（一）</title>
      <link href="2017/06/27/NodeJs%E4%B9%8B%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2017/06/27/NodeJs%E4%B9%8B%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>做一个博客项目学习下<br><a id="more"></a></p><h6 id="什么是NodeJs"><a href="#什么是NodeJs" class="headerlink" title="什么是ＮodeJs"></a>什么是ＮodeJs</h6><blockquote><p>JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。</p><p>每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。而运行在NodeJS中的JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。</p></blockquote><h6 id="NodeJs有什么用处"><a href="#NodeJs有什么用处" class="headerlink" title="NodeJs有什么用处"></a>NodeJs有什么用处</h6><blockquote><p>当时在公司学习node的时候一听说可以直接运行Js文件就觉得很给力，但在接触新知识时首先关心的是有什么用处，以及能带来什么价值．</p><p>NodeJS的作者说，他创造NodeJS的目的是为了实现高性能Web服务器，他首先看重的是事件机制和异步IO模型的优越性，而不是JS。但是他需要选择一种编程语言实现他的想法，这种编程语言不能自带IO功能，并且需要能良好支持事件机制。JS没有自带IO功能，天生就用于处理浏览器中的DOM事件，并且拥有一大群程序员，因此就成为了天然的选择。</p><p>如他所愿，NodeJS在服务端活跃起来，出现了大批基于NodeJS的Web服务。而另一方面，NodeJS让前端众如获神器，终于可以让自己的能力覆盖范围跳出浏览器窗口，更大批的前端工具如雨后春笋。</p><p>因此，对于前端而言，虽然不是人人都要拿NodeJS写一个服务器程序，但简单可至使用命令交互模式调试JS代码片段，复杂可至编写工具提升工作效率。</p><p>NodeJS生态圈正欣欣向荣。</p></blockquote><h6 id="NodeJs特点"><a href="#NodeJs特点" class="headerlink" title="NodeJs特点"></a>NodeJs特点</h6><p>模块</p><blockquote><p>编写稍大一点的程序时一般都会将代码模块化。在NodeJS中，一般将代码合理拆分到不同的JS文件中，每一个文件就是一个模块，而文件路径就是模块名。<br>在编写每个模块时，都有require、exports、module三个预先定义好的变量可供使用。</p><ul><li>require<br>require函数用于在当前模块中加载和使用别的模块，传入一个模块名，返回一个模块导出对象。模块名可使用相对路径（以./开头），或者是绝对路径（以/或C:之类的盘符开头）。另外，模块名中的.js扩展名可以省略。以下是一个例子。</li><li>exports<br>exports对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。以下例子中导出了一个公有方法。</li><li>module<br>通过module对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用程序的启动（入口）文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加载express模块</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//加载模板处理模块</span></span><br><span class="line"><span class="keyword">var</span> swig = <span class="built_in">require</span>(<span class="string">&#x27;swig&#x27;</span>);</span><br><span class="line"><span class="comment">//加载数据库模块</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">//加载body-parser，用来处理post提交过来的数据</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建app应用 =&gt; NodeJS Http.createServer();</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    res.send(<span class="string">&quot;&lt;h2&gt;欢迎来的我的博客&lt;/h2&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听http请求</span></span><br><span class="line">app.listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发送短信验证，后按钮倒计时，防止刷新倒计时失效</title>
      <link href="2017/06/26/%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%EF%BC%8C%E5%90%8E%E6%8C%89%E9%92%AE%E5%80%92%E8%AE%A1%E6%97%B6%EF%BC%8C%E9%98%B2%E6%AD%A2%E5%88%B7%E6%96%B0%E5%80%92%E8%AE%A1%E6%97%B6%E5%A4%B1%E6%95%88/"/>
      <url>2017/06/26/%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%EF%BC%8C%E5%90%8E%E6%8C%89%E9%92%AE%E5%80%92%E8%AE%A1%E6%97%B6%EF%BC%8C%E9%98%B2%E6%AD%A2%E5%88%B7%E6%96%B0%E5%80%92%E8%AE%A1%E6%97%B6%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在开发“发送短信验证”功能时候，要解决一个问题，防止恶意或频繁发送短信验证码问题。一般原理是“当点击发送按钮时，发送ajax请求到服务器发送短信验证码，成功则把发送按钮设置为不可点击，并且调用定时器，按钮显示倒计时”。如果就这样不对倒计时存储做处理，那么当刷新页面，会出现倒计时失效，按钮可点击。提供以下解决方案：</p><p>利用cookie存储倒计时</p><p>利用HTML5的localStorage 存储倒计时</p></blockquote><a id="more"></a><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*防刷新：检测是否存在cookie*/</span></span><br><span class="line">    <span class="keyword">if</span> ($.cookie(<span class="string">&quot;captcha&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> count = $.cookie(<span class="string">&quot;captcha&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> btn = $(<span class="string">&#x27;#getting&#x27;</span>);</span><br><span class="line">    btn.val(count + <span class="string">&#x27;秒后可重新获取&#x27;</span>).attr(<span class="string">&#x27;disabled&#x27;</span>, <span class="literal">true</span>).css(<span class="string">&#x27;cursor&#x27;</span>, <span class="string">&#x27;not-allowed&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> resend = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            btn.val(count + <span class="string">&#x27;秒后可重新获取&#x27;</span>).attr(<span class="string">&#x27;disabled&#x27;</span>, <span class="literal">true</span>).css(<span class="string">&#x27;cursor&#x27;</span>, <span class="string">&#x27;not-allowed&#x27;</span>);</span><br><span class="line">            $.cookie(<span class="string">&quot;captcha&quot;</span>, count, &#123;</span><br><span class="line">                path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                expires: (<span class="number">1</span> / <span class="number">86400</span>) * count</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(resend);</span><br><span class="line">            btn.val(<span class="string">&quot;获取验证码&quot;</span>).removeClass(<span class="string">&#x27;disabled&#x27;</span>).removeAttr(<span class="string">&#x27;disabled style&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*点击改变按钮状态，已经简略掉ajax发送短信验证的代码*/</span></span><br><span class="line">    <span class="comment">// 我们来试试这个效果的</span></span><br><span class="line">    $(<span class="string">&#x27;#getting&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> resend = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            $(<span class="built_in">this</span>).val(count + <span class="string">&quot;秒后可重新获取&quot;</span>);</span><br><span class="line">            $.cookie(<span class="string">&quot;captcha&quot;</span>, count, &#123;</span><br><span class="line">                path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                expires: (<span class="number">1</span> / <span class="number">86400</span>) * count</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(resend);</span><br><span class="line">            $(<span class="built_in">this</span>).val(<span class="string">&quot;获取验证码&quot;</span>).removeAttr(<span class="string">&#x27;disabled&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    $(<span class="built_in">this</span>).attr(<span class="string">&#x27;disabled&#x27;</span>, <span class="literal">true</span>).css(<span class="string">&#x27;cursor&#x27;</span>, <span class="string">&#x27;not-allowed&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 个常见的 Node.js 面试题</title>
      <link href="2017/06/19/10%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84Node.js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2017/06/19/10%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84Node.js%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>如果你希望找一份有关 Node.js 的工作，但又不知道从哪里入手评测自己对 node.js 的掌握程度。 本文就为你罗列了 10 个常见的 Node.js 面试题，分别考察了 Node.js 编程相关的几个主要方面。</p><p>在进入正文之前，需要提前声明两点：</p><pre><code>这些问题只是Node.js知识体系的一个局部，并不能完全考察被面试者的实际开发能力。对现实世界开发中遇到的问题，需要的是随机应变与团队合作，所以你可以尝试结对编程。</code></pre><p>Node.js 面试题列表</p><pre><code>什么是错误优先的回调函数？如何避免回调地狱？如何用Node来监听80端口？什么是事件循环？哪些工具可以用来保证一致的编程风格？运算错误与程序员错误的区别？使用NPM有哪些好处？什么是stub？举个使用场景？什么是测试金字塔？对于HTTP API，如何利用测试金字塔？你最喜欢的HTTP框架，并说明原因？</code></pre><p>现在，我们依次来解答这些问题吧。</p><h5 id="什么是错误优先的回调函数？"><a href="#什么是错误优先的回调函数？" class="headerlink" title="什么是错误优先的回调函数？"></a>什么是错误优先的回调函数？</h5><blockquote><p>错误优先的回调函数用于传递错误和数据。第一个参数始终应该是一个错误对象， 用于检查程序是否发生了错误。其余的参数用于传递数据。例如：</p><p>fs.readFile(filePath, function(err, data) {<br>if (err) {<br>//handle the error<br>}<br>// use the data object<br>});</p></blockquote><p>解析：这个题目的主要作用在于检查被面试者对于 Node 中异步操作的一些基本知识的掌握。<br>如何避免回调地狱</p><p>你可以有如下几个方法：</p><pre><code>模块化：将回调函数分割为独立的函数使用Promises使用yield来计算生成器或Promise</code></pre><p>解析：这个问题有很多种答案，取决你使用的场景，例如 ES6, ES7，或者一些控制流库。<br>如何用 Node 监听 80 端口</p><blockquote><p>这题有陷阱！在类 Unix 系统中你不应该尝试去监听 80 端口，因为这需要超级用户权限。 因此不推荐让你的应用直接监听这个端口。</p><p>目前，如果你一定要让你的应用监听 80 端口的话，你可以有通过在 Node 应用的前方再增加一层反向代理 （例如 nginx）来实现，如下图所示。否则，建议你直接监听大于 1024 的端口。</p></blockquote><p>Reverse Proxy</p><pre><code>方向代理指的是以代理服务器来接收Internet上的连接请求，然后将请求转发给内部网络上的服务器， 并且将服务器返回的结果发送给客户端。</code></pre><p>关于反向代理的更多内容，建议你阅读这篇文章。 关于如何利用 nginx 来为 node 配置方向代理的实践，可以参考这篇博文。</p><p>解释：这个问题用于检查被面试者是否有实际运行 Node 应用的经验。<br>什么是事件循环</p><p>Node 采用的是单线程的处理机制（所有的 I/O 请求都采用非阻塞的工作方式），至少从 Node.js 开发者的角度是这样的。 而在底层，Node.js 借助 libuv 来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node 可以借助 livuv 来来实现多线程。下图表示了 Node 和 libuv 的关系。</p><p>Libuv 库负责 Node API 的执行。它将不同的任务分配给不同的线程，形成一个事件循环， 以异步的方式将任务的执行结果返回给 V8 引擎。可以简单用下面这张图来表示。</p><p>（图片来源于网络）</p><p>每一个 I/O 都需要一个回调函数——一旦执行完便推到事件循环上用于执行。 如果你需要更多详细的解释，可以参考这个视频。 你也可以参考这篇文章。</p><p>解释：这用于检查 Node.js 的底层知识，例如什么是 libuv，它的作用是什么。<br>哪些工具可以用来保证一致性的代码风格</p><p>你可以选择如下的工具：</p><pre><code>JSLintJSHintESLintJSCS - 推荐</code></pre><p>在团队开发中，这些工具对于编写代码非常的有帮助，能够帮助团队开发者强制执行规定的风格指南， 还能够通过静态分析捕获常见的错误。</p><p>解析：用于检查被面试者是否有大型项目开发经验。<br>运算错误与程序员错误的区别</p><p>运算错误并不是 bug，这是和系统相关的问题，例如请求超时或者硬件故障。而程序员错误就是所谓的 bug。</p><p>解析：这个题目和 Node 关系并不大，用于考察面试者的基础知识。<br>使用 NPM 有哪些好处？</p><p>通过 NPM，你可以安装和管理项目的依赖，并且能够指明依赖项的具体版本号。 对于 Node 应用开发而言，你可以通过 package.json 文件来管理项目信息，配置脚本， 以及指明项目依赖的具体版本。</p><p>关于 NPM 的更多信息，你可以参考官方文档。</p><p>解析：它能考察面试者使用 npm 命令的基础知识和 Node.js 开发的实际经验。<br>什么是 Stub？举个使用场景</p><p>Stub 是用于模拟一个组件或模块的函数或程序。在测试用例中， 简单的说，你可以用 Stub 去模拟一个方法，从而避免调用真实的方法， 使用 Stub 你还可以返回虚构的结果。你可以配合断言使用 Stub。</p><p>举个例子，在一个读取文件的场景中，当你不想读取一个真正的文件时：</p><p>var fs = require(‘fs’);</p><p>var readFileStub = sinon.stub(fs, ‘readFile’, function (path, cb) {<br>return cb(null, ‘filecontent’);<br>});</p><p>expect(readFileStub).to.be.called;<br>readFileStub.restore();</p><pre><code>在单元测试中：Stub是完全模拟一个外部依赖，而Mock常用来判断测试通过还是失败。</code></pre><p>有关 Node.js 的单元测试小结，你可以参考这个链接。</p><p>解析：用于测试被面试者是否有测试的经验。如果被面试者知道什么是 Stub， 那么可以继续问他是如何做单元测试的。<br>什么是测试金字塔？</p><p>测试金字塔指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。</p><p>当我们谈到 HTTP API 时，我们可能会涉及到：</p><pre><code>有很多针对模型的底层单元测试但你需要测试模型间如何交互时，需要减少集成测试</code></pre><p>解析：本文主要考察被面试者的在测试方面的经验。<br>你最喜欢的 HTTP 框架以及原因</p><p>这题没有唯一的答案。本题主要考察被面试者对于他所使用的 Node 框架的理解程度， 考察他是否能够给出选择该框架的理由，优缺点等。常用的 HTTP 框架你可以参考这个网站。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery页面加载后居中显示消息框的方法</title>
      <link href="2017/06/19/jQuery%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%90%8E%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA%E6%B6%88%E6%81%AF%E6%A1%86%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2017/06/19/jQuery%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%90%8E%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA%E6%B6%88%E6%81%AF%E6%A1%86%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/Alert%E5%B1%85%E4%B8%AD.gif"                      alt="image"                ></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">&#x27;.btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;.mask&#x27;</span>).css(&#123;</span><br><span class="line">        <span class="string">&#x27;display&#x27;</span>: <span class="string">&#x27;block&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    center($(<span class="string">&#x27;.mess&#x27;</span>));</span><br><span class="line">    check($(<span class="built_in">this</span>).parent(), $(<span class="string">&#x27;.btn1&#x27;</span>), $(<span class="string">&#x27;.btn2&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 居中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">center</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> screenWidth = $(<span class="built_in">window</span>).width(),</span><br><span class="line">        screenHeight = $(<span class="built_in">window</span>).height(); <span class="comment">//当前浏览器窗口的 宽高</span></span><br><span class="line">    <span class="keyword">var</span> scrolltop = $(<span class="built_in">document</span>).scrollTop(); <span class="comment">//获取当前窗口距离页面顶部高度</span></span><br><span class="line">    <span class="keyword">var</span> objLeft = (screenWidth - obj.width()) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> objTop = (screenHeight - obj.height()) / <span class="number">2</span> + scrolltop;</span><br><span class="line">    <span class="built_in">console</span>.log(scrolltop);</span><br><span class="line">    obj.css(&#123;</span><br><span class="line">        left: objLeft + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">        top: objTop + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;display&#x27;</span>: <span class="string">&#x27;block&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//当窗口大小发生改变浏览器窗口大小改变时</span></span><br><span class="line">    $(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        screenWidth = $(<span class="built_in">window</span>).width();</span><br><span class="line">        screenHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line">        scrolltop = $(<span class="built_in">document</span>).scrollTop();</span><br><span class="line">        objLeft = (screenWidth - obj.width()) / <span class="number">2</span>;</span><br><span class="line">        objTop = (screenHeight - obj.height()) / <span class="number">2</span> + scrolltop;</span><br><span class="line">        obj.css(&#123;</span><br><span class="line">            left: objLeft + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">            top: objTop + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;display&#x27;</span>: <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//当浏览器有滚动条时的操作、</span></span><br><span class="line">    $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        screenWidth = $(<span class="built_in">window</span>).width();</span><br><span class="line">        screenHeight = $(<span class="built_in">window</span>).height();</span><br><span class="line">        scrolltop = $(<span class="built_in">document</span>).scrollTop();</span><br><span class="line">        objLeft = (screenWidth - obj.width()) / <span class="number">2</span>;</span><br><span class="line">        objTop = (screenHeight - obj.height()) / <span class="number">2</span> + scrolltop;</span><br><span class="line">        obj.css(&#123;</span><br><span class="line">            left: objLeft + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">            top: objTop + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;display&#x27;</span>: <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//确定取消的操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">obj, obj1, obj2</span>) </span>&#123;</span><br><span class="line">    obj1.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        obj.remove();</span><br><span class="line">        closed($(<span class="string">&#x27;.mask&#x27;</span>), $(<span class="string">&#x27;.mess&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    obj2.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        closed($(<span class="string">&#x27;.mask&#x27;</span>), $(<span class="string">&#x27;.mess&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 隐藏 的操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closed</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">    obj1.hide();</span><br><span class="line">    obj2.hide();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;height:2000px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>jQuery页面加载后居中显示消息框的方法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;单击弹出消息框&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mess&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>确定要删除吗？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确定&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn2&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=<span class="number">50</span>);</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mess</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ececec</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">101</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域之百度搜索框</title>
      <link href="2017/06/16/%E8%B7%A8%E5%9F%9F%E4%B9%8B%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E6%A1%86/"/>
      <url>2017/06/16/%E8%B7%A8%E5%9F%9F%E4%B9%8B%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/javascript.jpg"                      alt="image"                ><br><a id="more"></a></p><h2 id="跨域的问题"><a href="#跨域的问题" class="headerlink" title="跨域的问题"></a>跨域的问题</h2><ol><li>域：域名</li><li>跨域请求（访问）：一个域名下的文件请求另外一个域名下的资源，就产生了跨域</li><li>跨域的解决:Jsonp : json padding</li></ol><blockquote><p><script>标签<br>src的作用 ： 加载（包含指定的外部文件）<br>可以跨域包含<br>被包含的资源可以是任何类型的文件(可以是txt,php等)<br>他只关注被包含的文件的内容是否是合法的JS<br>原理<br>定义函数<br>包含外部文件，在被包含的文件中执行调用定义好的函数<br>参数的（数据）的实现<br>问题：包含就调用，通过动态创建<script>实现按需调用<br>问题：包含动态文件时可以通过一个接口实现按需生成调用函数名称</p></blockquote><h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/%E7%99%BE%E5%BA%A6%E8%B7%A8%E5%9F%9F.gif"                      alt="image"                ></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serch</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> oul = $(<span class="string">&quot;#ul1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (data.s.length) &#123;</span><br><span class="line">    oul.show();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">6</span>) &#123;</span><br><span class="line">            html += <span class="string">&#x27;&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.baidu.com/s?wd=&#x27;</span> + data.s[i] + <span class="string">&#x27;&quot;&gt;&#x27;</span> + data.s[i] + <span class="string">&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    oul.append(html);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    oul.hide();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> oq = $(<span class="string">&quot;#q&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> oul = $(<span class="string">&quot;#ul1&quot;</span>);</span><br><span class="line">oq.on(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    oul.empty();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.value != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> oScript = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">        oScript.src = <span class="string">&quot;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&quot;</span> +</span><br><span class="line">            $(<span class="built_in">this</span>).val() +</span><br><span class="line">            <span class="string">&quot;&amp;cb=serch&quot;</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(oScript);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oul.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#q</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f90</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-id">#ul1</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f90</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">310px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">        <span class="attribute">color</span>: black;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#f90</span>;</span><br><span class="line">        <span class="attribute">color</span>: white;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6（六）</title>
      <link href="2017/05/24/ES6%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>2017/05/24/ES6%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>class的的继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#canvas</span> &#123;</span><br><span class="line">           <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1.897</span>;</span><br><span class="line"><span class="built_in">console</span>.log(~~num); <span class="comment">//1，去除小数点后面的数字</span></span><br><span class="line"><span class="comment">//下面是简单的解释：</span></span><br><span class="line"><span class="comment">// Math.random()函数返回的是0到1之间的随机数。（不包括0和1本身），用该函数乘以你设定的max值减去min值所得的差，即是按照自己指定的倍数放大这个random值。\</span></span><br><span class="line"><span class="comment">// 接着为了从min值开始，必须在Math.random()*(max - min)之后加上min值本身。（max值表示最大值，min值表示最小值）</span></span><br><span class="line"><span class="keyword">var</span> arrs = [<span class="number">1</span>, <span class="number">10</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...arrs));</span><br><span class="line"></span><br><span class="line"><span class="comment">//class继承</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * class 的继承等相关知识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// extends、 static、 super</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> w = canvas.width = <span class="number">600</span>;</span><br><span class="line"><span class="keyword">const</span> h = canvas.height = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">x, y, r</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">        <span class="built_in">this</span>.color = <span class="string">`rgb(<span class="subst">$&#123;~~Ball.rpFn([<span class="number">55</span>, <span class="number">255</span>])&#125;</span>, <span class="subst">$&#123;~~Ball.rpFn([<span class="number">55</span>, <span class="number">255</span>])&#125;</span>, <span class="subst">$&#123;~~Ball.rpFn([<span class="number">55</span>, <span class="number">255</span>])&#125;</span>)`</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//渲染方法</span></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.translate(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y); <span class="comment">//小球坐标</span></span><br><span class="line">        ctx.fillStyle = <span class="built_in">this</span>.color; <span class="comment">//指定颜色</span></span><br><span class="line">        ctx.beginPath(); <span class="comment">//起始路径</span></span><br><span class="line">        ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.r, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI); <span class="comment">//绘制路径</span></span><br><span class="line">        ctx.fill(); <span class="comment">//填充颜色</span></span><br><span class="line">        ctx.restore(); <span class="comment">//恢复绘图环境</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 思忒可  关键字 生成静态方法 挂载到类当中的方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">rpFn</span>(<span class="params">arr</span>)</span> &#123; <span class="comment">// Ball.rpFn([1, 10])</span></span><br><span class="line">        <span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...arr), <span class="comment">//扩展运算符</span></span><br><span class="line">            min = <span class="built_in">Math</span>.min(...arr);</span><br><span class="line">        <span class="comment">//随机数参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (max - min) + min;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const ball1 = new Ball(100, 100, 30).render(ctx);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新类   extend函数 去继承 ball类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperBall</span> <span class="keyword">extends</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">x, y, r</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// Ball.call(this, x, y, r);</span></span><br><span class="line">        <span class="comment">// this.color = &#x27;red&#x27;;</span></span><br><span class="line">        <span class="built_in">super</span>(x, y, r);</span><br><span class="line">        <span class="comment">//super 之前使用 this 将指定undefined</span></span><br><span class="line">        <span class="comment">//子类继承父类  在构造函数中当成一个函数去使用 调用</span></span><br><span class="line">        <span class="comment">//继承属性 及 方法</span></span><br><span class="line">        <span class="built_in">this</span>.vy = SuperBall.rpFn([<span class="number">2</span>, <span class="number">4</span>]);</span><br><span class="line">        <span class="built_in">this</span>.g = SuperBall.rpFn([<span class="number">0.2</span>, <span class="number">0.4</span>]); <span class="comment">//重力加速度</span></span><br><span class="line">        <span class="built_in">this</span>.a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="title">move</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// super();</span></span><br><span class="line">        <span class="comment">// 非构造函数中报错 只能在构造函数当使用，并且调用了super就相当于使用了父类的方法</span></span><br><span class="line">        <span class="built_in">this</span>.y += <span class="built_in">this</span>.vy; <span class="comment">//y轴坐标</span></span><br><span class="line">        <span class="built_in">this</span>.vy += <span class="built_in">this</span>.g;</span><br><span class="line">        <span class="comment">//============重力减速反弹方法=============</span></span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.vy * -<span class="number">0.75</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.y + <span class="built_in">this</span>.r &gt;= ctx.canvas.height) &#123;</span><br><span class="line">            <span class="built_in">this</span>.y = ctx.canvas.height - <span class="built_in">this</span>.r;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(current - <span class="built_in">this</span>.a) &lt; <span class="number">0.05</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//============重力减速反弹方法=============</span></span><br><span class="line">            <span class="built_in">this</span>.a = <span class="built_in">this</span>.vy *= -<span class="number">0.75</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, ctx.canvas.width, ctx.canvas.height);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.render(ctx); <span class="comment">//现在的super是对象 而不是函数 指向父类的原型对象， 自动绑定子类的this</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const ball1 = new SuperBall(100, 100, 30).render(ctx);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ball, timer;</span><br><span class="line"></span><br><span class="line">canvas.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = e.offsetX,</span><br><span class="line">        y = e.offsetY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> r = ~~Ball.rpFn([<span class="number">15</span>, <span class="number">55</span>]); <span class="comment">//~~清除小数</span></span><br><span class="line">    <span class="comment">//每次点击之前清除之前的小球</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, ctx.canvas.width, ctx.canvas.height);</span><br><span class="line">    ball = <span class="keyword">new</span> SuperBall(x, y, r).render(ctx);</span><br><span class="line"></span><br><span class="line">    ballMove(); <span class="comment">//调用反弹运动</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ballMove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer = <span class="built_in">window</span>.requestAnimationFrame(ballMove);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ball.move(ctx)) &#123;</span><br><span class="line">        <span class="built_in">window</span>.cancelAnimationFrame(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知识点：重力减速 ，extends、 static、 super的继承的三个方法</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6（五）</title>
      <link href="2017/05/23/ES6%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>2017/05/23/ES6%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>class的基本使用</p><a id="more"></a><p>JS语言的传统方法是通过构造函数，定义并生成新对象，是一种基于原型的面向对象系统。这种写法跟传统的面向对象语言（比如C++和Java）差异很大，很容易让新学习这门语言的人感到困惑。所以，在ES6中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统的构造函数模式</span></span><br><span class="line">    <span class="keyword">const</span> Miaov = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Miaov.prototype = &#123;</span><br><span class="line">        <span class="title">constructor</span>: <span class="title">Miaov</span>,</span><br><span class="line">        <span class="title">print</span>: <span class="title">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.a + <span class="string">&quot;, &quot;</span> + <span class="built_in">this</span>.b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="keyword">new</span> Miaov(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;js&quot;</span>).print();</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Miaov</span> </span>&#123;</span><br><span class="line"><span class="comment">//构造函数参数  指定构造函数是什么？不需要function es6语法</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.a = a;</span><br><span class="line">    <span class="built_in">this</span>.b = b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义类的方法直接方法名不需要function</span></span><br><span class="line"><span class="comment">//不需要加分号分割</span></span><br><span class="line"><span class="comment">//不需要prototype的方法上加方法</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.a + <span class="string">&quot;&quot;</span> + <span class="built_in">this</span>.b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化一个对象</span></span><br><span class="line"><span class="keyword">const</span> miaov = <span class="keyword">new</span> Miaov(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;word&quot;</span>).print();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Miaov); <span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(Miaov.prototype);</span><br><span class="line"><span class="comment">//定义在类中的方法 都不是可以被枚举的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(Miaov.prototype));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> P();</span><br><span class="line"><span class="comment">//constructior默认添加</span></span><br><span class="line"><span class="built_in">console</span>.log(p);</span><br><span class="line">p(); <span class="comment">//直接调用会报错</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript自定义事件</title>
      <link href="2017/05/17/Javascript%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
      <url>2017/05/17/Javascript%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/javascript.jpg"                      alt="image"                ><br>自定义事件 : 主要是跟函数有关系,就是让函数能够具备事件的某些特性<br><a id="more"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义事件初级版</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;show&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;show&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;show&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">show(); <span class="comment">//主动触发自定义事件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>//=====================================//</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> oSpan = <span class="built_in">document</span>.getElementById(<span class="string">&quot;span1&quot;</span>);</span><br><span class="line">    <span class="comment">//小米对div封装的方法</span></span><br><span class="line">    bindEvent(oDiv, <span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//华为对div封装的方法</span></span><br><span class="line">    bindEvent(oDiv, <span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">2</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//小木对span封装的方法</span></span><br><span class="line">    bindEvent(oSpan, <span class="string">&quot;show&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">3</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//苹果对span封装的方法</span></span><br><span class="line">    bindEvent(oSpan, <span class="string">&quot;show&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">4</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//调用小木 和苹果的方法</span></span><br><span class="line">    fireEvent(oSpan, <span class="string">&quot;show&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">obj, events, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//找到obj所对应的事件</span></span><br><span class="line">    obj.listeners = obj.listeners || &#123;&#125;;</span><br><span class="line">    obj.listeners[events] = obj.listeners[events] || [];</span><br><span class="line"></span><br><span class="line">    obj.listeners[events].push(fn);</span><br><span class="line">    <span class="built_in">console</span>.log(obj.listeners[events]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj.addEventListener) &#123;</span><br><span class="line">        obj.addEventListener(events, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj.attachEvent(<span class="string">&#x27;on&#x27;</span> + events, fn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fireEvent</span>(<span class="params">obj, events</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.listeners[events].length; i++) &#123;</span><br><span class="line">        obj.listeners[events][i]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象基础（一）</title>
      <link href="2017/05/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2017/05/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/oop.png"                      alt="image"                ><br>基本方法类似css中的style属性<br>面向对象方法css中的class属性<br><a id="more"></a></p><h3 id="New的意义"><a href="#New的意义" class="headerlink" title="New的意义"></a>New的意义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当new去调用一个函数 : 这个时候函数中的this就是创建出来的对象,而且函数的的返回值直接就是this啦(隐式返回)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//new后面调用的函数 : 叫做构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">CreatePerson.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert( <span class="built_in">this</span>.name );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> CreatePerson(<span class="string">&#x27;小明&#x27;</span>);</span><br><span class="line"><span class="comment">//p1.showName();</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> CreatePerson(<span class="string">&#x27;小强&#x27;</span>);</span><br><span class="line"><span class="comment">//p2.showName();</span></span><br><span class="line"></span><br><span class="line">alert( p1.showName == p2.showName );  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.属性</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">构造函数.原型.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 对象<span class="number">1</span> = <span class="keyword">new</span> 构造函数();</span><br><span class="line">对象<span class="number">1.</span>方法();</span><br></pre></td></tr></table></figure><h2 id="栗子："><a href="#栗子：" class="headerlink" title="栗子："></a>栗子：</h2><blockquote><p>先变型:<br>尽量不要出现函数嵌套函数<br>可以有全局变量<br>把onload中不是赋值的语句放到单独函数中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*window.onload = function()&#123;</span></span><br><span class="line"><span class="comment">var oParent = document.getElementById(&#x27;div1&#x27;);</span></span><br><span class="line"><span class="comment">var aInput = oParent.getElementsByTagName(&#x27;input&#x27;);</span></span><br><span class="line"><span class="comment">var aDiv = oParent.getElementsByTagName(&#x27;div&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(var i=0;i&lt;aInput.length;i++)&#123;</span></span><br><span class="line"><span class="comment">aInput[i].index = i;</span></span><br><span class="line"><span class="comment">aInput[i].onclick = function()&#123;</span></span><br><span class="line"><span class="comment">for(var i=0;i&lt;aInput.length;i++)&#123;</span></span><br><span class="line"><span class="comment">aInput[i].className = &#x27;&#x27;;</span></span><br><span class="line"><span class="comment">aDiv[i].style.display = &#x27;none&#x27;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">this.className = &#x27;active&#x27;;</span></span><br><span class="line"><span class="comment">aDiv[this.index].style.display = &#x27;block&#x27;;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先变型:</span></span><br><span class="line"><span class="comment">//尽量不要出现函数嵌套函数</span></span><br><span class="line"><span class="comment">//可以有全局变量</span></span><br><span class="line"><span class="comment">//把onload中不是赋值的语句放到单独函数中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oParent = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> aInput = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> aDiv = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">oParent = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line">aInput = oParent.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">aDiv = oParent.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aInput.length;i++)&#123;</span><br><span class="line">aInput[i].index = i;</span><br><span class="line">aInput[i].onclick = change;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aInput.length;i++)&#123;</span><br><span class="line">aInput[i].className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">aDiv[i].style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.className = <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line">aDiv[<span class="built_in">this</span>.index].style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="this指向复习"><a href="#this指向复习" class="headerlink" title="this指向复习"></a>this指向复习</h3><h2 id="改this指向问题-事件或者是定时器-尽量让面向对象中的this指向对象"><a href="#改this指向问题-事件或者是定时器-尽量让面向对象中的this指向对象" class="headerlink" title="++改this指向问题 : 事件或者是定时器,尽量让面向对象中的this指向对象++"></a>++改this指向问题 : 事件或者是定时器,尽量让面向对象中的this指向对象++</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span> : oDiv</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oDiv.onclick = show;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span> : oDiv</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">show();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span> : <span class="built_in">window</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*var arr = [4,7,1,3];</span></span><br><span class="line"><span class="comment">arr.sort();  // 1 3 4 7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var arr2 = [4,7,1,3];</span></span><br><span class="line"><span class="comment">arr2.push(5);</span></span><br><span class="line"><span class="comment">arr2.sort(); // 1 3 4 5 7</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> Tab(<span class="string">&#x27;div1&#x27;</span>);</span><br><span class="line">t1.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tab</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.oParent = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line"><span class="built_in">this</span>.aInput = <span class="built_in">this</span>.oParent.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"><span class="built_in">this</span>.aDiv = <span class="built_in">this</span>.oParent.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">this</span>.iNow = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tab.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> This = <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.aInput.length;i++)&#123;</span><br><span class="line"><span class="built_in">this</span>.aInput[i].index = i;</span><br><span class="line"><span class="built_in">this</span>.aInput[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">This.change(<span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Tab.prototype.change = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.aInput.length;i++)&#123;</span><br><span class="line"><span class="built_in">this</span>.aInput[i].className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="built_in">this</span>.aDiv[i].style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">obj.className = <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line"><span class="built_in">this</span>.aDiv[obj.index].style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6（四）</title>
      <link href="2017/05/12/ES6%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>2017/05/12/ES6%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>map 储存 字典结构数据 键值对形式存储<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> data1 = &#123;</span><br><span class="line">a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data2 = &#123;</span><br><span class="line">b: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj[data1] = <span class="number">1</span>;</span><br><span class="line">obj[data2] = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">//obj转成字符串比较</span></span><br><span class="line"><span class="built_in">console</span>.log(data1.toString() == data2.toString()); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//========================================</span></span><br><span class="line"><span class="comment">//创建map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">[<span class="string">&quot;a&quot;</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="string">&quot;b&quot;</span>, <span class="number">2</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"><span class="comment">//map 方法</span></span><br><span class="line">map.set(<span class="string">&quot;miaov&quot;</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"><span class="comment">//重复添加key 会替换掉之前的值</span></span><br><span class="line">map.set(<span class="string">&quot;miaov&quot;</span>, <span class="number">200</span>)</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"><span class="comment">//map。get方法</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;miaov&quot;</span>)); <span class="comment">//200 否则undefined；</span></span><br><span class="line"><span class="comment">// delete方法</span></span><br><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"><span class="comment">// has(key)方法</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(map.keys());</span><br><span class="line"><span class="built_in">console</span>.log(map.values());</span><br><span class="line">map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key, value, map</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//map注意事项</span></span><br><span class="line">map.set(<span class="literal">NaN</span>, <span class="number">10</span>).set(<span class="literal">NaN</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//NaN 是同一个键</span></span><br><span class="line">map.set(&#123;&#125;, <span class="string">&quot;x&quot;</span>).set(&#123;&#125;, <span class="string">&quot;y&quot;</span>);</span><br><span class="line"><span class="comment">//由于内存地址不同，map认为是二个不同的键值。不用担心原来的属性重名；</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6（三）</title>
      <link href="2017/05/11/ES6%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2017/05/11/ES6%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p> set数据结构集合<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//如何创建set</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;])</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="comment">//set属性</span></span><br><span class="line"><span class="built_in">console</span>.log(s.size); <span class="comment">//5</span></span><br><span class="line"><span class="comment">//set方法</span></span><br><span class="line">s.add(<span class="string">&quot;2&quot;</span>).add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="comment">//set删除</span></span><br><span class="line">s.delete(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="comment">//set clear</span></span><br><span class="line"><span class="comment">//console.log(s.clear());</span></span><br><span class="line"><span class="comment">//返回键值对遍历器</span></span><br><span class="line"><span class="built_in">console</span>.log(s.entries())</span><br><span class="line">s.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, set</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value + <span class="string">&quot;miaov&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//未改变数据结构</span></span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br><span class="line">    <span class="comment">//=============</span></span><br><span class="line">    <span class="comment">//当重新添加一个重复数据</span></span><br><span class="line">s.add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="comment">//利用set  方法   解决数组去重</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6（二）</title>
      <link href="2017/05/10/ES6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2017/05/10/ES6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>基本概念：<br>本质上就是一种==匹配模式==，只要等号==两边的模式相同==，那么左边的变量就可以<br>被赋予对应的值。<br>结构赋值主要分为：<br>数组的解构赋值<br>对象的结构赋值<br> 基本类型的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);</span><br></pre></td></tr></table></figure><p> 1 数组的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, [[b], c]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);  <span class="comment">// 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> [, , c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x] = [];</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(x);  <span class="comment">// let x; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [y = <span class="number">1</span>] = [];</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(y); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p> 2 对象的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b&#125; = &#123;<span class="attr">b</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">a</span>: <span class="string">&#x27;aaa&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: b&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defind</span></span><br></pre></td></tr></table></figure><p>3 基本类型的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d] = <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(a, b, c, d); <span class="comment">// 1,2,3,4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span>: len&#125; = <span class="string">&#x27;miaov&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(len); <span class="comment">//4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6（一）</title>
      <link href="2017/05/09/ES6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2017/05/09/ES6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>基本语法<br>let是块级作用域，函数内部使用let定义后，对函数外部无影响。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法 变量提升不可以</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 错误写法   变量不可重复赋值</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">       btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(i) <span class="comment">//永远等于i=5</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//改变</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">       btns[i].index = i;</span><br><span class="line">       btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="built_in">this</span>.index)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//改变</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">       (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">           btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(i)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)(i);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//改变</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">       btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(i) <span class="comment">//let创建出作用域块</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>const定义的变量不可以修改，而且必须初始化。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在循环语句之内是一个父作用域，在循环体中是一个子作用域</span></span><br><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const声明属性的时候必须赋值</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line"><span class="keyword">const</span> c; <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改变常量的数据</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line">a = &#123;&#125;; <span class="comment">//浏览器会报错  改变数据</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">obj: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line">a.obj = <span class="number">20</span>; <span class="comment">//不会报错  只是修改对象数据  没有改变obj的引用</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性一览</title>
      <link href="2017/05/08/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%80%E8%A7%88/"/>
      <url>2017/05/08/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%80%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/181026/0ggG4JjHGi.png"                      alt="mark"                ></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JS获取小数点后两位数字方法</title>
      <link href="2017/05/07/%E7%94%A8JS%E8%8E%B7%E5%8F%96%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E4%B8%A4%E4%BD%8D%E6%95%B0%E5%AD%97%E6%96%B9%E6%B3%95/"/>
      <url>2017/05/07/%E7%94%A8JS%E8%8E%B7%E5%8F%96%E5%B0%8F%E6%95%B0%E7%82%B9%E5%90%8E%E4%B8%A4%E4%BD%8D%E6%95%B0%E5%AD%97%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>上周老师留下的一个小问题？<br>用Javascript取小数点后两位，例取成3.1415926,如何做3.15？<br><a id="more"></a><br>截取： [我就怎么干的………]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> s = <span class="number">22.127456</span> + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> str = s.substring(<span class="number">0</span>,s.indexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">3</span>);</span><br><span class="line">       alert(str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>正则表达式效果不错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">     onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="string">&quot;23.456322&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> aNew;</span><br><span class="line">       <span class="keyword">var</span> re = <span class="regexp">/([0-9]+/</span>.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)[<span class="number">0</span>-<span class="number">9</span>]*/;</span><br><span class="line">        aNew = a.replace(re,<span class="string">&quot;$1&quot;</span>);</span><br><span class="line">        alert(aNew);</span><br><span class="line">     &#125;</span><br><span class="line">     &lt;script&gt;</span><br></pre></td></tr></table></figure><p> 他就比较聪明了…..</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> num=<span class="number">22.127456</span>;</span><br><span class="line">     alert( <span class="built_in">Math</span>.round(num*<span class="number">100</span>)/<span class="number">100</span>);</span><br><span class="line">     &lt;script&gt;</span><br></pre></td></tr></table></figure><p>会用新鲜东西的朋友……. 但是需要 IE5.5+才支持。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> num=<span class="number">22.127456</span>;</span><br><span class="line">     alert( num.toFixed(<span class="number">2</span>));</span><br><span class="line">     &lt;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义滚动条</title>
      <link href="2017/04/01/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
      <url>2017/04/01/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<p>困扰的问题之一 clientHeight和offsetHeight的值由什么决定？<br>假如我们有以下的DIV，主要显示的文字为”This is the main body of DIV”<br><a id="more"></a><br>首先了解一下<br>如下图所示，</p><ul><li style="list-style: none"><input type="checkbox" checked></input> <strong>clientHeight的值由DIV内容的实际高度和CSS中的padding值决定，</strong></li><li style="list-style: none"><input type="checkbox" checked></input> <strong>offsetHeight的值由DIV内容的实际高度，CSS中的padding值，</strong></li><li style="list-style: none"><input type="checkbox" checked></input> <strong>scrollbar的高度和DIV的border值决定；至于CSS中的margin值，则不会影响clientHeight和offsetHeight的值。</strong></li></ul><p>效果图：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/180807/j5i2697fF0.gif"                      alt="mark"                ></p><p>分析图<br><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/180807/91KliGHjij.jpg"                      alt="mark"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://book.52react.cn/book/180807/C3h985gm7d.gif"                      alt="mark"                ></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">        <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">overflow</span>:hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#box</span>&#123;</span><br><span class="line">        <span class="attribute">float</span><span class="selector-pseudo">:right</span>;</span><br><span class="line">        <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="attribute">right</span>:<span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">        <span class="attribute">position</span>:relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#drag</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">background</span>:green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#content</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>:absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#text</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>:absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--滚动条--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;drag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--  //内容主容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--内容容器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background:#ccc;width: 120px; &quot;</span>&gt;</span></span><br><span class="line">Although many people talk about the super performance of quantum computing, such as one second to complete the current supercomputer computing tasks for several years, but so far did not create a true sense of the quantum computer, one of the very important reason is that, The state of particles used in quantum computation is not stable, and any electromagnetic or physical interference can easily disrupt its work. The state of the Mayola fermion is very stable, which makes it a perfect choice for making quantum computers. Six months ago in the laboratory of Shanghai Jiaotong University, Jia Jinfeng successfully captured it.</span><br><span class="line">Speaking of the scene, Jia Jinfeng said: &quot;In fact, I started to hear the Mayolana fermions, I think this thing may not be done 20 years out.</span><br><span class="line">Using a special material preparation method, Jia Jinfeng&#x27;s research team has grown topological insulators on the superconductors with thickness of 5 nanometers. The topological superconductor materials are prepared and finally the Mayolana fermions are found at the interface of the topological superconductors. The mysterious particles were captured 80 years, but also let Jia Jinfeng more firm with its confidence in the manufacture of quantum computers.</span><br><span class="line">Speaking of the future of the plan, Jia Jinfeng said: &quot;I hope to within a few years to do the topological quantum bit!&quot; (Before) the world has not, so if we cut into this from the point, we are the same with the world The starting line, for our country, this is able to catch up with the footsteps of quantum computing, a starting point.</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oBox=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> oDrag=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;drag&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> content=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;content&#x27;</span>);<span class="comment">//内容主容器</span></span><br><span class="line">    <span class="keyword">var</span> oText = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> conHeight=content.clientHeight  </span><br><span class="line">    <span class="keyword">var</span> textHeight = oText.clientHeight</span><br><span class="line">    oDrag.onmousedown=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//阻止默认事件</span></span><br><span class="line">        <span class="keyword">var</span> e=ev||<span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            e.returnValue=<span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">         <span class="comment">//e.clientY鼠标当前坐标</span></span><br><span class="line">        <span class="keyword">var</span> downY=e.clientY-oDrag.offsetTop;</span><br><span class="line">        <span class="comment">//滑块滚动最大距离</span></span><br><span class="line">        <span class="keyword">var</span> maxTop = oBox.clientHeight-oDrag.clientHeight</span><br><span class="line">        <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e=ev||<span class="built_in">window</span>.event;</span><br><span class="line">            <span class="keyword">var</span> top=e.clientY-downY;</span><br><span class="line">            <span class="keyword">if</span> (top&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">                top=<span class="number">0</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (top&gt;=maxTop) &#123;</span><br><span class="line">                top=maxTop;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> scale=top/maxTop;</span><br><span class="line">            <span class="keyword">var</span> contentY=scale*(conHeight-textHeight);</span><br><span class="line">            oDrag.style.top=top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            oText.style.top=contentY+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.onmouseup=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.onmousemove=<span class="built_in">document</span>.onmousemove=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> str=<span class="built_in">window</span>.navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="comment">//火狐浏览器</span></span><br><span class="line">    <span class="keyword">if</span> (str.indexOf(<span class="string">&#x27;firefox&#x27;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMMouseScroll&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();<span class="comment">//阻止窗口默认的滚动事件</span></span><br><span class="line">            <span class="keyword">if</span> (e.detail&lt;<span class="number">0</span>) &#123;    <span class="comment">//向上滚动    div向下滚动</span></span><br><span class="line">                <span class="keyword">var</span> scrollHei=oText.offsetTop+<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    scrollHei=<span class="number">0</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&lt;=-(textHeight-conHeight)) &#123;</span><br><span class="line">                    scrollHei=-(textHeight-conHeight);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> scale=scrollHei/(textHeight-conHeight);</span><br><span class="line">                <span class="keyword">var</span> top=scale*(oBox.clientHeight-oDrag.clientHeight);</span><br><span class="line">                oText.style.top=scrollHei+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                oDrag.style.top=-top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e.detail&gt;<span class="number">0</span>) &#123;   <span class="comment">//向下滚动    div向上滚动</span></span><br><span class="line">                <span class="keyword">var</span> scrollHei=oText.offsetTop-<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    scrollHei=<span class="number">0</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&lt;=-(textHeight-conHeight)) &#123;</span><br><span class="line">                    scrollHei=-(textHeight-conHeight);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> scale=scrollHei/(textHeight-content.clientHeight);</span><br><span class="line">                <span class="keyword">var</span> top=scale*(oBox.clientHeight-oDrag.clientHeight);</span><br><span class="line">                oText.style.top=scrollHei+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                oDrag.style.top=-top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//非火狐浏览器</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;非火狐浏览器&quot;</span>)</span><br><span class="line">        <span class="built_in">document</span>.onmousewheel=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e=ev||<span class="built_in">window</span>.event;</span><br><span class="line">            <span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                e.returnValue=<span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (e.wheelDelta&gt;<span class="number">0</span>) &#123;  <span class="comment">//向上滚动    此时div向下移动</span></span><br><span class="line">                <span class="keyword">var</span> scrollHei=oText.offsetTop+<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    scrollHei=<span class="number">0</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&lt;=-(textHeight-conHeight)) &#123;</span><br><span class="line">                    scrollHei=-(textHeight-conHeight);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> scale=scrollHei/(textHeight-conHeight);</span><br><span class="line">                <span class="keyword">var</span> top=scale*(oBox.clientHeight-oDrag.clientHeight);</span><br><span class="line">                oText.style.top=scrollHei+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                oDrag.style.top=-top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (e.wheelDelta&lt;<span class="number">0</span>) &#123;  <span class="comment">//向下</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;下&quot;</span>)</span><br><span class="line">                <span class="keyword">var</span> scrollHei=oText.offsetTop-<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    scrollHei=<span class="number">0</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&lt;=-(textHeight-conHeight)) &#123;</span><br><span class="line">                    scrollHei=-(textHeight-conHeight);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> scale=scrollHei/(textHeight-conHeight);</span><br><span class="line">                <span class="keyword">var</span> top=scale*(oBox.clientHeight-oDrag.clientHeight);</span><br><span class="line">                oText.style.top=scrollHei+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                oDrag.style.top=-top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="全屏模式下"><a href="#全屏模式下" class="headerlink" title="全屏模式下"></a>全屏模式下</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oBox=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> oDrag=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;drag&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> content=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> viewHeight=<span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">    <span class="keyword">var</span> conHeight=content.clientHeight</span><br><span class="line">    oBox.style.height=viewHeight+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    oDrag.style.height=viewHeight/conHeight*viewHeight+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        viewHeight=<span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">        oBox.style.height=viewHeight+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        oDrag.style.height=viewHeight/conHeight*viewHeight+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        oDrag.style.top=-content.offsetTop/(content.clientHeight-viewHeight)*(oBox.clientHeight-oDrag.clientHeight)+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    oDrag.onmousedown=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//阻止默认事件</span></span><br><span class="line">        <span class="keyword">var</span> e=ev||<span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            e.returnValue=<span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">         <span class="comment">//e.clientY鼠标当前坐标</span></span><br><span class="line">        <span class="keyword">var</span> downY=e.clientY-oDrag.offsetTop;</span><br><span class="line">       </span><br><span class="line">        <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e=ev||<span class="built_in">window</span>.event;</span><br><span class="line">            <span class="keyword">var</span> top=e.clientY-downY;</span><br><span class="line">            <span class="keyword">if</span> (top&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">                top=<span class="number">0</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (top&gt;=oBox.clientHeight-oDrag.clientHeight) &#123;</span><br><span class="line">                top=oBox.clientHeight-oDrag.clientHeight;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> scale=top/(oBox.clientHeight-oDrag.clientHeight);</span><br><span class="line">            <span class="keyword">var</span> contentY=scale*(content.clientHeight-viewHeight);</span><br><span class="line">            oDrag.style.top=top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            content.style.top=-contentY+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.onmouseup=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.onmousemove=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> str=<span class="built_in">window</span>.navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="comment">//火狐浏览器</span></span><br><span class="line">    <span class="keyword">if</span> (str.indexOf(<span class="string">&#x27;firefox&#x27;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMMouseScroll&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();<span class="comment">//阻止窗口默认的滚动事件</span></span><br><span class="line">            <span class="keyword">if</span> (e.detail&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> scrollHei=content.offsetTop+<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    scrollHei=<span class="number">0</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&lt;=-(content.clientHeight-viewHeight)) &#123;</span><br><span class="line">                    scrollHei=-(content.clientHeight-viewHeight);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> scale=scrollHei/(content.clientHeight-viewHeight);</span><br><span class="line">                <span class="keyword">var</span> top=scale*(oBox.clientHeight-oDrag.clientHeight);</span><br><span class="line">                content.style.top=scrollHei+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                oDrag.style.top=-top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e.detail&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> scrollHei=content.offsetTop-<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    scrollHei=<span class="number">0</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&lt;=-(content.clientHeight-viewHeight)) &#123;</span><br><span class="line">                    scrollHei=-(content.clientHeight-viewHeight);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> scale=scrollHei/(content.clientHeight-viewHeight);</span><br><span class="line">                <span class="keyword">var</span> top=scale*(oBox.clientHeight-oDrag.clientHeight);</span><br><span class="line">                content.style.top=scrollHei+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                oDrag.style.top=-top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//非火狐浏览器</span></span><br><span class="line">        <span class="built_in">document</span>.onmousewheel=<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e=ev||<span class="built_in">window</span>.event;</span><br><span class="line">            <span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                e.returnValue=<span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (e.wheelDelta&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> scrollHei=content.offsetTop+<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    scrollHei=<span class="number">0</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&lt;=-(content.clientHeight-viewHeight)) &#123;</span><br><span class="line">                    scrollHei=-(content.clientHeight-viewHeight);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> scale=scrollHei/(content.clientHeight-viewHeight);</span><br><span class="line">                <span class="keyword">var</span> top=scale*(oBox.clientHeight-oDrag.clientHeight);</span><br><span class="line">                content.style.top=scrollHei+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                oDrag.style.top=-top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span> (e.wheelDelta&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> scrollHei=content.offsetTop-<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                    scrollHei=<span class="number">0</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">if</span> (scrollHei&lt;=-(content.clientHeight-viewHeight)) &#123;</span><br><span class="line">                    scrollHei=-(content.clientHeight-viewHeight);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> scale=scrollHei/(content.clientHeight-viewHeight);</span><br><span class="line">                <span class="keyword">var</span> top=scale*(oBox.clientHeight-oDrag.clientHeight);</span><br><span class="line">                content.style.top=scrollHei+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                oDrag.style.top=-top+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 面向对象编程初探（一）--- 封装</title>
      <link href="2016/06/08/Javascript%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89---%20%E5%B0%81%E8%A3%85/"/>
      <url>2016/06/08/Javascript%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89---%20%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>Javascript是一种基于对象（object-based）的语言，你遇到的所有东西几乎都是对象。但是，它又不是一种真正的面向对象编程（OOP）语言，因为它的语法中没有class（类）。<br><a id="more"></a></p><h3 id="一、-生成实例对象的原始模式"><a href="#一、-生成实例对象的原始模式" class="headerlink" title="一、 生成实例对象的原始模式"></a>一、 生成实例对象的原始模式</h3><p>假定我们把猫看成一个对象，它有”名字”和”颜色”两个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Cat = &#123;</span><br><span class="line">　　　　name : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">　　　　color : <span class="string">&#x27;&#x27;</span></span><br><span class="line">　　&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在，我们需要根据这个原型对象的规格（schema），生成两个实例对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat1 = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line">cat1.name = <span class="string">&quot;大毛&quot;</span>; <span class="comment">// 按照原型对象的属性赋值</span></span><br><span class="line">cat1.color = <span class="string">&quot;黄色&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> cat2 = &#123;&#125;;</span><br><span class="line">cat2.name = <span class="string">&quot;二毛&quot;</span>;</span><br><span class="line">cat2.color = <span class="string">&quot;黑色&quot;</span>;</span><br></pre></td></tr></table></figure><p>好了，这就是最简单的封装了，把两个属性封装在一个对象里面。但是，这样的写法有两个缺点，一是如果多生成几个实例，写起来就非常麻烦；二是实例与原型之间，没有任何办法，可以看出有什么联系。</p><h3 id="二、-原始模式的改进"><a href="#二、-原始模式的改进" class="headerlink" title="二、 原始模式的改进"></a>二、 原始模式的改进</h3><p>我们可以写一个函数，解决代码重复的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>) </span>&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> &#123;</span><br><span class="line">　　　　　　name:name,</span><br><span class="line">　　　　　　color:color</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后生成实例对象，就等于是在调用函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat1 = Cat(<span class="string">&quot;大毛&quot;</span>,<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = Cat(<span class="string">&quot;二毛&quot;</span>,<span class="string">&quot;黑色&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方法的问题依然是，cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例。</p><h3 id="三、-构造函数模式"><a href="#三、-构造函数模式" class="headerlink" title="三、 构造函数模式"></a>三、 构造函数模式</h3><p>为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。</p><p>所谓”构造函数”，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。</p><p>比如，猫的原型对象现在可以这样写，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">this</span>.name=name;</span><br><span class="line">　　　　<span class="built_in">this</span>.color=color;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们现在就可以生成实例对象了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">&quot;大毛&quot;</span>,<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line">　　<span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">&quot;二毛&quot;</span>,<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">　　alert(cat1.name); <span class="comment">// 大毛</span></span><br><span class="line">　　alert(cat1.color); <span class="comment">// 黄色</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时cat1和cat2会自动含有一个<code>constructor</code>属性，指向它们的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(cat1.constructor == Cat); <span class="comment">//true</span></span><br><span class="line">alert(cat2.constructor == Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Javascript还提供了一个<code>instanceof</code>运算符，验证原型对象与实例对象之间的关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(cat1 <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br><span class="line">alert(cat2 <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>四、构造函数模式的问题</p><p>构造函数方法很好用，但是存在一个浪费内存的问题。</p><p>请看，我们现在为Cat对象添加一个不变的属性type（种类），再添加一个方法eat（吃）。那么，原型对象Cat就变成了下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">this</span>.name = name;</span><br><span class="line">　　　　<span class="built_in">this</span>.color = color;</span><br><span class="line">　　　　<span class="built_in">this</span>.type = <span class="string">&quot;猫科动物&quot;</span>;</span><br><span class="line">　　　　<span class="built_in">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;吃老鼠&quot;</span>);&#125;;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还是采用同样的方法，生成实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">&quot;大毛&quot;</span>,<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line">　　<span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat (<span class="string">&quot;二毛&quot;</span>,<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">　　alert(cat1.type); <span class="comment">// 猫科动物</span></span><br><span class="line">　　cat1.eat(); <span class="comment">// 吃老鼠</span></span><br></pre></td></tr></table></figure><p>表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。那就是对于每一个实例对象，type属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(cat1.eat == cat2.eat); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>能不能让type属性和eat()方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。</p><h3 id="五、-Prototype模式"><a href="#五、-Prototype模式" class="headerlink" title="五、 Prototype模式"></a>五、 Prototype模式</h3><p>Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>这意味着，我们可以把那些不变的属性和方法，直接定义在prototype对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">this</span>.name = name;</span><br><span class="line">　　　　<span class="built_in">this</span>.color = color;</span><br><span class="line">　　&#125;</span><br><span class="line">　　Cat.prototype.type = <span class="string">&quot;猫科动物&quot;</span>;</span><br><span class="line">　　Cat.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;吃老鼠&quot;</span>)&#125;;</span><br></pre></td></tr></table></figure><p>然后，生成实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　  <span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">&quot;大毛&quot;</span>,<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line">　　<span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">&quot;二毛&quot;</span>,<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">　　alert(cat1.type); <span class="comment">// 猫科动物</span></span><br><span class="line">　　cat1.eat(); <span class="comment">// 吃老鼠</span></span><br></pre></td></tr></table></figure><p>这时所有实例的type属性和eat()方法，其实都是同一个内存地址，指向prototype对象，因此就提高了运行效率。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(cat1.eat == cat2.eat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="六、-Prototype模式的验证方法"><a href="#六、-Prototype模式的验证方法" class="headerlink" title="六、 Prototype模式的验证方法"></a>六、 Prototype模式的验证方法</h3><p>为了配合prototype属性，Javascript定义了一些辅助方法，帮助我们使用它。</p><h4 id="6-1-isPrototypeOf"><a href="#6-1-isPrototypeOf" class="headerlink" title="6.1 isPrototypeOf()"></a>6.1 isPrototypeOf()</h4><p>这个方法用来判断，某个proptotype对象和某个实例之间的关系。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　alert(cat1.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">　　alert(cat1.hasOwnProperty(<span class="string">&quot;type&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><br>6.3 in运算符</p><p>in运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> cat1); <span class="comment">// true</span></span><br><span class="line">　　alert(<span class="string">&quot;type&quot;</span> <span class="keyword">in</span> cat1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>in运算符还可以用来遍历某个对象的所有属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> cat1) </span><br><span class="line">&#123; alert(<span class="string">&quot;cat1[&quot;</span>+prop+<span class="string">&quot;]=&quot;</span>+cat1[prop]); &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="http://pp.52react.cn/image20180720105956.png"                      alt="image"                ></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端之路</title>
      <link href="2016/06/04/%E5%89%8D%E7%AB%AF%E4%B9%8B%E8%B7%AF/"/>
      <url>2016/06/04/%E5%89%8D%E7%AB%AF%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>种一棵树最好的年龄是十年前，而后是现在。</p></blockquote><a id="more"></a><h1 id="对自己狠一点，开始写作吧"><a href="#对自己狠一点，开始写作吧" class="headerlink" title="对自己狠一点，开始写作吧"></a>对自己狠一点，开始写作吧</h1><p>我时常会有这样的感觉:自己心里觉得对一个技术点已经掌握了，但是当我试图给别<br>人讲述的时候，发现并不能轻松自如、深入浅出地讲出来。这就说明了一个问题 :自认为掌握了，其实并没有真正掌握，大脑只是对这个技术点建立了一个整体的概念，在一些细节处做了想当然的假设，等到你用语言再来表达的时候就会发现，原来这个假设并不完全成立是有问题的。<br>估计大家都有这样的经验:如果你能把一门技术通俗易懂地给别人讲明白，那就说明<br>你已经掌握了。这种“转教别人( <code>Teach others</code> )”的办法属于主动学习，效率是最高的。但<br>是在工作和生活当中，你是很少有机会去给别人讲授的。那怎么办?那就退而求其次吧，把自己的理解写出来。当然不是泛泛地记流水账，或者把几个孤立的点罗列在那里，而是要把思路厘清楚，尤其要写出为什么要有这门技术、这门技术解决了什么问题，然后才是这门技术是怎么使用的。<br>当你逼着自己去回答这些问题的时候，很快就会发现，自己的理解还不够，还需要查<br>找更多的资料。</p><h1 id="如何学习？"><a href="#如何学习？" class="headerlink" title="如何学习？"></a>如何学习？</h1><p>举个例子，你接触到一个新的知识点: <code>Java动态代理</code>。<br>你也看了书或视频中的代码，知道了这个技术点是怎么使用的，接下来想要写一篇文章，<br>首先要努力阐明的问题就是“<strong>为什么要用Java 动态代理</strong>“。<strong>这玩意儿到底要干吗</strong>?我已经知道了它能够对一个类进行增强，还是在运行时进行增强的，但是增强一个类有什么用处?我<br>完全可以新写一个类对原有的类进行增强啊? 为什么要在运行时进行增强呢?<br>如果你顺着这个思路挖掘下去，则会在通道的尽头找到一个宝贝: <code>AOP</code>。</p><p>具体到技术层面，还有一个问题，就是<strong>为什么Java动态代理只能对interface 进行操作</strong>，<br>而不能对class进行操作?这个问题如果也深挖下去，那么你会发现另一一个宝贝:动态字节<br>码的生成。</p><p>继续深挖就能看到ASM、CGLib这样的东西，<strong>看到它们怎么在内存中操作.class文件</strong><br>的字节码。至于字节码的格式是什么样子的，只好去看看Java虚拟机了。<br>到了最后，你也许会体会到，原来Java是一门静态语言，在运行时不能对现有的方法<br>逻辑进行修改， 不能添加方法，所以必须用别的手段，如ASM、 动态代理等创建一 个新类<br>来做一点“额外”的事情。</p><p>有人可能要问了:我也可以按照这个思路去学习，为什么要写下来呢?原因很简单，<br>不写出来，很容易放弃深度思考。你会觉得，我已经知道是怎么回事儿了一-其实 些关键<br>的细节被大脑给忽略了。</p><blockquote><p>我们已经进入了一个碎片化的时代，我们的大脑已经养成了碎片化的习惯，-天不看<br>  碎片化的信息就觉得不舒服，这样下去会慢慢地丧失深度思考的能力。</p></blockquote><p>写作会逼着你去思考，梳理知识体系，防止自己被碎片所填满。<br>其实很多人都知道写作是一件很好的事情，就是犯懒，执行不下去。还是行动起来吧!<br>逼自己一把，对自己狠一-点!有自制力的人、能够坚持的人才更有可能成功!</p><h2 id="参考引用《码农翻身》第6章最后2节"><a href="#参考引用《码农翻身》第6章最后2节" class="headerlink" title="参考引用《码农翻身》第6章最后2节"></a>参考引用<code>《码农翻身》</code>第6章最后2节</h2>]]></content>
      
      
      <categories>
          
          <category> 心路历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript，基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『转载』为什么你应该（从现在开始就）写博客</title>
      <link href="2009/08/08/%5B%E8%BD%AC%E8%BD%BD%5D%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E5%BA%94%E8%AF%A5%EF%BC%88%E4%BB%8E%E7%8E%B0%E5%9C%A8%E5%BC%80%E5%A7%8B%E5%B0%B1%EF%BC%89%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>2009/08/08/%5B%E8%BD%AC%E8%BD%BD%5D%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E5%BA%94%E8%AF%A5%EF%BC%88%E4%BB%8E%E7%8E%B0%E5%9C%A8%E5%BC%80%E5%A7%8B%E5%B0%B1%EF%BC%89%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="（一）为什么你应该（从现在开始就）写博客"><a href="#（一）为什么你应该（从现在开始就）写博客" class="headerlink" title="（一）为什么你应该（从现在开始就）写博客"></a>（一）为什么你应该（从现在开始就）写博客</h3><p>用一句话来说就是，<strong>写一个博客有很多好处，却没有任何明显的坏处</strong>。（阿灵顿的情况属于例外，而非常态，就像不能拿抽烟活到一百岁的英国老太太的个例来反驳抽烟对健康的极大损伤一样)</p><a id="more"></a><p>让我说得更明确一点：<strong>用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处</strong>。Note：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。</p><p>下面是我个人认为写一个长期的价值博客的最大的几点好处：</p><ol><li>能够交到很多志同道合的朋友。我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在 SNS 上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，因此，和他们即便不打照面，也是心照不宣。即便素未谋面也能坐下来就聊得热火朝天。</li></ol><p><strong>为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？</strong></p><p>很简单，第一，博客无地域限制，整个互联网上从 A 到 B 只有一个点击的距离，而传统的建立朋友圈子的方法则受到地域限制。</p><p>第二，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“一次表达，无数次阅读”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”。</p><p>我曾在 CSDN 上写了近六年的博客，在一年半前建立了一个 Google Groups（TopLanguage），由于我的博客的长期阅读者都是互相有共同语言的，因此这个 Group 一开始就热火朝天，而高质量的技术讨论则进一步吸引了更多的牛人的参与，雪球滚起来之后，就很难停下来了，将近一年半下来，从这个 Group 的讨论中我获益良多[1]。而对于非程序员朋友，科学松鼠会则是一个很好的例子。</p><ol start="2"><li><p>书写是为了更好的思考。我在《书写是为了更好的思考》里面详细总结了书写的好处，这里就不拷贝粘贴了。有些想法如果不写下来，也就忘掉了，有一个广为流传的《数学牛人们的轶事》（荣耀属于 ukim）里面讲了希尔伯特的一个故事：一次在 Hilbert 的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert 说“这真是一个妙不可言（wunderbaschon）的定理呀,是谁发现的？”那个年轻人茫然的站了很久，对 Hilbert 说：“是你.……”。</p></li><li><p>“教”是最好的“学”。如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。</p></li></ol><p>为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、但不知道自己知道的潜在概念或假设（assumptions）都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道、并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透。</p><p>但是，你可能会怀疑，那除了能够讲清楚之外，弄清自己到底知道哪些东西还有其他什么好处吗？如果没有其他好处，那我又何必费这个劲呢？我又不当老师。</p><p>TopLanguage 上的一位朋友 sagasw 曾经讲了这样一个<strong>小故事</strong>：据说在某个著名软件公司里，开发组的桌上会放着一只小熊，大家互相问问题之前，先对着小熊把问题说一遍，看能不能把问题描述的清晰，基本上说的比较有条理以后，答案也就随之而来了。当然，你不一定要对小熊说，你可以在大脑中虚构一个听众，一个不懂行的听众，然后你说给他听。这是可行的，我经常在路上用。不过如果你能坐下来，我建议你还是说给实际的听众听——即写下你的思考，因为书写是更好的思考。</p><p>我们的绝大多数知识在绝大多数时候都隐藏在潜意识中，其实我们意识的窗口很小，我们的工作记忆只能容纳寥寥数个条目（记得那个“看你能够记住屏幕上同时闪现的多少个数字”的 flash 小游戏吗？），我们平时所作的推理过程很大部分都是自动的，发生在潜意识中，而我们只能感知到一些中间结论。不信你回忆一下你在和别人讨论问题的时候有多少次觉得“反正就是这样，我感觉得到它是对的，但是你问我，我也说不清到底怎么回事”，对此你不觉得很奇怪吗？如果你都不能从逻辑上支持你的结论，你怎么就能确信它是对的呢？仅仅因为你的直觉强烈地告诉你它是对的？那如果旁边有另一个人，他和你持相反的观念，而他的直觉也强烈地告诉他他是对的。这时候你又怎么想？“他的直觉错了，我的直觉是对的”？难道你这么自信你的直觉是世界上最可靠的？</p><p>我自己则是非常珍惜类似这样的机会，即当“我强烈地觉得它是对的，但我却说不出所以然来”，这时候往往是到大脑中翻箱倒柜的时候，弄清来龙去脉的时候，深入反思的时候，纠正一直以来错误的潜在前提假设的时候。另一方面，“我强烈地觉得这个说法有问题，但我却说不清它为什么有问题，到底哪有问题”，这也是一个极有意义的瞬间，它几乎总是意味着你对一个问题的认识有潜在的偏差，肯定是在你自己都没有觉知到的地方引入了一个潜在的假设、偷换了一个重要的概念，等等。而这种时候就是深入反思的时候，当你终于潜到问题的底层，触摸到问题的实质，把水面之下的冰山整体看清了的时候你会有一种通体舒泰的感觉。</p><p>为什么说以上这些？因为刚才说的是你必须等待这样的反思机会，但如果你选择经常总结自己的知识体系，并说出来给你的读者听，你就会发现你自己创造了这样的机会。如果我们平时不反思，我们觉得很多事情都是当然的，但结果如果要你一开口说给别人听，常常会发现事情就开始变得不那么明显了，你说着说着，就开始莫名其妙地发现自己需要用到“反正”这个词了。</p><p>于是，反思的机会就来了。</p><p>一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能，而不是任它们在幕后阴险地左右你的思维。很多时候我们的思路出了问题并不是我们不会反思，而是不知道自己的思维中有那些隐含的假设（assumptions），如果你只感觉到答案，却不知道你大脑得到这个答案之前做了哪些推理，你又怎么知道哪一环可能出了问题呢？另一方面，一旦你弄清了自己到底是怎么想的，离意识到问题就不远了，很简单的道理——如果别人和你争辩的时候总是只摆立场，你就很难和他辩，但如果他把自己的推理过程原原本本暴露给你，批判起来总是容易得多的。（也正因为这个原因有很多人总是把逻辑藏在背后，不敢暴露出来）</p><p>绝大多数时候其实我们都会不假思索地得出一些结论，就像上了发条的自动机，但其实我们并不知道这些结论到底怎么来的，在思维的背后到底发生了哪些事情，故而当我们发现我们的结论错了的时候，一头雾水，没法着手寻找到底在哪错了。如果你注意一下很多人的发言（论坛、博客等等），如果你把他们的发言分为“前提”、“假设”、“逻辑”、“结论”这四个部分，你会发现一大堆人只会不停地下结论，摆立场，却见不到这些结论或离场的前提、假设和个中逻辑，倒也不是他们不愿意写出逻辑，而是因为反思自己的思维过程实在是一件困难非常的事情，我们的推理过程很大一部分发生在意识的水面之下，只有当有了重要结论的时候这条逻辑链才会浮出来冒一个泡，让我们的意识捕捉到。更何况绝大多数时候我们用的其实并不是完整严密的逻辑思维，而是思维捷径。</p><p>去教一个完全不懂的人，则是一种最最强大和彻底的反思途径——因为他没有任何预备的知识，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在 11 层上，然后假设你的读者站在第 10 层，指望着只要告诉他第 11 层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外 10 层到底是怎么构造的。这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻。</p><ol start="4"><li><p>讨论是绝佳的反思。另一方面，很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，几乎总能看到与你持不同意见的人，然后你通过比较你和他的观念之间的差别，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在进一步讨论中你们就会不断地迫使对方拿出更深层次的理由，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息。</p></li><li><p>激励你去持续学习和思考。如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…</p></li></ol><p>为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情。</p><p>为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻、独到的见解。这看起来有点本末倒置，但很快本和末就会正过来。</p><ol start="6"><li><p>学会持之以恒地做一件事情。很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造流体验的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。</p></li><li><p>一个长期的价值博客是一份很好的简历。这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到价值博客的时代，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso 这样的博客，个人的影响力已经足以支撑出一份事业（牛博和 5gme），但至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环。</p></li></ol><h2 id="（二）怎么做到长期写一个价值博客"><a href="#（二）怎么做到长期写一个价值博客" class="headerlink" title="（二）怎么做到长期写一个价值博客"></a>（二）怎么做到长期写一个价值博客</h2><p>注意到我并没有说“怎么做到长期坚持写一个价值博客”，因为当思考和总结成为习惯之后，诉诸文字以及借助书写来进一步思考就变成了一件自然而然的事情，就变成了一件“因为你在思考和总结从而必须书写下来”的事情，博客就变成了副产品。</p><p>一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。</p><p>怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做 SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：</p><p>让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。</p><p>就像那句经常被人传阅的话：只做你最感兴趣的事情，钱会随之而来[2]。</p><p>这方面的具体例子大家可以留意一下，随处可见，就不一一举了。我想再重复一下的是，千万不要碎碎念，我能理解每个人都想偶尔发发牢骚的冲动，但是现在已经有了一个很好的窗口：twitter，所以立即停止在你的博客上碎碎念，阅读博客的人希望得到信息而非噪音。如果实在忍不住想碎碎念的话不妨换一下位置，这么来告诉自己：如果你看到别人博客来上这么一段，你会有兴趣看吗？</p><h2 id="（三）可能出现的问题以及怎样应付"><a href="#（三）可能出现的问题以及怎样应付" class="headerlink" title="（三）可能出现的问题以及怎样应付"></a>（三）可能出现的问题以及怎样应付</h2><p>即便上文给出了 N 条写博客的理由，但有时候只要一条不写的理由就会让人停止做一件事情。所以我特别加上一节“可能出现的问题以及怎样应付”，《影响力 2》[3]第五章雄辩地证明，“Much of Will is Skill”，意志力很大程度上来源于有正确的方法，而非天生。</p><ol><li>担心别人认为没有价值。事实是，你面临过的问题总会有人面临过，你独立思考了，别人没有，你的文章对他们就会有价值。当然，肯定会对某些人没有价值，他们早就知道了，但就算你再厉害，也总是有人比你厉害的，不能说因为这些原因就不记录你自己的想法了，你自己思考了之后理解得最深刻，就算有别人想过了，总有人没有想到的。况且，思考成了习惯，你的思考能力也会越来越强，你的文章也会越来越有价值。重复，无论你面临什么困惑，总会有很多人同样面临过，于是你苦苦思索之后的结果，肯定会对很多人有意义。</li></ol><p>或者，你想通了之后觉得其实也很简单于是不愿意或者不好意思写了，但要知道，问题在想通了之后总是简单的，问题的困难程度不在于想通了之后还觉得有多难，而在于从你觉得它难到你觉得它简单需要耗费多少思维体力，你耗费的时间越长，说明有越多的人最终还是没有想明白（路越长走到底的人越少）。</p><p>最后，虽然我现在看一年前的文章觉得挺不成熟，但是如果没有那些不成熟的思考，也不会有现在更成熟的思考，我几年后来看现在写的东西，还是会觉得不成熟。</p><ol start="2"><li>担心想法太幼稚或有漏洞等等被别人笑话。人非圣贤。正是因为单个人的想法总是有漏洞，才值得拿出来交流（《书写是更好的思考》，讨论是绝佳的反思），被别人指出问题正是改进的空间，藏着掖着的想法永远不可能变得更成熟。</li></ol><p>Much of intelligence is knowledge，有这么一个非常发人深省的经典心理学实验[4]：</p><p>将孩子们分成两组，通过给他们不同的阅读材料让一组相信智力是天生的，不可在后天改变的，另一组则让他们相信智力其实只是知识和技能的代名词，完全是后天习得的。接下来让他们做一组任务，那些被相信智力天生说的孩子，倾向于回避困难的任务，选择较容易的任务，这里的逻辑想必是这样的：如果做困难的任务，就增大了失败的几率，就在降低了自己在别人和自己心目中的智力的值。为了保护这个智力的值不被降低，应该避免那些有失败风险的项目。而另一组孩子则对于有挑战性的事情跃跃欲试，并且在失败的时候明显没有前者沮丧，因为失败也是学得新的东西，不管怎样都是“智力”的提高。</p><p>况且，只会批判乃至嘲笑别人的人是最不知道怎么建设的人，忽略他们。</p><ol start="3"><li><p>得不到激励。这其实是个最无聊的问题了，只有写碎碎念的博客才会面对“激励”的问题。如果写自己的总结，写自己独立的思考，那么书写下来、理解通透，本身就是一个极大的激励。就算放在自己的私密笔记本里面也一样有成就感。况且，如果你真做到了书写价值博客，那么绝对不用担心你的观点得不到传播，也许一开始会耗时长一点，但是这在任何事情上都是必要的初始阶段，Gmail 小组的核心人物、FriendFeed 创始人 Paul Buchheit，和编程界名博 Coding Horror 的博主 Jeff Atwood 都曾经感叹过：Overnight success takes a long time （(1)，(2)），不过对于价值博客来说，现在网络上的聚合类服务这么多，机器的、人肉的、半人肉的都有，情况又要好得多了，而且我相信情况还会越来越好。</p></li><li><p>写不出来。这个问题也比较无聊，思考本不是一件急于求成的事情。长期订阅我的博客的朋友知道我一般发文频率在一个月三五篇，实际上有不少次我个把月也不发布文章，原因很简单，要么是有手头的事情要处理思考的时间被压缩了，要么是遇到比较大或者比较困难的问题需要长时间的思考和积淀，没有关系，如果没有想清楚就再想想，爱思考的人和不爱思考的人有一个本质的区别，前者在生活中总是挂着几个问题在大脑中，它们时常都会冒出来骚扰你一下，让你琢磨琢磨，不爱思考的则是没事不主动想问题，遇到问题还要先想想是否能找捷径（找人帮忙）解决。</p></li></ol><p>无论如何，不用急于求成，在一个主题上深入下去思考，总能挖到别人挖不到的角落。你能让一个问题在大脑中停留的时间越长，就越是能够发现新的东西，一般来说，我认为有价值的问题我会让他在意识或潜意识中待短则一个星期，长则一个月（视问题大小而定），利用走路吃饭的时间琢磨（我发现很多我佩服的人也都有这个习惯），有时即便已经想通了写下来了发出去了，大脑仍然还是会在回味问题，还没有把它撤出潜意识，然后看到某篇文章或某本书的时候忽然又有所新的感悟。</p><p>能够把问题长时间停靠在潜意识中是一种技能，能够带来很大的好处，停留得越长你越琢磨得透彻，比别人看到的就越多。我们必须要带着问题的眼镜看待事物才能发现新的视角，否则就会出现视而不见效应，别的不说，广为人知的例子是阿基米德的“尤里卡！”，如果不是长时间琢磨着一个问题，一直把它放在思维中，是不会从洗澡领悟到“排水测体积”的，否则他洗了那么多年澡怎么不早发现呢？[5]</p><p>所以，如果你习惯了思考问题，就总会有东西写，先有思考，然后有总结，然后在总结中进一步思考。</p><p>当然你也可以试试把不成熟的想法写下来，试图整理成条理清晰的文字，然后看看能否在整理的过程中走得更远。这往往是可行的。比如这篇文章在我的简记里面原本其实只有三行字（包含大约十来个备忘关键词），而最初在我的大脑里面其实只有一个走路时冒出来的问题——为什么要写博客？</p><p>—</p><p>[1] 你可以看一下我收藏的一些精彩主题。</p><p>[2] 尽管我并不完全同意这句话本身，但它这种解决问题链上更基本环节的问题的精神是我赞同的。</p><p>[3] 《影响力 2》这个名字起得很聪明，其实它并不是《影响力》的作者写的。</p><p>[4] 我忘了这则实验的出处了，但实验的精神是记忆犹新的，哪位同学记得原始出处的麻烦提醒我一下。</p><p>[5] 对于阿基米德这个故事的真实性是有争议的，毕竟几千年久远的事情谁弄得清呢。但是故事的道理是很本质的，我们平时也经常有类似的体验，加上阿基米德的“尤里卡”实在太出名了，所以我相信用用无妨。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" >为什么你应该（从现在开始就）写博客<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> 心路历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript，基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
